{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/xmm/src/reordering/ReorderingNewGraph.v","fileSamples":[{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) : ~ E_s'' b_t.","conclusion":"~ E_s'' b_t","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t)","proofString":"intros (y & YIN & YEQ).\nenough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) (y : actid) (YIN : E_t y) (YEQ : mapper y = b_t) : False.","conclusion":"False","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t) (y : actid) (YIN : E_t y) (YEQ : mapper y = b_t)","proofString":"enough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) (y : actid) (YIN : E_t y) (YEQ : mapper y = b_t) : y = a_t.","conclusion":"y = a_t","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t) (y : actid) (YIN : E_t y) (YEQ : mapper y = b_t)","proofString":"eapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq b_t ⊆₁ set_compl E_s''.","conclusion":"eq b_t ⊆₁ set_compl E_s''","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"simpl.\nunfolder.\nintros x XEQ.\nsubst x.\nintro FALSO.\ndesf.\nenough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq b_t ⊆₁ set_compl (mapper ↑₁ E_t).","conclusion":"eq b_t ⊆₁ set_compl (mapper ↑₁ E_t)","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"unfolder.\nintros x XEQ.\nsubst x.\nintro FALSO.\ndesf.\nenough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : forall x : actid, b_t = x -> ~ (exists y : actid, E_t y /\\ mapper y = x).","conclusion":"forall x : actid, b_t = x -> ~ (exists y : actid, E_t y /\\ mapper y = x)","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"intros x XEQ.\nsubst x.\nintro FALSO.\ndesf.\nenough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (x : actid) (XEQ : b_t = x) : ~ (exists y : actid, E_t y /\\ mapper y = x).","conclusion":"~ (exists y : actid, E_t y /\\ mapper y = x)","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (x : actid) (XEQ : b_t = x)","proofString":"subst x.\nintro FALSO.\ndesf.\nenough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : ~ (exists y : actid, E_t y /\\ mapper y = b_t).","conclusion":"~ (exists y : actid, E_t y /\\ mapper y = b_t)","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"intro FALSO.\ndesf.\nenough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (FALSO : exists y : actid, E_t y /\\ mapper y = b_t) : False.","conclusion":"False","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (FALSO : exists y : actid, E_t y /\\ mapper y = b_t)","proofString":"desf.\nenough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (y : actid) (FALSO : E_t y) (FALSO0 : mapper y = b_t) : False.","conclusion":"False","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (y : actid) (FALSO : E_t y) (FALSO0 : mapper y = b_t)","proofString":"enough (y = a_t) by desf.\neapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (y : actid) (FALSO : E_t y) (FALSO0 : mapper y = b_t) : y = a_t.","conclusion":"y = a_t","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (y : actid) (FALSO : E_t y) (FALSO0 : mapper y = b_t)","proofString":"eapply rsr_mapper_inv_bt; eauto with xmm."},{"statement":"eq_dom E_t (lab_s_ ∘ mapper) lab_t.","conclusion":"eq_dom E_t (lab_s_ ∘ mapper) lab_t","hypotheses":"","proofString":"unfold lab_s_.\nrewrite Combinators.compose_assoc, rsr_mapper_compose,          Combinators.compose_id_right; eauto with xmm.\ndesf.\nnow apply eq_dom_upd_l."},{"statement":"eq_dom E_t\n  ((ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) ∘ mapper\n   ∘ mapper) lab_t.","conclusion":"eq_dom E_t\n  ((ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) ∘ mapper\n   ∘ mapper) lab_t","hypotheses":"","proofString":"rewrite Combinators.compose_assoc, rsr_mapper_compose,          Combinators.compose_id_right; eauto with xmm.\ndesf.\nnow apply eq_dom_upd_l."},{"statement":"eq_dom E_t (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) lab_t.","conclusion":"eq_dom E_t (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) lab_t","hypotheses":"","proofString":"desf.\nnow apply eq_dom_upd_l."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq_dom E_t (upd lab_t a_t l_a) lab_t.","conclusion":"eq_dom E_t (upd lab_t a_t l_a) lab_t","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"now apply eq_dom_upd_l."},{"statement":"mapper ↑₁ E_t ∩₁ Tid_ tid_init ⊆₁ (fun a : actid => is_init a).","conclusion":"mapper ↑₁ E_t ∩₁ Tid_ tid_init ⊆₁ (fun a : actid => is_init a)","hypotheses":"","proofString":"unfolder.\nintros x' ((x & XIN & XEQ) & TEQ).\nsubst x'.\nrewrite rsr_mapper_tid' in TEQ by apply INV.\nrewrite rsr_mapper_init; try now apply INV."},{"statement":"forall x : actid,\n(exists y : actid, E_t y /\\ mapper y = x) /\\ tid x = tid_init -> is_init x.","conclusion":"forall x : actid,\n(exists y : actid, E_t y /\\ mapper y = x) /\\ tid x = tid_init -> is_init x","hypotheses":"","proofString":"intros x' ((x & XIN & XEQ) & TEQ).\nsubst x'.\nrewrite rsr_mapper_tid' in TEQ by apply INV.\nrewrite rsr_mapper_init; try now apply INV."},{"statement":"(x' x : actid) (XIN : E_t x) (XEQ : mapper x = x') (TEQ : tid x' = tid_init) : is_init x'.","conclusion":"is_init x'","hypotheses":"(x' x : actid) (XIN : E_t x) (XEQ : mapper x = x') (TEQ : tid x' = tid_init)","proofString":"subst x'.\nrewrite rsr_mapper_tid' in TEQ by apply INV.\nrewrite rsr_mapper_init; try now apply INV."},{"statement":"(x : actid) (XIN : E_t x) (TEQ : tid (mapper x) = tid_init) : is_init (mapper x).","conclusion":"is_init (mapper x)","hypotheses":"(x : actid) (XIN : E_t x) (TEQ : tid (mapper x) = tid_init)","proofString":"rewrite rsr_mapper_tid' in TEQ by apply INV.\nrewrite rsr_mapper_init; try now apply INV."},{"statement":"(x : actid) (XIN : E_t x) (TEQ : tid x = tid_init) : is_init (mapper x).","conclusion":"is_init (mapper x)","hypotheses":"(x : actid) (XIN : E_t x) (TEQ : tid x = tid_init)","proofString":"rewrite rsr_mapper_init; try now apply INV."},{"statement":"eq_dom (mapper ↑₁ E_t) (lab_t ∘ mapper) lab_s_.","conclusion":"eq_dom (mapper ↑₁ E_t) (lab_t ∘ mapper) lab_s_","hypotheses":"","proofString":"unfold lab_s_.\napply eq_dom_compose; [reflexivity |].\nrewrite <- set_collect_compose, rsr_mapper_compose,          set_collect_id; eauto with xmm.\ndesf.\nnow apply eq_dom_upd_r."},{"statement":"eq_dom (mapper ↑₁ E_t) (lab_t ∘ mapper)\n  ((ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) ∘ mapper).","conclusion":"eq_dom (mapper ↑₁ E_t) (lab_t ∘ mapper)\n  ((ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) ∘ mapper)","hypotheses":"","proofString":"apply eq_dom_compose; [reflexivity |].\nrewrite <- set_collect_compose, rsr_mapper_compose,          set_collect_id; eauto with xmm.\ndesf.\nnow apply eq_dom_upd_r."},{"statement":"eq_dom (mapper ↑₁ (mapper ↑₁ E_t)) lab_t\n  (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t).","conclusion":"eq_dom (mapper ↑₁ (mapper ↑₁ E_t)) lab_t\n  (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t)","hypotheses":"","proofString":"rewrite <- set_collect_compose, rsr_mapper_compose,          set_collect_id; eauto with xmm.\ndesf.\nnow apply eq_dom_upd_r."},{"statement":"eq_dom E_t lab_t (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t).","conclusion":"eq_dom E_t lab_t (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t)","hypotheses":"","proofString":"desf.\nnow apply eq_dom_upd_r."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq_dom E_t lab_t (upd lab_t a_t l_a).","conclusion":"eq_dom E_t lab_t (upd lab_t a_t l_a)","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"now apply eq_dom_upd_r."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) : loc lab_s_ b_t = WCore.lab_loc l_a.","conclusion":"loc lab_s_ b_t = WCore.lab_loc l_a","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t)","proofString":"unfold lab_s_; desf; [| tauto].\nunfold loc, WCore.lab_loc, compose.\nnow rewrite rsr_mapper_bt, upds; eauto with xmm."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t) : loc (upd lab_t a_t l_a ∘ mapper) b_t = WCore.lab_loc l_a.","conclusion":"loc (upd lab_t a_t l_a ∘ mapper) b_t = WCore.lab_loc l_a","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"unfold loc, WCore.lab_loc, compose.\nnow rewrite rsr_mapper_bt, upds; eauto with xmm."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t) : match upd lab_t a_t l_a (mapper b_t) with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch l_a with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match upd lab_t a_t l_a (mapper b_t) with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch l_a with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"now rewrite rsr_mapper_bt, upds; eauto with xmm."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) : val lab_s_ b_t = WCore.lab_val l_a.","conclusion":"val lab_s_ b_t = WCore.lab_val l_a","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t)","proofString":"unfold lab_s_; desf; [| tauto].\nunfold val, WCore.lab_val, compose.\nnow rewrite rsr_mapper_bt, upds; eauto with xmm."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t) : val (upd lab_t a_t l_a ∘ mapper) b_t = WCore.lab_val l_a.","conclusion":"val (upd lab_t a_t l_a ∘ mapper) b_t = WCore.lab_val l_a","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"unfold val, WCore.lab_val, compose.\nnow rewrite rsr_mapper_bt, upds; eauto with xmm."},{"statement":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t) : match upd lab_t a_t l_a (mapper b_t) with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch l_a with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend.","conclusion":"match upd lab_t a_t l_a (mapper b_t) with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch l_a with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend","hypotheses":"(INB : E_t b_t) (NINA : ~ E_t a_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"now rewrite rsr_mapper_bt, upds; eauto with xmm."},{"statement":"Wf G_s''.","conclusion":"Wf G_s''","hypotheses":"","proofString":"apply rsr_imm_Gs_wf."},{"statement":"(WF_s : Wf G_s'') : transitive co_s.","conclusion":"transitive co_s","hypotheses":"(WF_s : Wf G_s'')","proofString":"apply expand_transitive.\napply WF_s.\napply (co_upward_closed WF_s).\nrewrite (wf_coE WF_s), dom_seq, dom_eqv.\nrewrite rsr_exa_notin_imm.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') : transitive (mapper ↑ co_t).","conclusion":"transitive (mapper ↑ co_t)","hypotheses":"(WF_s : Wf G_s'')","proofString":"apply WF_s."},{"statement":"(WF_s : Wf G_s'') : upward_closed (mapper ↑ co_t)\n  (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)).","conclusion":"upward_closed (mapper ↑ co_t)\n  (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))","hypotheses":"(WF_s : Wf G_s'')","proofString":"apply (co_upward_closed WF_s)."},{"statement":"(WF_s : Wf G_s'') : A_s ∩₁ WCore.lab_is_w l_a ⊆₁ set_compl (dom_rel (mapper ↑ co_t)).","conclusion":"A_s ∩₁ WCore.lab_is_w l_a ⊆₁ set_compl (dom_rel (mapper ↑ co_t))","hypotheses":"(WF_s : Wf G_s'')","proofString":"rewrite (wf_coE WF_s), dom_seq, dom_eqv.\nrewrite rsr_exa_notin_imm.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') : A_s ∩₁ WCore.lab_is_w l_a ⊆₁ set_compl E_s''.","conclusion":"A_s ∩₁ WCore.lab_is_w l_a ⊆₁ set_compl E_s''","hypotheses":"(WF_s : Wf G_s'')","proofString":"rewrite rsr_exa_notin_imm.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') : set_compl E_s'' ∩₁ WCore.lab_is_w l_a ⊆₁ set_compl E_s''.","conclusion":"set_compl E_s'' ∩₁ WCore.lab_is_w l_a ⊆₁ set_compl E_s''","hypotheses":"(WF_s : Wf G_s'')","proofString":"basic_solver."},{"statement":"(ol : option location) : forall x : actid,\n(E_s'' x /\\ is_w lab_s x) /\\ loc_s x = ol ->\n(E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = ol.","conclusion":"forall x : actid,\n(E_s'' x /\\ is_w lab_s x) /\\ loc_s x = ol ->\n(E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = ol","hypotheses":"(ol : option location)","proofString":"unfold is_w, loc.\nintros x ((XIN & ISW) & LOC).\nsplits; auto; rewrite rsr_rexi; auto."},{"statement":"(ol : option location) : forall x : actid,\n(E_s'' x /\\ match lab_s x with\n            | Astore _ _ _ _ => true\n            | _ => false\n            end) /\\\nmatch lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = ol ->\n(E_s'' x /\\ match lab_s'' x with\n            | Astore _ _ _ _ => true\n            | _ => false\n            end) /\\\nmatch lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = ol.","conclusion":"forall x : actid,\n(E_s'' x /\\ match lab_s x with\n            | Astore _ _ _ _ => true\n            | _ => false\n            end) /\\\nmatch lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = ol ->\n(E_s'' x /\\ match lab_s'' x with\n            | Astore _ _ _ _ => true\n            | _ => false\n            end) /\\\nmatch lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = ol","hypotheses":"(ol : option location)","proofString":"intros x ((XIN & ISW) & LOC).\nsplits; auto; rewrite rsr_rexi; auto."},{"statement":"(ol : option location) : (E_s'' ∪₁ A_s) ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol\n   ∪₁ eq b_t ∩₁ WCore.lab_is_w l_a\n      ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol).","conclusion":"(E_s'' ∪₁ A_s) ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol\n   ∪₁ eq b_t ∩₁ WCore.lab_is_w l_a\n      ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol)","hypotheses":"(ol : option location)","proofString":"rewrite !set_inter_union_l.\nrewrite rsr_extra_a_coE'.\napply set_subset_union; [reflexivity |].\nunfold extra_a; desf; [| basic_solver].\napply rsr_extra_a_co; desf."},{"statement":"(ol : option location) : E_s'' ∩₁ W_s ∩₁ Loc_s_ ol ∪₁ A_s ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol\n   ∪₁ eq b_t ∩₁ WCore.lab_is_w l_a\n      ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol).","conclusion":"E_s'' ∩₁ W_s ∩₁ Loc_s_ ol ∪₁ A_s ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol\n   ∪₁ eq b_t ∩₁ WCore.lab_is_w l_a\n      ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol)","hypotheses":"(ol : option location)","proofString":"rewrite rsr_extra_a_coE'.\napply set_subset_union; [reflexivity |].\nunfold extra_a; desf; [| basic_solver].\napply rsr_extra_a_co; desf."},{"statement":"(ol : option location) : E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol ∪₁ A_s ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol\n   ∪₁ eq b_t ∩₁ WCore.lab_is_w l_a\n      ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol).","conclusion":"E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol ∪₁ A_s ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' ol\n   ∪₁ eq b_t ∩₁ WCore.lab_is_w l_a\n      ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol)","hypotheses":"(ol : option location)","proofString":"apply set_subset_union; [reflexivity |].\nunfold extra_a; desf; [| basic_solver].\napply rsr_extra_a_co; desf."},{"statement":"(ol : option location) : A_s ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ eq b_t ∩₁ WCore.lab_is_w l_a ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol).","conclusion":"A_s ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ eq b_t ∩₁ WCore.lab_is_w l_a ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol)","hypotheses":"(ol : option location)","proofString":"unfold extra_a; desf; [| basic_solver].\napply rsr_extra_a_co; desf."},{"statement":"(ol : option location) (a : ~ E_t a_t /\\ E_t b_t) : eq b_t ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ eq b_t ∩₁ WCore.lab_is_w l_a ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol).","conclusion":"eq b_t ∩₁ W_s ∩₁ Loc_s_ ol\n⊆₁ eq b_t ∩₁ WCore.lab_is_w l_a ∩₁ (fun _ : actid => WCore.lab_loc l_a = ol)","hypotheses":"(ol : option location) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"apply rsr_extra_a_co; desf."},{"statement":"Wf G_s''.","conclusion":"Wf G_s''","hypotheses":"","proofString":"apply rsr_imm_Gs_wf."},{"statement":"(WF_s : Wf G_s'') : functional rf_s⁻¹.","conclusion":"functional rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'')","proofString":"destruct classic      with (~ (~E_t a_t /\\ E_t b_t))        as [EMP|NEMP'].\neapply functional_mori; [| apply WF_s].\nunfold flip.\nsimpl.\nrewrite extra_a_none by auto.\nbasic_solver 11.\nassert (NEMP : ~ E_t a_t /\\ E_t b_t) by tauto.\ndesf.\nassert (NIN : ~ E_s'' b_t) by auto with xmm.\nchange rf_s with (rf_s'' ∪ drf_s'').\nrewrite transp_union.\napply functional_union.\napply WF_s.\neapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver.\nenough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t)) : functional rf_s⁻¹.","conclusion":"functional rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"eapply functional_mori; [| apply WF_s].\nunfold flip.\nsimpl.\nrewrite extra_a_none by auto.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t)) : flip inclusion rf_s''⁻¹ rf_s⁻¹.","conclusion":"flip inclusion rf_s''⁻¹ rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"unfold flip.\nsimpl.\nrewrite extra_a_none by auto.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t)) : rf_s⁻¹ ⊆ rf_s''⁻¹.","conclusion":"rf_s⁻¹ ⊆ rf_s''⁻¹","hypotheses":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"simpl.\nrewrite extra_a_none by auto.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t)) : (mapper ↑ rf_t ∪ fake_srf rsr_imm_g b_t l_a ⨾ ⦗A_s ∩₁ WCore.lab_is_r l_a⦘)⁻¹\n⊆ (mapper ↑ rf_t)⁻¹.","conclusion":"(mapper ↑ rf_t ∪ fake_srf rsr_imm_g b_t l_a ⨾ ⦗A_s ∩₁ WCore.lab_is_r l_a⦘)⁻¹\n⊆ (mapper ↑ rf_t)⁻¹","hypotheses":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"rewrite extra_a_none by auto.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t)) : (mapper ↑ rf_t ∪ fake_srf rsr_imm_g b_t l_a ⨾ ⦗∅ ∩₁ WCore.lab_is_r l_a⦘)⁻¹\n⊆ (mapper ↑ rf_t)⁻¹.","conclusion":"(mapper ↑ rf_t ∪ fake_srf rsr_imm_g b_t l_a ⨾ ⦗∅ ∩₁ WCore.lab_is_r l_a⦘)⁻¹\n⊆ (mapper ↑ rf_t)⁻¹","hypotheses":"(WF_s : Wf G_s'') (EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"basic_solver 11."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) : functional rf_s⁻¹.","conclusion":"functional rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t))","proofString":"assert (NEMP : ~ E_t a_t /\\ E_t b_t) by tauto.\ndesf.\nassert (NIN : ~ E_s'' b_t) by auto with xmm.\nchange rf_s with (rf_s'' ∪ drf_s'').\nrewrite transp_union.\napply functional_union.\napply WF_s.\neapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver.\nenough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : functional rf_s⁻¹.","conclusion":"functional rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"desf.\nassert (NIN : ~ E_s'' b_t) by auto with xmm.\nchange rf_s with (rf_s'' ∪ drf_s'').\nrewrite transp_union.\napply functional_union.\napply WF_s.\neapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver.\nenough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) : functional rf_s⁻¹.","conclusion":"functional rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t)","proofString":"assert (NIN : ~ E_s'' b_t) by auto with xmm.\nchange rf_s with (rf_s'' ∪ drf_s'').\nrewrite transp_union.\napply functional_union.\napply WF_s.\neapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver.\nenough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : functional rf_s⁻¹.","conclusion":"functional rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"change rf_s with (rf_s'' ∪ drf_s'').\nrewrite transp_union.\napply functional_union.\napply WF_s.\neapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver.\nenough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : functional (rf_s'' ∪ drf_s'')⁻¹.","conclusion":"functional (rf_s'' ∪ drf_s'')⁻¹","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"rewrite transp_union.\napply functional_union.\napply WF_s.\neapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver.\nenough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : functional (rf_s''⁻¹ ∪ drf_s''⁻¹).","conclusion":"functional (rf_s''⁻¹ ∪ drf_s''⁻¹)","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"apply functional_union.\napply WF_s.\neapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver.\nenough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : functional rf_s''⁻¹.","conclusion":"functional rf_s''⁻¹","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"apply WF_s."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : functional drf_s''⁻¹.","conclusion":"functional drf_s''⁻¹","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"eapply functional_mori; [| apply fake_srff, WF_s].\nunfold flip.\napply transp_mori.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : forall x : actid, dom_rel rf_s''⁻¹ x -> dom_rel drf_s''⁻¹ x -> False.","conclusion":"forall x : actid, dom_rel rf_s''⁻¹ x -> dom_rel drf_s''⁻¹ x -> False","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"enough (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)).\napply DISJ.\nrewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)) : forall x : actid, dom_rel rf_s''⁻¹ x -> dom_rel drf_s''⁻¹ x -> False.","conclusion":"forall x : actid, dom_rel rf_s''⁻¹ x -> dom_rel drf_s''⁻¹ x -> False","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) (DISJ : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹))","proofString":"apply DISJ."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹).","conclusion":"set_disjoint (dom_rel rf_s''⁻¹) (dom_rel drf_s''⁻¹)","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"rewrite !dom_transp, (wf_rfE WF_s).\narewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : set_disjoint (codom_rel (⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘)) (codom_rel drf_s'').","conclusion":"set_disjoint (codom_rel (⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘)) (codom_rel drf_s'')","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"arewrite (codom_rel drf_s'' ⊆₁ eq b_t).\nrewrite extra_a_some; auto.\nbasic_solver.\nrewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : codom_rel drf_s'' ⊆₁ eq b_t.","conclusion":"codom_rel drf_s'' ⊆₁ eq b_t","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"rewrite extra_a_some; auto.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : codom_rel (fake_srf G_s'' b_t l_a ⨾ ⦗eq b_t ∩₁ WCore.lab_is_r l_a⦘) ⊆₁ eq b_t.","conclusion":"codom_rel (fake_srf G_s'' b_t l_a ⨾ ⦗eq b_t ∩₁ WCore.lab_is_r l_a⦘) ⊆₁ eq b_t","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : set_disjoint (codom_rel (⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘)) (eq b_t).","conclusion":"set_disjoint (codom_rel (⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘)) (eq b_t)","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"rewrite 2!codom_seq, codom_eqv.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t) : set_disjoint E_s'' (eq b_t).","conclusion":"set_disjoint E_s'' (eq b_t)","hypotheses":"(WF_s : Wf G_s'') (NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) (NIN : ~ E_s'' b_t)","proofString":"basic_solver."},{"statement":"~ ext_sb a_t b_t.","conclusion":"~ ext_sb a_t b_t","hypotheses":"","proofString":"intro SB.\neapply ext_sb_irr, ext_sb_trans with b_t; eauto.\napply INV."},{"statement":"(SB : ext_sb a_t b_t) : False.","conclusion":"False","hypotheses":"(SB : ext_sb a_t b_t)","proofString":"eapply ext_sb_irr, ext_sb_trans with b_t; eauto.\napply INV."},{"statement":"(SB : ext_sb a_t b_t) : ext_sb b_t a_t.","conclusion":"ext_sb b_t a_t","hypotheses":"(SB : ext_sb a_t b_t)","proofString":"apply INV."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : sb_t\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"sb_t\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"unfold sb.\nrewrite set_union_minus      with (s := E_t) (s' := E_t ∩₁ (eq b_t ∪₁ eq a_t))        at 1 2; [| basic_solver].\nrewrite id_union, !seq_union_l, !seq_union_r.\narewrite (    E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ≡₁      (E_t \\₁ eq b_t) \\₁ eq a_t  ).\nrewrite set_minus_inter_r, set_minusK, set_union_empty_l.\nnow rewrite set_minus_minus_l.\nrewrite set_inter_union_r.\nrewrite id_union, !seq_union_l, !seq_union_r.\nrewrite <- !unionA.\nrewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite set_union_minus      with (s := E_t) (s' := E_t ∩₁ (eq b_t ∪₁ eq a_t))        at 1 2; [| basic_solver].\nrewrite id_union, !seq_union_l, !seq_union_r.\narewrite (    E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ≡₁      (E_t \\₁ eq b_t) \\₁ eq a_t  ).\nrewrite set_minus_inter_r, set_minusK, set_union_empty_l.\nnow rewrite set_minus_minus_l.\nrewrite set_inter_union_r.\nrewrite id_union, !seq_union_l, !seq_union_r.\nrewrite <- !unionA.\nrewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ∪₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n⨾ ext_sb ⨾ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ∪₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ∪₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n⨾ ext_sb ⨾ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ∪₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite id_union, !seq_union_l, !seq_union_r.\narewrite (    E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ≡₁      (E_t \\₁ eq b_t) \\₁ eq a_t  ).\nrewrite set_minus_inter_r, set_minusK, set_union_empty_l.\nnow rewrite set_minus_minus_l.\nrewrite set_inter_union_r.\nrewrite id_union, !seq_union_l, !seq_union_r.\nrewrite <- !unionA.\nrewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n⨾ ext_sb ⨾ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n∪ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n∪ (⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n   ∪ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n⨾ ext_sb ⨾ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n∪ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n∪ (⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n   ∪ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"arewrite (    E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ≡₁      (E_t \\₁ eq b_t) \\₁ eq a_t  ).\nrewrite set_minus_inter_r, set_minusK, set_union_empty_l.\nnow rewrite set_minus_minus_l.\nrewrite set_inter_union_r.\nrewrite id_union, !seq_union_l, !seq_union_r.\nrewrite <- !unionA.\nrewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ≡₁ (E_t \\₁ eq b_t) \\₁ eq a_t.","conclusion":"E_t \\₁ E_t ∩₁ (eq b_t ∪₁ eq a_t) ≡₁ (E_t \\₁ eq b_t) \\₁ eq a_t","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite set_minus_inter_r, set_minusK, set_union_empty_l.\nnow rewrite set_minus_minus_l."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : E_t \\₁ (eq b_t ∪₁ eq a_t) ≡₁ (E_t \\₁ eq b_t) \\₁ eq a_t.","conclusion":"E_t \\₁ (eq b_t ∪₁ eq a_t) ≡₁ (E_t \\₁ eq b_t) \\₁ eq a_t","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"now rewrite set_minus_minus_l."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n∪ (⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘\n∪ (⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ (eq b_t ∪₁ eq a_t)⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite set_inter_union_r.\nrewrite id_union, !seq_union_l, !seq_union_r.\nrewrite <- !unionA.\nrewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘\n∪ (⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘\n     ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘\n∪ (⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘\n     ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t ∪₁ E_t ∩₁ eq a_t⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite id_union, !seq_union_l, !seq_union_r.\nrewrite <- !unionA.\nrewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘)\n∪ (⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ (⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n      ∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n      ∪ (⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n         ∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘)))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘)\n∪ (⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ (⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n      ∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n      ∪ (⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n         ∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘)))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite <- !unionA.\nrewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n∪ ⦗E_t ∩₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq b_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite set_interC with (s' := eq b_t) (s := E_t).\nrewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗E_t ∩₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∩₁ eq a_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite set_interC with (s' := eq a_t) (s := E_t).\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"arewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ ⊆ ∅₂.","conclusion":"⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ ⊆ ∅₂","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"unfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : forall x y : actid,\n(a_t = x /\\ E_t x) /\\ ext_sb x y /\\ a_t = y /\\ E_t y -> False.","conclusion":"forall x y : actid,\n(a_t = x /\\ E_t x) /\\ ext_sb x y /\\ a_t = y /\\ E_t y -> False","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"intros.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NSBB : ~ ext_sb a_t b_t) (x y : actid) (H : (a_t = x /\\ E_t x) /\\ ext_sb x y /\\ a_t = y /\\ E_t y) : False.","conclusion":"False","hypotheses":"(NSBB : ~ ext_sb a_t b_t) (x y : actid) (H : (a_t = x /\\ E_t x) /\\ ext_sb x y /\\ a_t = y /\\ E_t y)","proofString":"desf.\neapply ext_sb_irr; eauto."},{"statement":"(y : actid) (H0 : ext_sb y y) (H3 : E_t y) (NSBB : ~ ext_sb y b_t) (H2 : E_t y) : False.","conclusion":"False","hypotheses":"(y : actid) (H0 : ext_sb y y) (H3 : E_t y) (NSBB : ~ ext_sb y b_t) (H2 : E_t y)","proofString":"eapply ext_sb_irr; eauto."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ∪ ∅₂\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ∪ ∅₂\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"arewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto.\narewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ⊆ ∅₂.","conclusion":"⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ⊆ ∅₂","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"unfolder.\nintros.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : forall x y : actid,\n(b_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y -> False.","conclusion":"forall x y : actid,\n(b_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y -> False","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"intros.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NSBB : ~ ext_sb a_t b_t) (x y : actid) (H : (b_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y) : False.","conclusion":"False","hypotheses":"(NSBB : ~ ext_sb a_t b_t) (x y : actid) (H : (b_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y)","proofString":"desf.\neapply ext_sb_irr; eauto."},{"statement":"(y : actid) (H0 : ext_sb y y) (H3 : E_t y) (NSBB : ~ ext_sb a_t y) (H2 : E_t y) : False.","conclusion":"False","hypotheses":"(y : actid) (H0 : ext_sb y y) (H3 : E_t y) (NSBB : ~ ext_sb a_t y) (H2 : E_t y)","proofString":"eapply ext_sb_irr; eauto."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ∪ ∅₂\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ∪ ∅₂\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"arewrite_false (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘).\nunfolder.\nintros.\ndesf.\nrewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ⊆ ∅₂.","conclusion":"⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ ⊆ ∅₂","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"unfolder.\nintros.\ndesf."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : forall x y : actid,\n(a_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y -> False.","conclusion":"forall x y : actid,\n(a_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y -> False","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"intros.\ndesf."},{"statement":"(NSBB : ~ ext_sb a_t b_t) (x y : actid) (H : (a_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y) : False.","conclusion":"False","hypotheses":"(NSBB : ~ ext_sb a_t b_t) (x y : actid) (H : (a_t = x /\\ E_t x) /\\ ext_sb x y /\\ b_t = y /\\ E_t y)","proofString":"desf."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ ∪ ∅₂ ∪ ∅₂\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ ∪ ∅₂ ∪ ∅₂\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"rewrite !union_false_r.\nreflexivity."},{"statement":"(NSBB : ~ ext_sb a_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘","hypotheses":"(NSBB : ~ ext_sb a_t b_t)","proofString":"reflexivity."},{"statement":"(NEQ : a_t <> b_t) : mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(NEQ : a_t <> b_t)","proofString":"split; unfolder.\nintros x' y' (x & y & (((XIN & BNX) & ANX) & SB & YEQ & YIN) & XEQ' & YEQ').\nsubst x' y' y.\nrewrite rsr_mappero, rsr_mapper_bt by congruence.\nsplits; auto; [eapply ext_sb_trans; eauto; apply INV |].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt.\nintros x y' (((XIN & BNX) & ANX) & SB & (y & (YEQ & YIN) & YEQ')).\nsubst y y'.\nexists x, b_t.\nrewrite rsr_mappero, rsr_mapper_bt in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_l; auto."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n(exists x' y' : actid,\n   (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n    ext_sb x' y' /\\ b_t = y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y).","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n    ext_sb x' y' /\\ b_t = y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y)","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x' y' (x & y & (((XIN & BNX) & ANX) & SB & YEQ & YIN) & XEQ' & YEQ').\nsubst x' y' y.\nrewrite rsr_mappero, rsr_mapper_bt by congruence.\nsplits; auto; [eapply ext_sb_trans; eauto; apply INV |].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y) (YEQ : b_t = y) (YIN : E_t y) (XEQ' : mapper x = x') (YEQ' : mapper y = y') : ((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\next_sb x' y' /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y').","conclusion":"((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\next_sb x' y' /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y')","hypotheses":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y) (YEQ : b_t = y) (YIN : E_t y) (XEQ' : mapper x = x') (YEQ' : mapper y = y')","proofString":"subst x' y' y.\nrewrite rsr_mappero, rsr_mapper_bt by congruence.\nsplits; auto; [eapply ext_sb_trans; eauto; apply INV |].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t) : ((E_t (mapper x) /\\ b_t <> mapper x) /\\ a_t <> mapper x) /\\\next_sb (mapper x) (mapper b_t) /\\\n(exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = mapper b_t).","conclusion":"((E_t (mapper x) /\\ b_t <> mapper x) /\\ a_t <> mapper x) /\\\next_sb (mapper x) (mapper b_t) /\\\n(exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = mapper b_t)","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t)","proofString":"rewrite rsr_mappero, rsr_mapper_bt by congruence.\nsplits; auto; [eapply ext_sb_trans; eauto; apply INV |].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t) : ((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x a_t /\\ (exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = a_t).","conclusion":"((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x a_t /\\ (exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = a_t)","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t)","proofString":"splits; auto; [eapply ext_sb_trans; eauto; apply INV |].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t) : exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = a_t.","conclusion":"exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = a_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t)","proofString":"exists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t) : mapper b_t = a_t.","conclusion":"mapper b_t = a_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t b_t)","proofString":"now apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y) ->\nexists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ b_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y.","conclusion":"forall x y : actid,\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y) ->\nexists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ b_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x y' (((XIN & BNX) & ANX) & SB & (y & (YEQ & YIN) & YEQ')).\nsubst y y'.\nexists x, b_t.\nrewrite rsr_mappero, rsr_mapper_bt in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_l; auto."},{"statement":"(NEQ : a_t <> b_t) (x y' : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y') (y : actid) (YEQ : b_t = y) (YIN : E_t y) (YEQ' : mapper y = y') : exists x' y'0 : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n   ext_sb x' y'0 /\\ b_t = y'0 /\\ E_t y'0) /\\ mapper x' = x /\\ mapper y'0 = y'.","conclusion":"exists x' y'0 : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n   ext_sb x' y'0 /\\ b_t = y'0 /\\ E_t y'0) /\\ mapper x' = x /\\ mapper y'0 = y'","hypotheses":"(NEQ : a_t <> b_t) (x y' : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y') (y : actid) (YEQ : b_t = y) (YIN : E_t y) (YEQ' : mapper y = y')","proofString":"subst y y'.\nexists x, b_t.\nrewrite rsr_mappero, rsr_mapper_bt in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_l; auto."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper b_t)) (YIN : E_t b_t) : exists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ b_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = mapper b_t.","conclusion":"exists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ b_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = mapper b_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper b_t)) (YIN : E_t b_t)","proofString":"exists x, b_t.\nrewrite rsr_mappero, rsr_mapper_bt in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_l; auto."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper b_t)) (YIN : E_t b_t) : (((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x b_t /\\ b_t = b_t /\\ E_t b_t) /\\\nmapper x = x /\\ mapper b_t = mapper b_t.","conclusion":"(((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x b_t /\\ b_t = b_t /\\ E_t b_t) /\\\nmapper x = x /\\ mapper b_t = mapper b_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper b_t)) (YIN : E_t b_t)","proofString":"rewrite rsr_mappero, rsr_mapper_bt in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_l; auto."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t b_t) : (((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x b_t /\\ b_t = b_t /\\ E_t b_t) /\\\nx = x /\\ a_t = a_t.","conclusion":"(((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x b_t /\\ b_t = b_t /\\ E_t b_t) /\\\nx = x /\\ a_t = a_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t b_t)","proofString":"splits; auto.\napply rsr_rex_extsb_inv_l; auto."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t b_t) : ext_sb x b_t.","conclusion":"ext_sb x b_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t b_t)","proofString":"apply rsr_rex_extsb_inv_l; auto."},{"statement":"(NEQ : a_t <> b_t) : mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘.","conclusion":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘","hypotheses":"(NEQ : a_t <> b_t)","proofString":"split; unfolder.\nintros x' y' (x & y & (((XIN & BNX) & ANX) & SB & YEQ & YIN) & XEQ' & YEQ').\nsubst x' y' y.\nrewrite rsr_mappero, rsr_mapper_at by congruence.\nsplits; auto; [apply rsr_rex_extsb_inv_l; auto; now apply (rsr_at_bt_ord INV) |].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at.\nintros x y' (((XIN & BNX) & ANX) & SB & (y & (YEQ & YIN) & YEQ')).\nsubst y y'.\nexists x, a_t.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n(exists x' y' : actid,\n   (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n    ext_sb x' y' /\\ a_t = y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = y).","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n    ext_sb x' y' /\\ a_t = y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = y)","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x' y' (x & y & (((XIN & BNX) & ANX) & SB & YEQ & YIN) & XEQ' & YEQ').\nsubst x' y' y.\nrewrite rsr_mappero, rsr_mapper_at by congruence.\nsplits; auto; [apply rsr_rex_extsb_inv_l; auto; now apply (rsr_at_bt_ord INV) |].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y) (YEQ : a_t = y) (YIN : E_t y) (XEQ' : mapper x = x') (YEQ' : mapper y = y') : ((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\next_sb x' y' /\\ (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = y').","conclusion":"((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\next_sb x' y' /\\ (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = y')","hypotheses":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y) (YEQ : a_t = y) (YIN : E_t y) (XEQ' : mapper x = x') (YEQ' : mapper y = y')","proofString":"subst x' y' y.\nrewrite rsr_mappero, rsr_mapper_at by congruence.\nsplits; auto; [apply rsr_rex_extsb_inv_l; auto; now apply (rsr_at_bt_ord INV) |].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t) : ((E_t (mapper x) /\\ b_t <> mapper x) /\\ a_t <> mapper x) /\\\next_sb (mapper x) (mapper a_t) /\\\n(exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = mapper a_t).","conclusion":"((E_t (mapper x) /\\ b_t <> mapper x) /\\ a_t <> mapper x) /\\\next_sb (mapper x) (mapper a_t) /\\\n(exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = mapper a_t)","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t)","proofString":"rewrite rsr_mappero, rsr_mapper_at by congruence.\nsplits; auto; [apply rsr_rex_extsb_inv_l; auto; now apply (rsr_at_bt_ord INV) |].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t) : ((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x b_t /\\ (exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = b_t).","conclusion":"((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x b_t /\\ (exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = b_t)","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t)","proofString":"splits; auto; [apply rsr_rex_extsb_inv_l; auto; now apply (rsr_at_bt_ord INV) |].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t) : exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = b_t.","conclusion":"exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = b_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t)","proofString":"exists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t) : mapper a_t = b_t.","conclusion":"mapper a_t = b_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x a_t) (YIN : E_t a_t)","proofString":"now apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = y) ->\nexists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ a_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y.","conclusion":"forall x y : actid,\n((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\\next_sb x y /\\ (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = y) ->\nexists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ a_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x y' (((XIN & BNX) & ANX) & SB & (y & (YEQ & YIN) & YEQ')).\nsubst y y'.\nexists x, a_t.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (x y' : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y') (y : actid) (YEQ : a_t = y) (YIN : E_t y) (YEQ' : mapper y = y') : exists x' y'0 : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n   ext_sb x' y'0 /\\ a_t = y'0 /\\ E_t y'0) /\\ mapper x' = x /\\ mapper y'0 = y'.","conclusion":"exists x' y'0 : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\\n   ext_sb x' y'0 /\\ a_t = y'0 /\\ E_t y'0) /\\ mapper x' = x /\\ mapper y'0 = y'","hypotheses":"(NEQ : a_t <> b_t) (x y' : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x y') (y : actid) (YEQ : a_t = y) (YIN : E_t y) (YEQ' : mapper y = y')","proofString":"subst y y'.\nexists x, a_t.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper a_t)) (YIN : E_t a_t) : exists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ a_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = mapper a_t.","conclusion":"exists x' y' : actid,\n  (((E_t x' /\\ b_t <> x') /\\ a_t <> x') /\\ ext_sb x' y' /\\ a_t = y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = mapper a_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper a_t)) (YIN : E_t a_t)","proofString":"exists x, a_t.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper a_t)) (YIN : E_t a_t) : (((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x a_t /\\ a_t = a_t /\\ E_t a_t) /\\\nmapper x = x /\\ mapper a_t = mapper a_t.","conclusion":"(((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x a_t /\\ a_t = a_t /\\ E_t a_t) /\\\nmapper x = x /\\ mapper a_t = mapper a_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x (mapper a_t)) (YIN : E_t a_t)","proofString":"rewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t a_t) : (((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x a_t /\\ a_t = a_t /\\ E_t a_t) /\\\nx = x /\\ b_t = b_t.","conclusion":"(((E_t x /\\ b_t <> x) /\\ a_t <> x) /\\ ext_sb x a_t /\\ a_t = a_t /\\ E_t a_t) /\\\nx = x /\\ b_t = b_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t a_t)","proofString":"splits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t a_t) : ext_sb x a_t.","conclusion":"ext_sb x a_t","hypotheses":"(NEQ : a_t <> b_t) (x : actid) (XIN : E_t x) (BNX : b_t <> x) (ANX : a_t <> x) (SB : ext_sb x b_t) (YIN : E_t a_t)","proofString":"eapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) : mapper ↑ (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n≡ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘.","conclusion":"mapper ↑ (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n≡ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘","hypotheses":"(NEQ : a_t <> b_t)","proofString":"split; unfolder.\nintros x' y' (x & y & ((XEQ & XIN) & SB & (YIN & YNB) & ANY) & XEQ' & YEQ').\nsubst x' y' x.\nrewrite rsr_mapper_bt, rsr_mappero by congruence.\nsplits; auto; [| apply rsr_rex_extsb_inv_r; auto].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt.\nintros x' y ((x & (XEQ & XIN) & XEQ') & SB & ((YIN & BNY) & ANY)).\nsubst x x'.\nexists b_t, y.\nrewrite rsr_mapper_bt, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n(exists x' y' : actid,\n   ((b_t = x' /\\ E_t x') /\\\n    ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n   mapper x' = x /\\ mapper y' = y) ->\n(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   ((b_t = x' /\\ E_t x') /\\\n    ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n   mapper x' = x /\\ mapper y' = y) ->\n(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x' y' (x & y & ((XEQ & XIN) & SB & (YIN & YNB) & ANY) & XEQ' & YEQ').\nsubst x' y' x.\nrewrite rsr_mapper_bt, rsr_mappero by congruence.\nsplits; auto; [| apply rsr_rex_extsb_inv_r; auto].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XEQ : b_t = x) (XIN : E_t x) (SB : ext_sb x y) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) (XEQ' : mapper x = x') (YEQ' : mapper y = y') : (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = x') /\\\next_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y'.","conclusion":"(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = x') /\\\next_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y'","hypotheses":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XEQ : b_t = x) (XIN : E_t x) (SB : ext_sb x y) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) (XEQ' : mapper x = x') (YEQ' : mapper y = y')","proofString":"subst x' y' x.\nrewrite rsr_mapper_bt, rsr_mappero by congruence.\nsplits; auto; [| apply rsr_rex_extsb_inv_r; auto].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = mapper b_t) /\\\next_sb (mapper b_t) (mapper y) /\\\n(E_t (mapper y) /\\ b_t <> mapper y) /\\ a_t <> mapper y.","conclusion":"(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = mapper b_t) /\\\next_sb (mapper b_t) (mapper y) /\\\n(E_t (mapper y) /\\ b_t <> mapper y) /\\ a_t <> mapper y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"rewrite rsr_mapper_bt, rsr_mappero by congruence.\nsplits; auto; [| apply rsr_rex_extsb_inv_r; auto].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = a_t) /\\\next_sb a_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y.","conclusion":"(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = a_t) /\\\next_sb a_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"splits; auto; [| apply rsr_rex_extsb_inv_r; auto].\nexists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = a_t.","conclusion":"exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = a_t","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"exists b_t; splits; auto.\nnow apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : mapper b_t = a_t.","conclusion":"mapper b_t = a_t","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb b_t y) (XIN : E_t b_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"now apply rsr_mapper_bt."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y ->\nexists x' y' : actid,\n  ((b_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = x /\\ mapper y' = y.","conclusion":"forall x y : actid,\n(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y ->\nexists x' y' : actid,\n  ((b_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = x /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x' y ((x & (XEQ & XIN) & XEQ') & SB & ((YIN & BNY) & ANY)).\nsubst x x'.\nexists b_t, y.\nrewrite rsr_mapper_bt, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (x' y x : actid) (XEQ : b_t = x) (XIN : E_t x) (XEQ' : mapper x = x') (SB : ext_sb x' y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : exists x'0 y' : actid,\n  ((b_t = x'0 /\\ E_t x'0) /\\\n   ext_sb x'0 y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x'0 = x' /\\ mapper y' = y.","conclusion":"exists x'0 y' : actid,\n  ((b_t = x'0 /\\ E_t x'0) /\\\n   ext_sb x'0 y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x'0 = x' /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t) (x' y x : actid) (XEQ : b_t = x) (XIN : E_t x) (XEQ' : mapper x = x') (SB : ext_sb x' y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"subst x x'.\nexists b_t, y.\nrewrite rsr_mapper_bt, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb (mapper b_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : exists x' y' : actid,\n  ((b_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = mapper b_t /\\ mapper y' = y.","conclusion":"exists x' y' : actid,\n  ((b_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = mapper b_t /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb (mapper b_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"exists b_t, y.\nrewrite rsr_mapper_bt, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb (mapper b_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : ((b_t = b_t /\\ E_t b_t) /\\ ext_sb b_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\nmapper b_t = mapper b_t /\\ mapper y = y.","conclusion":"((b_t = b_t /\\ E_t b_t) /\\ ext_sb b_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\nmapper b_t = mapper b_t /\\ mapper y = y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb (mapper b_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"rewrite rsr_mapper_bt, rsr_mappero in * by congruence.\nsplits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb a_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : ((b_t = b_t /\\ E_t b_t) /\\ ext_sb b_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\na_t = a_t /\\ y = y.","conclusion":"((b_t = b_t /\\ E_t b_t) /\\ ext_sb b_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\na_t = a_t /\\ y = y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb a_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"splits; auto.\neapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb a_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : ext_sb b_t y.","conclusion":"ext_sb b_t y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t b_t) (SB : ext_sb a_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"eapply ext_sb_trans; eauto; apply INV."},{"statement":"(NEQ : a_t <> b_t) : mapper ↑ (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n≡ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘.","conclusion":"mapper ↑ (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n≡ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘","hypotheses":"(NEQ : a_t <> b_t)","proofString":"split; unfolder.\nintros x' y' (x & y & ((XEQ & XIN) & SB & (YIN & YNB) & ANY) & XEQ' & YEQ').\nsubst x' y' x.\nrewrite rsr_mapper_at, rsr_mappero by congruence.\nsplits; auto; [| eapply ext_sb_trans; eauto; apply INV].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at.\nintros x' y ((x & (XEQ & XIN) & XEQ') & SB & ((YIN & BNY) & ANY)).\nsubst x x'.\nexists a_t, y.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_r; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n(exists x' y' : actid,\n   ((a_t = x' /\\ E_t x') /\\\n    ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n   mapper x' = x /\\ mapper y' = y) ->\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   ((a_t = x' /\\ E_t x') /\\\n    ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n   mapper x' = x /\\ mapper y' = y) ->\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x' y' (x & y & ((XEQ & XIN) & SB & (YIN & YNB) & ANY) & XEQ' & YEQ').\nsubst x' y' x.\nrewrite rsr_mapper_at, rsr_mappero by congruence.\nsplits; auto; [| eapply ext_sb_trans; eauto; apply INV].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XEQ : a_t = x) (XIN : E_t x) (SB : ext_sb x y) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) (XEQ' : mapper x = x') (YEQ' : mapper y = y') : (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x') /\\\next_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y'.","conclusion":"(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x') /\\\next_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y'","hypotheses":"(NEQ : a_t <> b_t) (x' y' x y : actid) (XEQ : a_t = x) (XIN : E_t x) (SB : ext_sb x y) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) (XEQ' : mapper x = x') (YEQ' : mapper y = y')","proofString":"subst x' y' x.\nrewrite rsr_mapper_at, rsr_mappero by congruence.\nsplits; auto; [| eapply ext_sb_trans; eauto; apply INV].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = mapper a_t) /\\\next_sb (mapper a_t) (mapper y) /\\\n(E_t (mapper y) /\\ b_t <> mapper y) /\\ a_t <> mapper y.","conclusion":"(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = mapper a_t) /\\\next_sb (mapper a_t) (mapper y) /\\\n(E_t (mapper y) /\\ b_t <> mapper y) /\\ a_t <> mapper y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"rewrite rsr_mapper_at, rsr_mappero by congruence.\nsplits; auto; [| eapply ext_sb_trans; eauto; apply INV].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = b_t) /\\\next_sb b_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y.","conclusion":"(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = b_t) /\\\next_sb b_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"splits; auto; [| eapply ext_sb_trans; eauto; apply INV].\nexists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = b_t.","conclusion":"exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = b_t","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"exists a_t; splits; auto.\nnow apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y) : mapper a_t = b_t.","conclusion":"mapper a_t = b_t","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (SB : ext_sb a_t y) (XIN : E_t a_t) (YIN : E_t y) (YNB : b_t <> y) (ANY : a_t <> y)","proofString":"now apply rsr_mapper_at."},{"statement":"(NEQ : a_t <> b_t) : forall x y : actid,\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y ->\nexists x' y' : actid,\n  ((a_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = x /\\ mapper y' = y.","conclusion":"forall x y : actid,\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y ->\nexists x' y' : actid,\n  ((a_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = x /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t)","proofString":"intros x' y ((x & (XEQ & XIN) & XEQ') & SB & ((YIN & BNY) & ANY)).\nsubst x x'.\nexists a_t, y.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_r; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(NEQ : a_t <> b_t) (x' y x : actid) (XEQ : a_t = x) (XIN : E_t x) (XEQ' : mapper x = x') (SB : ext_sb x' y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : exists x'0 y' : actid,\n  ((a_t = x'0 /\\ E_t x'0) /\\\n   ext_sb x'0 y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x'0 = x' /\\ mapper y' = y.","conclusion":"exists x'0 y' : actid,\n  ((a_t = x'0 /\\ E_t x'0) /\\\n   ext_sb x'0 y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x'0 = x' /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t) (x' y x : actid) (XEQ : a_t = x) (XIN : E_t x) (XEQ' : mapper x = x') (SB : ext_sb x' y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"subst x x'.\nexists a_t, y.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_r; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb (mapper a_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : exists x' y' : actid,\n  ((a_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = mapper a_t /\\ mapper y' = y.","conclusion":"exists x' y' : actid,\n  ((a_t = x' /\\ E_t x') /\\ ext_sb x' y' /\\ (E_t y' /\\ b_t <> y') /\\ a_t <> y') /\\\n  mapper x' = mapper a_t /\\ mapper y' = y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb (mapper a_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"exists a_t, y.\nrewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_r; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb (mapper a_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : ((a_t = a_t /\\ E_t a_t) /\\ ext_sb a_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\nmapper a_t = mapper a_t /\\ mapper y = y.","conclusion":"((a_t = a_t /\\ E_t a_t) /\\ ext_sb a_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\nmapper a_t = mapper a_t /\\ mapper y = y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb (mapper a_t) y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"rewrite rsr_mapper_at, rsr_mappero in * by congruence.\nsplits; auto.\napply rsr_rex_extsb_inv_r; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb b_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : ((a_t = a_t /\\ E_t a_t) /\\ ext_sb a_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\nb_t = b_t /\\ y = y.","conclusion":"((a_t = a_t /\\ E_t a_t) /\\ ext_sb a_t y /\\ (E_t y /\\ b_t <> y) /\\ a_t <> y) /\\\nb_t = b_t /\\ y = y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb b_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"splits; auto.\napply rsr_rex_extsb_inv_r; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb b_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : ext_sb a_t y.","conclusion":"ext_sb a_t y","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb b_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"apply rsr_rex_extsb_inv_r; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb b_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y) : E_t b_t.","conclusion":"E_t b_t","hypotheses":"(NEQ : a_t <> b_t) (y : actid) (XIN : E_t a_t) (SB : ext_sb b_t y) (YIN : E_t y) (BNY : b_t <> y) (ANY : a_t <> y)","proofString":"now apply (rsr_at_bt_ord INV)."},{"statement":"mapper\n↑ swap_rel\n    (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n     ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n     ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n     ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n     ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n     ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘) \n    (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper\n↑ swap_rel\n    (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n     ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n     ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n     ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n     ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n     ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘) \n    (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"unfold swap_rel.\nrewrite !minus_union_l.\ndo 5 (rewrite minus_disjoint; [| basic_solver]).\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\ (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)).\nbasic_solver 11.\nrewrite union_false_r, !collect_rel_union.\nrewrite rsr_rex_codom_a, rsr_rex_codom_b.\nrewrite rsr_rex_dom_a, rsr_rex_dom_b.\nrewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"mapper\n↑ ((⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n    ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n    ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n    ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n    ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n    ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘) \\\n   (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper\n↑ ((⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n    ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n    ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n    ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n    ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n    ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘) \\\n   (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"rewrite !minus_union_l.\ndo 5 (rewrite minus_disjoint; [| basic_solver]).\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\ (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)).\nbasic_solver 11.\nrewrite union_false_r, !collect_rel_union.\nrewrite rsr_rex_codom_a, rsr_rex_codom_b.\nrewrite rsr_rex_dom_a, rsr_rex_dom_b.\nrewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"mapper\n↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ \\\n   (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper\n↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ \\\n   (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"do 5 (rewrite minus_disjoint; [| basic_solver]).\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\ (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)).\nbasic_solver 11.\nrewrite union_false_r, !collect_rel_union.\nrewrite rsr_rex_codom_a, rsr_rex_codom_b.\nrewrite rsr_rex_dom_a, rsr_rex_dom_b.\nrewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"mapper\n↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper\n↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n     (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"arewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\ (eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t)).\nbasic_solver 11.\nrewrite union_false_r, !collect_rel_union.\nrewrite rsr_rex_codom_a, rsr_rex_codom_b.\nrewrite rsr_rex_dom_a, rsr_rex_dom_b.\nrewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n(eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ⊆ ∅₂.","conclusion":"⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ \\\n(eq b_t ∩₁ E_t) × (eq a_t ∩₁ E_t) ⊆ ∅₂","hypotheses":"","proofString":"basic_solver 11."},{"statement":"mapper\n↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂\n   ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper\n↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n   ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n   ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n   ∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂\n   ∪ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t))\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"rewrite union_false_r, !collect_rel_union.\nrewrite rsr_rex_codom_a, rsr_rex_codom_b.\nrewrite rsr_rex_dom_a, rsr_rex_dom_b.\nrewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘)\n∪ mapper ↑ (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘)\n∪ mapper ↑ (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"rewrite rsr_rex_codom_a, rsr_rex_codom_b.\nrewrite rsr_rex_dom_a, rsr_rex_dom_b.\nrewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘)\n∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘)\n∪ mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘)\n∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"rewrite rsr_rex_dom_a, rsr_rex_dom_b.\nrewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper ↑ (⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘)\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"rewrite rsr_rex_sbniff.\nrepeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"repeat apply union_more; try reflexivity.\nrewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"mapper ↑ (eq a_t ∩₁ E_t) × (eq b_t ∩₁ E_t)\n≡ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"rewrite collect_rel_cross.\nsplit; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"(mapper ↑₁ (eq a_t ∩₁ E_t)) × (mapper ↑₁ (eq b_t ∩₁ E_t))\n≡ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"(mapper ↑₁ (eq a_t ∩₁ E_t)) × (mapper ↑₁ (eq b_t ∩₁ E_t))\n≡ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"split; [| basic_solver].\nunfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"(mapper ↑₁ (eq a_t ∩₁ E_t)) × (mapper ↑₁ (eq b_t ∩₁ E_t))\n⊆ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"(mapper ↑₁ (eq a_t ∩₁ E_t)) × (mapper ↑₁ (eq b_t ∩₁ E_t))\n⊆ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"","proofString":"unfolder.\nintros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"forall x y : actid,\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\n(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y) ->\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y).","conclusion":"forall x y : actid,\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\n(exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y) ->\n(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x) /\\\next_sb x y /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y)","hypotheses":"","proofString":"intros x' y' ((x & (XEQ & XIN) & XEQ') & (y & (YEQ & YIN) & YEQ')).\nsubst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"(x' y' x : actid) (XEQ : a_t = x) (XIN : E_t x) (XEQ' : mapper x = x') (y : actid) (YEQ : b_t = y) (YIN : E_t y) (YEQ' : mapper y = y') : (exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x') /\\\next_sb x' y' /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y').","conclusion":"(exists y0 : actid, (a_t = y0 /\\ E_t y0) /\\ mapper y0 = x') /\\\next_sb x' y' /\\ (exists y0 : actid, (b_t = y0 /\\ E_t y0) /\\ mapper y0 = y')","hypotheses":"(x' y' x : actid) (XEQ : a_t = x) (XIN : E_t x) (XEQ' : mapper x = x') (y : actid) (YEQ : b_t = y) (YIN : E_t y) (YEQ' : mapper y = y')","proofString":"subst x y x' y'.\nsplits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"(XIN : E_t a_t) (YIN : E_t b_t) : (exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = mapper a_t) /\\\next_sb (mapper a_t) (mapper b_t) /\\\n(exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = mapper b_t).","conclusion":"(exists y : actid, (a_t = y /\\ E_t y) /\\ mapper y = mapper a_t) /\\\next_sb (mapper a_t) (mapper b_t) /\\\n(exists y : actid, (b_t = y /\\ E_t y) /\\ mapper y = mapper b_t)","hypotheses":"(XIN : E_t a_t) (YIN : E_t b_t)","proofString":"splits; eauto.\nrewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"(XIN : E_t a_t) (YIN : E_t b_t) : ext_sb (mapper a_t) (mapper b_t).","conclusion":"ext_sb (mapper a_t) (mapper b_t)","hypotheses":"(XIN : E_t a_t) (YIN : E_t b_t)","proofString":"rewrite rsr_mapper_at, rsr_mapper_bt; apply INV."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t)","proofString":"assert (ORG : (E_t a_t \\/ ~E_t b_t)) by tauto.\ndestruct ORG as [INA | NINB].\nassert (INB : E_t b_t) by now apply (rsr_at_bt_ord INV).\nrewrite !set_inter_absorb_r by basic_solver.\nrewrite !set_collect_eq.\nrewrite rsr_mapper_at, rsr_mapper_bt; auto.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20.\nassert (NINA : ~ E_t a_t).\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite set_collect_empty, eqv_empty.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\nrewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (ORG : E_t a_t \\/ ~ E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (ORG : E_t a_t \\/ ~ E_t b_t)","proofString":"destruct ORG as [INA | NINB].\nassert (INB : E_t b_t) by now apply (rsr_at_bt_ord INV).\nrewrite !set_inter_absorb_r by basic_solver.\nrewrite !set_collect_eq.\nrewrite rsr_mapper_at, rsr_mapper_bt; auto.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20.\nassert (NINA : ~ E_t a_t).\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite set_collect_empty, eqv_empty.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\nrewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t)","proofString":"assert (INB : E_t b_t) by now apply (rsr_at_bt_ord INV).\nrewrite !set_inter_absorb_r by basic_solver.\nrewrite !set_collect_eq.\nrewrite rsr_mapper_at, rsr_mapper_bt; auto.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t)","proofString":"rewrite !set_inter_absorb_r by basic_solver.\nrewrite !set_collect_eq.\nrewrite rsr_mapper_at, rsr_mapper_bt; auto.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq b_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq b_t⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq b_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq b_t⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t)","proofString":"rewrite !set_collect_eq.\nrewrite rsr_mapper_at, rsr_mapper_bt; auto.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq (mapper b_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq (mapper a_t)⦘\n  ∪ ⦗eq (mapper b_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq (mapper a_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq (mapper a_t)⦘ ⨾ ext_sb ⨾ ⦗eq (mapper b_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq (mapper b_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq (mapper a_t)⦘\n  ∪ ⦗eq (mapper b_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq (mapper a_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq (mapper a_t)⦘ ⨾ ext_sb ⨾ ⦗eq (mapper b_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t)","proofString":"rewrite rsr_mapper_at, rsr_mapper_bt; auto.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t)","proofString":"change (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t) : sb_t\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"sb_t\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t)","proofString":"rewrite rsr_rex_sb_split.\nrewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t)","proofString":"rewrite !set_inter_absorb_r by basic_solver.\nbasic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n  ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (INA : E_t a_t) (INB : E_t b_t)","proofString":"basic_solver 20."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t)","proofString":"assert (NINA : ~ E_t a_t).\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite set_collect_empty, eqv_empty.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\nrewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) : ~ E_t a_t.","conclusion":"~ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t)","proofString":"intro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (FALSO : E_t a_t) : False.","conclusion":"False","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (FALSO : E_t a_t)","proofString":"now apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t)","proofString":"arewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite set_collect_empty, eqv_empty.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\nrewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t)","proofString":"arewrite (eq b_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite set_collect_empty, eqv_empty.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\nrewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t)","proofString":"rewrite set_collect_empty, eqv_empty.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\nrewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n  ∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂ ⨾ ext_sb ⨾ ∅₂.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n  ∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ∅₂ ⨾ ext_sb ⨾ ∅₂","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t)","proofString":"rewrite !seq_false_l, !seq_false_r, !union_false_r.\nrewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t)","proofString":"rewrite set_minus_minus_l, set_minus_disjoint; [reflexivity |].\napply set_disjoint_union_r; split; basic_solver."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t) : set_disjoint E_t (eq b_t ∪₁ eq a_t).","conclusion":"set_disjoint E_t (eq b_t ∪₁ eq a_t)","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NEQ : a_t <> b_t) (NINB : ~ E_t b_t) (NINA : ~ E_t a_t)","proofString":"apply set_disjoint_union_r; split; basic_solver."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n∪ (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘)\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n∪ (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘)\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘).\napply INV.\ndesf.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘).\nunfolder.\nins.\ndesf.\neapply ext_sb_irr.\neauto.\nrewrite !union_false_r.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split at 1.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite eqv_empty.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ∅₂.","conclusion":"⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ∅₂","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"apply INV.\ndesf."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ~ E_t a_t.","conclusion":"~ E_t a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"desf."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n∪ (∅₂ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘)\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n∪ (∅₂ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘)\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘).\nunfolder.\nins.\ndesf.\neapply ext_sb_irr.\neauto.\nrewrite !union_false_r.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split at 1.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite eqv_empty.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ⊆ ∅₂.","conclusion":"⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ⊆ ∅₂","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"unfolder.\nins.\ndesf.\neapply ext_sb_irr.\neauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : forall x y : actid, a_t = x /\\ ext_sb x y /\\ a_t = y -> False.","conclusion":"forall x y : actid, a_t = x /\\ ext_sb x y /\\ a_t = y -> False","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"ins.\ndesf.\neapply ext_sb_irr.\neauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) (x y : actid) (H : a_t = x /\\ ext_sb x y /\\ a_t = y) : False.","conclusion":"False","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t) (x y : actid) (H : a_t = x /\\ ext_sb x y /\\ a_t = y)","proofString":"desf.\neapply ext_sb_irr.\neauto."},{"statement":"(y : actid) (H0 : ext_sb y y) (NEMP : ~ E_t y) (NEMP0 : E_t b_t) : False.","conclusion":"False","hypotheses":"(y : actid) (H0 : ext_sb y y) (NEMP : ~ E_t y) (NEMP0 : E_t b_t)","proofString":"eapply ext_sb_irr.\neauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ (∅₂ ∪ ∅₂)\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ (∅₂ ∪ ∅₂)\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite !union_false_r.\nchange (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split at 1.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite eqv_empty.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"change (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) with sb_t.\nrewrite rsr_rex_sb_split at 1.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite eqv_empty.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : sb_t ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"sb_t ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite rsr_rex_sb_split at 1.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite eqv_empty.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq a_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t ∩₁ E_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (eq a_t ∩₁ E_t ≡₁ ∅) by basic_solver.\nrewrite eqv_empty.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗∅⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗∅⦘\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗∅⦘\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗∅⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗∅⦘\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite eqv_empty.\narewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite_false (⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘).\narewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV.\narewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ⊆ ∅₂.","conclusion":"⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ⊆ ∅₂","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (E_t \\₁ eq b_t ⊆₁ E_t) by basic_solver.\nnow apply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ∅₂.","conclusion":"⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ∅₂","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"now apply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ∅₂ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ eq b_t × eq a_t.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ∅₂ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite_false (⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘).\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⊆ ∅₂.","conclusion":"⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⊆ ∅₂","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ⊆₁ E_t) by basic_solver.\ntransitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ∅₂.","conclusion":"⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ∅₂","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"transitivity (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t); [| now apply INV].\nunfold sb.\nbasic_solver."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t.","conclusion":"⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"unfold sb.\nbasic_solver."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ⦗eq b_t ∩₁ E_t⦘ ⨾ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘.","conclusion":"⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘ ⊆ ⦗eq b_t ∩₁ E_t⦘ ⨾ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂ ∪ ∅₂\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ∅₂ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ eq b_t × eq a_t.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t ∩₁ E_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂ ∪ ∅₂\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t ∩₁ E_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ∅₂ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (eq b_t ∩₁ E_t ≡₁ eq b_t) by basic_solver.\nrewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂ ∪ ∅₂\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ∅₂ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ eq b_t × eq a_t.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ∅₂ ∪ ∅₂\n∪ ∅₂ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ∅₂\n∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ∅₂ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite !seq_false_l, !seq_false_r, !union_false_r.\ntransitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ \n⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ \n  eq b_t × eq a_t.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ \n⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"transitivity (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪    sb_t ⨾ ⦗eq b_t⦘ ∪    (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)  ); [| basic_solver 11].\narewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ \n⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t).","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ \n⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ (⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t)","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (    ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t ≡    ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘  ).\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t\n≡ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t\n≡ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; [| basic_solver].\nrewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t\n≡ ⦗E_t \\₁ eq b_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t\n≡ ⦗E_t \\₁ eq b_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite id_union, !seq_union_l.\napply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ eq b_t × eq a_t\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"apply union_more; [reflexivity |].\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : eq b_t × eq a_t ≡ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"eq b_t × eq a_t ≡ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"split; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\napply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : eq b_t × eq a_t ⊆ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"eq b_t × eq a_t ⊆ ⦗eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"unfolder.\nins.\ndesf.\nsplits; auto.\napply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : forall x y : actid, b_t = x /\\ a_t = y -> b_t = x /\\ ext_sb x y /\\ a_t = y.","conclusion":"forall x y : actid, b_t = x /\\ a_t = y -> b_t = x /\\ ext_sb x y /\\ a_t = y","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"ins.\ndesf.\nsplits; auto.\napply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) (x y : actid) (H : b_t = x /\\ a_t = y) : b_t = x /\\ ext_sb x y /\\ a_t = y.","conclusion":"b_t = x /\\ ext_sb x y /\\ a_t = y","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t) (x y : actid) (H : b_t = x /\\ a_t = y)","proofString":"desf.\nsplits; auto.\napply INV."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ \n⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ \n⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\napply set_minus_disjoint.\nbasic_solver.\narewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : (E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t.","conclusion":"(E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"apply set_minus_disjoint.\nbasic_solver."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : set_disjoint (E_t \\₁ eq b_t) (eq a_t).","conclusion":"set_disjoint (E_t \\₁ eq b_t) (eq a_t)","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ sb_t ⨾ ⦗eq b_t⦘\n  ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘).\nunfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto.\nreflexivity."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘.","conclusion":"sb_t ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"unfold sb.\nsplit; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘.","conclusion":"(⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) ⨾ ⦗eq b_t⦘ ≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"split; [| basic_solver].\nunfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) ⨾ ⦗eq b_t⦘ ⊆ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘.","conclusion":"(⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) ⨾ ⦗eq b_t⦘ ⊆ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"unfolder.\nins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : forall x y : actid,\nE_t x /\\ ext_sb x y /\\ E_t y /\\ b_t = y ->\n(E_t x /\\ b_t <> x) /\\ ext_sb x y /\\ b_t = y.","conclusion":"forall x y : actid,\nE_t x /\\ ext_sb x y /\\ E_t y /\\ b_t = y ->\n(E_t x /\\ b_t <> x) /\\ ext_sb x y /\\ b_t = y","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"ins.\ndesf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) (x y : actid) (H : E_t x /\\ ext_sb x y /\\ E_t y /\\ b_t = y) : (E_t x /\\ b_t <> x) /\\ ext_sb x y /\\ b_t = y.","conclusion":"(E_t x /\\ b_t <> x) /\\ ext_sb x y /\\ b_t = y","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t) (x y : actid) (H : E_t x /\\ ext_sb x y /\\ E_t y /\\ b_t = y)","proofString":"desf.\nsplits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(y : actid) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (x : actid) (H : E_t x) (H0 : ext_sb x y) (H1 : E_t y) : (E_t x /\\ y <> x) /\\ ext_sb x y /\\ y = y.","conclusion":"(E_t x /\\ y <> x) /\\ ext_sb x y /\\ y = y","hypotheses":"(y : actid) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (x : actid) (H : E_t x) (H0 : ext_sb x y) (H1 : E_t y)","proofString":"splits; auto.\nintro FALSO.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(y : actid) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (x : actid) (H : E_t x) (H0 : ext_sb x y) (H1 : E_t y) : y <> x.","conclusion":"y <> x","hypotheses":"(y : actid) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (x : actid) (H : E_t x) (H0 : ext_sb x y) (H1 : E_t y)","proofString":"intro FALSO.\ndesf.\neapply ext_sb_irr; eauto."},{"statement":"(y : actid) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (x : actid) (H : E_t x) (H0 : ext_sb x y) (H1 : E_t y) (FALSO : y = x) : False.","conclusion":"False","hypotheses":"(y : actid) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (x : actid) (H : E_t x) (H0 : ext_sb x y) (H1 : E_t y) (FALSO : y = x)","proofString":"desf.\neapply ext_sb_irr; eauto."},{"statement":"(x : actid) (NEMP : ~ E_t a_t) (NEMP0 H H1 : E_t x) (H0 : ext_sb x x) : False.","conclusion":"False","hypotheses":"(x : actid) (NEMP : ~ E_t a_t) (NEMP0 H H1 : E_t x) (H0 : ext_sb x x)","proofString":"eapply ext_sb_irr; eauto."},{"statement":"(NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘.","conclusion":"⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq b_t⦘ ∪ ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘","hypotheses":"(NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"reflexivity."},{"statement":"⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t).","conclusion":"⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t)","hypotheses":"","proofString":"simpl.\ndestruct classic      with (~(~E_t a_t /\\ E_t b_t))        as [EMP|NEMP'].\nrewrite !extra_a_none; auto.\nrewrite set_union_empty_r.\nrewrite cross_false_l, cross_false_r, !union_false_r.\narewrite (mapper ↑₁ E_t ≡₁ E_t).\napply rsr_setE_iff; [apply INV |].\nassert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\nrewrite mapped_swap_rel.\nnow apply new_G_s_sb_helper.\nassert (NEMP : ~E_t a_t /\\ E_t b_t) by tauto.\nrewrite extra_a_some by desf.\nrewrite rsr_mapper_bt by apply INV.\nrewrite mapped_swap_rel.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\nrewrite set_minus_disjoint; [reflexivity |].\nbasic_solver.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t).","conclusion":"⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t)","hypotheses":"","proofString":"destruct classic      with (~(~E_t a_t /\\ E_t b_t))        as [EMP|NEMP'].\nrewrite !extra_a_none; auto.\nrewrite set_union_empty_r.\nrewrite cross_false_l, cross_false_r, !union_false_r.\narewrite (mapper ↑₁ E_t ≡₁ E_t).\napply rsr_setE_iff; [apply INV |].\nassert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\nrewrite mapped_swap_rel.\nnow apply new_G_s_sb_helper.\nassert (NEMP : ~E_t a_t /\\ E_t b_t) by tauto.\nrewrite extra_a_some by desf.\nrewrite rsr_mapper_bt by apply INV.\nrewrite mapped_swap_rel.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\nrewrite set_minus_disjoint; [reflexivity |].\nbasic_solver.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : ⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t).","conclusion":"⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t)","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"rewrite !extra_a_none; auto.\nrewrite set_union_empty_r.\nrewrite cross_false_l, cross_false_r, !union_false_r.\narewrite (mapper ↑₁ E_t ≡₁ E_t).\napply rsr_setE_iff; [apply INV |].\nassert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\nrewrite mapped_swap_rel.\nnow apply new_G_s_sb_helper."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : ⦗mapper ↑₁ E_t ∪₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ ∅⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × ∅ ∪ ∅ × eq (mapper b_t).","conclusion":"⦗mapper ↑₁ E_t ∪₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ ∅⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × ∅ ∪ ∅ × eq (mapper b_t)","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"rewrite set_union_empty_r.\nrewrite cross_false_l, cross_false_r, !union_false_r.\narewrite (mapper ↑₁ E_t ≡₁ E_t).\napply rsr_setE_iff; [apply INV |].\nassert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\nrewrite mapped_swap_rel.\nnow apply new_G_s_sb_helper."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : ⦗mapper ↑₁ E_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × ∅ ∪ ∅ × eq (mapper b_t).","conclusion":"⦗mapper ↑₁ E_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × ∅ ∪ ∅ × eq (mapper b_t)","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"rewrite cross_false_l, cross_false_r, !union_false_r.\narewrite (mapper ↑₁ E_t ≡₁ E_t).\napply rsr_setE_iff; [apply INV |].\nassert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\nrewrite mapped_swap_rel.\nnow apply new_G_s_sb_helper."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : ⦗mapper ↑₁ E_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t).","conclusion":"⦗mapper ↑₁ E_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"arewrite (mapper ↑₁ E_t ≡₁ E_t).\napply rsr_setE_iff; [apply INV |].\nassert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV).\nrewrite mapped_swap_rel.\nnow apply new_G_s_sb_helper."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : mapper ↑₁ E_t ≡₁ E_t.","conclusion":"mapper ↑₁ E_t ≡₁ E_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"apply rsr_setE_iff; [apply INV |].\nassert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t.","conclusion":"E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"assert (ORG : E_t a_t \\/ ~E_t b_t) by tauto.\ndestruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (ORG : E_t a_t \\/ ~ E_t b_t) : E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t.","conclusion":"E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (ORG : E_t a_t \\/ ~ E_t b_t)","proofString":"destruct ORG as [INA | NINB].\nleft.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV).\nright.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (INA : E_t a_t) : E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t.","conclusion":"E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (INA : E_t a_t)","proofString":"left.\nsplit; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (INA : E_t a_t) : E_t b_t /\\ E_t a_t.","conclusion":"E_t b_t /\\ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (INA : E_t a_t)","proofString":"split; auto.\nnow apply (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (INA : E_t a_t) : E_t b_t.","conclusion":"E_t b_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (INA : E_t a_t)","proofString":"now apply (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t) : E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t.","conclusion":"E_t b_t /\\ E_t a_t \\/ ~ E_t b_t /\\ ~ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t)","proofString":"right.\nsplit; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t) : ~ E_t b_t /\\ ~ E_t a_t.","conclusion":"~ E_t b_t /\\ ~ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t)","proofString":"split; auto.\nintro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t) : ~ E_t a_t.","conclusion":"~ E_t a_t","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t)","proofString":"intro FALSO.\nnow apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t) (FALSO : E_t a_t) : False.","conclusion":"False","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) (NINB : ~ E_t b_t) (FALSO : E_t a_t)","proofString":"now apply NINB, (rsr_at_bt_ord INV)."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t).","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"rewrite mapped_swap_rel.\nnow apply new_G_s_sb_helper."},{"statement":"(EMP : ~ (~ E_t a_t /\\ E_t b_t)) : ⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘.","conclusion":"⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘","hypotheses":"(EMP : ~ (~ E_t a_t /\\ E_t b_t))","proofString":"now apply new_G_s_sb_helper."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) : ⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t).","conclusion":"⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t)","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t))","proofString":"assert (NEMP : ~E_t a_t /\\ E_t b_t) by tauto.\nrewrite extra_a_some by desf.\nrewrite rsr_mapper_bt by apply INV.\nrewrite mapped_swap_rel.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\nrewrite set_minus_disjoint; [reflexivity |].\nbasic_solver.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t).","conclusion":"⦗mapper ↑₁ E_t ∪₁ A_s⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ A_s⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × A_s ∪ \n  A_s × eq (mapper b_t)","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite extra_a_some by desf.\nrewrite rsr_mapper_bt by apply INV.\nrewrite mapped_swap_rel.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\nrewrite set_minus_disjoint; [reflexivity |].\nbasic_solver.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq (mapper b_t).","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq (mapper b_t)","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite rsr_mapper_bt by apply INV.\nrewrite mapped_swap_rel.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\nrewrite set_minus_disjoint; [reflexivity |].\nbasic_solver.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ mapper ↑ swap_rel sb_t (eq b_t ∩₁ E_t) (eq a_t ∩₁ E_t)\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite mapped_swap_rel.\narewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\nrewrite set_minus_disjoint; [reflexivity |].\nbasic_solver.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗(E_t \\₁ eq b_t) \\₁ eq a_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite ((E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t).\nrewrite set_minus_disjoint; [reflexivity |].\nbasic_solver.\narewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : (E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t.","conclusion":"(E_t \\₁ eq b_t) \\₁ eq a_t ≡₁ E_t \\₁ eq b_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite set_minus_disjoint; [reflexivity |].\nbasic_solver."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : set_disjoint (E_t \\₁ eq b_t) (eq a_t).","conclusion":"set_disjoint (E_t \\₁ eq b_t) (eq a_t)","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ (eq a_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (eq a_t ∩₁ E_t ≡₁ ∅).\nbasic_solver.\nrewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : eq a_t ∩₁ E_t ≡₁ ∅.","conclusion":"eq a_t ∩₁ E_t ≡₁ ∅","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ ∅⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ ∅⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite set_collect_empty, eqv_empty,          !seq_false_r, !seq_false_l.\nrewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ∪ ∅₂\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ ∅₂ ∪ ∅₂\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ∪ ∅₂\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘ ∪ ∅₂ ∪ ∅₂\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite !union_false_r.\narewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘\n  ∪ ⦗mapper ↑₁ (eq b_t ∩₁ E_t)⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (eq b_t ∩₁ E_t ≡₁ eq b_t).\nbasic_solver.\nrewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : eq b_t ∩₁ E_t ≡₁ eq b_t.","conclusion":"eq b_t ∩₁ E_t ≡₁ eq b_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ eq b_t⦘\n  ∪ ⦗mapper ↑₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite set_collect_eq, rsr_mapper_bt by apply INV.\narewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗mapper ↑₁ E_t ∪₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗mapper ↑₁ E_t ∪₁ eq b_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t).\nrewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver.\narewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t.","conclusion":"mapper ↑₁ E_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite rsr_setE_niff; try apply INV; desf.\nrewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t) : E_t \\₁ eq b_t ∪₁ eq a_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t.","conclusion":"E_t \\₁ eq b_t ∪₁ eq a_t ∪₁ eq b_t ≡₁ E_t ∪₁ eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t) (NEMP0 : E_t b_t)","proofString":"rewrite set_union_minus       with (s := E_t) (s' := eq b_t)         at 2; basic_solver."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t ∪₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∪₁ eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t.","conclusion":"⦗E_t ∪₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∪₁ eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ (mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)) × eq b_t ∪ \n  eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (    mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁    dom_rel (sb_t ⨾ ⦗eq b_t⦘)  ).\napply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf.\narewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘).","conclusion":"mapper ↑₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘) ≡₁ dom_rel (sb_t ⨾ ⦗eq b_t⦘)","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"apply rsr_setE_iff; [apply INV |].\nright.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : dom_rel (sb_t ⨾ ⦗eq b_t⦘) b_t /\\ dom_rel (sb_t ⨾ ⦗eq b_t⦘) a_t \\/\n~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) b_t /\\ ~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) a_t.","conclusion":"dom_rel (sb_t ⨾ ⦗eq b_t⦘) b_t /\\ dom_rel (sb_t ⨾ ⦗eq b_t⦘) a_t \\/\n~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) b_t /\\ ~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"right.\nsplit; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) b_t /\\ ~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) a_t.","conclusion":"~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) b_t /\\ ~ dom_rel (sb_t ⨾ ⦗eq b_t⦘) a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"split; unfolder; intro FALSO; desf.\neapply sb_irr; eauto.\nunfold sb in FALSO.\nunfolder in FALSO.\ndesf."},{"statement":"(y : actid) (FALSO : sb_t y y) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) : False.","conclusion":"False","hypotheses":"(y : actid) (FALSO : sb_t y y) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y)","proofString":"eapply sb_irr; eauto."},{"statement":"(y : actid) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (FALSO : sb_t a_t y) : False.","conclusion":"False","hypotheses":"(y : actid) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (FALSO : sb_t a_t y)","proofString":"unfold sb in FALSO.\nunfolder in FALSO.\ndesf."},{"statement":"(y : actid) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (FALSO : (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) a_t y) : False.","conclusion":"False","hypotheses":"(y : actid) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (FALSO : (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) a_t y)","proofString":"unfolder in FALSO.\ndesf."},{"statement":"(y : actid) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (FALSO : E_t a_t /\\ ext_sb a_t y /\\ E_t y) : False.","conclusion":"False","hypotheses":"(y : actid) (NEMP' : ~ ~ (~ E_t a_t /\\ E_t y)) (NEMP : ~ E_t a_t) (NEMP0 : E_t y) (FALSO : E_t a_t /\\ ext_sb a_t y /\\ E_t y)","proofString":"desf."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t ∪₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∪₁ eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ∪ eq b_t × eq a_t.","conclusion":"⦗E_t ∪₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∪₁ eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ∪ eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"arewrite (    dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘  ).\nbasic_solver.\nnow apply new_G_s_sb_helper'."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘.","conclusion":"dom_rel (sb_t ⨾ ⦗eq b_t⦘) × eq b_t ≡ sb_t ⨾ ⦗eq b_t⦘","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t) : ⦗E_t ∪₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∪₁ eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t.","conclusion":"⦗E_t ∪₁ eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t ∪₁ eq a_t⦘\n≡ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ ⦗E_t \\₁ eq b_t⦘ ⨾ ext_sb ⨾ ⦗eq a_t⦘ ∪ ⦗eq a_t⦘ ⨾ ext_sb ⨾ ⦗E_t \\₁ eq b_t⦘\n  ∪ sb_t ⨾ ⦗eq b_t⦘ ∪ eq b_t × eq a_t","hypotheses":"(NEMP' : ~ ~ (~ E_t a_t /\\ E_t b_t)) (NEMP : ~ E_t a_t /\\ E_t b_t)","proofString":"now apply new_G_s_sb_helper'."},{"statement":"(NEQ : a_t <> b_t) : mapper ↑₁ E_t ⊆₁ E_s \\₁ A_s.","conclusion":"mapper ↑₁ E_t ⊆₁ E_s \\₁ A_s","hypotheses":"(NEQ : a_t <> b_t)","proofString":"simpl.\nrewrite set_minus_union_l, set_minusK,          set_union_empty_r.\nrewrite set_minus_disjoint; [reflexivity |].\nunfold extra_a; desf.\nunfolder.\nins.\ndesf.\nenough (y = a_t) by desf.\nnow apply (rsr_mapper_inv_bt _ NEQ)."},{"statement":"(NEQ : a_t <> b_t) : mapper ↑₁ E_t ⊆₁ (mapper ↑₁ E_t ∪₁ A_s) \\₁ A_s.","conclusion":"mapper ↑₁ E_t ⊆₁ (mapper ↑₁ E_t ∪₁ A_s) \\₁ A_s","hypotheses":"(NEQ : a_t <> b_t)","proofString":"rewrite set_minus_union_l, set_minusK,          set_union_empty_r.\nrewrite set_minus_disjoint; [reflexivity |].\nunfold extra_a; desf.\nunfolder.\nins.\ndesf.\nenough (y = a_t) by desf.\nnow apply (rsr_mapper_inv_bt _ NEQ)."},{"statement":"(NEQ : a_t <> b_t) : mapper ↑₁ E_t ⊆₁ mapper ↑₁ E_t \\₁ A_s.","conclusion":"mapper ↑₁ E_t ⊆₁ mapper ↑₁ E_t \\₁ A_s","hypotheses":"(NEQ : a_t <> b_t)","proofString":"rewrite set_minus_disjoint; [reflexivity |].\nunfold extra_a; desf.\nunfolder.\nins.\ndesf.\nenough (y = a_t) by desf.\nnow apply (rsr_mapper_inv_bt _ NEQ)."},{"statement":"(NEQ : a_t <> b_t) : set_disjoint (mapper ↑₁ E_t) A_s.","conclusion":"set_disjoint (mapper ↑₁ E_t) A_s","hypotheses":"(NEQ : a_t <> b_t)","proofString":"unfold extra_a; desf.\nunfolder.\nins.\ndesf.\nenough (y = a_t) by desf.\nnow apply (rsr_mapper_inv_bt _ NEQ)."},{"statement":"(NEQ : a_t <> b_t) (a : ~ E_t a_t /\\ E_t b_t) : set_disjoint (mapper ↑₁ E_t) (eq b_t).","conclusion":"set_disjoint (mapper ↑₁ E_t) (eq b_t)","hypotheses":"(NEQ : a_t <> b_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"unfolder.\nins.\ndesf.\nenough (y = a_t) by desf.\nnow apply (rsr_mapper_inv_bt _ NEQ)."},{"statement":"(NEQ : a_t <> b_t) (a : ~ E_t a_t /\\ E_t b_t) : forall x : actid,\n(exists y : actid, E_t y /\\ mapper y = x) -> b_t = x -> False.","conclusion":"forall x : actid,\n(exists y : actid, E_t y /\\ mapper y = x) -> b_t = x -> False","hypotheses":"(NEQ : a_t <> b_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"ins.\ndesf.\nenough (y = a_t) by desf.\nnow apply (rsr_mapper_inv_bt _ NEQ)."},{"statement":"(NEQ : a_t <> b_t) (a : ~ E_t a_t /\\ E_t b_t) (x : actid) (IN : exists y : actid, E_t y /\\ mapper y = x) (IN' : b_t = x) : False.","conclusion":"False","hypotheses":"(NEQ : a_t <> b_t) (a : ~ E_t a_t /\\ E_t b_t) (x : actid) (IN : exists y : actid, E_t y /\\ mapper y = x) (IN' : b_t = x)","proofString":"desf.\nenough (y = a_t) by desf.\nnow apply (rsr_mapper_inv_bt _ NEQ)."},{"statement":"mapper ↑₁ E_t ⊆₁ mapper ↑₁ E_t ∪₁ A_s.","conclusion":"mapper ↑₁ E_t ⊆₁ mapper ↑₁ E_t ∪₁ A_s","hypotheses":"","proofString":"basic_solver."},{"statement":"(RFV : drf_s'' ⊆ ⦗Val_s_'' (WCore.lab_val l_a)⦘ ⨾ drf_s'') : drf_s''\n⊆ (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n   ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a).","conclusion":"drf_s''\n⊆ (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n   ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a)","hypotheses":"(RFV : drf_s'' ⊆ ⦗Val_s_'' (WCore.lab_val l_a)⦘ ⨾ drf_s'')","proofString":"rewrite RFV, fake_srfD_left, fake_srfE_left,          fake_srfl.\nbasic_solver."},{"statement":"(RFV : drf_s'' ⊆ ⦗Val_s_'' (WCore.lab_val l_a)⦘ ⨾ drf_s'') : ⦗Val_s_'' (WCore.lab_val l_a)⦘\n⨾ (⦗W_s''⦘\n   ⨾ ⦗E_s''⦘ ⨾ ⦗Loc_s_'' (WCore.lab_loc l_a)⦘ ⨾ fake_srf G_s'' b_t l_a)\n  ⨾ ⦗A_s ∩₁ WCore.lab_is_r l_a⦘\n⊆ (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n   ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a).","conclusion":"⦗Val_s_'' (WCore.lab_val l_a)⦘\n⨾ (⦗W_s''⦘\n   ⨾ ⦗E_s''⦘ ⨾ ⦗Loc_s_'' (WCore.lab_loc l_a)⦘ ⨾ fake_srf G_s'' b_t l_a)\n  ⨾ ⦗A_s ∩₁ WCore.lab_is_r l_a⦘\n⊆ (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n   ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a)","hypotheses":"(RFV : drf_s'' ⊆ ⦗Val_s_'' (WCore.lab_val l_a)⦘ ⨾ drf_s'')","proofString":"basic_solver."},{"statement":"drf_s'' ⊆ ⦗Val_s_'' (WCore.lab_val l_a)⦘ ⨾ drf_s''.","conclusion":"drf_s'' ⊆ ⦗Val_s_'' (WCore.lab_val l_a)⦘ ⨾ drf_s''","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nsplits; auto.\napply LVAL.\ndo 2 eexists.\nsplit; eauto.\nbasic_solver."},{"statement":"forall x y : actid,\nfake_srf G_s'' b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y ->\nval_s'' x = WCore.lab_val l_a /\\\nfake_srf G_s'' b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y.","conclusion":"forall x y : actid,\nfake_srf G_s'' b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y ->\nval_s'' x = WCore.lab_val l_a /\\\nfake_srf G_s'' b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y","hypotheses":"","proofString":"ins.\ndesf.\nsplits; auto.\napply LVAL.\ndo 2 eexists.\nsplit; eauto.\nbasic_solver."},{"statement":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y) : val (lab_t ∘ mapper) x = WCore.lab_val l_a /\\\nfake_srf rsr_imm_g b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y.","conclusion":"val (lab_t ∘ mapper) x = WCore.lab_val l_a /\\\nfake_srf rsr_imm_g b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y","hypotheses":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y)","proofString":"desf.\nsplits; auto.\napply LVAL.\ndo 2 eexists.\nsplit; eauto.\nbasic_solver."},{"statement":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y) (H0 : A_s y) (H1 : WCore.lab_is_r l_a y) : val (lab_t ∘ mapper) x = WCore.lab_val l_a /\\\nfake_srf rsr_imm_g b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y.","conclusion":"val (lab_t ∘ mapper) x = WCore.lab_val l_a /\\\nfake_srf rsr_imm_g b_t l_a x y /\\ A_s y /\\ WCore.lab_is_r l_a y","hypotheses":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y) (H0 : A_s y) (H1 : WCore.lab_is_r l_a y)","proofString":"splits; auto.\napply LVAL.\ndo 2 eexists.\nsplit; eauto.\nbasic_solver."},{"statement":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y) (H0 : A_s y) (H1 : WCore.lab_is_r l_a y) : val (lab_t ∘ mapper) x = WCore.lab_val l_a.","conclusion":"val (lab_t ∘ mapper) x = WCore.lab_val l_a","hypotheses":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y) (H0 : A_s y) (H1 : WCore.lab_is_r l_a y)","proofString":"apply LVAL.\ndo 2 eexists.\nsplit; eauto.\nbasic_solver."},{"statement":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y) (H0 : A_s y) (H1 : WCore.lab_is_r l_a y) : dom_rel (fake_srf rsr_imm_g b_t l_a ⨾ ⦗A_s ∩₁ WCore.lab_is_r l_a⦘) x.","conclusion":"dom_rel (fake_srf rsr_imm_g b_t l_a ⨾ ⦗A_s ∩₁ WCore.lab_is_r l_a⦘) x","hypotheses":"(x y : actid) (H : fake_srf rsr_imm_g b_t l_a x y) (H0 : A_s y) (H1 : WCore.lab_is_r l_a y)","proofString":"do 2 eexists.\nsplit; eauto.\nbasic_solver."},{"statement":"(fun x : actid =>\n match lab_s'' x with\n | Astore _ _ _ _ => true\n | _ => false\n end) ∩₁ E_s''\n⊆₁ (fun x : actid =>\n    match lab_s x with\n    | Astore _ _ _ _ => true\n    | _ => false\n    end).","conclusion":"(fun x : actid =>\n match lab_s'' x with\n | Astore _ _ _ _ => true\n | _ => false\n end) ∩₁ E_s''\n⊆₁ (fun x : actid =>\n    match lab_s x with\n    | Astore _ _ _ _ => true\n    | _ => false\n    end)","hypotheses":"","proofString":"unfolder.\nintros x (ISW & XIN).\nrewrite rsr_rexi in ISW; auto."},{"statement":"(x : actid) (ISW : match lab_s'' x with\n| Astore _ _ _ _ => true\n| _ => false\nend) (XIN : E_s'' x) : match lab_s x with\n| Astore _ _ _ _ => true\n| _ => false\nend.","conclusion":"match lab_s x with\n| Astore _ _ _ _ => true\n| _ => false\nend","hypotheses":"(x : actid) (ISW : match lab_s'' x with\n| Astore _ _ _ _ => true\n| _ => false\nend) (XIN : E_s'' x)","proofString":"rewrite rsr_rexi in ISW; auto."},{"statement":"(fun x : actid =>\n match lab_s'' x with\n | Aload _ _ _ _ => true\n | _ => false\n end) ∩₁ E_s''\n⊆₁ (fun x : actid =>\n    match lab_s x with\n    | Aload _ _ _ _ => true\n    | _ => false\n    end).","conclusion":"(fun x : actid =>\n match lab_s'' x with\n | Aload _ _ _ _ => true\n | _ => false\n end) ∩₁ E_s''\n⊆₁ (fun x : actid =>\n    match lab_s x with\n    | Aload _ _ _ _ => true\n    | _ => false\n    end)","hypotheses":"","proofString":"unfolder.\nintros x (ISR & XIN).\nrewrite rsr_rexi in ISR; auto."},{"statement":"(x : actid) (ISR : match lab_s'' x with\n| Aload _ _ _ _ => true\n| _ => false\nend) (XIN : E_s'' x) : match lab_s x with\n| Aload _ _ _ _ => true\n| _ => false\nend.","conclusion":"match lab_s x with\n| Aload _ _ _ _ => true\n| _ => false\nend","hypotheses":"(x : actid) (ISR : match lab_s'' x with\n| Aload _ _ _ _ => true\n| _ => false\nend) (XIN : E_s'' x)","proofString":"rewrite rsr_rexi in ISR; auto."},{"statement":"⦗E_s''⦘\n⨾ (fun x y : actid =>\n   match lab_s'' x with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end =\n   match lab_s'' y with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end) ⨾ ⦗E_s''⦘\n⊆ (fun x y : actid =>\n   match lab_s x with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end =\n   match lab_s y with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end).","conclusion":"⦗E_s''⦘\n⨾ (fun x y : actid =>\n   match lab_s'' x with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end =\n   match lab_s'' y with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end) ⨾ ⦗E_s''⦘\n⊆ (fun x y : actid =>\n   match lab_s x with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end =\n   match lab_s y with\n   | Aload _ _ l _ | Astore _ _ l _ => Some l\n   | Afence _ => None\n   end)","hypotheses":"","proofString":"unfolder.\nintros x y (XIN & EQLOC & YIN).\nrewrite !rsr_rexi in EQLOC; auto."},{"statement":"forall x y : actid,\nE_s'' x /\\\nmatch lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend /\\ E_s'' y ->\nmatch lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"forall x y : actid,\nE_s'' x /\\\nmatch lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend /\\ E_s'' y ->\nmatch lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"","proofString":"intros x y (XIN & EQLOC & YIN).\nrewrite !rsr_rexi in EQLOC; auto."},{"statement":"(x y : actid) (XIN : E_s'' x) (EQLOC : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (YIN : E_s'' y) : match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(x y : actid) (XIN : E_s'' x) (EQLOC : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (YIN : E_s'' y)","proofString":"rewrite !rsr_rexi in EQLOC; auto."},{"statement":"⦗E_s''⦘\n⨾ (fun x y : actid =>\n   match lab_s'' x with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end =\n   match lab_s'' y with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end) ⨾ ⦗E_s''⦘\n⊆ (fun x y : actid =>\n   match lab_s x with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end =\n   match lab_s y with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end).","conclusion":"⦗E_s''⦘\n⨾ (fun x y : actid =>\n   match lab_s'' x with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end =\n   match lab_s'' y with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end) ⨾ ⦗E_s''⦘\n⊆ (fun x y : actid =>\n   match lab_s x with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end =\n   match lab_s y with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end)","hypotheses":"","proofString":"unfolder.\nintros x y (XIN & EQVAL & YIN).\nrewrite !rsr_rexi in EQVAL; auto."},{"statement":"forall x y : actid,\nE_s'' x /\\\nmatch lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend /\\ E_s'' y ->\nmatch lab_s x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend.","conclusion":"forall x y : actid,\nE_s'' x /\\\nmatch lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend /\\ E_s'' y ->\nmatch lab_s x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend","hypotheses":"","proofString":"intros x y (XIN & EQVAL & YIN).\nrewrite !rsr_rexi in EQVAL; auto."},{"statement":"(x y : actid) (XIN : E_s'' x) (EQVAL : match lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend) (YIN : E_s'' y) : match lab_s x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend.","conclusion":"match lab_s x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend","hypotheses":"(x y : actid) (XIN : E_s'' x) (EQVAL : match lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s'' y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend) (YIN : E_s'' y)","proofString":"rewrite !rsr_rexi in EQVAL; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq b_t ∩₁ WCore.lab_is_r l_a ⊆₁ R_s.","conclusion":"eq b_t ∩₁ WCore.lab_is_r l_a ⊆₁ R_s","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite <- rsr_rex_isr_helper by desf.\nbasic_solver."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq b_t ∩₁ R_s ⊆₁ R_s.","conclusion":"eq b_t ∩₁ R_s ⊆₁ R_s","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq b_t ∩₁ WCore.lab_is_w l_a ⊆₁ W_s.","conclusion":"eq b_t ∩₁ WCore.lab_is_w l_a ⊆₁ W_s","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite <- rsr_rex_isw_helper by desf.\nbasic_solver."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) : eq b_t ∩₁ W_s ⊆₁ W_s.","conclusion":"eq b_t ∩₁ W_s ⊆₁ W_s","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') : rmw_s ⊆ immediate sb_s.","conclusion":"rmw_s ⊆ immediate sb_s","hypotheses":"(WF_s : Wf G_s'')","proofString":"arewrite (    rmw_s ≡      ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾        rmw_s ⨾          ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘  ).\napply G_s_wf_rmwD.\nrewrite (wf_rmwi WF_s).\nrewrite !immediateE.\nremember (E_s \\₁ (eq b_t ∪₁ eq a_t)) as DD.\nrewrite <- seq_eqv_minus_lr, <- seq_eqv_minus_ll.\nassert (HELP :    ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆      sb_s \\ sb_s ⨾ sb_s  ).\napply minus_rel_mori; [| unfold flip; reflexivity].\nunfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver.\nrewrite <- HELP.\nintros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') : rmw_s ≡ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ rmw_s ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘.","conclusion":"rmw_s ≡ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ rmw_s ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘","hypotheses":"(WF_s : Wf G_s'')","proofString":"apply G_s_wf_rmwD."},{"statement":"(WF_s : Wf G_s'') : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ rmw_s ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⊆ immediate sb_s.","conclusion":"⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ rmw_s ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⊆ immediate sb_s","hypotheses":"(WF_s : Wf G_s'')","proofString":"rewrite (wf_rmwi WF_s).\nrewrite !immediateE.\nremember (E_s \\₁ (eq b_t ∪₁ eq a_t)) as DD.\nrewrite <- seq_eqv_minus_lr, <- seq_eqv_minus_ll.\nassert (HELP :    ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆      sb_s \\ sb_s ⨾ sb_s  ).\napply minus_rel_mori; [| unfold flip; reflexivity].\nunfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver.\nrewrite <- HELP.\nintros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ immediate sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⊆ immediate sb_s.","conclusion":"⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ immediate sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⊆ immediate sb_s","hypotheses":"(WF_s : Wf G_s'')","proofString":"rewrite !immediateE.\nremember (E_s \\₁ (eq b_t ∪₁ eq a_t)) as DD.\nrewrite <- seq_eqv_minus_lr, <- seq_eqv_minus_ll.\nassert (HELP :    ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆      sb_s \\ sb_s ⨾ sb_s  ).\napply minus_rel_mori; [| unfold flip; reflexivity].\nunfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver.\nrewrite <- HELP.\nintros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⨾ (sb_s'' \\ sb_s'' ⨾ sb_s'') ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⊆ sb_s \\ sb_s ⨾ sb_s.","conclusion":"⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⨾ (sb_s'' \\ sb_s'' ⨾ sb_s'') ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘\n⊆ sb_s \\ sb_s ⨾ sb_s","hypotheses":"(WF_s : Wf G_s'')","proofString":"remember (E_s \\₁ (eq b_t ∪₁ eq a_t)) as DD.\nrewrite <- seq_eqv_minus_lr, <- seq_eqv_minus_ll.\nassert (HELP :    ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆      sb_s \\ sb_s ⨾ sb_s  ).\napply minus_rel_mori; [| unfold flip; reflexivity].\nunfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver.\nrewrite <- HELP.\nintros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) : ⦗DD⦘ ⨾ (sb_s'' \\ sb_s'' ⨾ sb_s'') ⨾ ⦗DD⦘ ⊆ sb_s \\ sb_s ⨾ sb_s.","conclusion":"⦗DD⦘ ⨾ (sb_s'' \\ sb_s'' ⨾ sb_s'') ⨾ ⦗DD⦘ ⊆ sb_s \\ sb_s ⨾ sb_s","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t))","proofString":"rewrite <- seq_eqv_minus_lr, <- seq_eqv_minus_ll.\nassert (HELP :    ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆      sb_s \\ sb_s ⨾ sb_s  ).\napply minus_rel_mori; [| unfold flip; reflexivity].\nunfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver.\nrewrite <- HELP.\nintros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s'' ⨾ sb_s'' ⊆ sb_s \\ sb_s ⨾ sb_s.","conclusion":"⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s'' ⨾ sb_s'' ⊆ sb_s \\ sb_s ⨾ sb_s","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t))","proofString":"assert (HELP :    ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆      sb_s \\ sb_s ⨾ sb_s  ).\napply minus_rel_mori; [| unfold flip; reflexivity].\nunfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver.\nrewrite <- HELP.\nintros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s.","conclusion":"⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t))","proofString":"apply minus_rel_mori; [| unfold flip; reflexivity].\nunfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ ⊆ sb_s.","conclusion":"⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t))","proofString":"unfold sb.\nrewrite rsr_imm_G_sub.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) : ⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘ ⊆ ⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘.","conclusion":"⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘ ⊆ ⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t))","proofString":"rewrite rsr_imm_G_sub.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) : ⦗DD⦘ ⨾ (⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) ⨾ ⦗DD⦘ ⊆ ⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘.","conclusion":"⦗DD⦘ ⨾ (⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) ⨾ ⦗DD⦘ ⊆ ⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t))","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s'' ⨾ sb_s'' ⊆ sb_s \\ sb_s ⨾ sb_s.","conclusion":"⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s'' ⨾ sb_s'' ⊆ sb_s \\ sb_s ⨾ sb_s","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s)","proofString":"rewrite <- HELP.\nintros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s'' ⨾ sb_s'' ⊆ ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s.","conclusion":"⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s'' ⨾ sb_s'' ⊆ ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s)","proofString":"intros x y (SB & NSB).\nsplit; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s) x y.","conclusion":"(⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s) x y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y)","proofString":"split; auto.\nintro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) : ~ (sb_s ⨾ sb_s) x y.","conclusion":"~ (sb_s ⨾ sb_s) x y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y)","proofString":"intro FALSO.\napply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (FALSO : (sb_s ⨾ sb_s) x y) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (FALSO : (sb_s ⨾ sb_s) x y)","proofString":"apply NSB.\ndestruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (FALSO : (sb_s ⨾ sb_s) x y) : (sb_s'' ⨾ sb_s'') x y.","conclusion":"(sb_s'' ⨾ sb_s'') x y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (FALSO : (sb_s ⨾ sb_s) x y)","proofString":"destruct FALSO as (z & F1 & F2).\nassert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) : (sb_s'' ⨾ sb_s'') x y.","conclusion":"(sb_s'' ⨾ sb_s'') x y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y)","proofString":"assert (XIN : E_s'' x).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nassert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) : E_s'' x.","conclusion":"E_s'' x","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y)","proofString":"forward apply SB.\nunfold sb.\nclear.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y -> E_s'' x.","conclusion":"(⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y -> E_s'' x","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y)","proofString":"unfold sb.\nclear.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) : (⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' x.","conclusion":"(⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' x","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y)","proofString":"clear.\nbasic_solver."},{"statement":"(DD : actid -> Prop) (x y : actid) : (⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' x.","conclusion":"(⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' x","hypotheses":"(DD : actid -> Prop) (x y : actid)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) : (sb_s'' ⨾ sb_s'') x y.","conclusion":"(sb_s'' ⨾ sb_s'') x y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x)","proofString":"assert (YIN : E_s'' y).\nforward apply SB.\nunfold sb.\nclear.\nbasic_solver.\nenough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) : E_s'' y.","conclusion":"E_s'' y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x)","proofString":"forward apply SB.\nunfold sb.\nclear.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y -> E_s'' y.","conclusion":"(⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y -> E_s'' y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x)","proofString":"unfold sb.\nclear.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) : (⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' y.","conclusion":"(⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x)","proofString":"clear.\nbasic_solver."},{"statement":"(DD : actid -> Prop) (x y : actid) : (⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' y.","conclusion":"(⦗DD⦘ ⨾ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) ⨾ ⦗DD⦘) x y -> E_s'' y","hypotheses":"(DD : actid -> Prop) (x y : actid)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) : (sb_s'' ⨾ sb_s'') x y.","conclusion":"(sb_s'' ⨾ sb_s'') x y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y)","proofString":"enough (ZIN : E_s'' z).\nexists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11.\nassert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z) : (sb_s'' ⨾ sb_s'') x y.","conclusion":"(sb_s'' ⨾ sb_s'') x y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z)","proofString":"exists z.\nforward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z) : sb_s'' x z /\\ sb_s'' z y.","conclusion":"sb_s'' x z /\\ sb_s'' z y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z)","proofString":"forward apply F1.\nforward apply F2.\nunfold sb.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z) : sb_s x z -> sb_s'' x z /\\ sb_s'' z y.","conclusion":"sb_s x z -> sb_s'' x z /\\ sb_s'' z y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z)","proofString":"forward apply F2.\nunfold sb.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z) : sb_s z y -> sb_s x z -> sb_s'' x z /\\ sb_s'' z y.","conclusion":"sb_s z y -> sb_s x z -> sb_s'' x z /\\ sb_s'' z y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z)","proofString":"unfold sb.\nbasic_solver 11."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z) : (⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) z y ->\n(⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) x z ->\n(⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) x z /\\ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) z y.","conclusion":"(⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) z y ->\n(⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) x z ->\n(⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) x z /\\ (⦗E_s''⦘ ⨾ ext_sb ⨾ ⦗E_s''⦘) z y","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s'' z)","proofString":"basic_solver 11."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) : E_s'' z.","conclusion":"E_s'' z","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y)","proofString":"assert (ZIN : E_s z).\nforward apply F1.\nunfold sb.\nbasic_solver.\ndestruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) : E_s z.","conclusion":"E_s z","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y)","proofString":"forward apply F1.\nunfold sb.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) : sb_s x z -> E_s z.","conclusion":"sb_s x z -> E_s z","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y)","proofString":"unfold sb.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) : (⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) x z -> E_s z.","conclusion":"(⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) x z -> E_s z","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s z) : E_s'' z.","conclusion":"E_s'' z","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : E_s z)","proofString":"destruct ZIN as [ZIN|ZIN]; auto.\nunfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : A_s z) : E_s'' z.","conclusion":"E_s'' z","hypotheses":"(WF_s : Wf G_s'') (DD : actid -> Prop) (HeqDD : DD = E_s \\₁ (eq b_t ∪₁ eq a_t)) (HELP : ⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘ \\ sb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗DD⦘ ⨾ sb_s'' ⨾ ⦗DD⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (z : actid) (F1 : sb_s x z) (F2 : sb_s z y) (XIN : E_s'' x) (YIN : E_s'' y) (ZIN : A_s z)","proofString":"unfold extra_a in ZIN; desf.\nexfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) : E_s'' b_t.","conclusion":"E_s'' b_t","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"exfalso.\nassert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"assert (YNB : y <> b_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\nassert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) : y <> b_t.","conclusion":"y <> b_t","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"intro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (FALSO : y = b_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (FALSO : y = b_t)","proofString":"subst y.\nforward apply SB.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t b_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x b_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x b_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' b_t) (a : ~ E_t a_t /\\ E_t b_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t b_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x b_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x b_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' b_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"forward apply SB.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t b_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x b_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x b_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' b_t) (a : ~ E_t a_t /\\ E_t b_t) : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x b_t ->\nFalse.","conclusion":"(⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x b_t ->\nFalse","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t b_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x b_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x b_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' b_t) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t)","proofString":"assert (YNA : y <> a_t).\nintro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver.\napply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t) : y <> a_t.","conclusion":"y <> a_t","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t)","proofString":"intro FALSO.\nsubst y.\nforward apply SB.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t) (FALSO : y = a_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t) (FALSO : y = a_t)","proofString":"subst y.\nforward apply SB.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t a_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x a_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x a_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' a_t) (a : ~ E_t a_t /\\ E_t b_t) (YNB : a_t <> b_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t a_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x a_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x a_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' a_t) (a : ~ E_t a_t /\\ E_t b_t) (YNB : a_t <> b_t)","proofString":"forward apply SB.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t a_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x a_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x a_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' a_t) (a : ~ E_t a_t /\\ E_t b_t) (YNB : a_t <> b_t) : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x a_t ->\nFalse.","conclusion":"(⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x a_t ->\nFalse","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (F2 : sb_s b_t a_t) (NSB : ~ (sb_s'' ⨾ sb_s'') x a_t) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x a_t) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' a_t) (a : ~ E_t a_t /\\ E_t b_t) (YNB : a_t <> b_t)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t /\\ E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"apply (rsr_bt_max INV) with b_t y; desf.\nunfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : (⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t) b_t y.","conclusion":"(⦗eq b_t ∩₁ E_t⦘ ⨾ sb_t) b_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"unfolder.\nsplits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : (b_t = b_t /\\ E_t b_t) /\\ sb_t b_t y.","conclusion":"(b_t = b_t /\\ E_t b_t) /\\ sb_t b_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"splits; auto.\nunfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : sb_t b_t y.","conclusion":"sb_t b_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"unfold sb.\nunfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : (⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) b_t y.","conclusion":"(⦗E_t⦘ ⨾ ext_sb ⨾ ⦗E_t⦘) b_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"unfolder.\nsplits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : E_t b_t /\\ ext_sb b_t y /\\ E_t y.","conclusion":"E_t b_t /\\ ext_sb b_t y /\\ E_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"splits; auto.\nforward apply F2.\nunfold sb.\nbasic_solver.\ndestruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : ext_sb b_t y.","conclusion":"ext_sb b_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"forward apply F2.\nunfold sb.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : sb_s b_t y -> ext_sb b_t y.","conclusion":"sb_s b_t y -> ext_sb b_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"unfold sb.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : (⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) b_t y -> ext_sb b_t y.","conclusion":"(⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘) b_t y -> ext_sb b_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : E_t y.","conclusion":"E_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_s'' y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"destruct YIN as (y' & YIN & YEQ).\nsubst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (y' : actid) (YIN : E_t y') (YEQ : mapper y' = y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t) : E_t y.","conclusion":"E_t y","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x y) (NSB : ~ (sb_s'' ⨾ sb_s'') x y) (F2 : sb_s b_t y) (F1 : sb_s x b_t) (XIN : E_s'' x) (y' : actid) (YIN : E_t y') (YEQ : mapper y' = y) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : y <> b_t) (YNA : y <> a_t)","proofString":"subst y.\nrewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t) : E_t (mapper y').","conclusion":"E_t (mapper y')","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t)","proofString":"rewrite rsr_mappero; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto.\nintro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t) : y' <> a_t.","conclusion":"y' <> a_t","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t)","proofString":"intro FALSO.\nsubst y'.\nrewrite rsr_mapper_at in YNB; auto."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t) (FALSO : y' = a_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t) (FALSO : y' = a_t)","proofString":"subst y'.\nrewrite rsr_mapper_at in YNB; auto."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper a_t)) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper a_t)) (F2 : sb_s b_t (mapper a_t)) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t a_t) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : mapper a_t <> b_t) (YNA : mapper a_t <> a_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper a_t)) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper a_t)) (F2 : sb_s b_t (mapper a_t)) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t a_t) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : mapper a_t <> b_t) (YNA : mapper a_t <> a_t)","proofString":"rewrite rsr_mapper_at in YNB; auto."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t) : y' <> b_t.","conclusion":"y' <> b_t","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t)","proofString":"intro FALSO.\nsubst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t) (FALSO : y' = b_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x y' : actid) (F2 : sb_s b_t (mapper y')) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper y')) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper y')) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t y') (a : ~ E_t a_t) (a0 : E_t b_t) (YNA : mapper y' <> a_t) (YNB : mapper y' <> b_t) (FALSO : y' = b_t)","proofString":"subst y'.\nrewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper b_t)) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper b_t)) (F2 : sb_s b_t (mapper b_t)) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t b_t) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : mapper b_t <> b_t) (YNA : mapper b_t <> a_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper b_t)) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper b_t)) (F2 : sb_s b_t (mapper b_t)) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t b_t) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : mapper b_t <> b_t) (YNA : mapper b_t <> a_t)","proofString":"rewrite rsr_mapper_bt in YNA; auto.\napply INV."},{"statement":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper b_t)) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper b_t)) (F2 : sb_s b_t (mapper b_t)) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t b_t) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : mapper b_t <> b_t) (YNA : mapper b_t <> a_t) : a_t <> b_t.","conclusion":"a_t <> b_t","hypotheses":"(WF_s : Wf G_s'') (HELP : ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ \\\nsb_s ⨾ sb_s ⊆ sb_s \\ sb_s ⨾ sb_s) (x : actid) (SB : (⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘ ⨾ sb_s'' ⨾ ⦗E_s \\₁ (eq b_t ∪₁ eq a_t)⦘) x\n  (mapper b_t)) (NSB : ~ (sb_s'' ⨾ sb_s'') x (mapper b_t)) (F2 : sb_s b_t (mapper b_t)) (F1 : sb_s x b_t) (XIN : E_s'' x) (YIN : E_t b_t) (a : ~ E_t a_t) (a0 : E_t b_t) (YNB : mapper b_t <> b_t) (YNA : mapper b_t <> a_t)","proofString":"apply INV."},{"statement":"(WF_s : Wf G_s'') : Wf G_s.","conclusion":"Wf G_s","hypotheses":"(WF_s : Wf G_s'')","proofString":"assert (WF_t : Wf G_t) by apply INV.\nassert (NINIB : ~is_init b_t) by apply INV.\nassert (NINIA : ~is_init a_t) by apply INV.\nassert (EXAIM : A_s ⊆₁ E_s).\nsimpl.\nbasic_solver.\nconstructor.\nintros x y (XIN & YIN & NEQ & TEQ & NINI).\nenough (NIN : ~is_init y).\ndestruct x, y; ins; desf; congruence.\ndestruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\napply dom_helper_3.\nsimpl.\nrewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite (wf_rmwE WF_s), (wf_rmwl WF_s).\napply rsr_wf_loc_helper.\napply new_G_s_wf_rmw.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_rfE WF_s).\nbasic_solver.\nrewrite rsr_drf_doms, rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite rsr_drf_doms, set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfl WF_s).\napply rsr_wf_loc_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\nenough (VAL : rf_s ⊆ same_val_s).\napply VAL.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_func_rf.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_coE WF_s).\nbasic_solver.\nrewrite rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_coD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver.\nrewrite set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_col WF_s).\napply rsr_wf_loc_helper.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_trans_co.\napply rsr_total_co.\napply irreflexive_union.\nsplit; [apply rsr_imm_Gs_wf |].\nunfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf.\nintros l _.\nleft.\nexists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto.\nsimpl.\nunfold lab_s_, compose.\nintro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nsimpl.\nintros e [EIN | EX].\napply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto.\nunfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) : Wf G_s.","conclusion":"Wf G_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t)","proofString":"assert (NINIB : ~is_init b_t) by apply INV.\nassert (NINIA : ~is_init a_t) by apply INV.\nassert (EXAIM : A_s ⊆₁ E_s).\nsimpl.\nbasic_solver.\nconstructor.\nintros x y (XIN & YIN & NEQ & TEQ & NINI).\nenough (NIN : ~is_init y).\ndestruct x, y; ins; desf; congruence.\ndestruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\napply dom_helper_3.\nsimpl.\nrewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite (wf_rmwE WF_s), (wf_rmwl WF_s).\napply rsr_wf_loc_helper.\napply new_G_s_wf_rmw.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_rfE WF_s).\nbasic_solver.\nrewrite rsr_drf_doms, rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite rsr_drf_doms, set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfl WF_s).\napply rsr_wf_loc_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\nenough (VAL : rf_s ⊆ same_val_s).\napply VAL.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_func_rf.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_coE WF_s).\nbasic_solver.\nrewrite rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_coD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver.\nrewrite set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_col WF_s).\napply rsr_wf_loc_helper.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_trans_co.\napply rsr_total_co.\napply irreflexive_union.\nsplit; [apply rsr_imm_Gs_wf |].\nunfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf.\nintros l _.\nleft.\nexists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto.\nsimpl.\nunfold lab_s_, compose.\nintro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nsimpl.\nintros e [EIN | EX].\napply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto.\nunfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) : Wf G_s.","conclusion":"Wf G_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t)","proofString":"assert (NINIA : ~is_init a_t) by apply INV.\nassert (EXAIM : A_s ⊆₁ E_s).\nsimpl.\nbasic_solver.\nconstructor.\nintros x y (XIN & YIN & NEQ & TEQ & NINI).\nenough (NIN : ~is_init y).\ndestruct x, y; ins; desf; congruence.\ndestruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\napply dom_helper_3.\nsimpl.\nrewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite (wf_rmwE WF_s), (wf_rmwl WF_s).\napply rsr_wf_loc_helper.\napply new_G_s_wf_rmw.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_rfE WF_s).\nbasic_solver.\nrewrite rsr_drf_doms, rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite rsr_drf_doms, set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfl WF_s).\napply rsr_wf_loc_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\nenough (VAL : rf_s ⊆ same_val_s).\napply VAL.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_func_rf.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_coE WF_s).\nbasic_solver.\nrewrite rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_coD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver.\nrewrite set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_col WF_s).\napply rsr_wf_loc_helper.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_trans_co.\napply rsr_total_co.\napply irreflexive_union.\nsplit; [apply rsr_imm_Gs_wf |].\nunfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf.\nintros l _.\nleft.\nexists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto.\nsimpl.\nunfold lab_s_, compose.\nintro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nsimpl.\nintros e [EIN | EX].\napply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto.\nunfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) : Wf G_s.","conclusion":"Wf G_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t)","proofString":"assert (EXAIM : A_s ⊆₁ E_s).\nsimpl.\nbasic_solver.\nconstructor.\nintros x y (XIN & YIN & NEQ & TEQ & NINI).\nenough (NIN : ~is_init y).\ndestruct x, y; ins; desf; congruence.\ndestruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\napply dom_helper_3.\nsimpl.\nrewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite (wf_rmwE WF_s), (wf_rmwl WF_s).\napply rsr_wf_loc_helper.\napply new_G_s_wf_rmw.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_rfE WF_s).\nbasic_solver.\nrewrite rsr_drf_doms, rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite rsr_drf_doms, set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfl WF_s).\napply rsr_wf_loc_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\nenough (VAL : rf_s ⊆ same_val_s).\napply VAL.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_func_rf.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_coE WF_s).\nbasic_solver.\nrewrite rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_coD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver.\nrewrite set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_col WF_s).\napply rsr_wf_loc_helper.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_trans_co.\napply rsr_total_co.\napply irreflexive_union.\nsplit; [apply rsr_imm_Gs_wf |].\nunfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf.\nintros l _.\nleft.\nexists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto.\nsimpl.\nunfold lab_s_, compose.\nintro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nsimpl.\nintros e [EIN | EX].\napply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto.\nunfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) : A_s ⊆₁ E_s.","conclusion":"A_s ⊆₁ E_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t)","proofString":"simpl.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s.","conclusion":"A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : Wf G_s.","conclusion":"Wf G_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"constructor.\nintros x y (XIN & YIN & NEQ & TEQ & NINI).\nenough (NIN : ~is_init y).\ndestruct x, y; ins; desf; congruence.\ndestruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_ndata INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_naddr INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\nrewrite (rsr_nctrl INV).\nbasic_solver.\napply dom_helper_3.\nsimpl.\nrewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite (wf_rmwE WF_s), (wf_rmwl WF_s).\napply rsr_wf_loc_helper.\napply new_G_s_wf_rmw.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_rfE WF_s).\nbasic_solver.\nrewrite rsr_drf_doms, rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite rsr_drf_doms, set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfl WF_s).\napply rsr_wf_loc_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\nenough (VAL : rf_s ⊆ same_val_s).\napply VAL.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_func_rf.\napply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_coE WF_s).\nbasic_solver.\nrewrite rsr_imm_G_sub, EXAIM.\nbasic_solver.\napply dom_helper_3, inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_coD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver.\nrewrite set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver.\napply inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_col WF_s).\napply rsr_wf_loc_helper.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto.\napply rsr_trans_co.\napply rsr_total_co.\napply irreflexive_union.\nsplit; [apply rsr_imm_Gs_wf |].\nunfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf.\nintros l _.\nleft.\nexists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto.\nsimpl.\nunfold lab_s_, compose.\nintro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nrewrite (rsr_nrmw_dep INV).\nbasic_solver.\nsimpl.\nintros e [EIN | EX].\napply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto.\nunfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall a b : actid,\nE_s a /\\ E_s b /\\ a <> b /\\ tid a = tid b /\\ ~ is_init a ->\nindex a <> index b.","conclusion":"forall a b : actid,\nE_s a /\\ E_s b /\\ a <> b /\\ tid a = tid b /\\ ~ is_init a ->\nindex a <> index b","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"intros x y (XIN & YIN & NEQ & TEQ & NINI).\nenough (NIN : ~is_init y).\ndestruct x, y; ins; desf; congruence.\ndestruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (x y : actid) (XIN : E_s x) (YIN : E_s y) (NEQ : x <> y) (TEQ : tid x = tid y) (NINI : ~ is_init x) : index x <> index y.","conclusion":"index x <> index y","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (x y : actid) (XIN : E_s x) (YIN : E_s y) (NEQ : x <> y) (TEQ : tid x = tid y) (NINI : ~ is_init x)","proofString":"enough (NIN : ~is_init y).\ndestruct x, y; ins; desf; congruence.\ndestruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (x y : actid) (XIN : E_s x) (YIN : E_s y) (NEQ : x <> y) (TEQ : tid x = tid y) (NINI : ~ is_init x) (NIN : ~ is_init y) : index x <> index y.","conclusion":"index x <> index y","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (x y : actid) (XIN : E_s x) (YIN : E_s y) (NEQ : x <> y) (TEQ : tid x = tid y) (NINI : ~ is_init x) (NIN : ~ is_init y)","proofString":"destruct x, y; ins; desf; congruence."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (x y : actid) (XIN : E_s x) (YIN : E_s y) (NEQ : x <> y) (TEQ : tid x = tid y) (NINI : ~ is_init x) : ~ is_init y.","conclusion":"~ is_init y","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (x y : actid) (XIN : E_s x) (YIN : E_s y) (NEQ : x <> y) (TEQ : tid x = tid y) (NINI : ~ is_init x)","proofString":"destruct y as [yl | yt yn]; ins.\nexfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver."},{"statement":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (x : actid) (yl : location) (XIN : (mapper ↑₁ E_t ∪₁ A_s) x) (YIN : (mapper ↑₁ E_t ∪₁ A_s) (InitEvent yl)) (NEQ : x <> InitEvent yl) (TEQ : tid x = tid_init) (NINI : ~ is_init x) : ~ true.","conclusion":"~ true","hypotheses":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (x : actid) (yl : location) (XIN : (mapper ↑₁ E_t ∪₁ A_s) x) (YIN : (mapper ↑₁ E_t ∪₁ A_s) (InitEvent yl)) (NEQ : x <> InitEvent yl) (TEQ : tid x = tid_init) (NINI : ~ is_init x)","proofString":"exfalso.\napply NINI, new_G_s_wf_idx.\nbasic_solver."},{"statement":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (x : actid) (yl : location) (XIN : (mapper ↑₁ E_t ∪₁ A_s) x) (YIN : (mapper ↑₁ E_t ∪₁ A_s) (InitEvent yl)) (NEQ : x <> InitEvent yl) (TEQ : tid x = tid_init) (NINI : ~ is_init x) : False.","conclusion":"False","hypotheses":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (x : actid) (yl : location) (XIN : (mapper ↑₁ E_t ∪₁ A_s) x) (YIN : (mapper ↑₁ E_t ∪₁ A_s) (InitEvent yl)) (NEQ : x <> InitEvent yl) (TEQ : tid x = tid_init) (NINI : ~ is_init x)","proofString":"apply NINI, new_G_s_wf_idx.\nbasic_solver."},{"statement":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (x : actid) (yl : location) (XIN : (mapper ↑₁ E_t ∪₁ A_s) x) (YIN : (mapper ↑₁ E_t ∪₁ A_s) (InitEvent yl)) (NEQ : x <> InitEvent yl) (TEQ : tid x = tid_init) (NINI : ~ is_init x) : (E_s ∩₁ Tid_ tid_init) x.","conclusion":"(E_s ∩₁ Tid_ tid_init) x","hypotheses":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (x : actid) (yl : location) (XIN : (mapper ↑₁ E_t ∪₁ A_s) x) (YIN : (mapper ↑₁ E_t ∪₁ A_s) (InitEvent yl)) (NEQ : x <> InitEvent yl) (TEQ : tid x = tid_init) (NINI : ~ is_init x)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : data_s ⊆ sb_s.","conclusion":"data_s ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_ndata INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ⊆ sb_s.","conclusion":"∅₂ ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : data_s ≡ ⦗R_s⦘ ⨾ data_s ⨾ ⦗W_s⦘.","conclusion":"data_s ≡ ⦗R_s⦘ ⨾ data_s ⨾ ⦗W_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_ndata INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂ ⨾ ⦗W_s⦘.","conclusion":"∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂ ⨾ ⦗W_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : addr_s ⊆ sb_s.","conclusion":"addr_s ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_naddr INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ⊆ sb_s.","conclusion":"∅₂ ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : addr_s ≡ ⦗R_s⦘ ⨾ addr_s ⨾ ⦗R_s ∪₁ W_s⦘.","conclusion":"addr_s ≡ ⦗R_s⦘ ⨾ addr_s ⨾ ⦗R_s ∪₁ W_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_naddr INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂ ⨾ ⦗R_s ∪₁ W_s⦘.","conclusion":"∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂ ⨾ ⦗R_s ∪₁ W_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ctrl_s ⊆ sb_s.","conclusion":"ctrl_s ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_nctrl INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ⊆ sb_s.","conclusion":"∅₂ ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ctrl_s ≡ ⦗R_s⦘ ⨾ ctrl_s.","conclusion":"ctrl_s ≡ ⦗R_s⦘ ⨾ ctrl_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_nctrl INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂.","conclusion":"∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ctrl_s ⨾ sb_s ⊆ ctrl_s.","conclusion":"ctrl_s ⨾ sb_s ⊆ ctrl_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_nctrl INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ⨾ sb_s ⊆ ∅₂.","conclusion":"∅₂ ⨾ sb_s ⊆ ∅₂","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rmw_s ≡ ⦗R_s⦘ ⨾ rmw_s ⨾ ⦗W_s⦘.","conclusion":"rmw_s ≡ ⦗R_s⦘ ⨾ rmw_s ⨾ ⦗W_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply dom_helper_3.\nsimpl.\nrewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rmw_s ⊆ R_s × W_s.","conclusion":"rmw_s ⊆ R_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"simpl.\nrewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ rmw_t\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a).","conclusion":"mapper ↑ rmw_t\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_rmwE WF_s), (wf_rmwD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ (⦗R_s''⦘ ⨾ rmw_s'' ⨾ ⦗W_s''⦘) ⨾ ⦗E_s''⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a).","conclusion":"⦗E_s''⦘ ⨾ (⦗R_s''⦘ ⨾ rmw_s'' ⨾ ⦗W_s''⦘) ⨾ ⦗E_s''⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ ⦗R_s''⦘ ⨾ rmw_s'' ⨾ ⦗W_s''⦘ ⨾ ⦗E_s''⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a).","conclusion":"⦗E_s''⦘ ⨾ ⦗R_s''⦘ ⨾ rmw_s'' ⨾ ⦗W_s''⦘ ⨾ ⦗E_s''⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"seq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s'' ∩₁ R_s''⦘ ⨾ rmw_s'' ⨾ ⦗W_s'' ∩₁ E_s''⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a).","conclusion":"⦗E_s'' ∩₁ R_s''⦘ ⨾ rmw_s'' ⨾ ⦗W_s'' ∩₁ E_s''⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗R_s⦘ ⨾ rmw_s'' ⨾ ⦗W_s⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a).","conclusion":"⦗R_s⦘ ⨾ rmw_s'' ⨾ ⦗W_s⦘\n⊆ (fun a : actid => is_r lab_s_ a) × (fun a : actid => is_w lab_s_ a)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rmw_s ⊆ same_loc_s.","conclusion":"rmw_s ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_rmwE WF_s), (wf_rmwl WF_s).\napply rsr_wf_loc_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ same_loc_s'' ⨾ ⦗E_s''⦘ ⊆ same_loc_s.","conclusion":"⦗E_s''⦘ ⨾ same_loc_s'' ⨾ ⦗E_s''⦘ ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply rsr_wf_loc_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rmw_s ⊆ immediate sb_s.","conclusion":"rmw_s ⊆ immediate sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply new_G_s_wf_rmw."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rf_s ≡ ⦗E_s⦘ ⨾ rf_s ⨾ ⦗E_s⦘.","conclusion":"rf_s ≡ ⦗E_s⦘ ⨾ rf_s ⨾ ⦗E_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_rfE WF_s).\nbasic_solver.\nrewrite rsr_drf_doms, rsr_imm_G_sub, EXAIM.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ rf_t ⊆ E_s × E_s.","conclusion":"mapper ↑ rf_t ⊆ E_s × E_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite <- rsr_imm_G_sub.\nrewrite (wf_rfE WF_s).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ rf_t ⊆ E_s'' × E_s''.","conclusion":"mapper ↑ rf_t ⊆ E_s'' × E_s''","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_rfE WF_s).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘ ⊆ E_s'' × E_s''.","conclusion":"⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘ ⊆ E_s'' × E_s''","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : drf_s'' ⊆ E_s × E_s.","conclusion":"drf_s'' ⊆ E_s × E_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite rsr_drf_doms, rsr_imm_G_sub, EXAIM.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (E_s ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a) ∩₁ Val_s_'' (WCore.lab_val l_a))\n× (E_s ∩₁ WCore.lab_is_r l_a) ⊆ E_s × E_s.","conclusion":"(E_s ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a) ∩₁ Val_s_'' (WCore.lab_val l_a))\n× (E_s ∩₁ WCore.lab_is_r l_a) ⊆ E_s × E_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rf_s ≡ ⦗W_s⦘ ⨾ rf_s ⨾ ⦗R_s⦘.","conclusion":"rf_s ≡ ⦗W_s⦘ ⨾ rf_s ⨾ ⦗R_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply dom_helper_3, inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver.\nrewrite rsr_drf_doms, set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ rf_t ⊆ W_s × R_s.","conclusion":"mapper ↑ rf_t ⊆ W_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_rfE WF_s), (wf_rfD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ (⦗W_s''⦘ ⨾ rf_s'' ⨾ ⦗R_s''⦘) ⨾ ⦗E_s''⦘ ⊆ W_s × R_s.","conclusion":"⦗E_s''⦘ ⨾ (⦗W_s''⦘ ⨾ rf_s'' ⨾ ⦗R_s''⦘) ⨾ ⦗E_s''⦘ ⊆ W_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ ⦗W_s''⦘ ⨾ rf_s'' ⨾ ⦗R_s''⦘ ⨾ ⦗E_s''⦘ ⊆ W_s × R_s.","conclusion":"⦗E_s''⦘ ⨾ ⦗W_s''⦘ ⨾ rf_s'' ⨾ ⦗R_s''⦘ ⨾ ⦗E_s''⦘ ⊆ W_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"seq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s'' ∩₁ W_s''⦘ ⨾ rf_s'' ⨾ ⦗R_s'' ∩₁ E_s''⦘ ⊆ W_s × R_s.","conclusion":"⦗E_s'' ∩₁ W_s''⦘ ⨾ rf_s'' ⨾ ⦗R_s'' ∩₁ E_s''⦘ ⊆ W_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite set_interC, rsr_wf_r_helper, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗W_s⦘ ⨾ rf_s'' ⨾ ⦗R_s⦘ ⊆ W_s × R_s.","conclusion":"⦗W_s⦘ ⨾ rf_s'' ⨾ ⦗R_s⦘ ⊆ W_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : drf_s'' ⊆ W_s × R_s.","conclusion":"drf_s'' ⊆ W_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite rsr_drf_doms, set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (W_s'' ∩₁ E_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a) ⊆ \nW_s × R_s.","conclusion":"(W_s'' ∩₁ E_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a) ⊆ \nW_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite rsr_wf_w_helper, exa_isr_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (W_s ∩₁ Loc_s_'' (WCore.lab_loc l_a) ∩₁ Val_s_'' (WCore.lab_val l_a)) × R_s\n⊆ W_s × R_s.","conclusion":"(W_s ∩₁ Loc_s_'' (WCore.lab_loc l_a) ∩₁ Val_s_'' (WCore.lab_val l_a)) × R_s\n⊆ W_s × R_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rf_s ⊆ same_loc_s.","conclusion":"rf_s ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply inclusion_union_l.\nrewrite (wf_rfE WF_s), (wf_rfl WF_s).\napply rsr_wf_loc_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ rf_t ⊆ same_loc_s.","conclusion":"mapper ↑ rf_t ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_rfE WF_s), (wf_rfl WF_s).\napply rsr_wf_loc_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ same_loc_s'' ⨾ ⦗E_s''⦘ ⊆ same_loc_s.","conclusion":"⦗E_s''⦘ ⨾ same_loc_s'' ⨾ ⦗E_s''⦘ ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply rsr_wf_loc_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : drf_s'' ⊆ same_loc_s.","conclusion":"drf_s'' ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a) ⊆ same_loc_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a) ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"unfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a))\n× ((ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ∩₁ WCore.lab_is_r l_a)\n⊆ same_loc_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a))\n× ((ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ∩₁ WCore.lab_is_r l_a)\n⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ⊆₁ E_s)","proofString":"desf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (eq b_t ∩₁ WCore.lab_is_r l_a)\n⊆ same_loc_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (eq b_t ∩₁ WCore.lab_is_r l_a)\n⊆ same_loc_s","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s)","proofString":"unfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) : forall x y : actid,\n(((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y ->\nsame_loc_s x y.","conclusion":"forall x y : actid,\n(((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y ->\nsame_loc_s x y","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s)","proofString":"intros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x y : actid) (H : (((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y) : same_loc_s x y.","conclusion":"same_loc_s x y","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x y : actid) (H : (((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y)","proofString":"desf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t) : same_loc_s x b_t.","conclusion":"same_loc_s x b_t","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t)","proofString":"unfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = WCore.lab_loc l_a) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t) : match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = WCore.lab_loc l_a) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t)","proofString":"rewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = loc_s b_t) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t) : match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = loc_s b_t) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t)","proofString":"rewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : funeq val_s rf_s.","conclusion":"funeq val_s rf_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"enough (VAL : rf_s ⊆ same_val_s).\napply VAL.\napply inclusion_union_l.\nrewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (VAL : rf_s ⊆ same_val_s) : funeq val_s rf_s.","conclusion":"funeq val_s rf_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (VAL : rf_s ⊆ same_val_s)","proofString":"apply VAL."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rf_s ⊆ same_val_s.","conclusion":"rf_s ⊆ same_val_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply inclusion_union_l.\nrewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper.\nrewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ rf_t ⊆ same_val_s.","conclusion":"mapper ↑ rf_t ⊆ same_val_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_rfE WF_s).\narewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘ ⊆ same_val_s.","conclusion":"⦗E_s''⦘ ⨾ rf_s'' ⨾ ⦗E_s''⦘ ⊆ same_val_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"arewrite (rf_s'' ⊆ same_val_s'').\napply WF_s.\napply rsr_wf_val_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rf_s'' ⊆ same_val_s''.","conclusion":"rf_s'' ⊆ same_val_s''","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply WF_s."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ same_val_s'' ⨾ ⦗E_s''⦘ ⊆ same_val_s.","conclusion":"⦗E_s''⦘ ⨾ same_val_s'' ⨾ ⦗E_s''⦘ ⊆ same_val_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply rsr_wf_val_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : drf_s'' ⊆ same_val_s.","conclusion":"drf_s'' ⊆ same_val_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite rsr_drf_doms.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a) ⊆ same_val_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (A_s ∩₁ WCore.lab_is_r l_a) ⊆ same_val_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"unfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a))\n× ((ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ∩₁ WCore.lab_is_r l_a)\n⊆ same_val_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a))\n× ((ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ∩₁ WCore.lab_is_r l_a)\n⊆ same_val_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ⊆₁ E_s)","proofString":"desf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (eq b_t ∩₁ WCore.lab_is_r l_a)\n⊆ same_val_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)\n ∩₁ Val_s_'' (WCore.lab_val l_a)) × (eq b_t ∩₁ WCore.lab_is_r l_a)\n⊆ same_val_s","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s)","proofString":"unfolder.\nintros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) : forall x y : actid,\n(((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y ->\nsame_val_s x y.","conclusion":"forall x y : actid,\n(((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y ->\nsame_val_s x y","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s)","proofString":"intros.\ndesf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x y : actid) (H : (((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y) : same_val_s x y.","conclusion":"same_val_s x y","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x y : actid) (H : (((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\n val_s'' x = WCore.lab_val l_a) /\\ b_t = y /\\ WCore.lab_is_r l_a y)","proofString":"desf.\nunfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t) : same_val_s x b_t.","conclusion":"same_val_s x b_t","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : val_s'' x = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t)","proofString":"unfold val in *.\nrewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : match lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t) : same_val_s x b_t.","conclusion":"same_val_s x b_t","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : match lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend = WCore.lab_val l_a) (H1 : WCore.lab_is_r l_a b_t)","proofString":"rewrite <- rsr_rex_labval_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : match lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend = val_s b_t) (H1 : WCore.lab_is_r l_a b_t) : same_val_s x b_t.","conclusion":"same_val_s x b_t","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H4 : is_w lab_s'' x) (H3 : loc_s'' x = WCore.lab_loc l_a) (H2 : match lab_s'' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend = val_s b_t) (H1 : WCore.lab_is_r l_a b_t)","proofString":"rewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : functional rf_s⁻¹.","conclusion":"functional rf_s⁻¹","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply rsr_func_rf."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : co_s ≡ ⦗E_s⦘ ⨾ co_s ⨾ ⦗E_s⦘.","conclusion":"co_s ≡ ⦗E_s⦘ ⨾ co_s ⨾ ⦗E_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply dom_helper_3, inclusion_union_l.\nrewrite <- rsr_imm_G_sub.\nrewrite (wf_coE WF_s).\nbasic_solver.\nrewrite rsr_imm_G_sub, EXAIM.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ co_t ⊆ E_s × E_s.","conclusion":"mapper ↑ co_t ⊆ E_s × E_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite <- rsr_imm_G_sub.\nrewrite (wf_coE WF_s).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ co_t ⊆ E_s'' × E_s''.","conclusion":"mapper ↑ co_t ⊆ E_s'' × E_s''","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_coE WF_s).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ co_s'' ⨾ ⦗E_s''⦘ ⊆ E_s'' × E_s''.","conclusion":"⦗E_s''⦘ ⨾ co_s'' ⨾ ⦗E_s''⦘ ⊆ E_s'' × E_s''","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ E_s × E_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ E_s × E_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite rsr_imm_G_sub, EXAIM.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (E_s ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)) × (E_s ∩₁ WCore.lab_is_w l_a)\n⊆ E_s × E_s.","conclusion":"(E_s ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a)) × (E_s ∩₁ WCore.lab_is_w l_a)\n⊆ E_s × E_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : co_s ≡ ⦗W_s⦘ ⨾ co_s ⨾ ⦗W_s⦘.","conclusion":"co_s ≡ ⦗W_s⦘ ⨾ co_s ⨾ ⦗W_s⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply dom_helper_3, inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_coD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver.\nrewrite set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ co_t ⊆ W_s × W_s.","conclusion":"mapper ↑ co_t ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_coE WF_s), (wf_coD WF_s).\nrewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ (⦗W_s''⦘ ⨾ co_s'' ⨾ ⦗W_s''⦘) ⨾ ⦗E_s''⦘ ⊆ W_s × W_s.","conclusion":"⦗E_s''⦘ ⨾ (⦗W_s''⦘ ⨾ co_s'' ⨾ ⦗W_s''⦘) ⨾ ⦗E_s''⦘ ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite !seqA.\nseq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ ⦗W_s''⦘ ⨾ co_s'' ⨾ ⦗W_s''⦘ ⨾ ⦗E_s''⦘ ⊆ W_s × W_s.","conclusion":"⦗E_s''⦘ ⨾ ⦗W_s''⦘ ⨾ co_s'' ⨾ ⦗W_s''⦘ ⨾ ⦗E_s''⦘ ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"seq_rewrite <- !id_inter.\nrewrite set_interC, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s'' ∩₁ W_s''⦘ ⨾ co_s'' ⨾ ⦗W_s'' ∩₁ E_s''⦘ ⊆ W_s × W_s.","conclusion":"⦗E_s'' ∩₁ W_s''⦘ ⨾ co_s'' ⨾ ⦗W_s'' ∩₁ E_s''⦘ ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite set_interC, rsr_wf_w_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗W_s⦘ ⨾ co_s'' ⨾ ⦗W_s⦘ ⊆ W_s × W_s.","conclusion":"⦗W_s⦘ ⨾ co_s'' ⨾ ⦗W_s⦘ ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ W_s × W_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite set_interC with (s := E_s'').\nrewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (W_s'' ∩₁ E_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ W_s × W_s.","conclusion":"(W_s'' ∩₁ E_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite rsr_wf_w_helper, exa_isw_helper.\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (W_s ∩₁ Loc_s_'' (WCore.lab_loc l_a)) × W_s ⊆ W_s × W_s.","conclusion":"(W_s ∩₁ Loc_s_'' (WCore.lab_loc l_a)) × W_s ⊆ W_s × W_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : co_s ⊆ same_loc_s.","conclusion":"co_s ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply inclusion_union_l.\nrewrite (wf_coE WF_s), (wf_col WF_s).\napply rsr_wf_loc_helper.\nunfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : mapper ↑ co_t ⊆ same_loc_s.","conclusion":"mapper ↑ co_t ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (wf_coE WF_s), (wf_col WF_s).\napply rsr_wf_loc_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ⦗E_s''⦘ ⨾ same_loc_s'' ⨾ ⦗E_s''⦘ ⊆ same_loc_s.","conclusion":"⦗E_s''⦘ ⨾ same_loc_s'' ⨾ ⦗E_s''⦘ ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply rsr_wf_loc_helper."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ same_loc_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (A_s ∩₁ WCore.lab_is_w l_a) ⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"unfold extra_a in *.\ndesf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× ((ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ∩₁ WCore.lab_is_w l_a)\n⊆ same_loc_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× ((ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ∩₁ WCore.lab_is_w l_a)\n⊆ same_loc_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) ⊆₁ E_s)","proofString":"desf; [| basic_solver].\nunfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) : (E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (eq b_t ∩₁ WCore.lab_is_w l_a) ⊆ same_loc_s.","conclusion":"(E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n× (eq b_t ∩₁ WCore.lab_is_w l_a) ⊆ same_loc_s","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s)","proofString":"unfolder.\nintros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) : forall x y : actid,\n((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\nb_t = y /\\ WCore.lab_is_w l_a y -> same_loc_s x y.","conclusion":"forall x y : actid,\n((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\nb_t = y /\\ WCore.lab_is_w l_a y -> same_loc_s x y","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s)","proofString":"intros.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x y : actid) (H : ((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\nb_t = y /\\ WCore.lab_is_w l_a y) : same_loc_s x y.","conclusion":"same_loc_s x y","hypotheses":"(a : ~ E_t a_t /\\ E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x y : actid) (H : ((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\nb_t = y /\\ WCore.lab_is_w l_a y)","proofString":"desf.\nunfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H3 : is_w lab_s'' x) (H2 : loc_s'' x = WCore.lab_loc l_a) (H1 : WCore.lab_is_w l_a b_t) : same_loc_s x b_t.","conclusion":"same_loc_s x b_t","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H3 : is_w lab_s'' x) (H2 : loc_s'' x = WCore.lab_loc l_a) (H1 : WCore.lab_is_w l_a b_t)","proofString":"unfold same_loc, loc in *.\nrewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H3 : is_w lab_s'' x) (H2 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = WCore.lab_loc l_a) (H1 : WCore.lab_is_w l_a b_t) : match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H3 : is_w lab_s'' x) (H2 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = WCore.lab_loc l_a) (H1 : WCore.lab_is_w l_a b_t)","proofString":"rewrite <- rsr_rex_labloc_helper in *; auto.\nrewrite rsr_rexi in *; auto."},{"statement":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H3 : is_w lab_s'' x) (H2 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = loc_s b_t) (H1 : WCore.lab_is_w l_a b_t) : match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s b_t with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(a : ~ E_t a_t) (a0 : E_t b_t) (WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : eq b_t ⊆₁ E_s) (x : actid) (H : E_s'' x) (H3 : is_w lab_s'' x) (H2 : match lab_s'' x with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend = loc_s b_t) (H1 : WCore.lab_is_w l_a b_t)","proofString":"rewrite rsr_rexi in *; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : transitive co_s.","conclusion":"transitive co_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply rsr_trans_co."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall ol : option location, is_total (E_s ∩₁ W_s ∩₁ Loc_s_ ol) co_s.","conclusion":"forall ol : option location, is_total (E_s ∩₁ W_s ∩₁ Loc_s_ ol) co_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply rsr_total_co."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : irreflexive co_s.","conclusion":"irreflexive co_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"apply irreflexive_union.\nsplit; [apply rsr_imm_Gs_wf |].\nunfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : irreflexive (mapper ↑ co_t) /\\\nirreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (A_s ∩₁ WCore.lab_is_w l_a)).","conclusion":"irreflexive (mapper ↑ co_t) /\\\nirreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (A_s ∩₁ WCore.lab_is_w l_a))","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"split; [apply rsr_imm_Gs_wf |].\nunfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : irreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (A_s ∩₁ WCore.lab_is_w l_a)).","conclusion":"irreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (A_s ∩₁ WCore.lab_is_w l_a))","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"unfold extra_a; desf; [| basic_solver].\nassert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) : irreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (eq b_t ∩₁ WCore.lab_is_w l_a)).","conclusion":"irreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (eq b_t ∩₁ WCore.lab_is_w l_a))","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"assert (NINB' : ~E_s'' b_t) by (desf; eauto with xmm).\nunfolder.\nins.\ndesf."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) (NINB' : ~ E_s'' b_t) : irreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (eq b_t ∩₁ WCore.lab_is_w l_a)).","conclusion":"irreflexive\n  ((E_s'' ∩₁ W_s'' ∩₁ Loc_s_'' (WCore.lab_loc l_a))\n   × (eq b_t ∩₁ WCore.lab_is_w l_a))","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) (NINB' : ~ E_s'' b_t)","proofString":"unfolder.\nins.\ndesf."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) (NINB' : ~ E_s'' b_t) : forall x : actid,\n((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\nb_t = x /\\ WCore.lab_is_w l_a x -> False.","conclusion":"forall x : actid,\n((E_s'' x /\\ is_w lab_s'' x) /\\ loc_s'' x = WCore.lab_loc l_a) /\\\nb_t = x /\\ WCore.lab_is_w l_a x -> False","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) (NINB' : ~ E_s'' b_t)","proofString":"ins.\ndesf."},{"statement":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (a : ~ E_t a_t /\\ E_t b_t) (NINB' : ~ (mapper ↑₁ E_t) b_t) (x : actid) (H : (((mapper ↑₁ E_t) x /\\ is_w (lab_t ∘ mapper) x) /\\\n loc (lab_t ∘ mapper) x = WCore.lab_loc l_a) /\\\nb_t = x /\\ WCore.lab_is_w l_a x) : False.","conclusion":"False","hypotheses":"(WF_s : Wf rsr_imm_g) (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ mapper ↑₁ E_t ∪₁ A_s) (a : ~ E_t a_t /\\ E_t b_t) (NINB' : ~ (mapper ↑₁ E_t) b_t) (x : actid) (H : (((mapper ↑₁ E_t) x /\\ is_w (lab_t ∘ mapper) x) /\\\n loc (lab_t ∘ mapper) x = WCore.lab_loc l_a) /\\\nb_t = x /\\ WCore.lab_is_w l_a x)","proofString":"desf."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall l : location,\n(exists b : actid, E_s b /\\ loc_s b = Some l) -> E_s (InitEvent l).","conclusion":"forall l : location,\n(exists b : actid, E_s b /\\ loc_s b = Some l) -> E_s (InitEvent l)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"intros l _.\nleft.\nexists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : E_s (InitEvent l).","conclusion":"E_s (InitEvent l)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"left.\nexists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : (mapper ↑₁ E_t) (InitEvent l).","conclusion":"(mapper ↑₁ E_t) (InitEvent l)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"exists (InitEvent l).\nsplit; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : E_t (InitEvent l) /\\ mapper (InitEvent l) = InitEvent l.","conclusion":"E_t (InitEvent l) /\\ mapper (InitEvent l) = InitEvent l","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"split; [now apply (rsr_init_acts INV) |].\nrewrite rsr_mapper_init; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : mapper (InitEvent l) = InitEvent l.","conclusion":"mapper (InitEvent l) = InitEvent l","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"rewrite rsr_mapper_init; auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall l : location, lab_s (InitEvent l) = Astore Xpln Opln l 0.","conclusion":"forall l : location, lab_s (InitEvent l) = Astore Xpln Opln l 0","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"simpl.\nunfold lab_s_, compose.\nintro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall l : location, lab_s_ (InitEvent l) = Astore Xpln Opln l 0.","conclusion":"forall l : location, lab_s_ (InitEvent l) = Astore Xpln Opln l 0","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"unfold lab_s_, compose.\nintro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall l : location,\n(ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t)\n  (mapper (InitEvent l)) = Astore Xpln Opln l 0.","conclusion":"forall l : location,\n(ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t)\n  (mapper (InitEvent l)) = Astore Xpln Opln l 0","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"intro l.\nrewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t)\n  (mapper (InitEvent l)) = Astore Xpln Opln l 0.","conclusion":"(ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t)\n  (mapper (InitEvent l)) = Astore Xpln Opln l 0","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"rewrite rsr_mapper_init; auto.\ntransitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) (InitEvent l) =\nAstore Xpln Opln l 0.","conclusion":"(ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) (InitEvent l) =\nAstore Xpln Opln l 0","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"transitivity (lab_t (InitEvent l)).\ndesf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins.\napply WF_t."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : (ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) (InitEvent l) =\nlab_t (InitEvent l).","conclusion":"(ifP ~ E_t a_t /\\ E_t b_t then upd lab_t a_t l_a else lab_t) (InitEvent l) =\nlab_t (InitEvent l)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"desf.\nrewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) (a : ~ E_t a_t /\\ E_t b_t) : upd lab_t a_t l_a (InitEvent l) = lab_t (InitEvent l).","conclusion":"upd lab_t a_t l_a (InitEvent l) = lab_t (InitEvent l)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"rewrite updo; [reflexivity |].\nintro FALSO.\nrewrite <- FALSO in NINIA.\nins."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) (a : ~ E_t a_t /\\ E_t b_t) : InitEvent l <> a_t.","conclusion":"InitEvent l <> a_t","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"intro FALSO.\nrewrite <- FALSO in NINIA.\nins."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) (a : ~ E_t a_t /\\ E_t b_t) (FALSO : InitEvent l = a_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) (a : ~ E_t a_t /\\ E_t b_t) (FALSO : InitEvent l = a_t)","proofString":"rewrite <- FALSO in NINIA.\nins."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (l : location) (NINIA : ~ is_init (InitEvent l)) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) (FALSO : InitEvent l = a_t) : False.","conclusion":"False","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (l : location) (NINIA : ~ is_init (InitEvent l)) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) (FALSO : InitEvent l = a_t)","proofString":"ins."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location) : lab_t (InitEvent l) = Astore Xpln Opln l 0.","conclusion":"lab_t (InitEvent l) = Astore Xpln Opln l 0","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (l : location)","proofString":"apply WF_t."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rmw_dep_s ⊆ sb_s.","conclusion":"rmw_dep_s ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_nrmw_dep INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ⊆ sb_s.","conclusion":"∅₂ ⊆ sb_s","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : rmw_dep_s ≡ ⦗R_s⦘ ⨾ rmw_dep_s ⨾ ⦗fun a : actid => R_ex lab_s a⦘.","conclusion":"rmw_dep_s ≡ ⦗R_s⦘ ⨾ rmw_dep_s ⨾ ⦗fun a : actid => R_ex lab_s a⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"rewrite (rsr_nrmw_dep INV).\nbasic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : ∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂ ⨾ ⦗fun a : actid => R_ex lab_s a⦘.","conclusion":"∅₂ ≡ ⦗R_s⦘ ⨾ ∅₂ ⨾ ⦗fun a : actid => R_ex lab_s a⦘","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"basic_solver."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall e : actid, E_s e -> threads_set G_s (tid e).","conclusion":"forall e : actid, E_s e -> threads_set G_s (tid e)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"simpl.\nintros e [EIN | EX].\napply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto.\nunfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) : forall e : actid, (mapper ↑₁ E_t ∪₁ A_s) e -> threads_set G_t (tid e).","conclusion":"forall e : actid, (mapper ↑₁ E_t ∪₁ A_s) e -> threads_set G_t (tid e)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s)","proofString":"intros e [EIN | EX].\napply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto.\nunfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EIN : (mapper ↑₁ E_t) e) : threads_set G_t (tid e).","conclusion":"threads_set G_t (tid e)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EIN : (mapper ↑₁ E_t) e)","proofString":"apply (wf_threads (rsr_imm_Gs_wf)).\nsimpl.\nauto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EIN : (mapper ↑₁ E_t) e) : E_s'' e.","conclusion":"E_s'' e","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EIN : (mapper ↑₁ E_t) e)","proofString":"simpl.\nauto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EIN : (mapper ↑₁ E_t) e) : (mapper ↑₁ E_t) e.","conclusion":"(mapper ↑₁ E_t) e","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EIN : (mapper ↑₁ E_t) e)","proofString":"auto."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EX : A_s e) : threads_set G_t (tid e).","conclusion":"threads_set G_t (tid e)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EX : A_s e)","proofString":"unfold extra_a in EX.\ndesf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EX : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) e) : threads_set G_t (tid e).","conclusion":"threads_set G_t (tid e)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (e : actid) (EX : (ifP ~ E_t a_t /\\ E_t b_t then eq b_t else ∅) e)","proofString":"desf.\nnow apply (wf_threads WF_t)."},{"statement":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t) : threads_set G_t (tid b_t).","conclusion":"threads_set G_t (tid b_t)","hypotheses":"(WF_s : Wf G_s'') (WF_t : Wf G_t) (NINIB : ~ is_init b_t) (NINIA : ~ is_init a_t) (EXAIM : A_s ⊆₁ E_s) (a : ~ E_t a_t /\\ E_t b_t)","proofString":"now apply (wf_threads WF_t)."}]}