{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/promising2ToImm/src/cert_graph/CertExecution2.v","fileSamples":[{"statement":"Csb ⨾ ⦗CW ∩₁ CRel⦘ ∪ ⦗CW ∩₁ CRel⦘ ⨾ Csb ∩ Csame_loc ⨾ ⦗CW⦘\n∪ Csb ⨾ ⦗CF ∩₁ CAcq/Rel⦘ ∪ ⦗CF ∩₁ CAcq/Rel⦘ ⨾ Csb\n≡ Gsb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘\n  ∪ Gsb ⨾ ⦗F ∩₁ Acq/Rel⦘ ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ Gsb.","proofString":"rewrite cert_W, cert_F, cert_Rel, cert_AcqRel.\nby rewrite cert_sb, cert_same_loc."},{"statement":"Csb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ Csb ∩ Csame_loc ⨾ ⦗W⦘ ∪ Csb ⨾ ⦗F ∩₁ Acq/Rel⦘\n∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ Csb\n≡ Gsb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘\n  ∪ Gsb ⨾ ⦗F ∩₁ Acq/Rel⦘ ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ Gsb.","proofString":"by rewrite cert_sb, cert_same_loc."},{"statement":"fwbob certG ∪ ⦗CR ∩₁ CAcq⦘ ⨾ Csb ≡ Gfwbob ∪ ⦗R ∩₁ Acq⦘ ⨾ Gsb.","proofString":"by rewrite cert_R, cert_Acq, cert_fwbob, cert_sb."},{"statement":"codom_rel Crmw ∩₁ (fun a : actid => is_xacq lab' a) ≡₁ codom_rel Grmw ∩₁ xacq.","proofString":"by rewrite cert_xacq; ins."},{"statement":"sc ≡ ⦗acts_set certG⦘ ⨾ sc ⨾ ⦗acts_set certG⦘.","proofString":"rewrite cert_E; apply WF_SC."},{"statement":"sc ≡ ⦗CF ∩₁ CSc⦘ ⨾ sc ⨾ ⦗CF ∩₁ CSc⦘.","proofString":"rewrite cert_F, cert_Sc; apply WF_SC."},{"statement":"transitive sc.","proofString":"apply WF_SC."},{"statement":"is_total (acts_set certG ∩₁ CF ∩₁ CSc) sc.","proofString":"rewrite cert_E, cert_F, cert_Sc; apply WF_SC."},{"statement":"irreflexive sc.","proofString":"apply WF_SC."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ (fun a : actid => is_r lab' a) ⊆₁ codom_rel cert_rf.","proofString":"rewrite cert_R.\nunfold Cert_rf.cert_rf.\narewrite (E ∩₁ R ⊆₁ E ∩₁ R ∩₁ D ∪₁                       E ∩₁ R ∩₁ set_compl (dom_rel Grmw) ∩₁ set_compl D ∪₁                       E ∩₁ R ∩₁ (dom_rel Grmw) ∩₁ set_compl D).\nunfolder; ins; desf.\ndestruct (classic (D x)); destruct (classic ((dom_rel Grmw) x)); eauto 10.\nunionL.\nunfolder; ins; desf.\nforward (eapply (complete_D) with (T:=T) (x:=x)); try edone.\nerewrite <- coveredE; [..| apply TCOH_rst_new_T]; auto.\nrewrite covered_certT.\nbasic_solver.\nerewrite <- issuedE; [..| apply TCOH_rst_new_T]; auto.\nrewrite issued_certT.\nbasic_solver.\nunfold Cert_rf.cert_rf.\nunfolder; ins; desf; eauto 20.\nunfolder; ins; desf.\nforward (apply new_rf_comp); try edone.\nunfold Cert_rf.cert_rf; basic_solver 12.\nunfolder; ins; desf.\nassert (AA: exists z, (immediate cert_co) z y).\neapply (imm_cert_co_inv_exists) with (T:=T); eauto.\napply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf.\ndesf; eexists; eauto."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ R ⊆₁ codom_rel cert_rf.","proofString":"unfold Cert_rf.cert_rf.\narewrite (E ∩₁ R ⊆₁ E ∩₁ R ∩₁ D ∪₁                       E ∩₁ R ∩₁ set_compl (dom_rel Grmw) ∩₁ set_compl D ∪₁                       E ∩₁ R ∩₁ (dom_rel Grmw) ∩₁ set_compl D).\nunfolder; ins; desf.\ndestruct (classic (D x)); destruct (classic ((dom_rel Grmw) x)); eauto 10.\nunionL.\nunfolder; ins; desf.\nforward (eapply (complete_D) with (T:=T) (x:=x)); try edone.\nerewrite <- coveredE; [..| apply TCOH_rst_new_T]; auto.\nrewrite covered_certT.\nbasic_solver.\nerewrite <- issuedE; [..| apply TCOH_rst_new_T]; auto.\nrewrite issued_certT.\nbasic_solver.\nunfold Cert_rf.cert_rf.\nunfolder; ins; desf; eauto 20.\nunfolder; ins; desf.\nforward (apply new_rf_comp); try edone.\nunfold Cert_rf.cert_rf; basic_solver 12.\nunfolder; ins; desf.\nassert (AA: exists z, (immediate cert_co) z y).\neapply (imm_cert_co_inv_exists) with (T:=T); eauto.\napply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf.\ndesf; eexists; eauto."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ R\n⊆₁ codom_rel\n     (Grf ⨾ ⦗D⦘ ∪ new_rf ⨾ ⦗set_compl (dom_rel Grmw)⦘\n      ∪ immediate cert_co ⨾ Grmw⁻¹ ⨾ ⦗set_compl D⦘).","proofString":"arewrite (E ∩₁ R ⊆₁ E ∩₁ R ∩₁ D ∪₁                       E ∩₁ R ∩₁ set_compl (dom_rel Grmw) ∩₁ set_compl D ∪₁                       E ∩₁ R ∩₁ (dom_rel Grmw) ∩₁ set_compl D).\nunfolder; ins; desf.\ndestruct (classic (D x)); destruct (classic ((dom_rel Grmw) x)); eauto 10.\nunionL.\nunfolder; ins; desf.\nforward (eapply (complete_D) with (T:=T) (x:=x)); try edone.\nerewrite <- coveredE; [..| apply TCOH_rst_new_T]; auto.\nrewrite covered_certT.\nbasic_solver.\nerewrite <- issuedE; [..| apply TCOH_rst_new_T]; auto.\nrewrite issued_certT.\nbasic_solver.\nunfold Cert_rf.cert_rf.\nunfolder; ins; desf; eauto 20.\nunfolder; ins; desf.\nforward (apply new_rf_comp); try edone.\nunfold Cert_rf.cert_rf; basic_solver 12.\nunfolder; ins; desf.\nassert (AA: exists z, (immediate cert_co) z y).\neapply (imm_cert_co_inv_exists) with (T:=T); eauto.\napply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf.\ndesf; eexists; eauto."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ R\n⊆₁ E ∩₁ R ∩₁ D ∪₁ E ∩₁ R ∩₁ set_compl (dom_rel Grmw) ∩₁ set_compl D\n   ∪₁ E ∩₁ R ∩₁ dom_rel Grmw ∩₁ set_compl D.","proofString":"unfolder; ins; desf.\ndestruct (classic (D x)); destruct (classic ((dom_rel Grmw) x)); eauto 10."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H0 : is_r Glab x) : ((E x /\\ true) /\\ D x \\/\n ((E x /\\ true) /\\ ~ (exists y : actid, Grmw x y)) /\\ ~ D x) \\/\n((E x /\\ true) /\\ (exists y : actid, Grmw x y)) /\\ ~ D x.","proofString":"destruct (classic (D x)); destruct (classic ((dom_rel Grmw) x)); eauto 10."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ R ∩₁ D ∪₁ E ∩₁ R ∩₁ set_compl (dom_rel Grmw) ∩₁ set_compl D\n∪₁ E ∩₁ R ∩₁ dom_rel Grmw ∩₁ set_compl D\n⊆₁ codom_rel\n     (Grf ⨾ ⦗D⦘ ∪ new_rf ⨾ ⦗set_compl (dom_rel Grmw)⦘\n      ∪ immediate cert_co ⨾ Grmw⁻¹ ⨾ ⦗set_compl D⦘).","proofString":"unionL.\nunfolder; ins; desf.\nforward (eapply (complete_D) with (T:=T) (x:=x)); try edone.\nerewrite <- coveredE; [..| apply TCOH_rst_new_T]; auto.\nrewrite covered_certT.\nbasic_solver.\nerewrite <- issuedE; [..| apply TCOH_rst_new_T]; auto.\nrewrite issued_certT.\nbasic_solver.\nunfold Cert_rf.cert_rf.\nunfolder; ins; desf; eauto 20.\nunfolder; ins; desf.\nforward (apply new_rf_comp); try edone.\nunfold Cert_rf.cert_rf; basic_solver 12.\nunfolder; ins; desf.\nassert (AA: exists z, (immediate cert_co) z y).\neapply (imm_cert_co_inv_exists) with (T:=T); eauto.\napply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf.\ndesf; eexists; eauto."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ R ∩₁ D\n⊆₁ codom_rel\n     (Grf ⨾ ⦗D⦘ ∪ new_rf ⨾ ⦗set_compl (dom_rel Grmw)⦘\n      ∪ immediate cert_co ⨾ Grmw⁻¹ ⨾ ⦗set_compl D⦘).","proofString":"unfolder; ins; desf.\nforward (eapply (complete_D) with (T:=T) (x:=x)); try edone.\nerewrite <- coveredE; [..| apply TCOH_rst_new_T]; auto.\nrewrite covered_certT.\nbasic_solver.\nerewrite <- issuedE; [..| apply TCOH_rst_new_T]; auto.\nrewrite issued_certT.\nbasic_solver.\nunfold Cert_rf.cert_rf.\nunfolder; ins; desf; eauto 20."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : exists x0 : actid,\n  (Grf x0 x /\\ D x \\/ new_rf x0 x /\\ ~ (exists y : actid, Grmw x y)) \\/\n  (exists z : actid,\n     (cert_co x0 z /\\\n      (forall c : actid, cert_co x0 c -> cert_co c z -> False)) /\\\n     Grmw x z /\\ ~ D x).","proofString":"forward (eapply (complete_D) with (T:=T) (x:=x)); try edone.\nerewrite <- coveredE; [..| apply TCOH_rst_new_T]; auto.\nrewrite covered_certT.\nbasic_solver.\nerewrite <- issuedE; [..| apply TCOH_rst_new_T]; auto.\nrewrite issued_certT.\nbasic_solver.\nunfold Cert_rf.cert_rf.\nunfolder; ins; desf; eauto 20."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : C ⊆₁ E.","proofString":"erewrite <- coveredE; [..| apply TCOH_rst_new_T]; auto.\nrewrite covered_certT.\nbasic_solver."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : C ⊆₁ covered (certT G T thread).","proofString":"rewrite covered_certT.\nbasic_solver."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : C ⊆₁ C ∪₁ E ∩₁ NTid_ thread.","proofString":"basic_solver."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : I ⊆₁ E.","proofString":"erewrite <- issuedE; [..| apply TCOH_rst_new_T]; auto.\nrewrite issued_certT.\nbasic_solver."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : I ⊆₁ issued (certT G T thread).","proofString":"rewrite issued_certT.\nbasic_solver."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : I ⊆₁ I.","proofString":"basic_solver."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : codom_rel Grf x ->\nexists x0 : actid,\n  (Grf x0 x /\\ D x \\/ new_rf x0 x /\\ ~ (exists y : actid, Grmw x y)) \\/\n  (exists z : actid,\n     (cert_co x0 z /\\\n      (forall c : actid, cert_co x0 c -> cert_co c z -> False)) /\\\n     Grmw x z /\\ ~ D x).","proofString":"unfold Cert_rf.cert_rf.\nunfolder; ins; desf; eauto 20."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H1 : is_r Glab x) (H0 : D x) : codom_rel Grf x ->\nexists x0 : actid,\n  (Grf x0 x /\\ D x \\/ new_rf x0 x /\\ ~ (exists y : actid, Grmw x y)) \\/\n  (exists z : actid,\n     (cert_co x0 z /\\\n      (forall c : actid, cert_co x0 c -> cert_co c z -> False)) /\\\n     Grmw x z /\\ ~ D x).","proofString":"unfolder; ins; desf; eauto 20."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ R ∩₁ set_compl (dom_rel Grmw) ∩₁ set_compl D\n⊆₁ codom_rel\n     (Grf ⨾ ⦗D⦘ ∪ new_rf ⨾ ⦗set_compl (dom_rel Grmw)⦘\n      ∪ immediate cert_co ⨾ Grmw⁻¹ ⨾ ⦗set_compl D⦘).","proofString":"unfolder; ins; desf.\nforward (apply new_rf_comp); try edone.\nunfold Cert_rf.cert_rf; basic_solver 12."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (H1 : ~ (exists y : actid, Grmw x y)) (H0 : ~ D x) : exists x0 : actid,\n  (Grf x0 x /\\ D x \\/ new_rf x0 x /\\ ~ (exists y : actid, Grmw x y)) \\/\n  (exists z : actid,\n     (cert_co x0 z /\\\n      (forall c : actid, cert_co x0 c -> cert_co c z -> False)) /\\\n     Grmw x z /\\ ~ D x).","proofString":"forward (apply new_rf_comp); try edone.\nunfold Cert_rf.cert_rf; basic_solver 12."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (H1 : ~ (exists y : actid, Grmw x y)) (H0 : ~ D x) : (exists a : actid, new_rf a x) ->\nexists x0 : actid,\n  (Grf x0 x /\\ D x \\/ new_rf x0 x /\\ ~ (exists y : actid, Grmw x y)) \\/\n  (exists z : actid,\n     (cert_co x0 z /\\\n      (forall c : actid, cert_co x0 c -> cert_co c z -> False)) /\\\n     Grmw x z /\\ ~ D x).","proofString":"unfold Cert_rf.cert_rf; basic_solver 12."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) : E ∩₁ R ∩₁ dom_rel Grmw ∩₁ set_compl D\n⊆₁ codom_rel\n     (Grf ⨾ ⦗D⦘ ∪ new_rf ⨾ ⦗set_compl (dom_rel Grmw)⦘\n      ∪ immediate cert_co ⨾ Grmw⁻¹ ⨾ ⦗set_compl D⦘).","proofString":"unfolder; ins; desf.\nassert (AA: exists z, (immediate cert_co) z y).\neapply (imm_cert_co_inv_exists) with (T:=T); eauto.\napply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf.\ndesf; eexists; eauto."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (y : actid) (H1 : Grmw x y) (H0 : ~ D x) : exists x0 : actid,\n  (Grf x0 x /\\ D x \\/ new_rf x0 x /\\ ~ (exists y0 : actid, Grmw x y0)) \\/\n  (exists z : actid,\n     (cert_co x0 z /\\\n      (forall c : actid, cert_co x0 c -> cert_co c z -> False)) /\\\n     Grmw x z /\\ ~ D x).","proofString":"assert (AA: exists z, (immediate cert_co) z y).\neapply (imm_cert_co_inv_exists) with (T:=T); eauto.\napply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf.\ndesf; eexists; eauto."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (y : actid) (H1 : Grmw x y) (H0 : ~ D x) : exists z : actid, immediate cert_co z y.","proofString":"eapply (imm_cert_co_inv_exists) with (T:=T); eauto.\napply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (y : actid) (H1 : Grmw x y) (H0 : ~ D x) : (E ∩₁ W ∩₁ set_compl Init) y.","proofString":"apply (wf_rmwD WF) in H1; unfolder in H1; desf.\napply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (y : actid) (H0 : ~ D x) (H1 : true) (H3 : Grmw x y) (H4 : is_w Glab y) : (E ∩₁ W ∩₁ set_compl Init) y.","proofString":"apply (wf_rmwE WF) in H3; unfolder in H3; desf.\napply (rmw_non_init_lr WF) in H5; unfolder in H5; desf."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (y : actid) (H0 : ~ D x) (H1 : true) (H4 : is_w Glab y) (H3 : E x) (H5 : Grmw x y) (H6 : E y) : (E ∩₁ W ∩₁ set_compl Init) y.","proofString":"apply (rmw_non_init_lr WF) in H5; unfolder in H5; desf."},{"statement":"(FIN : fin_exec G) (FAIR : mem_fair G) (x : actid) (H : E x) (H2 : is_r Glab x) (y : actid) (H1 : Grmw x y) (H0 : ~ D x) (AA : exists z : actid, immediate cert_co z y) : exists x0 : actid,\n  (Grf x0 x /\\ D x \\/ new_rf x0 x /\\ ~ (exists y0 : actid, Grmw x y0)) \\/\n  (exists z : actid,\n     (cert_co x0 z /\\\n      (forall c : actid, cert_co x0 c -> cert_co c z -> False)) /\\\n     Grmw x z /\\ ~ D x).","proofString":"desf; eexists; eauto."}]}