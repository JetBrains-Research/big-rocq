{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Calc/Div.v","fileSamples":[{"statement":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <=? e1 - e2)%Z = true) : (IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR (m1 * beta ^ (e1 - e2 - e)) / IZR m2' * bpow e)%R /\\ \n(0 < m2')%Z.","conclusion":"(IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR (m1 * beta ^ (e1 - e2 - e)) / IZR m2' * bpow e)%R /\\ \n(0 < m2')%Z","hypotheses":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <=? e1 - e2)%Z = true)","proofString":"split ; try easy.\napply Zle_bool_imp_le in He'.\nrewrite mult_IZR, IZR_Zpower by lia.\nunfold Zminus ; rewrite 2!bpow_plus, 2!bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <=? e1 - e2)%Z = true) : (IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR (m1 * beta ^ (e1 - e2 - e)) / IZR m2' * bpow e)%R.","conclusion":"(IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR (m1 * beta ^ (e1 - e2 - e)) / IZR m2' * bpow e)%R","hypotheses":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <=? e1 - e2)%Z = true)","proofString":"apply Zle_bool_imp_le in He'.\nrewrite mult_IZR, IZR_Zpower by lia.\nunfold Zminus ; rewrite 2!bpow_plus, 2!bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z) : (IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR (m1 * beta ^ (e1 - e2 - e)) / IZR m2' * bpow e)%R.","conclusion":"(IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR (m1 * beta ^ (e1 - e2 - e)) / IZR m2' * bpow e)%R","hypotheses":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z)","proofString":"rewrite mult_IZR, IZR_Zpower by lia.\nunfold Zminus ; rewrite 2!bpow_plus, 2!bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z) : (IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR m1 * bpow (e1 - e2 - e) / IZR m2' * bpow e)%R.","conclusion":"(IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR m1 * bpow (e1 - e2 - e) / IZR m2' * bpow e)%R","hypotheses":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z)","proofString":"unfold Zminus ; rewrite 2!bpow_plus, 2!bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z) : (IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR m1 * (bpow e1 * / bpow e2 * / bpow e) / IZR m2' * bpow e)%R.","conclusion":"(IZR m1 * bpow e1 / (IZR m2' * bpow e2))%R =\n(IZR m1 * (bpow e1 * / bpow e2 * / bpow e) / IZR m2' * bpow e)%R","hypotheses":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z)","proofString":"field.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z) : bpow e <> 0%R /\\ bpow e2 <> 0%R /\\ IZR m2' <> 0%R.","conclusion":"bpow e <> 0%R /\\ bpow e2 <> 0%R /\\ IZR m2' <> 0%R","hypotheses":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z)","proofString":"repeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z) : IZR m2' <> 0%R.","conclusion":"IZR m2' <> 0%R","hypotheses":"(m1 e1 e2 e : Z) (Hm1 : (0 < m1)%Z) (m2' : Z) (m12 : Z * Z) (Hm : m12 = ((m1 * beta ^ (e1 - e2 - e))%Z, m2')) (Hm2 : (0 < m2')%Z) (He' : (e <= e1 - e2)%Z)","proofString":"now apply IZR_neq, Zgt_not_eq."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e <=? e1 - e2)%Z = false) : (IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / IZR (m2 * beta ^ (e - (e1 - e2))) * bpow e)%R /\\\n(0 < m2 * beta ^ (e - (e1 - e2)))%Z.","conclusion":"(IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / IZR (m2 * beta ^ (e - (e1 - e2))) * bpow e)%R /\\\n(0 < m2 * beta ^ (e - (e1 - e2)))%Z","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e <=? e1 - e2)%Z = false)","proofString":"apply Z.leb_gt in He'.\nsplit ; cycle 1.\napply Z.mul_pos_pos with (1 := Hm2).\napply Zpower_gt_0 ; lia.\nrewrite mult_IZR, IZR_Zpower by lia.\nunfold Zminus ; rewrite bpow_plus, bpow_opp, bpow_plus, bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : (IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / IZR (m2 * beta ^ (e - (e1 - e2))) * bpow e)%R /\\\n(0 < m2 * beta ^ (e - (e1 - e2)))%Z.","conclusion":"(IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / IZR (m2 * beta ^ (e - (e1 - e2))) * bpow e)%R /\\\n(0 < m2 * beta ^ (e - (e1 - e2)))%Z","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"split ; cycle 1.\napply Z.mul_pos_pos with (1 := Hm2).\napply Zpower_gt_0 ; lia.\nrewrite mult_IZR, IZR_Zpower by lia.\nunfold Zminus ; rewrite bpow_plus, bpow_opp, bpow_plus, bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : (0 < m2 * beta ^ (e - (e1 - e2)))%Z.","conclusion":"(0 < m2 * beta ^ (e - (e1 - e2)))%Z","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"apply Z.mul_pos_pos with (1 := Hm2).\napply Zpower_gt_0 ; lia."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : (0 < beta ^ (e - (e1 - e2)))%Z.","conclusion":"(0 < beta ^ (e - (e1 - e2)))%Z","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"apply Zpower_gt_0 ; lia."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : (IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / IZR (m2 * beta ^ (e - (e1 - e2))) * bpow e)%R.","conclusion":"(IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / IZR (m2 * beta ^ (e - (e1 - e2))) * bpow e)%R","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"rewrite mult_IZR, IZR_Zpower by lia.\nunfold Zminus ; rewrite bpow_plus, bpow_opp, bpow_plus, bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : (IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / (IZR m2 * bpow (e - (e1 - e2))) * bpow e)%R.","conclusion":"(IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / (IZR m2 * bpow (e - (e1 - e2))) * bpow e)%R","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"unfold Zminus ; rewrite bpow_plus, bpow_opp, bpow_plus, bpow_opp.\nfield.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : (IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / (IZR m2 * (bpow e * / (bpow e1 * / bpow e2))) * bpow e)%R.","conclusion":"(IZR m1' * bpow e1 / (IZR m2 * bpow e2))%R =\n(IZR m1' / (IZR m2 * (bpow e * / (bpow e1 * / bpow e2))) * bpow e)%R","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"field.\nrepeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : bpow e2 <> 0%R /\\ bpow e1 <> 0%R /\\ bpow e <> 0%R /\\ IZR m2 <> 0%R.","conclusion":"bpow e2 <> 0%R /\\ bpow e1 <> 0%R /\\ bpow e <> 0%R /\\ IZR m2 <> 0%R","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"repeat split ; try apply Rgt_not_eq, bpow_gt_0.\nnow apply IZR_neq, Zgt_not_eq."},{"statement":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z) : IZR m2 <> 0%R.","conclusion":"IZR m2 <> 0%R","hypotheses":"(e1 m2 e2 e m1' : Z) (m12 : Z * Z) (Hm : m12 = (m1', (m2 * beta ^ (e - (e1 - e2)))%Z)) (Hm1 : (0 < m1')%Z) (Hm2 : (0 < m2)%Z) (He' : (e1 - e2 < e)%Z)","proofString":"now apply IZR_neq, Zgt_not_eq."}]}