{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/bigRocq/dataset/imm/src/travorder/AuxEE.v","fileSamples":[{"statement":"⦗W⦘ ∪ ⦗E⦘ ⨾ furr G sc ⨾ ⦗E⦘ ⊆ E_E^?.","proofString":"rewrite crE.\napply union_mori; basic_solver 10."},{"statement":"⦗W⦘ ∪ ⦗E⦘ ⨾ furr G sc ⨾ ⦗E⦘ ⊆ ⦗fun _ : actid => True⦘ ∪ E_E.","proofString":"apply union_mori; basic_solver 10."},{"statement":"transitive (E × E).","proofString":"basic_solver."},{"statement":"⦗E⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗E⦘ ⊆ E_ENI.","proofString":"basic_solver."},{"statement":"⦗E⦘ ⨾ (co ⨾ ⦗set_compl (fun a : actid => is_init a)⦘) ⨾ ⦗E⦘ ⊆ E_ENI.","proofString":"basic_solver."},{"statement":"⦗E⦘ ⨾ (rf ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗E⦘ ⊆ E_ENI.","proofString":"basic_solver."},{"statement":"⦗E⦘ ⨾ (fr ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗E⦘ ⊆ E_ENI.","proofString":"basic_solver."},{"statement":"ar ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","proofString":"unfold ar.\nrewrite (ar_int_in_sb WF).\nrewrite no_sb_to_init.\nrewrite wf_scD with (sc:=sc); eauto.\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(sc ∪ rfe ∪ ar_int G) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","proofString":"rewrite (ar_int_in_sb WF).\nrewrite no_sb_to_init.\nrewrite wf_scD with (sc:=sc); eauto.\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(sc ∪ rfe ∪ sb) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","proofString":"rewrite no_sb_to_init.\nrewrite wf_scD with (sc:=sc); eauto.\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(sc ∪ rfe ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘)\n⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","proofString":"rewrite wf_scD with (sc:=sc); eauto.\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ rfe ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘)\n⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","proofString":"rewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘\n ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","proofString":"rewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗fun a : actid => is_init a⦘\n∪ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","proofString":"unionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗fun a : actid => is_init a⦘\n⊆ ∅₂.","proofString":"rewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗W⦘ ⊆ ∅₂.","proofString":"type_solver 10."},{"statement":"⦗E⦘ ⨾ (ar ⨾ ⦗set_compl (fun a : actid => is_init a)⦘) ⨾ ⦗E⦘ ⊆ E_ENI.","proofString":"basic_solver."},{"statement":"⦗E⦘ ⨾ (sc ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗E⦘ ⊆ E_ENI.","proofString":"basic_solver."},{"statement":"(⦗W⦘ ∪ ⦗E⦘ ⨾ furr G sc ⨾ ⦗E⦘) ⨾ ⦗set_compl (fun a : actid => is_init a)⦘\n∪ ⦗fun a : actid => is_init a⦘ ⊆ E_ENI^?.","proofString":"rewrite crE.\nunfold E_ENI.\nbasic_solver."},{"statement":"(⦗W⦘ ∪ ⦗E⦘ ⨾ furr G sc ⨾ ⦗E⦘) ⨾ ⦗set_compl (fun a : actid => is_init a)⦘\n∪ ⦗fun a : actid => is_init a⦘ ⊆ ⦗fun _ : actid => True⦘ ∪ E_ENI.","proofString":"unfold E_ENI.\nbasic_solver."},{"statement":"(⦗W⦘ ∪ ⦗E⦘ ⨾ furr G sc ⨾ ⦗E⦘) ⨾ ⦗set_compl (fun a : actid => is_init a)⦘\n∪ ⦗fun a : actid => is_init a⦘\n⊆ ⦗fun _ : actid => True⦘ ∪ E × (E \\₁ (fun a : actid => is_init a)).","proofString":"basic_solver."},{"statement":"transitive (E × (E \\₁ (fun a : actid => is_init a))).","proofString":"basic_solver."},{"statement":"(ar ∪ rf ⨾ sb)⁺ ⊆ E_ENI.","proofString":"rewrite sb_E_ENI, rf_E_ENI, ar_E_ENI; auto.\nrepeat (rewrite ?(@rt_of_trans _ E_ENI), ?(@rewrite_trans _ E_ENI),             ?unionK, ?(@rewrite_trans _ E_ENI),             ?(@rewrite_trans_seq_cr_cr _ E_ENI), ?(@ct_of_trans _ E_ENI)           ); try by (subst; apply E_ENI_trans).\nbasic_solver."},{"statement":"(E_ENI ∪ E_ENI ⨾ E_ENI)⁺ ⊆ E_ENI.","proofString":"repeat (rewrite ?(@rt_of_trans _ E_ENI), ?(@rewrite_trans _ E_ENI),             ?unionK, ?(@rewrite_trans _ E_ENI),             ?(@rewrite_trans_seq_cr_cr _ E_ENI), ?(@ct_of_trans _ E_ENI)           ); try by (subst; apply E_ENI_trans).\nbasic_solver."},{"statement":"E_ENI ⊆ E_ENI.","proofString":"basic_solver."}]}