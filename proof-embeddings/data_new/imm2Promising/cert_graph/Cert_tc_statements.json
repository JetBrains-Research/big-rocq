{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/promising2ToImm/src/cert_graph/Cert_tc.v","fileSamples":[{"statement":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n(acts_set certG ∩₁ Init)\n≡₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init).","conclusion":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n(acts_set certG ∩₁ Init)\n≡₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init)","hypotheses":"","proofString":"rewrite cert_E.\nauto."},{"statement":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n(E ∩₁ Init)\n≡₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init).","conclusion":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n(E ∩₁ Init)\n≡₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init)","hypotheses":"","proofString":"auto."},{"statement":"eq ta_cover <*> (acts_set certG \\₁ Init)\n∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n   ((acts_set certG \\₁ Init) ∩₁ CW)\n≡₁ eq ta_cover <*> (E \\₁ Init)\n   ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n      ((E \\₁ Init) ∩₁ W).","conclusion":"eq ta_cover <*> (acts_set certG \\₁ Init)\n∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n   ((acts_set certG \\₁ Init) ∩₁ CW)\n≡₁ eq ta_cover <*> (E \\₁ Init)\n   ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n      ((E \\₁ Init) ∩₁ W)","hypotheses":"","proofString":"rewrite cert_E.\nerewrite cert_W; eauto."},{"statement":"eq ta_cover <*> (E \\₁ Init)\n∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n   ((E \\₁ Init) ∩₁ CW)\n≡₁ eq ta_cover <*> (E \\₁ Init)\n   ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n      ((E \\₁ Init) ∩₁ W).","conclusion":"eq ta_cover <*> (E \\₁ Init)\n∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G certG) <*>\n   ((E \\₁ Init) ∩₁ CW)\n≡₁ eq ta_cover <*> (E \\₁ Init)\n   ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n      ((E \\₁ Init) ∩₁ W)","hypotheses":"","proofString":"erewrite cert_W; eauto."},{"statement":"C ∪₁ E ∩₁ NTid_ thread ⊆₁ D.","conclusion":"C ∪₁ E ∩₁ NTid_ thread ⊆₁ D","hypotheses":"","proofString":"unfold D.\nbasic_solver 10."},{"statement":"C ∪₁ E ∩₁ NTid_ thread\n⊆₁ C ∪₁ I ∪₁ E ∩₁ NTid_ thread ∪₁ dom_rel (Grfi^? ⨾ Gppo ⨾ ⦗I⦘)\n   ∪₁ dom_rel ((Gdata ∪ Grfi ∪ Grmw)＊ ⨾ Grppo ⨾ ⦗S⦘)\n   ∪₁ codom_rel (⦗I⦘ ⨾ Grfi) ∪₁ codom_rel (Grfe ⨾ ⦗R ∩₁ Acq⦘)\n   ∪₁ codom_rel Grfe ∩₁ dom_rel (Grmw ⨾ ⦗S⦘).","conclusion":"C ∪₁ E ∩₁ NTid_ thread\n⊆₁ C ∪₁ I ∪₁ E ∩₁ NTid_ thread ∪₁ dom_rel (Grfi^? ⨾ Gppo ⨾ ⦗I⦘)\n   ∪₁ dom_rel ((Gdata ∪ Grfi ∪ Grmw)＊ ⨾ Grppo ⨾ ⦗S⦘)\n   ∪₁ codom_rel (⦗I⦘ ⨾ Grfi) ∪₁ codom_rel (Grfe ⨾ ⦗R ∩₁ Acq⦘)\n   ∪₁ codom_rel Grfe ∩₁ dom_rel (Grmw ⨾ ⦗S⦘)","hypotheses":"","proofString":"basic_solver 10."},{"statement":"I ⊆₁ D.","conclusion":"I ⊆₁ D","hypotheses":"","proofString":"apply I_in_D."},{"statement":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D.","conclusion":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite id_union.\nrelsf.\nsplit.\nrewrite inclusion_seq_eqv_r with (r := Gsb).\neapply dom_sb_C_in_D; eauto.\nrewrite <- issued_certT.\nrewrite seqA, dom_sb_W_rel_issued; eauto.\nunfold D.\nrewrite covered_certT.\nbasic_solver 10."},{"statement":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ (⦗C⦘ ∪ ⦗I⦘)) ⊆₁ D.","conclusion":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ (⦗C⦘ ∪ ⦗I⦘)) ⊆₁ D","hypotheses":"","proofString":"relsf.\nsplit.\nrewrite inclusion_seq_eqv_r with (r := Gsb).\neapply dom_sb_C_in_D; eauto.\nrewrite <- issued_certT.\nrewrite seqA, dom_sb_W_rel_issued; eauto.\nunfold D.\nrewrite covered_certT.\nbasic_solver 10."},{"statement":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗C⦘) ⊆₁ D /\\\ndom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗I⦘) ⊆₁ D.","conclusion":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗C⦘) ⊆₁ D /\\\ndom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗I⦘) ⊆₁ D","hypotheses":"","proofString":"split.\nrewrite inclusion_seq_eqv_r with (r := Gsb).\neapply dom_sb_C_in_D; eauto.\nrewrite <- issued_certT.\nrewrite seqA, dom_sb_W_rel_issued; eauto.\nunfold D.\nrewrite covered_certT.\nbasic_solver 10."},{"statement":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗C⦘) ⊆₁ D.","conclusion":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗C⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite inclusion_seq_eqv_r with (r := Gsb).\neapply dom_sb_C_in_D; eauto."},{"statement":"dom_rel (Gsb ⨾ ⦗C⦘) ⊆₁ D.","conclusion":"dom_rel (Gsb ⨾ ⦗C⦘) ⊆₁ D","hypotheses":"","proofString":"eapply dom_sb_C_in_D; eauto."},{"statement":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗I⦘) ⊆₁ D.","conclusion":"dom_rel ((Gsb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗I⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite <- issued_certT.\nrewrite seqA, dom_sb_W_rel_issued; eauto.\nunfold D.\nrewrite covered_certT.\nbasic_solver 10."},{"statement":"covered (certT G T thread) ⊆₁ D.","conclusion":"covered (certT G T thread) ⊆₁ D","hypotheses":"","proofString":"unfold D.\nrewrite covered_certT.\nbasic_solver 10."},{"statement":"covered (certT G T thread)\n⊆₁ C ∪₁ I ∪₁ E ∩₁ NTid_ thread ∪₁ dom_rel (Grfi^? ⨾ Gppo ⨾ ⦗I⦘)\n   ∪₁ dom_rel ((Gdata ∪ Grfi ∪ Grmw)＊ ⨾ Grppo ⨾ ⦗S⦘)\n   ∪₁ codom_rel (⦗I⦘ ⨾ Grfi) ∪₁ codom_rel (Grfe ⨾ ⦗R ∩₁ Acq⦘)\n   ∪₁ codom_rel Grfe ∩₁ dom_rel (Grmw ⨾ ⦗S⦘).","conclusion":"covered (certT G T thread)\n⊆₁ C ∪₁ I ∪₁ E ∩₁ NTid_ thread ∪₁ dom_rel (Grfi^? ⨾ Gppo ⨾ ⦗I⦘)\n   ∪₁ dom_rel ((Gdata ∪ Grfi ∪ Grmw)＊ ⨾ Grppo ⨾ ⦗S⦘)\n   ∪₁ codom_rel (⦗I⦘ ⨾ Grfi) ∪₁ codom_rel (Grfe ⨾ ⦗R ∩₁ Acq⦘)\n   ∪₁ codom_rel Grfe ∩₁ dom_rel (Grmw ⨾ ⦗S⦘)","hypotheses":"","proofString":"rewrite covered_certT.\nbasic_solver 10."},{"statement":"C ∪₁ E ∩₁ NTid_ thread\n⊆₁ C ∪₁ I ∪₁ E ∩₁ NTid_ thread ∪₁ dom_rel (Grfi^? ⨾ Gppo ⨾ ⦗I⦘)\n   ∪₁ dom_rel ((Gdata ∪ Grfi ∪ Grmw)＊ ⨾ Grppo ⨾ ⦗S⦘)\n   ∪₁ codom_rel (⦗I⦘ ⨾ Grfi) ∪₁ codom_rel (Grfe ⨾ ⦗R ∩₁ Acq⦘)\n   ∪₁ codom_rel Grfe ∩₁ dom_rel (Grmw ⨾ ⦗S⦘).","conclusion":"C ∪₁ E ∩₁ NTid_ thread\n⊆₁ C ∪₁ I ∪₁ E ∩₁ NTid_ thread ∪₁ dom_rel (Grfi^? ⨾ Gppo ⨾ ⦗I⦘)\n   ∪₁ dom_rel ((Gdata ∪ Grfi ∪ Grmw)＊ ⨾ Grppo ⨾ ⦗S⦘)\n   ∪₁ codom_rel (⦗I⦘ ⨾ Grfi) ∪₁ codom_rel (Grfe ⨾ ⦗R ∩₁ Acq⦘)\n   ∪₁ codom_rel Grfe ∩₁ dom_rel (Grmw ⨾ ⦗S⦘)","hypotheses":"","proofString":"basic_solver 10."},{"statement":"dom_rel ((⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D.","conclusion":"dom_rel ((⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite C_in_certC, <- issued_certT.\nrewrite W_rel_sb_loc_W_CI; eauto.\nrewrite covered_cert_in_D, issued_cert_in_D.\nbasic_solver."},{"statement":"dom_rel\n  (⦗covered (certT G T thread) ∪₁ issued (certT G T thread)⦘\n   ⨾ ⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘) ⊆₁ D.","conclusion":"dom_rel\n  (⦗covered (certT G T thread) ∪₁ issued (certT G T thread)⦘\n   ⨾ ⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite covered_cert_in_D, issued_cert_in_D.\nbasic_solver."},{"statement":"dom_rel (⦗D ∪₁ D⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘) ⊆₁ D.","conclusion":"dom_rel (⦗D ∪₁ D⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ Gsb ∩ Gsame_loc ⨾ ⦗W⦘) ⊆₁ D","hypotheses":"","proofString":"basic_solver."},{"statement":"dom_rel ((Gsb ⨾ ⦗F ∩₁ Acq/Rel⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D.","conclusion":"dom_rel ((Gsb ⨾ ⦗F ∩₁ Acq/Rel⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite (dom_r (@wf_sbE G)).\ngeneralize dom_sb_F_AcqRel_in_D.\nbasic_solver 10."},{"statement":"dom_rel (((Gsb ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Acq/Rel⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D.","conclusion":"dom_rel (((Gsb ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Acq/Rel⦘) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"generalize dom_sb_F_AcqRel_in_D.\nbasic_solver 10."},{"statement":"dom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ Gsb) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D.","conclusion":"dom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ Gsb) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite (dom_l (@wf_sbE G)).\ngeneralize E_F_AcqRel_in_C.\nrewrite (@C_in_D G T thread).\nbasic_solver 20."},{"statement":"dom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗E⦘ ⨾ Gsb) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D.","conclusion":"dom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗E⦘ ⨾ Gsb) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"generalize E_F_AcqRel_in_C.\nrewrite (@C_in_D G T thread).\nbasic_solver 20."},{"statement":"E ∩₁ F ∩₁ Acq/Rel ⊆₁ C ->\ndom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗E⦘ ⨾ Gsb) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D.","conclusion":"E ∩₁ F ∩₁ Acq/Rel ⊆₁ C ->\ndom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗E⦘ ⨾ Gsb) ⨾ ⦗C ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"rewrite (@C_in_D G T thread).\nbasic_solver 20."},{"statement":"E ∩₁ F ∩₁ Acq/Rel ⊆₁ D ->\ndom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗E⦘ ⨾ Gsb) ⨾ ⦗D ∪₁ I⦘) ⊆₁ D.","conclusion":"E ∩₁ F ∩₁ Acq/Rel ⊆₁ D ->\ndom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗E⦘ ⨾ Gsb) ⨾ ⦗D ∪₁ I⦘) ⊆₁ D","hypotheses":"","proofString":"basic_solver 20."},{"statement":"tls_coherent certG certT.","conclusion":"tls_coherent certG certT","hypotheses":"","proofString":"pose proof TCOH_rst_new_T as TCOH_.\ndestruct TCOH_.\nsplit.\nsimpl.\nrewrite init_tls_cert.\nunfold init_tls.\nrewrite !set_pair_alt.\nfold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver.\nby rewrite init_tls_cert, exec_tls_cert."},{"statement":"(TCOH_ : tls_coherent G certT) : tls_coherent certG certT.","conclusion":"tls_coherent certG certT","hypotheses":"(TCOH_ : tls_coherent G certT)","proofString":"destruct TCOH_.\nsplit.\nsimpl.\nrewrite init_tls_cert.\nunfold init_tls.\nrewrite !set_pair_alt.\nfold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver.\nby rewrite init_tls_cert, exec_tls_cert."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : tls_coherent certG certT.","conclusion":"tls_coherent certG certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"split.\nsimpl.\nrewrite init_tls_cert.\nunfold init_tls.\nrewrite !set_pair_alt.\nfold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver.\nby rewrite init_tls_cert, exec_tls_cert."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : init_tls certG ⊆₁ certT.","conclusion":"init_tls certG ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"simpl.\nrewrite init_tls_cert.\nunfold init_tls.\nrewrite !set_pair_alt.\nfold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : init_tls certG ⊆₁ certT.","conclusion":"init_tls certG ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite init_tls_cert.\nunfold init_tls.\nrewrite !set_pair_alt.\nfold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : init_tls G ⊆₁ certT.","conclusion":"init_tls G ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"unfold init_tls.\nrewrite !set_pair_alt.\nfold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ Init) ⊆₁ certT.","conclusion":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite !set_pair_alt.\nfold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ Init) ⊆₁ certT.","conclusion":"fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"fold event action.\nrewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT.","conclusion":"action\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite !set_map_union, !set_inter_union_l.\nrepeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ Init)\n∪₁ action ↓₁ eq ta_issue ∩₁ event ↓₁ (E ∩₁ Init)\n∪₁ action ↓₁ eq ta_reserve ∩₁ event ↓₁ (E ∩₁ Init)\n∪₁ action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT.","conclusion":"action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ Init)\n∪₁ action ↓₁ eq ta_issue ∩₁ event ↓₁ (E ∩₁ Init)\n∪₁ action ↓₁ eq ta_reserve ∩₁ event ↓₁ (E ∩₁ Init)\n∪₁ action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"repeat (apply set_subset_union_l; split).\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver.\nred.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver.\ntransitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT.","conclusion":"action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"red.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : forall x : trav_action * actid,\n(action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ Init)) x -> certT x.","conclusion":"forall x : trav_action * actid,\n(action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ Init)) x -> certT x","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"intros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_cover = a) (H1 : E (event (a, e))) (H2 : is_init (event (a, e))) : certT (a, e).","conclusion":"certT (a, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_cover = a) (H1 : E (event (a, e))) (H2 : is_init (event (a, e)))","proofString":"ins.\nsubst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_cover = a) (H1 : E e) (H2 : is_init e) : certT (a, e).","conclusion":"certT (a, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_cover = a) (H1 : E e) (H2 : is_init e)","proofString":"subst.\napply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : certT (ta_cover, e).","conclusion":"certT (ta_cover, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"apply tls_set_alt.\neapply init_covered; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : (event ↑₁ ((fun t : trav_label => certT t) ∩₁ action ↓₁ eq ta_cover)) e.","conclusion":"(event ↑₁ ((fun t : trav_label => certT t) ∩₁ action ↓₁ eq ta_cover)) e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"eapply init_covered; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : (Init ∩₁ E) e.","conclusion":"(Init ∩₁ E) e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"basic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ eq ta_issue ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT.","conclusion":"action ↓₁ eq ta_issue ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"red.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : forall x : trav_action * actid,\n(action ↓₁ eq ta_issue ∩₁ event ↓₁ (E ∩₁ Init)) x -> certT x.","conclusion":"forall x : trav_action * actid,\n(action ↓₁ eq ta_issue ∩₁ event ↓₁ (E ∩₁ Init)) x -> certT x","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"intros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_issue = a) (H1 : E (event (a, e))) (H2 : is_init (event (a, e))) : certT (a, e).","conclusion":"certT (a, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_issue = a) (H1 : E (event (a, e))) (H2 : is_init (event (a, e)))","proofString":"ins.\nsubst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_issue = a) (H1 : E e) (H2 : is_init e) : certT (a, e).","conclusion":"certT (a, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_issue = a) (H1 : E e) (H2 : is_init e)","proofString":"subst.\napply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : certT (ta_issue, e).","conclusion":"certT (ta_issue, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"apply tls_set_alt.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : (event ↑₁ ((fun t : trav_label => certT t) ∩₁ action ↓₁ eq ta_issue)) e.","conclusion":"(event ↑₁ ((fun t : trav_label => certT t) ∩₁ action ↓₁ eq ta_issue)) e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"eapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : (Init ∩₁ E) e.","conclusion":"(Init ∩₁ E) e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"basic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ eq ta_reserve ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT.","conclusion":"action ↓₁ eq ta_reserve ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"red.\nintros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : forall x : trav_action * actid,\n(action ↓₁ eq ta_reserve ∩₁ event ↓₁ (E ∩₁ Init)) x -> certT x.","conclusion":"forall x : trav_action * actid,\n(action ↓₁ eq ta_reserve ∩₁ event ↓₁ (E ∩₁ Init)) x -> certT x","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"intros [a e] [[=] [?]].\nins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_reserve = a) (H1 : E (event (a, e))) (H2 : is_init (event (a, e))) : certT (a, e).","conclusion":"certT (a, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_reserve = a) (H1 : E (event (a, e))) (H2 : is_init (event (a, e)))","proofString":"ins.\nsubst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_reserve = a) (H1 : E e) (H2 : is_init e) : certT (a, e).","conclusion":"certT (a, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (a : trav_action) (e : actid) (H0 : ta_reserve = a) (H1 : E e) (H2 : is_init e)","proofString":"subst.\napply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : certT (ta_reserve, e).","conclusion":"certT (ta_reserve, e)","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"apply tls_set_alt.\napply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : (event ↑₁ ((fun t : trav_label => certT t) ∩₁ action ↓₁ eq ta_reserve)) e.","conclusion":"(event ↑₁ ((fun t : trav_label => certT t) ∩₁ action ↓₁ eq ta_reserve)) e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"apply reserved_certT.\nleft.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : (I ∪₁ S ∩₁ Tid_ thread) e.","conclusion":"(I ∪₁ S ∩₁ Tid_ thread) e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"left.\neapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : I e.","conclusion":"I e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"eapply issued_certT.\neapply init_issued; eauto.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e) : (Init ∩₁ E) e.","conclusion":"(Init ∩₁ E) e","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (e : actid) (H1 : E e) (H2 : is_init e)","proofString":"basic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT.","conclusion":"action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init) ⊆₁ certT","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"transitivity (certT ∩₁ action ↓₁ is_ta_propagate_to_G G); [| basic_solver].\nrewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ certT ∩₁ action ↓₁ is_ta_propagate_to_G G.","conclusion":"action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ certT ∩₁ action ↓₁ is_ta_propagate_to_G G","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite <- tls_coh_init.\nunfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ init_tls G ∩₁ action ↓₁ is_ta_propagate_to_G G.","conclusion":"action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ init_tls G ∩₁ action ↓₁ is_ta_propagate_to_G G","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"unfold init_tls.\nrewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init) ∩₁ action ↓₁ is_ta_propagate_to_G G.","conclusion":"action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init) ∩₁ action ↓₁ is_ta_propagate_to_G G","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite set_pair_alt.\nbasic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ fst\n   ↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ (E ∩₁ Init) ∩₁ action ↓₁ is_ta_propagate_to_G G.","conclusion":"action ↓₁ is_ta_propagate_to_G G ∩₁ event ↓₁ (E ∩₁ Init)\n⊆₁ fst\n   ↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ (E ∩₁ Init) ∩₁ action ↓₁ is_ta_propagate_to_G G","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"basic_solver."},{"statement":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : certT ⊆₁ init_tls certG ∪₁ exec_tls certG.","conclusion":"certT ⊆₁ init_tls certG ∪₁ exec_tls certG","hypotheses":"(tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"by rewrite init_tls_cert, exec_tls_cert."},{"statement":"(FAIR : mem_fair G) : imm_consistent certG sc.","conclusion":"imm_consistent certG sc","hypotheses":"(FAIR : mem_fair G)","proofString":"by apply cert_imm_consistent."},{"statement":"(FAIR : mem_fair G) : tls_iord_coherent_alt_old certG sc certT.","conclusion":"tls_iord_coherent_alt_old certG sc certT","hypotheses":"(FAIR : mem_fair G)","proofString":"apply TICOH_cert_old."},{"statement":"(FAIR : mem_fair G) : dom_rel (IPROP certG ⨾ ⦗certT⦘) ⊆₁ certT.","conclusion":"dom_rel (IPROP certG ⨾ ⦗certT⦘) ⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"arewrite (IPROP certG ≡ IPROP G).\nunfold IPROP.\nerewrite certG_same_props, cert_W; eauto.\nrewrite set_split_complete with (s' := dom_rel _) (s := event ↓₁ is_init).\nunionL.\ndestruct TCOH_rst_new_T.\nrewrite <- tls_coh_init at 2.\nunfold init_tls.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver.\nrewrite set_interC, <- dom_eqv1.\nrewrite <- seq_eqvK with (dom := certT), <- !seqA.\neapply dom_rel_iord_ext_parts_tl; eauto.\nunfold iord_simpl.\nbasic_solver.\nunfold IPROP.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) : IPROP certG ≡ IPROP G.","conclusion":"IPROP certG ≡ IPROP G","hypotheses":"(FAIR : mem_fair G)","proofString":"unfold IPROP.\nerewrite certG_same_props, cert_W; eauto."},{"statement":"(FAIR : mem_fair G) : ⦗action ↓₁ eq ta_issue⦘\n⨾ event ↓ (eq ⨾ ⦗CW⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G certG⦘\n≡ ⦗action ↓₁ eq ta_issue⦘\n  ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘.","conclusion":"⦗action ↓₁ eq ta_issue⦘\n⨾ event ↓ (eq ⨾ ⦗CW⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G certG⦘\n≡ ⦗action ↓₁ eq ta_issue⦘\n  ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘","hypotheses":"(FAIR : mem_fair G)","proofString":"erewrite certG_same_props, cert_W; eauto."},{"statement":"(FAIR : mem_fair G) : dom_rel (IPROP G ⨾ ⦗certT⦘) ⊆₁ certT.","conclusion":"dom_rel (IPROP G ⨾ ⦗certT⦘) ⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"rewrite set_split_complete with (s' := dom_rel _) (s := event ↓₁ is_init).\nunionL.\ndestruct TCOH_rst_new_T.\nrewrite <- tls_coh_init at 2.\nunfold init_tls.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver.\nrewrite set_interC, <- dom_eqv1.\nrewrite <- seq_eqvK with (dom := certT), <- !seqA.\neapply dom_rel_iord_ext_parts_tl; eauto.\nunfold iord_simpl.\nbasic_solver.\nunfold IPROP.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) : dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init\n∪₁ dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ set_compl (event ↓₁ Init) ⊆₁ certT.","conclusion":"dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init\n∪₁ dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ set_compl (event ↓₁ Init) ⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"unionL.\ndestruct TCOH_rst_new_T.\nrewrite <- tls_coh_init at 2.\nunfold init_tls.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver.\nrewrite set_interC, <- dom_eqv1.\nrewrite <- seq_eqvK with (dom := certT), <- !seqA.\neapply dom_rel_iord_ext_parts_tl; eauto.\nunfold iord_simpl.\nbasic_solver.\nunfold IPROP.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) : dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init ⊆₁ certT.","conclusion":"dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init ⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"destruct TCOH_rst_new_T.\nrewrite <- tls_coh_init at 2.\nunfold init_tls.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init ⊆₁ certT.","conclusion":"dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init ⊆₁ certT","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite <- tls_coh_init at 2.\nunfold init_tls.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init ⊆₁ init_tls G.","conclusion":"dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init ⊆₁ init_tls G","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"unfold init_tls.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init).","conclusion":"dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ event ↓₁ Init\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init)","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : dom_rel (IPROP G ⨾ ⦗event ↓₁ E⦘) ∩₁ event ↓₁ Init\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init).","conclusion":"dom_rel (IPROP G ⨾ ⦗event ↓₁ E⦘) ∩₁ event ↓₁ Init\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init)","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"unfold IPROP.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : dom_rel\n  ((⦗action ↓₁ eq ta_issue⦘\n    ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘) ⨾ ⦗\n   event ↓₁ E⦘) ∩₁ event ↓₁ Init\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init).","conclusion":"dom_rel\n  ((⦗action ↓₁ eq ta_issue⦘\n    ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘) ⨾ ⦗\n   event ↓₁ E⦘) ∩₁ event ↓₁ Init\n⊆₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ Init)","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"unfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) : forall x : trav_label,\n(exists y : trav_label,\n   ta_issue = action x /\\\n   (exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\n   is_ta_propagate_to_G G (action y) /\\ E (event y)) /\\ \nis_init (event x) ->\n((fun x0 : trav_action =>\n  ((ta_cover = x0 \\/ ta_issue = x0) \\/ ta_reserve = x0) \\/\n  is_ta_propagate_to_G G x0) <*> (fun x0 : actid => E x0 /\\ is_init x0)) x.","conclusion":"forall x : trav_label,\n(exists y : trav_label,\n   ta_issue = action x /\\\n   (exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\n   is_ta_propagate_to_G G (action y) /\\ E (event y)) /\\ \nis_init (event x) ->\n((fun x0 : trav_action =>\n  ((ta_cover = x0 \\/ ta_issue = x0) \\/ ta_reserve = x0) \\/\n  is_ta_propagate_to_G G x0) <*> (fun x0 : actid => E x0 /\\ is_init x0)) x","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"ins.\ndesc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (x : trav_label) (H : (exists y : trav_label,\n   ta_issue = action x /\\\n   (exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\n   is_ta_propagate_to_G G (action y) /\\ E (event y)) /\\ \nis_init (event x)) : ((fun x0 : trav_action =>\n  ((ta_cover = x0 \\/ ta_issue = x0) \\/ ta_reserve = x0) \\/\n  is_ta_propagate_to_G G x0) <*> (fun x0 : actid => E x0 /\\ is_init x0)) x.","conclusion":"((fun x0 : trav_action =>\n  ((ta_cover = x0 \\/ ta_issue = x0) \\/ ta_reserve = x0) \\/\n  is_ta_propagate_to_G G x0) <*> (fun x0 : actid => E x0 /\\ is_init x0)) x","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (x : trav_label) (H : (exists y : trav_label,\n   ta_issue = action x /\\\n   (exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\n   is_ta_propagate_to_G G (action y) /\\ E (event y)) /\\ \nis_init (event x))","proofString":"desc.\ndestruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (x y : trav_label) (H : ta_issue = action x) (z : actid) (H1 : event x = z) (H4 : z = event y) (H5 : is_w Glab z) (H2 : is_ta_propagate_to_G G (action y)) (H3 : E (event y)) (H0 : is_init (event x)) : ((fun x0 : trav_action =>\n  ((ta_cover = x0 \\/ ta_issue = x0) \\/ ta_reserve = x0) \\/\n  is_ta_propagate_to_G G x0) <*> (fun x0 : actid => E x0 /\\ is_init x0)) x.","conclusion":"((fun x0 : trav_action =>\n  ((ta_cover = x0 \\/ ta_issue = x0) \\/ ta_reserve = x0) \\/\n  is_ta_propagate_to_G G x0) <*> (fun x0 : actid => E x0 /\\ is_init x0)) x","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (x y : trav_label) (H : ta_issue = action x) (z : actid) (H1 : event x = z) (H4 : z = event y) (H5 : is_w Glab z) (H2 : is_ta_propagate_to_G G (action y)) (H3 : E (event y)) (H0 : is_init (event x))","proofString":"destruct x, y; ins; subst.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (t0 : trav_action) (a0 : actid) (H5 : is_w Glab a0) (H2 : is_ta_propagate_to_G G t0) (H3 : E a0) (H0 : is_init a0) : (((ta_cover = ta_issue \\/ ta_issue = ta_issue) \\/ ta_reserve = ta_issue) \\/\n is_ta_propagate_to_G G ta_issue) /\\ E a0 /\\ is_init a0.","conclusion":"(((ta_cover = ta_issue \\/ ta_issue = ta_issue) \\/ ta_reserve = ta_issue) \\/\n is_ta_propagate_to_G G ta_issue) /\\ E a0 /\\ is_init a0","hypotheses":"(FAIR : mem_fair G) (tls_coh_init : init_tls G ⊆₁ certT) (tls_coh_exec : certT ⊆₁ init_tls G ∪₁ exec_tls G) (t0 : trav_action) (a0 : actid) (H5 : is_w Glab a0) (H2 : is_ta_propagate_to_G G t0) (H3 : E a0) (H0 : is_init a0)","proofString":"basic_solver."},{"statement":"(FAIR : mem_fair G) : dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ set_compl (event ↓₁ Init) ⊆₁ certT.","conclusion":"dom_rel (IPROP G ⨾ ⦗certT⦘) ∩₁ set_compl (event ↓₁ Init) ⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"rewrite set_interC, <- dom_eqv1.\nrewrite <- seq_eqvK with (dom := certT), <- !seqA.\neapply dom_rel_iord_ext_parts_tl; eauto.\nunfold iord_simpl.\nbasic_solver.\nunfold IPROP.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) : dom_rel (⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G ⨾ ⦗certT⦘) ⊆₁ certT.","conclusion":"dom_rel (⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G ⨾ ⦗certT⦘) ⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"rewrite <- seq_eqvK with (dom := certT), <- !seqA.\neapply dom_rel_iord_ext_parts_tl; eauto.\nunfold iord_simpl.\nbasic_solver.\nunfold IPROP.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) : dom_rel (((⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘) ⨾ ⦗certT⦘)\n⊆₁ certT.","conclusion":"dom_rel (((⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘) ⨾ ⦗certT⦘)\n⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"eapply dom_rel_iord_ext_parts_tl; eauto.\nunfold iord_simpl.\nbasic_solver.\nunfold IPROP.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) : (⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘ ⊆ iord_simpl G sc.","conclusion":"(⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘ ⊆ iord_simpl G sc","hypotheses":"(FAIR : mem_fair G)","proofString":"unfold iord_simpl.\nbasic_solver."},{"statement":"(FAIR : mem_fair G) : (⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘\n⊆ SB G sc ∪ RF G ∪ FWBOB G ∪ AR G sc ∪ IPROP G ∪ PROP G sc.","conclusion":"(⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘\n⊆ SB G sc ∪ RF G ∪ FWBOB G ∪ AR G sc ∪ IPROP G ∪ PROP G sc","hypotheses":"(FAIR : mem_fair G)","proofString":"basic_solver."},{"statement":"(FAIR : mem_fair G) : (⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘\n⊆ (event ↓₁ E) × (event ↓₁ (E \\₁ Init)).","conclusion":"(⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘\n⊆ (event ↓₁ E) × (event ↓₁ (E \\₁ Init))","hypotheses":"(FAIR : mem_fair G)","proofString":"unfold IPROP.\nrewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto."},{"statement":"(FAIR : mem_fair G) : (⦗set_compl (event ↓₁ Init)⦘\n ⨾ ⦗action ↓₁ eq ta_issue⦘\n   ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘) ⨾ ⦗certT⦘\n⊆ (event ↓₁ E) × (event ↓₁ (E \\₁ Init)).","conclusion":"(⦗set_compl (event ↓₁ Init)⦘\n ⨾ ⦗action ↓₁ eq ta_issue⦘\n   ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘) ⨾ ⦗certT⦘\n⊆ (event ↓₁ E) × (event ↓₁ (E \\₁ Init))","hypotheses":"(FAIR : mem_fair G)","proofString":"rewrite tlsc_E with (tc := certT) (G := G); eauto.\nunfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto."},{"statement":"(FAIR : mem_fair G) : (⦗set_compl (event ↓₁ Init)⦘\n ⨾ ⦗action ↓₁ eq ta_issue⦘\n   ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘) ⨾ ⦗\nevent ↓₁ E⦘ ⊆ (event ↓₁ E) × (event ↓₁ (E \\₁ Init)).","conclusion":"(⦗set_compl (event ↓₁ Init)⦘\n ⨾ ⦗action ↓₁ eq ta_issue⦘\n   ⨾ event ↓ (eq ⨾ ⦗W⦘) ⨾ ⦗action ↓₁ is_ta_propagate_to_G G⦘) ⨾ ⦗\nevent ↓₁ E⦘ ⊆ (event ↓₁ E) × (event ↓₁ (E \\₁ Init))","hypotheses":"(FAIR : mem_fair G)","proofString":"unfolder.\nins.\ndesc.\ndestruct x, y; ins; subst.\nvauto."},{"statement":"(FAIR : mem_fair G) : forall x y : trav_label,\n(~ is_init (event x) /\\ ta_issue = action x) /\\\n(exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\nis_ta_propagate_to_G G (action y) /\\ E (event y) ->\nE (event x) /\\ E (event y) /\\ ~ is_init (event y).","conclusion":"forall x y : trav_label,\n(~ is_init (event x) /\\ ta_issue = action x) /\\\n(exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\nis_ta_propagate_to_G G (action y) /\\ E (event y) ->\nE (event x) /\\ E (event y) /\\ ~ is_init (event y)","hypotheses":"(FAIR : mem_fair G)","proofString":"ins.\ndesc.\ndestruct x, y; ins; subst.\nvauto."},{"statement":"(FAIR : mem_fair G) (x y : trav_label) (H : (~ is_init (event x) /\\ ta_issue = action x) /\\\n(exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\nis_ta_propagate_to_G G (action y) /\\ E (event y)) : E (event x) /\\ E (event y) /\\ ~ is_init (event y).","conclusion":"E (event x) /\\ E (event y) /\\ ~ is_init (event y)","hypotheses":"(FAIR : mem_fair G) (x y : trav_label) (H : (~ is_init (event x) /\\ ta_issue = action x) /\\\n(exists z : actid, event x = z /\\ z = event y /\\ is_w Glab z) /\\\nis_ta_propagate_to_G G (action y) /\\ E (event y))","proofString":"desc.\ndestruct x, y; ins; subst.\nvauto."},{"statement":"(FAIR : mem_fair G) (x y : trav_label) (H : ~ is_init (event x)) (H5 : ta_issue = action x) (z : actid) (H0 : event x = z) (H3 : z = event y) (H4 : is_w Glab z) (H1 : is_ta_propagate_to_G G (action y)) (H2 : E (event y)) : E (event x) /\\ E (event y) /\\ ~ is_init (event y).","conclusion":"E (event x) /\\ E (event y) /\\ ~ is_init (event y)","hypotheses":"(FAIR : mem_fair G) (x y : trav_label) (H : ~ is_init (event x)) (H5 : ta_issue = action x) (z : actid) (H0 : event x = z) (H3 : z = event y) (H4 : is_w Glab z) (H1 : is_ta_propagate_to_G G (action y)) (H2 : E (event y))","proofString":"destruct x, y; ins; subst.\nvauto."},{"statement":"(FAIR : mem_fair G) (t0 : trav_action) (a0 : actid) (H : ~ is_init a0) (H4 : is_w Glab a0) (H1 : is_ta_propagate_to_G G t0) (H2 : E a0) : E a0 /\\ E a0 /\\ ~ is_init a0.","conclusion":"E a0 /\\ E a0 /\\ ~ is_init a0","hypotheses":"(FAIR : mem_fair G) (t0 : trav_action) (a0 : actid) (H : ~ is_init a0) (H4 : is_w Glab a0) (H1 : is_ta_propagate_to_G G t0) (H2 : E a0)","proofString":"vauto."},{"statement":"(FAIR : mem_fair G) : event ↓₁ Init ∩₁ dom_rel ((⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘)\n⊆₁ certT.","conclusion":"event ↓₁ Init ∩₁ dom_rel ((⦗set_compl (event ↓₁ Init)⦘ ⨾ IPROP G) ⨾ ⦗certT⦘)\n⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"basic_solver."},{"statement":"(FAIR : mem_fair G) : dom_rel (PROP certG sc ⨾ ⦗certT⦘) ⊆₁ certT.","conclusion":"dom_rel (PROP certG sc ⨾ ⦗certT⦘) ⊆₁ certT","hypotheses":"(FAIR : mem_fair G)","proofString":"apply dom_prop_cert."},{"statement":"Cdetour ⨾ ⦗D⦘ ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe).","conclusion":"Cdetour ⨾ ⦗D⦘ ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe)","hypotheses":"","proofString":"forward (eapply cert_detour_D with (G:=G)); eauto.\nintros HH.\nrewrite HH.\nforward (eapply cert_rfe_D with (G:=G)); eauto.\nintros AA.\nrewrite AA.\nby rewrite seq_union_r."},{"statement":"Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour ->\nCdetour ⨾ ⦗D⦘ ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe).","conclusion":"Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour ->\nCdetour ⨾ ⦗D⦘ ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe)","hypotheses":"","proofString":"intros HH.\nrewrite HH.\nforward (eapply cert_rfe_D with (G:=G)); eauto.\nintros AA.\nrewrite AA.\nby rewrite seq_union_r."},{"statement":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour) : Cdetour ⨾ ⦗D⦘ ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe).","conclusion":"Cdetour ⨾ ⦗D⦘ ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe)","hypotheses":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour)","proofString":"rewrite HH.\nforward (eapply cert_rfe_D with (G:=G)); eauto.\nintros AA.\nrewrite AA.\nby rewrite seq_union_r."},{"statement":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour) : ⦗I⦘ ⨾ Gdetour ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe).","conclusion":"⦗I⦘ ⨾ Gdetour ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe)","hypotheses":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour)","proofString":"forward (eapply cert_rfe_D with (G:=G)); eauto.\nintros AA.\nrewrite AA.\nby rewrite seq_union_r."},{"statement":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour) : cert_rfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Grfe ->\n⦗I⦘ ⨾ Gdetour ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe).","conclusion":"cert_rfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Grfe ->\n⦗I⦘ ⨾ Gdetour ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe)","hypotheses":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour)","proofString":"intros AA.\nrewrite AA.\nby rewrite seq_union_r."},{"statement":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour) (AA : cert_rfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Grfe) : ⦗I⦘ ⨾ Gdetour ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe).","conclusion":"⦗I⦘ ⨾ Gdetour ∪ Crfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe)","hypotheses":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour) (AA : cert_rfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Grfe)","proofString":"rewrite AA.\nby rewrite seq_union_r."},{"statement":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour) (AA : cert_rfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Grfe) : ⦗I⦘ ⨾ Gdetour ∪ ⦗I⦘ ⨾ Grfe ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe).","conclusion":"⦗I⦘ ⨾ Gdetour ∪ ⦗I⦘ ⨾ Grfe ⊆ ⦗I⦘ ⨾ (Gdetour ∪ Grfe)","hypotheses":"(HH : Cdetour ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Gdetour) (AA : cert_rfe ⨾ ⦗D⦘ ⊆ ⦗I⦘ ⨾ Grfe)","proofString":"by rewrite seq_union_r."},{"statement":"dom_rel (⦗I⦘ ⨾ (Gdetour ∪ Grfe)) ⊆₁ I.","conclusion":"dom_rel (⦗I⦘ ⨾ (Gdetour ∪ Grfe)) ⊆₁ I","hypotheses":"","proofString":"basic_solver."},{"statement":"(ctrl certG ∪ addr certG ⨾ Csb^? ∪ rmw_dep certG ⨾ Csb\n ∪ ⦗fun a : actid => R_ex Clab a⦘ ⨾ Csb) ⨾ ⦗CW⦘\n⊆ (Gctrl ∪ Gaddr ⨾ Gsb^? ∪ Grmw_dep ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘.","conclusion":"(ctrl certG ∪ addr certG ⨾ Csb^? ∪ rmw_dep certG ⨾ Csb\n ∪ ⦗fun a : actid => R_ex Clab a⦘ ⨾ Csb) ⨾ ⦗CW⦘\n⊆ (Gctrl ∪ Gaddr ⨾ Gsb^? ∪ Grmw_dep ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘","hypotheses":"","proofString":"rewrite cert_sb, cert_R_ex, cert_W; eauto.\nunfold CertExecution2.certG.\nsimpls."},{"statement":"(ctrl certG ∪ addr certG ⨾ Gsb^? ∪ rmw_dep certG ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘\n⊆ (Gctrl ∪ Gaddr ⨾ Gsb^? ∪ Grmw_dep ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘.","conclusion":"(ctrl certG ∪ addr certG ⨾ Gsb^? ∪ rmw_dep certG ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘\n⊆ (Gctrl ∪ Gaddr ⨾ Gsb^? ∪ Grmw_dep ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘","hypotheses":"","proofString":"unfold CertExecution2.certG.\nsimpls."},{"statement":"(ctrl\n   {|\n     acts_set := E;\n     threads_set := threads_set G;\n     lab := lab';\n     rmw := Grmw;\n     data := Gdata;\n     addr := Gaddr;\n     ctrl := Gctrl;\n     rmw_dep := Grmw_dep;\n     rf := cert_rf;\n     co := cert_co\n   |}\n ∪ addr\n     {|\n       acts_set := E;\n       threads_set := threads_set G;\n       lab := lab';\n       rmw := Grmw;\n       data := Gdata;\n       addr := Gaddr;\n       ctrl := Gctrl;\n       rmw_dep := Grmw_dep;\n       rf := cert_rf;\n       co := cert_co\n     |} ⨾ Gsb^?\n ∪ rmw_dep\n     {|\n       acts_set := E;\n       threads_set := threads_set G;\n       lab := lab';\n       rmw := Grmw;\n       data := Gdata;\n       addr := Gaddr;\n       ctrl := Gctrl;\n       rmw_dep := Grmw_dep;\n       rf := cert_rf;\n       co := cert_co\n     |} ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘\n⊆ (Gctrl ∪ Gaddr ⨾ Gsb^? ∪ Grmw_dep ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘.","conclusion":"(ctrl\n   {|\n     acts_set := E;\n     threads_set := threads_set G;\n     lab := lab';\n     rmw := Grmw;\n     data := Gdata;\n     addr := Gaddr;\n     ctrl := Gctrl;\n     rmw_dep := Grmw_dep;\n     rf := cert_rf;\n     co := cert_co\n   |}\n ∪ addr\n     {|\n       acts_set := E;\n       threads_set := threads_set G;\n       lab := lab';\n       rmw := Grmw;\n       data := Gdata;\n       addr := Gaddr;\n       ctrl := Gctrl;\n       rmw_dep := Grmw_dep;\n       rf := cert_rf;\n       co := cert_co\n     |} ⨾ Gsb^?\n ∪ rmw_dep\n     {|\n       acts_set := E;\n       threads_set := threads_set G;\n       lab := lab';\n       rmw := Grmw;\n       data := Gdata;\n       addr := Gaddr;\n       ctrl := Gctrl;\n       rmw_dep := Grmw_dep;\n       rf := cert_rf;\n       co := cert_co\n     |} ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘\n⊆ (Gctrl ∪ Gaddr ⨾ Gsb^? ∪ Grmw_dep ⨾ Gsb ∪ ⦗GR_ex⦘ ⨾ Gsb) ⨾ ⦗W⦘","hypotheses":"","proofString":"simpls."},{"statement":"(Gdata ∪ Crfi ∪ Grmw)＊ ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂ ->\ndom_rel ((Gdata ∪ Crfi ∪ Grmw)＊ ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"(Gdata ∪ Crfi ∪ Grmw)＊ ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂ ->\ndom_rel ((Gdata ∪ Crfi ∪ Grmw)＊ ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"","proofString":"unfolder; intros HH; ins; desf.\neapply HH; eauto."},{"statement":"(HH : forall x0 y0 : actid,\n(fun x1 y1 : actid => (Gdata x1 y1 \\/ Crfi x1 y1) \\/ Grmw x1 y1)＊ x0 y0 /\\\nD y0 -> D x0 /\\ True) (x y : actid) (H : (fun x0 y0 : actid => (Gdata x0 y0 \\/ Crfi x0 y0) \\/ Grmw x0 y0)＊ x y) (H0 : D y) : D x.","conclusion":"D x","hypotheses":"(HH : forall x0 y0 : actid,\n(fun x1 y1 : actid => (Gdata x1 y1 \\/ Crfi x1 y1) \\/ Grmw x1 y1)＊ x0 y0 /\\\nD y0 -> D x0 /\\ True) (x y : actid) (H : (fun x0 y0 : actid => (Gdata x0 y0 \\/ Crfi x0 y0) \\/ Grmw x0 y0)＊ x y) (H0 : D y)","proofString":"eapply HH; eauto."},{"statement":"good_ctx (fun r : relation actid => r ⨾ ⦗D⦘).","conclusion":"good_ctx (fun r : relation actid => r ⨾ ⦗D⦘)","hypotheses":"","proofString":"eauto with hahn."},{"statement":"⦗fun _ : actid => True⦘ ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂.","conclusion":"⦗fun _ : actid => True⦘ ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂","hypotheses":"","proofString":"basic_solver."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : (⦗D⦘ ⨾ ⊤₂) ⨾ ⊤₂ ⊆ ⦗D⦘ ⨾ ⊤₂.","conclusion":"(⦗D⦘ ⨾ ⊤₂) ⨾ ⊤₂ ⊆ ⦗D⦘ ⨾ ⊤₂","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"clear.\nbasic_solver."},{"statement":"(⦗D⦘ ⨾ ⊤₂) ⨾ ⊤₂ ⊆ ⦗D⦘ ⨾ ⊤₂.","conclusion":"(⦗D⦘ ⨾ ⊤₂) ⨾ ⊤₂ ⊆ ⦗D⦘ ⨾ ⊤₂","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗D⦘ ⨾ (Gdata ∪ Crfi ∪ Grmw) ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂.","conclusion":"⦗D⦘ ⨾ (Gdata ∪ Crfi ∪ Grmw) ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂","hypotheses":"","proofString":"basic_solver."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : dom_rel ((Gdata ∪ Crfi ∪ Grmw) ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel ((Gdata ∪ Crfi ∪ Grmw) ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"rewrite !seq_union_l, !dom_union.\nunionL.\neby eapply dom_data_D.\nrewrite cert_rfi_eq.\nerewrite cert_rfi_D; eauto.\nclear.\nbasic_solver.\neby eapply dom_rmw_D."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : dom_rel (Gdata ⨾ ⦗D⦘) ∪₁ dom_rel (Crfi ⨾ ⦗D⦘) ∪₁ dom_rel (Grmw ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel (Gdata ⨾ ⦗D⦘) ∪₁ dom_rel (Crfi ⨾ ⦗D⦘) ∪₁ dom_rel (Grmw ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"unionL.\neby eapply dom_data_D.\nrewrite cert_rfi_eq.\nerewrite cert_rfi_D; eauto.\nclear.\nbasic_solver.\neby eapply dom_rmw_D."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : dom_rel (Gdata ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel (Gdata ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"eby eapply dom_data_D."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : dom_rel (Crfi ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel (Crfi ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"rewrite cert_rfi_eq.\nerewrite cert_rfi_D; eauto.\nclear.\nbasic_solver."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : dom_rel (cert_rfi ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel (cert_rfi ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"erewrite cert_rfi_D; eauto.\nclear.\nbasic_solver."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : dom_rel (⦗D⦘ ⨾ Grfi ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel (⦗D⦘ ⨾ Grfi ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"clear.\nbasic_solver."},{"statement":"dom_rel (⦗D⦘ ⨾ Grfi ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel (⦗D⦘ ⨾ Grfi ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"","proofString":"basic_solver."},{"statement":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂) : dom_rel (Grmw ⨾ ⦗D⦘) ⊆₁ D.","conclusion":"dom_rel (Grmw ⨾ ⦗D⦘) ⊆₁ D","hypotheses":"(h : relation actid) (HH : h ⨾ ⦗D⦘ ⊆ ⦗D⦘ ⨾ ⊤₂)","proofString":"eby eapply dom_rmw_D."}]}