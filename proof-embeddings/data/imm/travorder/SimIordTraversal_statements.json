{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/bigRocq/dataset/imm/src/travorder/SimIordTraversal.v","fileSamples":[{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (INSET : forall i0 : nat, NOmega.lt_nat_l i0 (set_size dom) -> dom (steps i0)) (INJ : forall i0 : nat,\nNOmega.lt_nat_l i0 (set_size dom) ->\nforall j : nat,\nNOmega.lt_nat_l j (set_size dom) -> steps i0 = steps j -> i0 = j) (IND : forall a : trav_label,\ndom a -> exists i0 : nat, NOmega.lt_nat_l i0 (set_size dom) /\\ steps i0 = a) : trav_prefix steps i ⊆₁ exec_tls G.","proofString":"unfold trav_prefix.\napply set_subset_bunion_l.\nintros.\nrewrite <- DOM_EXEC.\napply set_subset_single_l.\napply INSET.\nliaW (set_size dom)."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (INSET : forall i0 : nat, NOmega.lt_nat_l i0 (set_size dom) -> dom (steps i0)) (INJ : forall i0 : nat,\nNOmega.lt_nat_l i0 (set_size dom) ->\nforall j : nat,\nNOmega.lt_nat_l j (set_size dom) -> steps i0 = steps j -> i0 = j) (IND : forall a : trav_label,\ndom a -> exists i0 : nat, NOmega.lt_nat_l i0 (set_size dom) /\\ steps i0 = a) : (⋃₁j < i, eq (steps j)) ⊆₁ exec_tls G.","proofString":"apply set_subset_bunion_l.\nintros.\nrewrite <- DOM_EXEC.\napply set_subset_single_l.\napply INSET.\nliaW (set_size dom)."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (INSET : forall i0 : nat, NOmega.lt_nat_l i0 (set_size dom) -> dom (steps i0)) (INJ : forall i0 : nat,\nNOmega.lt_nat_l i0 (set_size dom) ->\nforall j : nat,\nNOmega.lt_nat_l j (set_size dom) -> steps i0 = steps j -> i0 = j) (IND : forall a : trav_label,\ndom a -> exists i0 : nat, NOmega.lt_nat_l i0 (set_size dom) /\\ steps i0 = a) : forall x : nat, x < i -> eq (steps x) ⊆₁ exec_tls G.","proofString":"intros.\nrewrite <- DOM_EXEC.\napply set_subset_single_l.\napply INSET.\nliaW (set_size dom)."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (INSET : forall i0 : nat, NOmega.lt_nat_l i0 (set_size dom) -> dom (steps i0)) (INJ : forall i0 : nat,\nNOmega.lt_nat_l i0 (set_size dom) ->\nforall j : nat,\nNOmega.lt_nat_l j (set_size dom) -> steps i0 = steps j -> i0 = j) (IND : forall a : trav_label,\ndom a -> exists i0 : nat, NOmega.lt_nat_l i0 (set_size dom) /\\ steps i0 = a) (x : nat) (COND : x < i) : eq (steps x) ⊆₁ exec_tls G.","proofString":"rewrite <- DOM_EXEC.\napply set_subset_single_l.\napply INSET.\nliaW (set_size dom)."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (INSET : forall i0 : nat, NOmega.lt_nat_l i0 (set_size dom) -> dom (steps i0)) (INJ : forall i0 : nat,\nNOmega.lt_nat_l i0 (set_size dom) ->\nforall j : nat,\nNOmega.lt_nat_l j (set_size dom) -> steps i0 = steps j -> i0 = j) (IND : forall a : trav_label,\ndom a -> exists i0 : nat, NOmega.lt_nat_l i0 (set_size dom) /\\ steps i0 = a) (x : nat) (COND : x < i) : eq (steps x) ⊆₁ dom.","proofString":"apply set_subset_single_l.\napply INSET.\nliaW (set_size dom)."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (INSET : forall i0 : nat, NOmega.lt_nat_l i0 (set_size dom) -> dom (steps i0)) (INJ : forall i0 : nat,\nNOmega.lt_nat_l i0 (set_size dom) ->\nforall j : nat,\nNOmega.lt_nat_l j (set_size dom) -> steps i0 = steps j -> i0 = j) (IND : forall a : trav_label,\ndom a -> exists i0 : nat, NOmega.lt_nat_l i0 (set_size dom) /\\ steps i0 = a) (x : nat) (COND : x < i) : dom (steps x).","proofString":"apply INSET.\nliaW (set_size dom)."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (INSET : forall i0 : nat, NOmega.lt_nat_l i0 (set_size dom) -> dom (steps i0)) (INJ : forall i0 : nat,\nNOmega.lt_nat_l i0 (set_size dom) ->\nforall j : nat,\nNOmega.lt_nat_l j (set_size dom) -> steps i0 = steps j -> i0 = j) (IND : forall a : trav_label,\ndom a -> exists i0 : nat, NOmega.lt_nat_l i0 (set_size dom) /\\ steps i0 = a) (x : nat) (COND : x < i) : NOmega.lt_nat_l x (set_size dom).","proofString":"liaW (set_size dom)."},{"statement":"(i : nat) (DOMsi : NOmega.lt_nat_l i (set_size dom)) : exists tl : trav_label,\n  iiord_step G sc tl (trav_prefix steps i) (trav_prefix steps (S i)).","proofString":"exists (steps i).\ndo 2 red.\nsplits; try by (red; eapply trav_prefix_r_closed; eauto; liaW (set_size dom)).\napply seq_eqv_l.\nsplit.\neapply prefix_border; eauto.\neapply trav_prefix_ext; eauto."},{"statement":"(i : nat) (DOMsi : NOmega.lt_nat_l i (set_size dom)) : iiord_step G sc (steps i) (trav_prefix steps i) (trav_prefix steps (S i)).","proofString":"do 2 red.\nsplits; try by (red; eapply trav_prefix_r_closed; eauto; liaW (set_size dom)).\napply seq_eqv_l.\nsplit.\neapply prefix_border; eauto.\neapply trav_prefix_ext; eauto."},{"statement":"(i : nat) (DOMsi : NOmega.lt_nat_l i (set_size dom)) : (⦗fun tc : trav_label -> Prop => set_compl tc (steps i)⦘\n ⨾ (fun tc tc' : trav_label -> Prop => tc' ≡₁ tc ∪₁ eq (steps i)))\n  (trav_prefix steps i) (trav_prefix steps (S i)) /\\\niord_coherent G sc (trav_prefix steps i) /\\\niord_coherent G sc (trav_prefix steps (S i)).","proofString":"splits; try by (red; eapply trav_prefix_r_closed; eauto; liaW (set_size dom)).\napply seq_eqv_l.\nsplit.\neapply prefix_border; eauto.\neapply trav_prefix_ext; eauto."},{"statement":"(i : nat) (DOMsi : NOmega.lt_nat_l i (set_size dom)) : (⦗fun tc : trav_label -> Prop => set_compl tc (steps i)⦘\n ⨾ (fun tc tc' : trav_label -> Prop => tc' ≡₁ tc ∪₁ eq (steps i)))\n  (trav_prefix steps i) (trav_prefix steps (S i)).","proofString":"apply seq_eqv_l.\nsplit.\neapply prefix_border; eauto.\neapply trav_prefix_ext; eauto."},{"statement":"(i : nat) (DOMsi : NOmega.lt_nat_l i (set_size dom)) : set_compl (trav_prefix steps i) (steps i) /\\\ntrav_prefix steps (S i) ≡₁ trav_prefix steps i ∪₁ eq (steps i).","proofString":"split.\neapply prefix_border; eauto.\neapply trav_prefix_ext; eauto."},{"statement":"(i : nat) (DOMsi : NOmega.lt_nat_l i (set_size dom)) : set_compl (trav_prefix steps i) (steps i).","proofString":"eapply prefix_border; eauto."},{"statement":"(i : nat) (DOMsi : NOmega.lt_nat_l i (set_size dom)) : trav_prefix steps (S i) ≡₁ trav_prefix steps i ∪₁ eq (steps i).","proofString":"eapply trav_prefix_ext; eauto."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel (iord ⨾ ⦗trav_prefix steps i ∪₁ init_tls G⦘)\n⊆₁ trav_prefix steps i ∪₁ init_tls G.","proofString":"rewrite id_union, seq_union_r, dom_union.\napply set_subset_union_l.\nsplit.\napply set_subset_union_r.\nleft.\neapply trav_prefix_r_closed; eauto.\nunfold \"iord\".\nrewrite init_tls_EI at 1.\nbasic_solver."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel (iord ⨾ ⦗trav_prefix steps i⦘) ∪₁ dom_rel (iord ⨾ ⦗init_tls G⦘)\n⊆₁ trav_prefix steps i ∪₁ init_tls G.","proofString":"apply set_subset_union_l.\nsplit.\napply set_subset_union_r.\nleft.\neapply trav_prefix_r_closed; eauto.\nunfold \"iord\".\nrewrite init_tls_EI at 1.\nbasic_solver."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel (iord ⨾ ⦗trav_prefix steps i⦘) ⊆₁ trav_prefix steps i ∪₁ init_tls G /\\\ndom_rel (iord ⨾ ⦗init_tls G⦘) ⊆₁ trav_prefix steps i ∪₁ init_tls G.","proofString":"split.\napply set_subset_union_r.\nleft.\neapply trav_prefix_r_closed; eauto.\nunfold \"iord\".\nrewrite init_tls_EI at 1.\nbasic_solver."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel (iord ⨾ ⦗trav_prefix steps i⦘) ⊆₁ trav_prefix steps i ∪₁ init_tls G.","proofString":"apply set_subset_union_r.\nleft.\neapply trav_prefix_r_closed; eauto."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel (iord ⨾ ⦗trav_prefix steps i⦘) ⊆₁ trav_prefix steps i \\/\ndom_rel (iord ⨾ ⦗trav_prefix steps i⦘) ⊆₁ init_tls G.","proofString":"left.\neapply trav_prefix_r_closed; eauto."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel (iord ⨾ ⦗trav_prefix steps i⦘) ⊆₁ trav_prefix steps i.","proofString":"eapply trav_prefix_r_closed; eauto."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel (iord ⨾ ⦗init_tls G⦘) ⊆₁ trav_prefix steps i ∪₁ init_tls G.","proofString":"unfold \"iord\".\nrewrite init_tls_EI at 1.\nbasic_solver."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel\n  (restr_rel (event ↓₁ (E \\₁ (fun a : actid => is_init a)))\n     (SB ∪ RF ∪ FWBOB ∪ AR ∪ IPROP G ∪ PROP G sc) ⨾ ⦗\n   init_tls G⦘) ⊆₁ trav_prefix steps i ∪₁ init_tls G.","proofString":"rewrite init_tls_EI at 1.\nbasic_solver."},{"statement":"(i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : dom_rel\n  (restr_rel (event ↓₁ (E \\₁ (fun a : actid => is_init a)))\n     (SB ∪ RF ∪ FWBOB ∪ AR ∪ IPROP G ∪ PROP G sc)\n   ⨾ ⦗event ↓₁ (E ∩₁ (fun a : actid => is_init a))⦘)\n⊆₁ trav_prefix steps i ∪₁ init_tls G.","proofString":"basic_solver."},{"statement":"(WF : Wf G) (i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (H : sim_coherent G (exec_tls G)) : sim_clos G (exec_tls G) ⊆₁ init_tls G ∪₁ exec_tls G.","proofString":"red in H.\nrewrite <- H.\nbasic_solver."},{"statement":"(WF : Wf G) (i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (H : exec_tls G ≡₁ sim_clos G (exec_tls G)) : sim_clos G (exec_tls G) ⊆₁ init_tls G ∪₁ exec_tls G.","proofString":"rewrite <- H.\nbasic_solver."},{"statement":"(WF : Wf G) (i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) (H : exec_tls G ≡₁ sim_clos G (exec_tls G)) : exec_tls G ⊆₁ init_tls G ∪₁ exec_tls G.","proofString":"basic_solver."},{"statement":"(WF : Wf G) (i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : tls_coherent_alt G (trav_prefix steps i ∪₁ init_tls G).","proofString":"exists (trav_prefix steps i).\nsplit; [| basic_solver].\nnow apply trav_prefix_in_exec_tls."},{"statement":"(WF : Wf G) (i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : trav_prefix steps i ⊆₁ exec_tls G /\\\ntrav_prefix steps i ∪₁ init_tls G ≡₁ init_tls G ∪₁ trav_prefix steps i.","proofString":"split; [| basic_solver].\nnow apply trav_prefix_in_exec_tls."},{"statement":"(WF : Wf G) (i : nat) (DOMi : NOmega.le (NOnum i) (set_size dom)) : trav_prefix steps i ⊆₁ exec_tls G.","proofString":"now apply trav_prefix_in_exec_tls."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) : (sim_clos_step G sc)＊ (tc_enum i) (tc_enum (S i)).","proofString":"unfold tc_enum.\nforward eapply init_tls_sim_coh as INIT_SCOH; eauto.\nred in INIT_SCOH.\nrewrite INIT_SCOH, <- !sim_clos_dist; auto.\napply iord_step_implies_sim_clos_step; auto.\nred.\nsplits; try by (apply trav_prefix_union_init_tls_coherent; liaW (set_size dom)).\napply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) : (sim_clos_step G sc)＊ (sim_clos G (trav_prefix steps i) ∪₁ init_tls G)\n  (sim_clos G (trav_prefix steps (S i)) ∪₁ init_tls G).","proofString":"forward eapply init_tls_sim_coh as INIT_SCOH; eauto.\nred in INIT_SCOH.\nrewrite INIT_SCOH, <- !sim_clos_dist; auto.\napply iord_step_implies_sim_clos_step; auto.\nred.\nsplits; try by (apply trav_prefix_union_init_tls_coherent; liaW (set_size dom)).\napply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) (INIT_SCOH : sim_coherent G (init_tls G)) : (sim_clos_step G sc)＊ (sim_clos G (trav_prefix steps i) ∪₁ init_tls G)\n  (sim_clos G (trav_prefix steps (S i)) ∪₁ init_tls G).","proofString":"red in INIT_SCOH.\nrewrite INIT_SCOH, <- !sim_clos_dist; auto.\napply iord_step_implies_sim_clos_step; auto.\nred.\nsplits; try by (apply trav_prefix_union_init_tls_coherent; liaW (set_size dom)).\napply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) (INIT_SCOH : init_tls G ≡₁ sim_clos G (init_tls G)) : (sim_clos_step G sc)＊ (sim_clos G (trav_prefix steps i) ∪₁ init_tls G)\n  (sim_clos G (trav_prefix steps (S i)) ∪₁ init_tls G).","proofString":"rewrite INIT_SCOH, <- !sim_clos_dist; auto.\napply iord_step_implies_sim_clos_step; auto.\nred.\nsplits; try by (apply trav_prefix_union_init_tls_coherent; liaW (set_size dom)).\napply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) (INIT_SCOH : init_tls G ≡₁ sim_clos G (init_tls G)) : (sim_clos_step G sc)＊ (sim_clos G (trav_prefix steps i ∪₁ init_tls G))\n  (sim_clos G (trav_prefix steps (S i) ∪₁ init_tls G)).","proofString":"apply iord_step_implies_sim_clos_step; auto.\nred.\nsplits; try by (apply trav_prefix_union_init_tls_coherent; liaW (set_size dom)).\napply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) (INIT_SCOH : init_tls G ≡₁ sim_clos G (init_tls G)) : restr_rel (tls_coherent G) (iord_step G sc)\n  (trav_prefix steps i ∪₁ init_tls G) (trav_prefix steps (S i) ∪₁ init_tls G).","proofString":"red.\nsplits; try by (apply trav_prefix_union_init_tls_coherent; liaW (set_size dom)).\napply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) (INIT_SCOH : init_tls G ≡₁ sim_clos G (init_tls G)) : iord_step G sc (trav_prefix steps i ∪₁ init_tls G)\n  (trav_prefix steps (S i) ∪₁ init_tls G) /\\\ntls_coherent G (trav_prefix steps i ∪₁ init_tls G) /\\\ntls_coherent G (trav_prefix steps (S i) ∪₁ init_tls G).","proofString":"splits; try by (apply trav_prefix_union_init_tls_coherent; liaW (set_size dom)).\napply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (i : nat) (DOMi : NOmega.lt_nat_l i (set_size dom)) (INIT_SCOH : init_tls G ≡₁ sim_clos G (init_tls G)) : iord_step G sc (trav_prefix steps i ∪₁ init_tls G)\n  (trav_prefix steps (S i) ∪₁ init_tls G).","proofString":"apply trav_prefix_step_ext; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (FAIR : mem_fair G) (IMM_FAIR : imm_s_fair G sc) (TB : fin_threads G) : iord ⊆ exec_tls G × exec_tls G.","proofString":"rewrite iord_exec_tls.\nbasic_solver."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (FAIR : mem_fair G) (IMM_FAIR : imm_s_fair G sc) (TB : fin_threads G) : restr_rel (exec_tls G) iord ⊆ exec_tls G × exec_tls G.","proofString":"basic_solver."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (FAIR : mem_fair G) (IMM_FAIR : imm_s_fair G sc) (TB : fin_threads G) : eq ta_cover <*> (E \\₁ (fun a : actid => is_init a)) ⊆₁ exec_tls G.","proofString":"unfold exec_tls.\nbasic_solver."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (FAIR : mem_fair G) (IMM_FAIR : imm_s_fair G sc) (TB : fin_threads G) : eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n⊆₁ eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n   ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n      ((E \\₁ (fun a : actid => is_init a)) ∩₁ W).","proofString":"basic_solver."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (FAIR : mem_fair G) (IMM_FAIR : imm_s_fair G sc) (TB : fin_threads G) : forall S : trav_label -> Prop, S ⊆₁ exec_tls G -> sim_clos G S ⊆₁ exec_tls G.","proofString":"ins.\napply sim_clos_exec_tls; auto."},{"statement":"(WF : Wf G) (CONS : imm_consistent G sc) (FAIR : mem_fair G) (IMM_FAIR : imm_s_fair G sc) (TB : fin_threads G) (S : trav_label -> Prop) (S_DOM : S ⊆₁ exec_tls G) : sim_clos G S ⊆₁ exec_tls G.","proofString":"apply sim_clos_exec_tls; auto."}]}