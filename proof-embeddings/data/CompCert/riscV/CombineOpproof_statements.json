{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/riscV/CombineOpproof.v","fileSamples":[{"statement":"(v : valnum) (op : operation) (vl : list valnum) (H : get v = Some (Op op vl)) : eval_operation ge sp op (map valu vl) m = Some (valu v).","proofString":"exploit get_sound; eauto.\nintros REV; inv REV; auto."},{"statement":"(v : valnum) (op : operation) (vl : list valnum) (H : get v = Some (Op op vl)) : rhs_eval_to valu ge sp m (Op op vl) (valu v) ->\neval_operation ge sp op (map valu vl) m = Some (valu v).","proofString":"intros REV; inv REV; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) : eval_condition cond (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.zero) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.zero).","proofString":"UseGetSound.\nrewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.zero) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.zero).","proofString":"rewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Cne (Val.of_optbool (eval_condition cond (map valu args) m))\n  (Vint Int.zero) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne\n  (Val.of_optbool (eval_condition cond (map valu args) m)) \n  (Vint Int.zero).","proofString":"destruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some b = Val.cmp_bool Cne (if b then Vtrue else Vfalse) (Vint Int.zero) /\\\nSome b =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (if b then Vtrue else Vfalse)\n  (Vint Int.zero).","proofString":"destruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.zero) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.zero).","proofString":"UseGetSound.\nrewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.zero) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.zero).","proofString":"rewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Ceq (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.zero) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.zero).","proofString":"rewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : option_map negb (eval_condition c (map valu args) m) =\nVal.cmp_bool Ceq (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.zero) /\\\noption_map negb (eval_condition c (map valu args) m) =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.zero).","proofString":"destruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some (negb b) =\nVal.cmp_bool Ceq (if b then Vtrue else Vfalse) (Vint Int.zero) /\\\nSome (negb b) =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (if b then Vtrue else Vfalse)\n  (Vint Int.zero).","proofString":"destruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) : combine_compimm_eq_1 get x = Some (cond, args) ->\neval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.one).","proofString":"functional induction (combine_compimm_eq_1 get x); intros EQ; inv EQ.\nUseGetSound.\nrewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) : eval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.one).","proofString":"UseGetSound.\nrewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.one).","proofString":"rewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (Val.of_optbool (eval_condition cond (map valu args) m))\n  (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq\n  (Val.of_optbool (eval_condition cond (map valu args) m)) \n  (Vint Int.one).","proofString":"destruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some b = Val.cmp_bool Ceq (if b then Vtrue else Vfalse) (Vint Int.one) /\\\nSome b =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (if b then Vtrue else Vfalse)\n  (Vint Int.one).","proofString":"destruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) : combine_compimm_ne_1 get x = Some (cond, args) ->\neval_condition cond (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.one).","proofString":"functional induction (combine_compimm_ne_1 get x); intros EQ; inv EQ.\nUseGetSound.\nrewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.one) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.one).","proofString":"UseGetSound.\nrewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.one) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.one).","proofString":"rewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Cne (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.one) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.one).","proofString":"rewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : option_map negb (eval_condition c (map valu args) m) =\nVal.cmp_bool Cne (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.one) /\\\noption_map negb (eval_condition c (map valu args) m) =\nVal.cmpu_bool (Mem.valid_pointer m) Cne\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.one).","proofString":"destruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some (negb b) = Val.cmp_bool Cne (if b then Vtrue else Vfalse) (Vint Int.one) /\\\nSome (negb b) =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (if b then Vtrue else Vfalse)\n  (Vint Int.one).","proofString":"destruct b; auto."},{"statement":"(cond : condition) (args : list valnum) (cond' : condition) (args' : list valnum) (H : combine_cond get cond args = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition cond (map valu args) m.","proofString":"functional inversion H; subst.\nsimpl; eapply combine_compimm_ne_0_sound; eauto.\nsimpl; eapply combine_compimm_ne_1_sound; eauto.\nsimpl; eapply combine_compimm_eq_0_sound; eauto.\nsimpl; eapply combine_compimm_eq_1_sound; eauto.\nsimpl; eapply combine_compimm_ne_0_sound; eauto.\nsimpl; eapply combine_compimm_ne_1_sound; eauto.\nsimpl; eapply combine_compimm_eq_0_sound; eauto.\nsimpl; eapply combine_compimm_eq_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_ne_0 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Cne Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Cne Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_ne_1 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Cne Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Cne Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_eq_0 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Ceq Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Ceq Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_eq_1 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Ceq Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Ceq Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_ne_0 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Cne Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Cne Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_ne_1 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Cne Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Cne Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_eq_0 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Ceq Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Ceq Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_eq_1 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Ceq Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Ceq Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_1_sound; eauto."},{"statement":"(cond : condition) (args : list valnum) (res res' : bool) (H : combine_cond' cond args = Some res') (H0 : eval_condition cond (map valu args) m = Some res) : res = res'.","proofString":"unfold combine_cond' in *.\ndestruct cond; inv H; destruct args; inv H2; destruct args; inv H1; destruct args; inv H2.\napply (combine_comparison_cmp_sound valu c v v0 res res'); auto.\napply (combine_comparison_cmpu_sound valu m c v v0 res res'); auto.\napply (combine_comparison_cmpl_sound valu c v v0 res res'); auto.\napply (combine_comparison_cmplu_sound valu m c v v0 res res'); auto."},{"statement":"(cond : condition) (args : list valnum) (res res' : bool) (H : match cond with\n| Ccomp c | Ccompu c | Ccompl c | Ccomplu c =>\n    match args with\n    | nil => None\n    | x :: nil => None\n    | x :: y :: nil => combine_comparison c x y\n    | x :: y :: _ :: _ => None\n    end\n| _ => None\nend = Some res') (H0 : eval_condition cond (map valu args) m = Some res) : res = res'.","proofString":"destruct cond; inv H; destruct args; inv H2; destruct args; inv H1; destruct args; inv H2.\napply (combine_comparison_cmp_sound valu c v v0 res res'); auto.\napply (combine_comparison_cmpu_sound valu m c v v0 res res'); auto.\napply (combine_comparison_cmpl_sound valu c v v0 res res'); auto.\napply (combine_comparison_cmplu_sound valu m c v v0 res res'); auto."},{"statement":"(c : comparison) (v v0 : valnum) (res res' : bool) (H0 : eval_condition (Ccomp c) (map valu (v :: v0 :: nil)) m = Some res) (H1 : combine_comparison c v v0 = Some res') : res = res'.","proofString":"apply (combine_comparison_cmp_sound valu c v v0 res res'); auto."},{"statement":"(c : comparison) (v v0 : valnum) (res res' : bool) (H0 : eval_condition (Ccompu c) (map valu (v :: v0 :: nil)) m = Some res) (H1 : combine_comparison c v v0 = Some res') : res = res'.","proofString":"apply (combine_comparison_cmpu_sound valu m c v v0 res res'); auto."},{"statement":"(c : comparison) (v v0 : valnum) (res res' : bool) (H0 : eval_condition (Ccompl c) (map valu (v :: v0 :: nil)) m = Some res) (H1 : combine_comparison c v v0 = Some res') : res = res'.","proofString":"apply (combine_comparison_cmpl_sound valu c v v0 res res'); auto."},{"statement":"(c : comparison) (v v0 : valnum) (res res' : bool) (H0 : eval_condition (Ccomplu c) (map valu (v :: v0 :: nil)) m = Some res) (H1 : combine_comparison c v v0 = Some res') : res = res'.","proofString":"apply (combine_comparison_cmplu_sound valu m c v v0 res res'); auto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oaddimm m0) args')) (H : combine_op get (Oaddimm n) (x :: nil) = Some (Oaddimm (Int.add m0 n), args')) : exists r' : val,\n  eval_operation ge sp (Oaddimm (Int.add m0 n)) (map valu args') m = Some r' /\\\n  Val.lessdef r r'.","proofString":"UseGetSound.\nexists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.add_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oaddimm m0) args')) (H : combine_op get (Oaddimm n) (x :: nil) = Some (Oaddimm (Int.add m0 n), args')) (v : val) (H1 : Val.add v (Vint m0) = valu x) : exists r' : val,\n  eval_operation ge sp (Oaddimm (Int.add m0 n)) (v :: nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.add_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oaddimm m0) args')) (H : combine_op get (Oaddimm n) (x :: nil) = Some (Oaddimm (Int.add m0 n), args')) (v : val) (H1 : Val.add v (Vint m0) = valu x) : eval_operation ge sp (Oaddimm (Int.add m0 n)) (v :: nil) m = Some r.","proofString":"rewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.add_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oaddimm m0) args')) (H : combine_op get (Oaddimm n) (x :: nil) = Some (Oaddimm (Int.add m0 n), args')) (v : val) (H1 : Val.add v (Vint m0) = valu x) : eval_operation ge sp (Oaddimm (Int.add m0 n)) (v :: nil) m =\neval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m.","proofString":"simpl.\nrewrite <- H1.\nrewrite Val.add_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oaddimm m0) args')) (H : combine_op get (Oaddimm n) (x :: nil) = Some (Oaddimm (Int.add m0 n), args')) (v : val) (H1 : Val.add v (Vint m0) = valu x) : Some (Val.add v (Vint (Int.add m0 n))) = Some (Val.add (valu x) (Vint n)).","proofString":"rewrite <- H1.\nrewrite Val.add_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oaddimm m0) args')) (H : combine_op get (Oaddimm n) (x :: nil) = Some (Oaddimm (Int.add m0 n), args')) (v : val) (H1 : Val.add v (Vint m0) = valu x) : Some (Val.add v (Vint (Int.add m0 n))) =\nSome (Val.add (Val.add v (Vint m0)) (Vint n)).","proofString":"rewrite Val.add_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oaddimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oaddimm m0) args')) (H : combine_op get (Oaddimm n) (x :: nil) = Some (Oaddimm (Int.add m0 n), args')) (v : val) (H1 : Val.add v (Vint m0) = valu x) : Some (Val.add v (Vint (Int.add m0 n))) =\nSome (Val.add v (Val.add (Vint m0) (Vint n))).","proofString":"auto."},{"statement":"(r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oandimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (ys : list valnum) (p : int) (H7 : get x = Some (Op (Oandimm m0) ys)) (H8 : Int.eq p m0 = true) (H : combine_op get (Oandimm n) (x :: nil) = Some (Omove, x :: nil)) (v : val) (H1 : Val.and v (Vint m0) = valu x) (H2 : p = m0) : Some (Val.and v (Vint m0)) = Some (Val.and v (Vint p)).","proofString":"rewrite H2.\nauto."},{"statement":"(r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oandimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (ys : list valnum) (p : int) (H7 : get x = Some (Op (Oandimm m0) ys)) (H8 : Int.eq p m0 = true) (H : combine_op get (Oandimm n) (x :: nil) = Some (Omove, x :: nil)) (v : val) (H1 : Val.and v (Vint m0) = valu x) (H2 : p = m0) : Some (Val.and v (Vint m0)) = Some (Val.and v (Vint m0)).","proofString":"auto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oorimm m0) args')) (H : combine_op get (Oorimm n) (x :: nil) = Some (Oorimm (Int.or m0 n), args')) : exists r' : val,\n  eval_operation ge sp (Oorimm (Int.or m0 n)) (map valu args') m = Some r' /\\\n  Val.lessdef r r'.","proofString":"UseGetSound.\nexists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.or_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oorimm m0) args')) (H : combine_op get (Oorimm n) (x :: nil) = Some (Oorimm (Int.or m0 n), args')) (v : val) (H1 : Val.or v (Vint m0) = valu x) : exists r' : val,\n  eval_operation ge sp (Oorimm (Int.or m0 n)) (v :: nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.or_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oorimm m0) args')) (H : combine_op get (Oorimm n) (x :: nil) = Some (Oorimm (Int.or m0 n), args')) (v : val) (H1 : Val.or v (Vint m0) = valu x) : eval_operation ge sp (Oorimm (Int.or m0 n)) (v :: nil) m = Some r.","proofString":"rewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.or_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oorimm m0) args')) (H : combine_op get (Oorimm n) (x :: nil) = Some (Oorimm (Int.or m0 n), args')) (v : val) (H1 : Val.or v (Vint m0) = valu x) : eval_operation ge sp (Oorimm (Int.or m0 n)) (v :: nil) m =\neval_operation ge sp (Oorimm n) (map valu (x :: nil)) m.","proofString":"simpl.\nrewrite <- H1.\nrewrite Val.or_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oorimm m0) args')) (H : combine_op get (Oorimm n) (x :: nil) = Some (Oorimm (Int.or m0 n), args')) (v : val) (H1 : Val.or v (Vint m0) = valu x) : Some (Val.or v (Vint (Int.or m0 n))) = Some (Val.or (valu x) (Vint n)).","proofString":"rewrite <- H1.\nrewrite Val.or_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oorimm m0) args')) (H : combine_op get (Oorimm n) (x :: nil) = Some (Oorimm (Int.or m0 n), args')) (v : val) (H1 : Val.or v (Vint m0) = valu x) : Some (Val.or v (Vint (Int.or m0 n))) =\nSome (Val.or (Val.or v (Vint m0)) (Vint n)).","proofString":"rewrite Val.or_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oorimm m0) args')) (H : combine_op get (Oorimm n) (x :: nil) = Some (Oorimm (Int.or m0 n), args')) (v : val) (H1 : Val.or v (Vint m0) = valu x) : Some (Val.or v (Vint (Int.or m0 n))) =\nSome (Val.or v (Val.or (Vint m0) (Vint n))).","proofString":"auto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oxorimm m0) args')) (H : combine_op get (Oxorimm n) (x :: nil) = Some (Oxorimm (Int.xor m0 n), args')) : exists r' : val,\n  eval_operation ge sp (Oxorimm (Int.xor m0 n)) (map valu args') m = Some r' /\\\n  Val.lessdef r r'.","proofString":"UseGetSound.\nexists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.xor_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oxorimm m0) args')) (H : combine_op get (Oxorimm n) (x :: nil) = Some (Oxorimm (Int.xor m0 n), args')) (v : val) (H1 : Val.xor v (Vint m0) = valu x) : exists r' : val,\n  eval_operation ge sp (Oxorimm (Int.xor m0 n)) (v :: nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.xor_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oxorimm m0) args')) (H : combine_op get (Oxorimm n) (x :: nil) = Some (Oxorimm (Int.xor m0 n), args')) (v : val) (H1 : Val.xor v (Vint m0) = valu x) : eval_operation ge sp (Oxorimm (Int.xor m0 n)) (v :: nil) m = Some r.","proofString":"rewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.xor_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oxorimm m0) args')) (H : combine_op get (Oxorimm n) (x :: nil) = Some (Oxorimm (Int.xor m0 n), args')) (v : val) (H1 : Val.xor v (Vint m0) = valu x) : eval_operation ge sp (Oxorimm (Int.xor m0 n)) (v :: nil) m =\neval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m.","proofString":"simpl.\nrewrite <- H1.\nrewrite Val.xor_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oxorimm m0) args')) (H : combine_op get (Oxorimm n) (x :: nil) = Some (Oxorimm (Int.xor m0 n), args')) (v : val) (H1 : Val.xor v (Vint m0) = valu x) : Some (Val.xor v (Vint (Int.xor m0 n))) = Some (Val.xor (valu x) (Vint n)).","proofString":"rewrite <- H1.\nrewrite Val.xor_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oxorimm m0) args')) (H : combine_op get (Oxorimm n) (x :: nil) = Some (Oxorimm (Int.xor m0 n), args')) (v : val) (H1 : Val.xor v (Vint m0) = valu x) : Some (Val.xor v (Vint (Int.xor m0 n))) =\nSome (Val.xor (Val.xor v (Vint m0)) (Vint n)).","proofString":"rewrite Val.xor_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int) (x : valnum) (H0 : eval_operation ge sp (Oxorimm n) (map valu (x :: nil)) m = Some r) (m0 : int) (H7 : get x = Some (Op (Oxorimm m0) args')) (H : combine_op get (Oxorimm n) (x :: nil) = Some (Oxorimm (Int.xor m0 n), args')) (v : val) (H1 : Val.xor v (Vint m0) = valu x) : Some (Val.xor v (Vint (Int.xor m0 n))) =\nSome (Val.xor v (Val.xor (Vint m0) (Vint n))).","proofString":"auto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oaddlimm m0) args')) (H : combine_op get (Oaddlimm n) (x :: nil) =\nSome (Oaddlimm (Int64.add m0 n), args')) : exists r' : val,\n  eval_operation ge sp (Oaddlimm (Int64.add m0 n)) (map valu args') m =\n  Some r' /\\ Val.lessdef r r'.","proofString":"UseGetSound.\nexists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.addl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oaddlimm m0) args')) (H : combine_op get (Oaddlimm n) (x :: nil) =\nSome (Oaddlimm (Int64.add m0 n), args')) (v : val) (H1 : Val.addl v (Vlong m0) = valu x) : exists r' : val,\n  eval_operation ge sp (Oaddlimm (Int64.add m0 n)) (v :: nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.addl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oaddlimm m0) args')) (H : combine_op get (Oaddlimm n) (x :: nil) =\nSome (Oaddlimm (Int64.add m0 n), args')) (v : val) (H1 : Val.addl v (Vlong m0) = valu x) : eval_operation ge sp (Oaddlimm (Int64.add m0 n)) (v :: nil) m = Some r.","proofString":"rewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.addl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oaddlimm m0) args')) (H : combine_op get (Oaddlimm n) (x :: nil) =\nSome (Oaddlimm (Int64.add m0 n), args')) (v : val) (H1 : Val.addl v (Vlong m0) = valu x) : eval_operation ge sp (Oaddlimm (Int64.add m0 n)) (v :: nil) m =\neval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m.","proofString":"simpl.\nrewrite <- H1.\nrewrite Val.addl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oaddlimm m0) args')) (H : combine_op get (Oaddlimm n) (x :: nil) =\nSome (Oaddlimm (Int64.add m0 n), args')) (v : val) (H1 : Val.addl v (Vlong m0) = valu x) : Some (Val.addl v (Vlong (Int64.add m0 n))) =\nSome (Val.addl (valu x) (Vlong n)).","proofString":"rewrite <- H1.\nrewrite Val.addl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oaddlimm m0) args')) (H : combine_op get (Oaddlimm n) (x :: nil) =\nSome (Oaddlimm (Int64.add m0 n), args')) (v : val) (H1 : Val.addl v (Vlong m0) = valu x) : Some (Val.addl v (Vlong (Int64.add m0 n))) =\nSome (Val.addl (Val.addl v (Vlong m0)) (Vlong n)).","proofString":"rewrite Val.addl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oaddlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oaddlimm m0) args')) (H : combine_op get (Oaddlimm n) (x :: nil) =\nSome (Oaddlimm (Int64.add m0 n), args')) (v : val) (H1 : Val.addl v (Vlong m0) = valu x) : Some (Val.addl v (Vlong (Int64.add m0 n))) =\nSome (Val.addl v (Val.addl (Vlong m0) (Vlong n))).","proofString":"auto."},{"statement":"(r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oandlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (ys : list valnum) (p : int64) (H7 : get x = Some (Op (Oandlimm m0) ys)) (H8 : Int64.eq p m0 = true) (H : combine_op get (Oandlimm n) (x :: nil) = Some (Omove, x :: nil)) (v : val) (H1 : Val.andl v (Vlong m0) = valu x) (H2 : p = m0) : Some (Val.andl v (Vlong m0)) = Some (Val.andl v (Vlong p)).","proofString":"rewrite H2.\nauto."},{"statement":"(r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oandlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (ys : list valnum) (p : int64) (H7 : get x = Some (Op (Oandlimm m0) ys)) (H8 : Int64.eq p m0 = true) (H : combine_op get (Oandlimm n) (x :: nil) = Some (Omove, x :: nil)) (v : val) (H1 : Val.andl v (Vlong m0) = valu x) (H2 : p = m0) : Some (Val.andl v (Vlong m0)) = Some (Val.andl v (Vlong m0)).","proofString":"auto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oorlimm m0) args')) (H : combine_op get (Oorlimm n) (x :: nil) = Some (Oorlimm (Int64.or m0 n), args')) : exists r' : val,\n  eval_operation ge sp (Oorlimm (Int64.or m0 n)) (map valu args') m = Some r' /\\\n  Val.lessdef r r'.","proofString":"UseGetSound.\nexists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.orl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oorlimm m0) args')) (H : combine_op get (Oorlimm n) (x :: nil) = Some (Oorlimm (Int64.or m0 n), args')) (v : val) (H1 : Val.orl v (Vlong m0) = valu x) : exists r' : val,\n  eval_operation ge sp (Oorlimm (Int64.or m0 n)) (v :: nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.orl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oorlimm m0) args')) (H : combine_op get (Oorlimm n) (x :: nil) = Some (Oorlimm (Int64.or m0 n), args')) (v : val) (H1 : Val.orl v (Vlong m0) = valu x) : eval_operation ge sp (Oorlimm (Int64.or m0 n)) (v :: nil) m = Some r.","proofString":"rewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.orl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oorlimm m0) args')) (H : combine_op get (Oorlimm n) (x :: nil) = Some (Oorlimm (Int64.or m0 n), args')) (v : val) (H1 : Val.orl v (Vlong m0) = valu x) : eval_operation ge sp (Oorlimm (Int64.or m0 n)) (v :: nil) m =\neval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m.","proofString":"simpl.\nrewrite <- H1.\nrewrite Val.orl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oorlimm m0) args')) (H : combine_op get (Oorlimm n) (x :: nil) = Some (Oorlimm (Int64.or m0 n), args')) (v : val) (H1 : Val.orl v (Vlong m0) = valu x) : Some (Val.orl v (Vlong (Int64.or m0 n))) = Some (Val.orl (valu x) (Vlong n)).","proofString":"rewrite <- H1.\nrewrite Val.orl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oorlimm m0) args')) (H : combine_op get (Oorlimm n) (x :: nil) = Some (Oorlimm (Int64.or m0 n), args')) (v : val) (H1 : Val.orl v (Vlong m0) = valu x) : Some (Val.orl v (Vlong (Int64.or m0 n))) =\nSome (Val.orl (Val.orl v (Vlong m0)) (Vlong n)).","proofString":"rewrite Val.orl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oorlimm m0) args')) (H : combine_op get (Oorlimm n) (x :: nil) = Some (Oorlimm (Int64.or m0 n), args')) (v : val) (H1 : Val.orl v (Vlong m0) = valu x) : Some (Val.orl v (Vlong (Int64.or m0 n))) =\nSome (Val.orl v (Val.orl (Vlong m0) (Vlong n))).","proofString":"auto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oxorlimm m0) args')) (H : combine_op get (Oxorlimm n) (x :: nil) =\nSome (Oxorlimm (Int64.xor m0 n), args')) : exists r' : val,\n  eval_operation ge sp (Oxorlimm (Int64.xor m0 n)) (map valu args') m =\n  Some r' /\\ Val.lessdef r r'.","proofString":"UseGetSound.\nexists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.xorl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oxorlimm m0) args')) (H : combine_op get (Oxorlimm n) (x :: nil) =\nSome (Oxorlimm (Int64.xor m0 n), args')) (v : val) (H1 : Val.xorl v (Vlong m0) = valu x) : exists r' : val,\n  eval_operation ge sp (Oxorlimm (Int64.xor m0 n)) (v :: nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists r; split; auto.\nrewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.xorl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oxorlimm m0) args')) (H : combine_op get (Oxorlimm n) (x :: nil) =\nSome (Oxorlimm (Int64.xor m0 n), args')) (v : val) (H1 : Val.xorl v (Vlong m0) = valu x) : eval_operation ge sp (Oxorlimm (Int64.xor m0 n)) (v :: nil) m = Some r.","proofString":"rewrite <- H0.\nsimpl.\nrewrite <- H1.\nrewrite Val.xorl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oxorlimm m0) args')) (H : combine_op get (Oxorlimm n) (x :: nil) =\nSome (Oxorlimm (Int64.xor m0 n), args')) (v : val) (H1 : Val.xorl v (Vlong m0) = valu x) : eval_operation ge sp (Oxorlimm (Int64.xor m0 n)) (v :: nil) m =\neval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m.","proofString":"simpl.\nrewrite <- H1.\nrewrite Val.xorl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oxorlimm m0) args')) (H : combine_op get (Oxorlimm n) (x :: nil) =\nSome (Oxorlimm (Int64.xor m0 n), args')) (v : val) (H1 : Val.xorl v (Vlong m0) = valu x) : Some (Val.xorl v (Vlong (Int64.xor m0 n))) =\nSome (Val.xorl (valu x) (Vlong n)).","proofString":"rewrite <- H1.\nrewrite Val.xorl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oxorlimm m0) args')) (H : combine_op get (Oxorlimm n) (x :: nil) =\nSome (Oxorlimm (Int64.xor m0 n), args')) (v : val) (H1 : Val.xorl v (Vlong m0) = valu x) : Some (Val.xorl v (Vlong (Int64.xor m0 n))) =\nSome (Val.xorl (Val.xorl v (Vlong m0)) (Vlong n)).","proofString":"rewrite Val.xorl_assoc.\nauto."},{"statement":"(args' : list valnum) (r : val) (n : int64) (x : valnum) (H0 : eval_operation ge sp (Oxorlimm n) (map valu (x :: nil)) m = Some r) (m0 : int64) (H7 : get x = Some (Op (Oxorlimm m0) args')) (H : combine_op get (Oxorlimm n) (x :: nil) =\nSome (Oxorlimm (Int64.xor m0 n), args')) (v : val) (H1 : Val.xorl v (Vlong m0) = valu x) : Some (Val.xorl v (Vlong (Int64.xor m0 n))) =\nSome (Val.xorl v (Val.xorl (Vlong m0) (Vlong n))).","proofString":"auto."},{"statement":"(args : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (H7 : combine_cond' cond args = Some true) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.one, nil)) : exists r' : val,\n  eval_operation ge sp (Ointconst Int.one) (map valu nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists Vtrue; split; auto.\ninv H0.\ndestruct (eval_condition cond (map valu args) m) eqn:?; auto.\nrewrite (combine_cond'_sound cond args b true); eauto."},{"statement":"(args : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (H7 : combine_cond' cond args = Some true) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.one, nil)) : Val.lessdef r Vtrue.","proofString":"inv H0.\ndestruct (eval_condition cond (map valu args) m) eqn:?; auto.\nrewrite (combine_cond'_sound cond args b true); eauto."},{"statement":"(args : list valnum) (cond : condition) (H7 : combine_cond' cond args = Some true) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.one, nil)) : Val.lessdef (Val.of_optbool (eval_condition cond (map valu args) m)) Vtrue.","proofString":"destruct (eval_condition cond (map valu args) m) eqn:?; auto.\nrewrite (combine_cond'_sound cond args b true); eauto."},{"statement":"(args : list valnum) (cond : condition) (H7 : combine_cond' cond args = Some true) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.one, nil)) (b : bool) (Heqo : eval_condition cond (map valu args) m = Some b) : Val.lessdef (Val.of_optbool (Some b)) Vtrue.","proofString":"rewrite (combine_cond'_sound cond args b true); eauto."},{"statement":"(args : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (H7 : combine_cond' cond args = Some false) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.zero, nil)) : exists r' : val,\n  eval_operation ge sp (Ointconst Int.zero) (map valu nil) m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists Vfalse; split; auto.\ninv H0.\ndestruct (eval_condition cond (map valu args) m) eqn:?; auto.\nrewrite (combine_cond'_sound cond args b false); eauto."},{"statement":"(args : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (H7 : combine_cond' cond args = Some false) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.zero, nil)) : Val.lessdef r Vfalse.","proofString":"inv H0.\ndestruct (eval_condition cond (map valu args) m) eqn:?; auto.\nrewrite (combine_cond'_sound cond args b false); eauto."},{"statement":"(args : list valnum) (cond : condition) (H7 : combine_cond' cond args = Some false) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.zero, nil)) : Val.lessdef (Val.of_optbool (eval_condition cond (map valu args) m)) Vfalse.","proofString":"destruct (eval_condition cond (map valu args) m) eqn:?; auto.\nrewrite (combine_cond'_sound cond args b false); eauto."},{"statement":"(args : list valnum) (cond : condition) (H7 : combine_cond' cond args = Some false) (H : combine_op get (Ocmp cond) args = Some (Ointconst Int.zero, nil)) (b : bool) (Heqo : eval_condition cond (map valu args) m = Some b) : Val.lessdef (Val.of_optbool (Some b)) Vfalse.","proofString":"rewrite (combine_cond'_sound cond args b false); eauto."},{"statement":"(args args' : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (cond' : condition) (H8 : combine_cond get cond args = Some (cond', args')) (H7 : combine_cond' cond args = None) (H : combine_op get (Ocmp cond) args = Some (Ocmp cond', args')) : exists r' : val,\n  eval_operation ge sp (Ocmp cond') (map valu args') m = Some r' /\\\n  Val.lessdef r r'.","proofString":"exists r; split; auto.\ndecEq; decEq.\nsimpl.\nerewrite combine_cond_sound; eauto."},{"statement":"(args args' : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (cond' : condition) (H8 : combine_cond get cond args = Some (cond', args')) (H7 : combine_cond' cond args = None) (H : combine_op get (Ocmp cond) args = Some (Ocmp cond', args')) : eval_operation ge sp (Ocmp cond') (map valu args') m = Some r.","proofString":"decEq; decEq.\nsimpl.\nerewrite combine_cond_sound; eauto."},{"statement":"(args args' : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (cond' : condition) (H8 : combine_cond get cond args = Some (cond', args')) (H7 : combine_cond' cond args = None) (H : combine_op get (Ocmp cond) args = Some (Ocmp cond', args')) : eval_operation ge sp (Ocmp cond') (map valu args') m = Some r.","proofString":"simpl.\nerewrite combine_cond_sound; eauto."},{"statement":"(args args' : list valnum) (r : val) (cond : condition) (H0 : eval_operation ge sp (Ocmp cond) (map valu args) m = Some r) (cond' : condition) (H8 : combine_cond get cond args = Some (cond', args')) (H7 : combine_cond' cond args = None) (H : combine_op get (Ocmp cond) args = Some (Ocmp cond', args')) : Some (Val.of_optbool (eval_condition cond' (map valu args') m)) = Some r.","proofString":"erewrite combine_cond_sound; eauto."}]}