{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/imm/src/imm/imm_sToimm.v","fileSamples":[{"statement":"⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘\n⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘\n⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘","hypotheses":"","proofString":"by rewrite s_hb_in_hb."},{"statement":"⦗R⦘\n⨾ (bob ∪ s_ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)⁺\n  ⨾ ⦗W⦘\n⊆ ⦗R⦘\n  ⨾ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)⁺\n    ⨾ ⦗W⦘.","conclusion":"⦗R⦘\n⨾ (bob ∪ s_ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)⁺\n  ⨾ ⦗W⦘\n⊆ ⦗R⦘\n  ⨾ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)⁺\n    ⨾ ⦗W⦘","hypotheses":"","proofString":"by rewrite s_ppo_in_ppo."},{"statement":"(AC : acyclic ar) : acyclic (s_ar (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘)).","conclusion":"acyclic (s_ar (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘))","hypotheses":"(AC : acyclic ar)","proofString":"unfold imm_s.ar.\napply s_acyc_ext_psc_helper; auto.\nunfold imm_s.psc.\nrewrite s_psc_in_psc.\nrewrite s_ar_int_in_ar_int.\narewrite (sb^? ⨾ psc ⨾ sb^? ⊆ ar⁺).\nrewrite imm.wf_pscD.\nrewrite !seqA.\narewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct.\narewrite (rfe ⊆ ar).\narewrite (ar_int ⊆ ar).\narewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘ ∪ rfe ∪ s_ar_int).","conclusion":"acyclic (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘ ∪ rfe ∪ s_ar_int)","hypotheses":"(AC : acyclic ar)","proofString":"apply s_acyc_ext_psc_helper; auto.\nunfold imm_s.psc.\nrewrite s_psc_in_psc.\nrewrite s_ar_int_in_ar_int.\narewrite (sb^? ⨾ psc ⨾ sb^? ⊆ ar⁺).\nrewrite imm.wf_pscD.\nrewrite !seqA.\narewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct.\narewrite (rfe ⊆ ar).\narewrite (ar_int ⊆ ar).\narewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic\n  (sb^? ⨾ (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb^? ∪ rfe\n   ∪ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘).","conclusion":"acyclic\n  (sb^? ⨾ (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb^? ∪ rfe\n   ∪ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘)","hypotheses":"(AC : acyclic ar)","proofString":"rewrite s_psc_in_psc.\nrewrite s_ar_int_in_ar_int.\narewrite (sb^? ⨾ psc ⨾ sb^? ⊆ ar⁺).\nrewrite imm.wf_pscD.\nrewrite !seqA.\narewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct.\narewrite (rfe ⊆ ar).\narewrite (ar_int ⊆ ar).\narewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic (sb^? ⨾ psc ⨾ sb^? ∪ rfe ∪ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘).","conclusion":"acyclic (sb^? ⨾ psc ⨾ sb^? ∪ rfe ∪ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘)","hypotheses":"(AC : acyclic ar)","proofString":"rewrite s_ar_int_in_ar_int.\narewrite (sb^? ⨾ psc ⨾ sb^? ⊆ ar⁺).\nrewrite imm.wf_pscD.\nrewrite !seqA.\narewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct.\narewrite (rfe ⊆ ar).\narewrite (ar_int ⊆ ar).\narewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic (sb^? ⨾ psc ⨾ sb^? ∪ rfe ∪ ⦗R⦘ ⨾ ar_int⁺ ⨾ ⦗W⦘).","conclusion":"acyclic (sb^? ⨾ psc ⨾ sb^? ∪ rfe ∪ ⦗R⦘ ⨾ ar_int⁺ ⨾ ⦗W⦘)","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (sb^? ⨾ psc ⨾ sb^? ⊆ ar⁺).\nrewrite imm.wf_pscD.\nrewrite !seqA.\narewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct.\narewrite (rfe ⊆ ar).\narewrite (ar_int ⊆ ar).\narewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : sb^? ⨾ psc ⨾ sb^? ⊆ ar⁺.","conclusion":"sb^? ⨾ psc ⨾ sb^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"rewrite imm.wf_pscD.\nrewrite !seqA.\narewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : sb^? ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb^? ⊆ ar⁺.","conclusion":"sb^? ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"rewrite !seqA.\narewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : sb^? ⨾ ⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb^? ⊆ ar⁺.","conclusion":"sb^? ⨾ ⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?.","conclusion":"sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob^?","hypotheses":"(AC : acyclic ar)","proofString":"unfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10."},{"statement":"(AC : acyclic ar) : sb^? ⨾ ⦗F ∩₁ Sc⦘\n⊆ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n   ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb)^?.","conclusion":"sb^? ⨾ ⦗F ∩₁ Sc⦘\n⊆ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n   ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb)^?","hypotheses":"(AC : acyclic ar)","proofString":"mode_solver 10."},{"statement":"(AC : acyclic ar) : bob^? ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb^? ⊆ ar⁺.","conclusion":"bob^? ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (⦗F ∩₁ Sc⦘ ⨾ sb^?⊆ bob^?).\nunfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10.\narewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : ⦗F ∩₁ Sc⦘ ⨾ sb^? ⊆ bob^?.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb^? ⊆ bob^?","hypotheses":"(AC : acyclic ar)","proofString":"unfold imm_bob.bob, imm_bob.fwbob.\nmode_solver 10."},{"statement":"(AC : acyclic ar) : ⦗F ∩₁ Sc⦘ ⨾ sb^?\n⊆ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n   ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb)^?.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb^?\n⊆ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n   ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb)^?","hypotheses":"(AC : acyclic ar)","proofString":"mode_solver 10."},{"statement":"(AC : acyclic ar) : bob^? ⨾ psc ⨾ bob^? ⊆ ar⁺.","conclusion":"bob^? ⨾ psc ⨾ bob^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (bob ⊆ ar).\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\narewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : bob ⊆ ar.","conclusion":"bob ⊆ ar","hypotheses":"(AC : acyclic ar)","proofString":"unfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10."},{"statement":"(AC : acyclic ar) : bob\n⊆ psc ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","conclusion":"bob\n⊆ psc ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)","hypotheses":"(AC : acyclic ar)","proofString":"basic_solver 10."},{"statement":"(AC : acyclic ar) : ar^? ⨾ psc ⨾ ar^? ⊆ ar⁺.","conclusion":"ar^? ⨾ psc ⨾ ar^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (psc ⊆ ar).\nrewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : ar^? ⨾ ar ⨾ ar^? ⊆ ar⁺.","conclusion":"ar^? ⨾ ar ⨾ ar^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"rewrite ct_step with (r:=ar) at 2.\nby rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : ar^? ⨾ ar⁺ ⨾ ar^? ⊆ ar⁺.","conclusion":"ar^? ⨾ ar⁺ ⨾ ar^? ⊆ ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"by rewrite ct_cr, cr_ct."},{"statement":"(AC : acyclic ar) : acyclic (ar⁺ ∪ rfe ∪ ⦗R⦘ ⨾ ar_int⁺ ⨾ ⦗W⦘).","conclusion":"acyclic (ar⁺ ∪ rfe ∪ ⦗R⦘ ⨾ ar_int⁺ ⨾ ⦗W⦘)","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (rfe ⊆ ar).\narewrite (ar_int ⊆ ar).\narewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic (ar⁺ ∪ ar ∪ ⦗R⦘ ⨾ ar_int⁺ ⨾ ⦗W⦘).","conclusion":"acyclic (ar⁺ ∪ ar ∪ ⦗R⦘ ⨾ ar_int⁺ ⨾ ⦗W⦘)","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (ar_int ⊆ ar).\narewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic (ar⁺ ∪ ar ∪ ⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘).","conclusion":"acyclic (ar⁺ ∪ ar ∪ ⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘)","hypotheses":"(AC : acyclic ar)","proofString":"arewrite (⦗R⦘ ⨾ ar⁺ ⨾ ⦗W⦘ ⊆ ar⁺) by basic_solver.\nrewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic (ar⁺ ∪ ar ∪ ar⁺).","conclusion":"acyclic (ar⁺ ∪ ar ∪ ar⁺)","hypotheses":"(AC : acyclic ar)","proofString":"rewrite ct_step with (r:=ar) at 2.\nsin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic (ar⁺ ∪ ar⁺ ∪ ar⁺).","conclusion":"acyclic (ar⁺ ∪ ar⁺ ∪ ar⁺)","hypotheses":"(AC : acyclic ar)","proofString":"sin_rewrite !unionK.\nred.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : acyclic ar⁺.","conclusion":"acyclic ar⁺","hypotheses":"(AC : acyclic ar)","proofString":"red.\nby rewrite ct_of_ct."},{"statement":"(AC : acyclic ar) : irreflexive (ar⁺)⁺.","conclusion":"irreflexive (ar⁺)⁺","hypotheses":"(AC : acyclic ar)","proofString":"by rewrite ct_of_ct."},{"statement":"(IC : imm.imm_consistent G) : imm.acyc_ext G.","conclusion":"imm.acyc_ext G","hypotheses":"(IC : imm.imm_consistent G)","proofString":"apply IC."},{"statement":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc) : exists sc0 : relation actid, imm_psc_consistent G sc0.","conclusion":"exists sc0 : relation actid, imm_psc_consistent G sc0","hypotheses":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc)","proofString":"exists sc.\nred.\nsplits; auto.\nunfold psc_f, psc_base, scb.\nrewrite s_hb_in_hb.\napply IC."},{"statement":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc) : imm_psc_consistent G sc.","conclusion":"imm_psc_consistent G sc","hypotheses":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc)","proofString":"red.\nsplits; auto.\nunfold psc_f, psc_base, scb.\nrewrite s_hb_in_hb.\napply IC."},{"statement":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc) : acyclic (psc_f G ∪ psc_base G).","conclusion":"acyclic (psc_f G ∪ psc_base G)","hypotheses":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc)","proofString":"unfold psc_f, psc_base, scb.\nrewrite s_hb_in_hb.\napply IC."},{"statement":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc) : acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ (eco ⨾ s_hb)^? ⨾ ⦗F ∩₁ Sc⦘\n   ∪ ⦗Sc⦘\n     ⨾ (⦗F⦘ ⨾ s_hb)^?\n       ⨾ (sb ∪ (sb \\ same_loc) ⨾ s_hb ⨾ (sb \\ same_loc) ∪ s_hb ∩ same_loc\n          ∪ co ∪ fr) ⨾ (s_hb ⨾ ⦗F⦘)^? ⨾ ⦗Sc⦘).","conclusion":"acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ (eco ⨾ s_hb)^? ⨾ ⦗F ∩₁ Sc⦘\n   ∪ ⦗Sc⦘\n     ⨾ (⦗F⦘ ⨾ s_hb)^?\n       ⨾ (sb ∪ (sb \\ same_loc) ⨾ s_hb ⨾ (sb \\ same_loc) ∪ s_hb ∩ same_loc\n          ∪ co ∪ fr) ⨾ (s_hb ⨾ ⦗F⦘)^? ⨾ ⦗Sc⦘)","hypotheses":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc)","proofString":"rewrite s_hb_in_hb.\napply IC."},{"statement":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc) : acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ (eco ⨾ hb)^? ⨾ ⦗F ∩₁ Sc⦘\n   ∪ ⦗Sc⦘\n     ⨾ (⦗F⦘ ⨾ hb)^?\n       ⨾ (sb ∪ (sb \\ same_loc) ⨾ hb ⨾ (sb \\ same_loc) ∪ hb ∩ same_loc ∪ co\n          ∪ fr) ⨾ (hb ⨾ ⦗F⦘)^? ⨾ ⦗Sc⦘).","conclusion":"acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ (eco ⨾ hb)^? ⨾ ⦗F ∩₁ Sc⦘\n   ∪ ⦗Sc⦘\n     ⨾ (⦗F⦘ ⨾ hb)^?\n       ⨾ (sb ∪ (sb \\ same_loc) ⨾ hb ⨾ (sb \\ same_loc) ∪ hb ∩ same_loc ∪ co\n          ∪ fr) ⨾ (hb ⨾ ⦗F⦘)^? ⨾ ⦗Sc⦘)","hypotheses":"(IC : imm.imm_consistent G) (sc : relation actid) (H : imm_consistent G sc)","proofString":"apply IC."}]}