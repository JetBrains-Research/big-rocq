{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/backend/RTLtyping.v","fileSamples":[{"statement":"(e : S.typenv) (ros : reg + ident) (e' : S.typenv) (te : S.typassign) (H : match ros with\n| inl r => S.set e r Tptr\n| inr _ => OK e\nend = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (ros : reg + ident) (e' : S.typenv) (te : S.typassign) (H : match ros with\n| inl r => S.set e r Tptr\n| inr _ => OK e\nend = OK e') (H0 : S.satisf te e')","proofString":"destruct ros.\neauto with ty.\ninv H; auto with ty."},{"statement":"(e : S.typenv) (r : reg) (e' : S.typenv) (te : S.typassign) (H : S.set e r Tptr = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (r : reg) (e' : S.typenv) (te : S.typassign) (H : S.set e r Tptr = OK e') (H0 : S.satisf te e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (i : ident) (e' : S.typenv) (te : S.typassign) (H : OK e = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (i : ident) (e' : S.typenv) (te : S.typassign) (H : OK e = OK e') (H0 : S.satisf te e')","proofString":"inv H; auto with ty."},{"statement":"(e : S.typenv) (ros : reg + ident) (e' : S.typenv) (te : S.typassign) (H : match ros with\n| inl r => S.set e r Tptr\n| inr _ => OK e\nend = OK e') (H0 : S.satisf te e') : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend.","conclusion":"match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend","hypotheses":"(e : S.typenv) (ros : reg + ident) (e' : S.typenv) (te : S.typassign) (H : match ros with\n| inl r => S.set e r Tptr\n| inr _ => OK e\nend = OK e') (H0 : S.satisf te e')","proofString":"destruct ros.\neapply S.set_sound; eauto.\nauto."},{"statement":"(e : S.typenv) (r : reg) (e' : S.typenv) (te : S.typassign) (H : S.set e r Tptr = OK e') (H0 : S.satisf te e') : te r = Tptr.","conclusion":"te r = Tptr","hypotheses":"(e : S.typenv) (r : reg) (e' : S.typenv) (te : S.typassign) (H : S.set e r Tptr = OK e') (H0 : S.satisf te e')","proofString":"eapply S.set_sound; eauto."},{"statement":"(e : S.typenv) (i : ident) (e' : S.typenv) (te : S.typassign) (H : OK e = OK e') (H0 : S.satisf te e') : True.","conclusion":"True","hypotheses":"(e : S.typenv) (i : ident) (e' : S.typenv) (te : S.typassign) (H : OK e = OK e') (H0 : S.satisf te e')","proofString":"auto."},{"statement":"(s : node) (x : unit) (H : match (fn_code f) ! s with\n| Some _ => OK tt\n| None => Error (MSG \"bad successor \" :: POS s :: nil)\nend = OK x) : exists i : instruction, (fn_code f) ! s = Some i.","conclusion":"exists i : instruction, (fn_code f) ! s = Some i","hypotheses":"(s : node) (x : unit) (H : match (fn_code f) ! s with\n| Some _ => OK tt\n| None => Error (MSG \"bad successor \" :: POS s :: nil)\nend = OK x)","proofString":"destruct (fn_code f)!s; inv H.\nexists i; auto."},{"statement":"(s : node) (i : instruction) : exists i0 : instruction, Some i = Some i0.","conclusion":"exists i0 : instruction, Some i = Some i0","hypotheses":"(s : node) (i : instruction)","proofString":"exists i; auto."},{"statement":"(x : unit) (H : OK tt = OK x) (s : node) (H0 : False) : valid_successor f s.","conclusion":"valid_successor f s","hypotheses":"(x : unit) (H : OK tt = OK x) (s : node) (H0 : False)","proofString":"contradiction."},{"statement":"(a : node) (sl : list node) (IHsl : forall x0 : unit,\ncheck_successors sl = OK x0 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (H : (do _ <- check_successor a; check_successors sl) = OK x) (s : node) (H0 : a = s \\/ In s sl) : valid_successor f s.","conclusion":"valid_successor f s","hypotheses":"(a : node) (sl : list node) (IHsl : forall x0 : unit,\ncheck_successors sl = OK x0 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (H : (do _ <- check_successor a; check_successors sl) = OK x) (s : node) (H0 : a = s \\/ In s sl)","proofString":"monadInv H.\ndestruct H0.\nsubst a; eauto with ty.\neauto."},{"statement":"(a : node) (sl : list node) (IHsl : forall x1 : unit,\ncheck_successors sl = OK x1 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (s : node) (H0 : a = s \\/ In s sl) (x0 : unit) (EQ : check_successor a = OK x0) (EQ0 : check_successors sl = OK x) : valid_successor f s.","conclusion":"valid_successor f s","hypotheses":"(a : node) (sl : list node) (IHsl : forall x1 : unit,\ncheck_successors sl = OK x1 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (s : node) (H0 : a = s \\/ In s sl) (x0 : unit) (EQ : check_successor a = OK x0) (EQ0 : check_successors sl = OK x)","proofString":"destruct H0.\nsubst a; eauto with ty.\neauto."},{"statement":"(a : node) (sl : list node) (IHsl : forall x1 : unit,\ncheck_successors sl = OK x1 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (s : node) (H : a = s) (x0 : unit) (EQ : check_successor a = OK x0) (EQ0 : check_successors sl = OK x) : valid_successor f s.","conclusion":"valid_successor f s","hypotheses":"(a : node) (sl : list node) (IHsl : forall x1 : unit,\ncheck_successors sl = OK x1 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (s : node) (H : a = s) (x0 : unit) (EQ : check_successor a = OK x0) (EQ0 : check_successors sl = OK x)","proofString":"subst a; eauto with ty."},{"statement":"(a : node) (sl : list node) (IHsl : forall x1 : unit,\ncheck_successors sl = OK x1 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (s : node) (H : In s sl) (x0 : unit) (EQ : check_successor a = OK x0) (EQ0 : check_successors sl = OK x) : valid_successor f s.","conclusion":"valid_successor f s","hypotheses":"(a : node) (sl : list node) (IHsl : forall x1 : unit,\ncheck_successors sl = OK x1 ->\nforall s0 : node, In s0 sl -> valid_successor f s0) (x : unit) (s : node) (H : In s sl) (x0 : unit) (EQ : check_successor a = OK x0) (EQ0 : check_successors sl = OK x)","proofString":"eauto."},{"statement":"(e : S.typenv) (ty1 ty2 : typ) (e' : S.typenv) (te : S.typassign) (H : (if typ_eq ty1 ty2 then OK e else Error (msg \"unexpected type\")) = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (ty1 ty2 : typ) (e' : S.typenv) (te : S.typassign) (H : (if typ_eq ty1 ty2 then OK e else Error (msg \"unexpected type\")) = OK e') (H0 : S.satisf te e')","proofString":"destruct (typ_eq ty1 ty2); inv H.\nauto."},{"statement":"(ty2 : typ) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') : S.satisf te e'.","conclusion":"S.satisf te e'","hypotheses":"(ty2 : typ) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e')","proofString":"auto."},{"statement":"(e : S.typenv) (ty1 ty2 : typ) (e' : S.typenv) (H : (if typ_eq ty1 ty2 then OK e else Error (msg \"unexpected type\")) = OK e') : ty1 = ty2.","conclusion":"ty1 = ty2","hypotheses":"(e : S.typenv) (ty1 ty2 : typ) (e' : S.typenv) (H : (if typ_eq ty1 ty2 then OK e else Error (msg \"unexpected type\")) = OK e')","proofString":"destruct (typ_eq ty1 ty2); inv H.\nauto."},{"statement":"(ty2 : typ) (e' : S.typenv) : ty2 = ty2.","conclusion":"ty2 = ty2","hypotheses":"(ty2 : typ) (e' : S.typenv)","proofString":"auto."},{"statement":"(e e' : S.typenv) (te : S.typassign) (H : OK e = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e e' : S.typenv) (te : S.typassign) (H : OK e = OK e') (H0 : S.satisf te e')","proofString":"inv H; auto."},{"statement":"(a : builtin_arg reg) (a0 : list (builtin_arg reg)) (IHa : forall (ty0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 a0 ty0 = OK e'0 -> S.satisf te0 e'0 -> S.satisf te0 e0) (t : typ) (ty : list typ) (e e' : S.typenv) (te : S.typassign) (H : (do e1 <- type_builtin_arg e a t; type_builtin_args e1 a0 ty) = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(a : builtin_arg reg) (a0 : list (builtin_arg reg)) (IHa : forall (ty0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 a0 ty0 = OK e'0 -> S.satisf te0 e'0 -> S.satisf te0 e0) (t : typ) (ty : list typ) (e e' : S.typenv) (te : S.typassign) (H : (do e1 <- type_builtin_arg e a t; type_builtin_args e1 a0 ty) = OK e') (H0 : S.satisf te e')","proofString":"monadInv H.\neapply type_builtin_arg_incr; eauto."},{"statement":"(a : builtin_arg reg) (a0 : list (builtin_arg reg)) (IHa : forall (ty0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 a0 ty0 = OK e'0 -> S.satisf te0 e'0 -> S.satisf te0 e0) (t : typ) (ty : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a t = OK x) (EQ0 : type_builtin_args x a0 ty = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(a : builtin_arg reg) (a0 : list (builtin_arg reg)) (IHa : forall (ty0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 a0 ty0 = OK e'0 -> S.satisf te0 e'0 -> S.satisf te0 e0) (t : typ) (ty : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a t = OK x) (EQ0 : type_builtin_args x a0 ty = OK e')","proofString":"eapply type_builtin_arg_incr; eauto."},{"statement":"(e : S.typenv) (a : builtin_arg reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_builtin_arg e a ty = OK e') (H0 : S.satisf te e') : type_of_builtin_arg te a = ty.","conclusion":"type_of_builtin_arg te a = ty","hypotheses":"(e : S.typenv) (a : builtin_arg reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_builtin_arg e a ty = OK e') (H0 : S.satisf te e')","proofString":"destruct a; simpl in *; try (symmetry; eapply type_expect_sound; eassumption).\neapply S.set_sound; eauto."},{"statement":"(e : S.typenv) (x : reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : S.set e x ty = OK e') (H0 : S.satisf te e') : te x = ty.","conclusion":"te x = ty","hypotheses":"(e : S.typenv) (x : reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : S.set e x ty = OK e') (H0 : S.satisf te e')","proofString":"eapply S.set_sound; eauto."},{"statement":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H : (do e1 <- type_builtin_arg e a ty; type_builtin_args e1 al tyl) = OK e') (H0 : S.satisf te e') : type_of_builtin_arg te a :: map (type_of_builtin_arg te) al = ty :: tyl.","conclusion":"type_of_builtin_arg te a :: map (type_of_builtin_arg te) al = ty :: tyl","hypotheses":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H : (do e1 <- type_builtin_arg e a ty; type_builtin_args e1 al tyl) = OK e') (H0 : S.satisf te e')","proofString":"monadInv H.\nf_equal.\neapply type_builtin_arg_sound; eauto with ty.\neauto."},{"statement":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a ty = OK x) (EQ0 : type_builtin_args x al tyl = OK e') : type_of_builtin_arg te a :: map (type_of_builtin_arg te) al = ty :: tyl.","conclusion":"type_of_builtin_arg te a :: map (type_of_builtin_arg te) al = ty :: tyl","hypotheses":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a ty = OK x) (EQ0 : type_builtin_args x al tyl = OK e')","proofString":"f_equal.\neapply type_builtin_arg_sound; eauto with ty.\neauto."},{"statement":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a ty = OK x) (EQ0 : type_builtin_args x al tyl = OK e') : type_of_builtin_arg te a = ty.","conclusion":"type_of_builtin_arg te a = ty","hypotheses":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a ty = OK x) (EQ0 : type_builtin_args x al tyl = OK e')","proofString":"eapply type_builtin_arg_sound; eauto with ty."},{"statement":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a ty = OK x) (EQ0 : type_builtin_args x al tyl = OK e') : map (type_of_builtin_arg te) al = tyl.","conclusion":"map (type_of_builtin_arg te) al = tyl","hypotheses":"(a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall (tyl0 : list typ) (e0 e'0 : S.typenv) (te0 : S.typassign),\ntype_builtin_args e0 al tyl0 = OK e'0 ->\nS.satisf te0 e'0 -> map (type_of_builtin_arg te0) al = tyl0) (ty : typ) (tyl : list typ) (e e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_builtin_arg e a ty = OK x) (EQ0 : type_builtin_args x al tyl = OK e')","proofString":"eauto."},{"statement":"(e : S.typenv) (a : builtin_res reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_builtin_res e a ty = OK e') (H0 : S.satisf te e') : type_of_builtin_res te a = ty.","conclusion":"type_of_builtin_res te a = ty","hypotheses":"(e : S.typenv) (a : builtin_res reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_builtin_res e a ty = OK e') (H0 : S.satisf te e')","proofString":"destruct a; simpl in *.\neapply S.set_sound; eauto.\nsymmetry; eapply type_expect_sound; eauto.\nsymmetry; eapply type_expect_sound; eauto."},{"statement":"(e : S.typenv) (x : reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : S.set e x ty = OK e') (H0 : S.satisf te e') : te x = ty.","conclusion":"te x = ty","hypotheses":"(e : S.typenv) (x : reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : S.set e x ty = OK e') (H0 : S.satisf te e')","proofString":"eapply S.set_sound; eauto."},{"statement":"(e : S.typenv) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_expect e ty Tint = OK e') (H0 : S.satisf te e') : Tint = ty.","conclusion":"Tint = ty","hypotheses":"(e : S.typenv) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_expect e ty Tint = OK e') (H0 : S.satisf te e')","proofString":"symmetry; eapply type_expect_sound; eauto."},{"statement":"(e : S.typenv) (a1 a2 : builtin_res reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_expect e ty Tint = OK e') (H0 : S.satisf te e') : Tint = ty.","conclusion":"Tint = ty","hypotheses":"(e : S.typenv) (a1 a2 : builtin_res reg) (ty : typ) (e' : S.typenv) (te : S.typassign) (H : type_expect e ty Tint = OK e') (H0 : S.satisf te e')","proofString":"symmetry; eapply type_expect_sound; eauto."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (EQ0 : (if is_move o\n then\n  match l with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else\n  let (targs, tres) := type_of_operation o in\n  do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (EQ0 : (if is_move o\n then\n  match l with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else\n  let (targs, tres) := type_of_operation o in\n  do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e')","proofString":"destruct (is_move o) eqn:ISMOVE.\ndestruct l; try discriminate.\ndestruct l; monadInv EQ0.\neauto with ty.\ndestruct (type_of_operation o) as [targs tres] eqn:TYOP.\nmonadInv EQ0.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e')","proofString":"destruct l; try discriminate.\ndestruct l; monadInv EQ0.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (r0 : reg) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => do (_, e'0)<- S.move e r r0; OK e'0\n| _ :: _ => Error (msg \"ill-formed move\")\nend = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : operation) (r0 : reg) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => do (_, e'0)<- S.move e r r0; OK e'0\n| _ :: _ => Error (msg \"ill-formed move\")\nend = OK e')","proofString":"destruct l; monadInv EQ0.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e')) : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : operation) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e'))","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (EQ0 : (let (targs, tres) := type_of_operation o in\n do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (EQ0 : (let (targs, tres) := type_of_operation o in\n do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e')","proofString":"destruct (type_of_operation o) as [targs tres] eqn:TYOP.\nmonadInv EQ0.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (EQ0 : (do e1 <- S.set_list e l targs; S.set e1 r tres) = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (EQ0 : (do e1 <- S.set_list e l targs; S.set e1 r tres) = OK e')","proofString":"monadInv EQ0.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (EQ2 : (if xtype_eq (sig_res s) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible s\n  then OK x0\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (EQ2 : (if xtype_eq (sig_res s) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible s\n  then OK x0\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e')","proofString":"destruct (xtype_eq (sig_res s) (sig_res (fn_sig f))); try discriminate.\ndestruct (tailcall_is_possible s) eqn:TCIP; inv EQ2.\neauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (e0 : sig_res s = sig_res (fn_sig f)) (EQ2 : (if tailcall_is_possible s\n then OK x0\n else Error (msg \"tailcall not possible\")) = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (e0 : sig_res s = sig_res (fn_sig f)) (EQ2 : (if tailcall_is_possible s\n then OK x0\n else Error (msg \"tailcall not possible\")) = OK e')","proofString":"destruct (tailcall_is_possible s) eqn:TCIP; inv EQ2.\neauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true) : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true)","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e')","proofString":"destruct e0; try monadInv EQ1; eauto with ty."},{"statement":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (x0 : S.typenv) (EQ1 : S.set e r Tint = OK x0) (EQ2 : (if zle (list_length_z l * 4) Int.max_unsigned\n then OK x0\n else Error (msg \"jumptable too big\")) = OK e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (x0 : S.typenv) (EQ1 : S.set e r Tint = OK x0) (EQ2 : (if zle (list_length_z l * 4) Int.max_unsigned\n then OK x0\n else Error (msg \"jumptable too big\")) = OK e')","proofString":"destruct (zle (list_length_z l * 4) Int.max_unsigned); inv EQ2.\neauto with ty."},{"statement":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned) : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned)","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : type_instr e (Ireturn o) = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : type_instr e (Ireturn o) = OK e') (H0 : S.satisf te e')","proofString":"simpl in H.\ndestruct o as [r|] eqn: RET; destruct (xtype_eq (sig_res (fn_sig f)) Xvoid); try discriminate.\neauto with ty.\ninv H; auto with ty."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : match o with\n| Some r =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then Error (msg \"bad return\")\n    else S.set e r (proj_sig_res (fn_sig f))\n| None =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then OK e\n    else Error (msg \"bad return\")\nend = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : match o with\n| Some r =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then Error (msg \"bad return\")\n    else S.set e r (proj_sig_res (fn_sig f))\n| None =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then OK e\n    else Error (msg \"bad return\")\nend = OK e') (H0 : S.satisf te e')","proofString":"destruct o as [r|] eqn: RET; destruct (xtype_eq (sig_res (fn_sig f)) Xvoid); try discriminate.\neauto with ty.\ninv H; auto with ty."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (RET : o = None) (e0 : sig_res (fn_sig f) = Xvoid) (H : OK e = OK e') (H0 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (RET : o = None) (e0 : sig_res (fn_sig f) = Xvoid) (H : OK e = OK e') (H0 : S.satisf te e')","proofString":"inv H; auto with ty."},{"statement":"(n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) : wt_instr f te (Inop n).","conclusion":"wt_instr f te (Inop n)","hypotheses":"(n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x)","proofString":"constructor; eauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (EQ0 : (if is_move o\n then\n  match l with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else\n  let (targs, tres) := type_of_operation o in\n  do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e') : wt_instr f te (Iop o l r n).","conclusion":"wt_instr f te (Iop o l r n)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (EQ0 : (if is_move o\n then\n  match l with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else\n  let (targs, tres) := type_of_operation o in\n  do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e')","proofString":"destruct (is_move o) eqn:ISMOVE.\nassert (o = Omove) by (unfold is_move in ISMOVE; destruct o; congruence).\nsubst o.\ndestruct l; try discriminate.\ndestruct l; monadInv EQ0.\nconstructor.\neapply S.move_sound; eauto.\neauto with ty.\ndestruct (type_of_operation o) as [targs tres] eqn:TYOP.\nmonadInv EQ0.\napply wt_Iop.\nunfold is_move in ISMOVE; destruct o; congruence.\nrewrite TYOP.\neapply S.set_list_sound; eauto with ty.\nrewrite TYOP.\neapply S.set_sound; eauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e') : wt_instr f te (Iop o l r n).","conclusion":"wt_instr f te (Iop o l r n)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e')","proofString":"assert (o = Omove) by (unfold is_move in ISMOVE; destruct o; congruence).\nsubst o.\ndestruct l; try discriminate.\ndestruct l; monadInv EQ0.\nconstructor.\neapply S.move_sound; eauto.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e') (H : o = Omove) : wt_instr f te (Iop o l r n).","conclusion":"wt_instr f te (Iop o l r n)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e') (H : o = Omove)","proofString":"subst o.\ndestruct l; try discriminate.\ndestruct l; monadInv EQ0.\nconstructor.\neapply S.move_sound; eauto.\neauto with ty."},{"statement":"(e : S.typenv) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e') : wt_instr f te (Iop Omove l r n).","conclusion":"wt_instr f te (Iop Omove l r n)","hypotheses":"(e : S.typenv) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (EQ0 : match l with\n| nil => Error (msg \"ill-formed move\")\n| arg :: nil => do (_, e'0)<- S.move e r arg; OK e'0\n| arg :: _ :: _ => Error (msg \"ill-formed move\")\nend = OK e')","proofString":"destruct l; try discriminate.\ndestruct l; monadInv EQ0.\nconstructor.\neapply S.move_sound; eauto.\neauto with ty."},{"statement":"(e : S.typenv) (r0 : reg) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (EQ0 : match l with\n| nil => do (_, e'0)<- S.move e r r0; OK e'0\n| _ :: _ => Error (msg \"ill-formed move\")\nend = OK e') : wt_instr f te (Iop Omove (r0 :: l) r n).","conclusion":"wt_instr f te (Iop Omove (r0 :: l) r n)","hypotheses":"(e : S.typenv) (r0 : reg) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (EQ0 : match l with\n| nil => do (_, e'0)<- S.move e r r0; OK e'0\n| _ :: _ => Error (msg \"ill-formed move\")\nend = OK e')","proofString":"destruct l; monadInv EQ0.\nconstructor.\neapply S.move_sound; eauto.\neauto with ty."},{"statement":"(e : S.typenv) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e')) : wt_instr f te (Iop Omove (r0 :: nil) r n).","conclusion":"wt_instr f te (Iop Omove (r0 :: nil) r n)","hypotheses":"(e : S.typenv) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e'))","proofString":"constructor.\neapply S.move_sound; eauto.\neauto with ty."},{"statement":"(e : S.typenv) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e')) : te r = te r0.","conclusion":"te r = te r0","hypotheses":"(e : S.typenv) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e'))","proofString":"eapply S.move_sound; eauto."},{"statement":"(e : S.typenv) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e')) : valid_successor f n.","conclusion":"valid_successor f n","hypotheses":"(e : S.typenv) (r0 r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move Omove = true) (x0 : bool) (EQ1 : S.move e r r0 = OK (x0, e'))","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (EQ0 : (let (targs, tres) := type_of_operation o in\n do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e') : wt_instr f te (Iop o l r n).","conclusion":"wt_instr f te (Iop o l r n)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (EQ0 : (let (targs, tres) := type_of_operation o in\n do e1 <- S.set_list e l targs; S.set e1 r tres) = \nOK e')","proofString":"destruct (type_of_operation o) as [targs tres] eqn:TYOP.\nmonadInv EQ0.\napply wt_Iop.\nunfold is_move in ISMOVE; destruct o; congruence.\nrewrite TYOP.\neapply S.set_list_sound; eauto with ty.\nrewrite TYOP.\neapply S.set_sound; eauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (EQ0 : (do e1 <- S.set_list e l targs; S.set e1 r tres) = OK e') : wt_instr f te (Iop o l r n).","conclusion":"wt_instr f te (Iop o l r n)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (EQ0 : (do e1 <- S.set_list e l targs; S.set e1 r tres) = OK e')","proofString":"monadInv EQ0.\napply wt_Iop.\nunfold is_move in ISMOVE; destruct o; congruence.\nrewrite TYOP.\neapply S.set_list_sound; eauto with ty.\nrewrite TYOP.\neapply S.set_sound; eauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : wt_instr f te (Iop o l r n).","conclusion":"wt_instr f te (Iop o l r n)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"apply wt_Iop.\nunfold is_move in ISMOVE; destruct o; congruence.\nrewrite TYOP.\neapply S.set_list_sound; eauto with ty.\nrewrite TYOP.\neapply S.set_sound; eauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : o <> Omove.","conclusion":"o <> Omove","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"unfold is_move in ISMOVE; destruct o; congruence."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : map te l = fst (type_of_operation o).","conclusion":"map te l = fst (type_of_operation o)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"rewrite TYOP.\neapply S.set_list_sound; eauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : map te l = fst (targs, tres).","conclusion":"map te l = fst (targs, tres)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"eapply S.set_list_sound; eauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : te r = snd (type_of_operation o).","conclusion":"te r = snd (type_of_operation o)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"rewrite TYOP.\neapply S.set_sound; eauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : te r = snd (targs, tres).","conclusion":"te r = snd (targs, tres)","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"eapply S.set_sound; eauto with ty."},{"statement":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e') : valid_successor f n.","conclusion":"valid_successor f n","hypotheses":"(e : S.typenv) (o : operation) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (ISMOVE : is_move o = false) (targs : list typ) (tres : typ) (TYOP : type_of_operation o = (targs, tres)) (x0 : S.typenv) (EQ1 : S.set_list e l targs = OK x0) (EQ2 : S.set x0 r tres = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : wt_instr f te (Iload m a l r n).","conclusion":"wt_instr f te (Iload m a l r n)","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"constructor.\neapply S.set_list_sound; eauto with ty.\neapply S.set_sound; eauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : map te l = type_of_addressing a.","conclusion":"map te l = type_of_addressing a","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"eapply S.set_list_sound; eauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : te r = type_of_chunk m.","conclusion":"te r = type_of_chunk m","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"eapply S.set_sound; eauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : valid_successor f n.","conclusion":"valid_successor f n","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : wt_instr f te (Istore m a l r n).","conclusion":"wt_instr f te (Istore m a l r n)","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"constructor.\neapply S.set_list_sound; eauto with ty.\neapply S.set_sound; eauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : map te l = type_of_addressing a.","conclusion":"map te l = type_of_addressing a","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"eapply S.set_list_sound; eauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : te r = type_of_chunk m.","conclusion":"te r = type_of_chunk m","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"eapply S.set_sound; eauto with ty."},{"statement":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e') : valid_successor f n.","conclusion":"valid_successor f n","hypotheses":"(e : S.typenv) (m : memory_chunk) (a : addressing) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : S.set_list e l (type_of_addressing a) = OK x0) (EQ2 : S.set x0 r (type_of_chunk m) = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e') : wt_instr f te (Icall s s0 l r n).","conclusion":"wt_instr f te (Icall s s0 l r n)","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e')","proofString":"constructor.\neapply type_ros_sound; eauto with ty.\neapply S.set_list_sound; eauto with ty.\neapply S.set_sound; eauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e') : match s0 with\n| inl r0 => te r0 = Tptr\n| inr _ => True\nend.","conclusion":"match s0 with\n| inl r0 => te r0 = Tptr\n| inr _ => True\nend","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e')","proofString":"eapply type_ros_sound; eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e') : map te l = proj_sig_args s.","conclusion":"map te l = proj_sig_args s","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e')","proofString":"eapply S.set_list_sound; eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e') : te r = proj_sig_res s.","conclusion":"te r = proj_sig_res s","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e')","proofString":"eapply S.set_sound; eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e') : valid_successor f n.","conclusion":"valid_successor f n","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (r : reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : type_ros e s0 = OK x0) (x1 : S.typenv) (EQ0 : S.set_list x0 l (proj_sig_args s) = OK x1) (EQ3 : S.set x1 r (proj_sig_res s) = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (EQ2 : (if xtype_eq (sig_res s) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible s\n  then OK x0\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e') : wt_instr f te (Itailcall s s0 l).","conclusion":"wt_instr f te (Itailcall s s0 l)","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (EQ2 : (if xtype_eq (sig_res s) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible s\n  then OK x0\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e')","proofString":"destruct (xtype_eq (sig_res s) (sig_res (fn_sig f))); try discriminate.\ndestruct (tailcall_is_possible s) eqn:TCIP; inv EQ2.\nconstructor.\neapply type_ros_sound; eauto with ty.\neapply S.set_list_sound; eauto with ty.\nauto.\napply tailcall_is_possible_correct; auto."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (e0 : sig_res s = sig_res (fn_sig f)) (EQ2 : (if tailcall_is_possible s\n then OK x0\n else Error (msg \"tailcall not possible\")) = OK e') : wt_instr f te (Itailcall s s0 l).","conclusion":"wt_instr f te (Itailcall s s0 l)","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (x0 : S.typenv) (EQ1 : S.set_list x l (proj_sig_args s) = OK x0) (e0 : sig_res s = sig_res (fn_sig f)) (EQ2 : (if tailcall_is_possible s\n then OK x0\n else Error (msg \"tailcall not possible\")) = OK e')","proofString":"destruct (tailcall_is_possible s) eqn:TCIP; inv EQ2.\nconstructor.\neapply type_ros_sound; eauto with ty.\neapply S.set_list_sound; eauto with ty.\nauto.\napply tailcall_is_possible_correct; auto."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true) : wt_instr f te (Itailcall s s0 l).","conclusion":"wt_instr f te (Itailcall s s0 l)","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true)","proofString":"constructor.\neapply type_ros_sound; eauto with ty.\neapply S.set_list_sound; eauto with ty.\nauto.\napply tailcall_is_possible_correct; auto."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true) : match s0 with\n| inl r => te r = Tptr\n| inr _ => True\nend.","conclusion":"match s0 with\n| inl r => te r = Tptr\n| inr _ => True\nend","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true)","proofString":"eapply type_ros_sound; eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true) : map te l = proj_sig_args s.","conclusion":"map te l = proj_sig_args s","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true)","proofString":"eapply S.set_list_sound; eauto with ty."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true) : sig_res s = sig_res (fn_sig f).","conclusion":"sig_res s = sig_res (fn_sig f)","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true)","proofString":"auto."},{"statement":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true) : tailcall_possible s.","conclusion":"tailcall_possible s","hypotheses":"(e : S.typenv) (s : signature) (s0 : reg + ident) (l : list reg) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : S.typenv) (EQ : type_ros e s0 = OK x) (EQ1 : S.set_list x l (proj_sig_args s) = OK e') (e0 : sig_res s = sig_res (fn_sig f)) (TCIP : tailcall_is_possible s = true)","proofString":"apply tailcall_is_possible_correct; auto."},{"statement":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e') : wt_instr f te (Ibuiltin e0 l b n).","conclusion":"wt_instr f te (Ibuiltin e0 l b n)","hypotheses":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e')","proofString":"constructor.\ndestruct e0; auto; eapply type_builtin_args_sound; eauto with ty.\neapply type_builtin_res_sound; eauto.\neauto with ty."},{"statement":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e') : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) l = proj_sig_args (ef_sig e0)\nend.","conclusion":"match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) l = proj_sig_args (ef_sig e0)\nend","hypotheses":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e')","proofString":"destruct e0; auto; eapply type_builtin_args_sound; eauto with ty."},{"statement":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e') : type_of_builtin_res te b = proj_sig_res (ef_sig e0).","conclusion":"type_of_builtin_res te b = proj_sig_res (ef_sig e0)","hypotheses":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e')","proofString":"eapply type_builtin_res_sound; eauto."},{"statement":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e') : valid_successor f n.","conclusion":"valid_successor f n","hypotheses":"(e : S.typenv) (e0 : external_function) (l : list (builtin_arg reg)) (b : builtin_res reg) (n : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : S.typenv) (EQ1 : match e0 with\n| EF_annot _ _ _ | EF_debug _ _ _ => OK e\n| _ => type_builtin_args e l (proj_sig_args (ef_sig e0))\nend = OK x0) (EQ2 : type_builtin_res x0 b (proj_sig_res (ef_sig e0)) = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e') : wt_instr f te (Icond c l n n0).","conclusion":"wt_instr f te (Icond c l n n0)","hypotheses":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e')","proofString":"constructor.\neapply S.set_list_sound; eauto with ty.\neauto with ty.\neauto with ty."},{"statement":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e') : map te l = type_of_condition c.","conclusion":"map te l = type_of_condition c","hypotheses":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e')","proofString":"eapply S.set_list_sound; eauto with ty."},{"statement":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e') : valid_successor f n.","conclusion":"valid_successor f n","hypotheses":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e') : valid_successor f n0.","conclusion":"valid_successor f n0","hypotheses":"(e : S.typenv) (c : condition) (l : list reg) (n n0 : node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successor n = OK x) (x0 : unit) (EQ1 : check_successor n0 = OK x0) (EQ2 : S.set_list e l (type_of_condition c) = OK e')","proofString":"eauto with ty."},{"statement":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (x0 : S.typenv) (EQ1 : S.set e r Tint = OK x0) (EQ2 : (if zle (list_length_z l * 4) Int.max_unsigned\n then OK x0\n else Error (msg \"jumptable too big\")) = OK e') : wt_instr f te (Ijumptable r l).","conclusion":"wt_instr f te (Ijumptable r l)","hypotheses":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (x0 : S.typenv) (EQ1 : S.set e r Tint = OK x0) (EQ2 : (if zle (list_length_z l * 4) Int.max_unsigned\n then OK x0\n else Error (msg \"jumptable too big\")) = OK e')","proofString":"destruct (zle (list_length_z l * 4) Int.max_unsigned); inv EQ2.\nconstructor.\neapply S.set_sound; eauto.\neapply check_successors_sound; eauto.\nauto."},{"statement":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned) : wt_instr f te (Ijumptable r l).","conclusion":"wt_instr f te (Ijumptable r l)","hypotheses":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned)","proofString":"constructor.\neapply S.set_sound; eauto.\neapply check_successors_sound; eauto.\nauto."},{"statement":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned) : te r = Tint.","conclusion":"te r = Tint","hypotheses":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned)","proofString":"eapply S.set_sound; eauto."},{"statement":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned) : forall s : node, In s l -> valid_successor f s.","conclusion":"forall s : node, In s l -> valid_successor f s","hypotheses":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned)","proofString":"eapply check_successors_sound; eauto."},{"statement":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned) : list_length_z l * 4 <= Int.max_unsigned.","conclusion":"list_length_z l * 4 <= Int.max_unsigned","hypotheses":"(e : S.typenv) (r : reg) (l : list node) (e' : S.typenv) (te : S.typassign) (H0 : S.satisf te e') (x : unit) (EQ : check_successors l = OK x) (EQ1 : S.set e r Tint = OK e') (l0 : list_length_z l * 4 <= Int.max_unsigned)","proofString":"auto."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : type_instr e (Ireturn o) = OK e') (H0 : S.satisf te e') : wt_instr f te (Ireturn o).","conclusion":"wt_instr f te (Ireturn o)","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : type_instr e (Ireturn o) = OK e') (H0 : S.satisf te e')","proofString":"simpl in H.\ndestruct o as [r|] eqn: RET; destruct (xtype_eq (sig_res (fn_sig f)) Xvoid); try discriminate.\neconstructor.\nauto.\neapply S.set_sound; eauto with ty.\neauto.\ninv H.\nconstructor.\nauto."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : match o with\n| Some r =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then Error (msg \"bad return\")\n    else S.set e r (proj_sig_res (fn_sig f))\n| None =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then OK e\n    else Error (msg \"bad return\")\nend = OK e') (H0 : S.satisf te e') : wt_instr f te (Ireturn o).","conclusion":"wt_instr f te (Ireturn o)","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (H : match o with\n| Some r =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then Error (msg \"bad return\")\n    else S.set e r (proj_sig_res (fn_sig f))\n| None =>\n    if xtype_eq (sig_res (fn_sig f)) Xvoid\n    then OK e\n    else Error (msg \"bad return\")\nend = OK e') (H0 : S.satisf te e')","proofString":"destruct o as [r|] eqn: RET; destruct (xtype_eq (sig_res (fn_sig f)) Xvoid); try discriminate.\neconstructor.\nauto.\neapply S.set_sound; eauto with ty.\neauto.\ninv H.\nconstructor.\nauto."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e') : wt_instr f te (Ireturn (Some r)).","conclusion":"wt_instr f te (Ireturn (Some r))","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e')","proofString":"econstructor.\nauto.\neapply S.set_sound; eauto with ty.\neauto."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e') : sig_res (fn_sig f) <> Xvoid.","conclusion":"sig_res (fn_sig f) <> Xvoid","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e')","proofString":"auto."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e') : te r = proj_sig_res (fn_sig f).","conclusion":"te r = proj_sig_res (fn_sig f)","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (r : reg) (RET : o = Some r) (n : sig_res (fn_sig f) <> Xvoid) (H : S.set e r (proj_sig_res (fn_sig f)) = OK e') (H0 : S.satisf te e')","proofString":"eapply S.set_sound; eauto with ty."},{"statement":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (RET : o = None) (e0 : sig_res (fn_sig f) = Xvoid) (H : OK e = OK e') (H0 : S.satisf te e') : wt_instr f te (Ireturn None).","conclusion":"wt_instr f te (Ireturn None)","hypotheses":"(e : S.typenv) (o : option reg) (e' : S.typenv) (te : S.typassign) (RET : o = None) (e0 : sig_res (fn_sig f) = Xvoid) (H : OK e = OK e') (H0 : S.satisf te e')","proofString":"inv H.\nconstructor.\nauto."},{"statement":"(e' : S.typenv) (te : S.typassign) (e0 : sig_res (fn_sig f) = Xvoid) (H0 : S.satisf te e') : wt_instr f te (Ireturn None).","conclusion":"wt_instr f te (Ireturn None)","hypotheses":"(e' : S.typenv) (te : S.typassign) (e0 : sig_res (fn_sig f) = Xvoid) (H0 : S.satisf te e')","proofString":"constructor.\nauto."},{"statement":"(e' : S.typenv) (te : S.typassign) (e0 : sig_res (fn_sig f) = Xvoid) (H0 : S.satisf te e') : sig_res (fn_sig f) = Xvoid.","conclusion":"sig_res (fn_sig f) = Xvoid","hypotheses":"(e' : S.typenv) (te : S.typassign) (e0 : sig_res (fn_sig f) = Xvoid) (H0 : S.satisf te e')","proofString":"auto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) : (fn_code f) ! pc = Some i -> S.satisf te e1 -> wt_instr f te i.","conclusion":"(fn_code f) ! pc = Some i -> S.satisf te e1 -> wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1)","proofString":"set (P := fun c opte =>         match opte with         | Error _ => True         | OK e' => c!pc = Some i -> S.satisf te e' -> wt_instr f te i         end).\nchange (P f.(fn_code) (OK e1)).\nrewrite <- TCODE.\nunfold type_code.\napply PTree_Properties.fold_rec; unfold P; intros.\ndestruct a; auto; intros.\nrewrite <- H in H1.\neapply H0; eauto.\nrewrite PTree.gempty in H; discriminate.\ndestruct a as [e|?]; auto.\ndestruct (type_instr e v) as [e'|?] eqn:TYINSTR; auto.\nintros.\nrewrite PTree.gsspec in H2.\ndestruct (peq pc k).\ninv H2.\neapply type_instr_sound; eauto.\neapply H1; eauto.\neapply type_instr_incr; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : match a with\n| OK e' => m ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend) : match a with\n| OK e' => m' ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend.","conclusion":"match a with\n| OK e' => m' ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : match a with\n| OK e' => m ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend)","proofString":"destruct a; auto; intros.\nrewrite <- H in H1.\neapply H0; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (t : S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : m ! pc = Some i -> S.satisf te t -> wt_instr f te i) (H1 : m' ! pc = Some i) (H2 : S.satisf te t) : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (t : S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : m ! pc = Some i -> S.satisf te t -> wt_instr f te i) (H1 : m' ! pc = Some i) (H2 : S.satisf te t)","proofString":"rewrite <- H in H1.\neapply H0; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (t : S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : m ! pc = Some i -> S.satisf te t -> wt_instr f te i) (H1 : m ! pc = Some i) (H2 : S.satisf te t) : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (t : S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : m ! pc = Some i -> S.satisf te t -> wt_instr f te i) (H1 : m ! pc = Some i) (H2 : S.satisf te t)","proofString":"eapply H0; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (H : (PTree.empty instruction) ! pc = Some i) (H0 : S.satisf te e0) : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (H : (PTree.empty instruction) ! pc = Some i) (H0 : S.satisf te e0)","proofString":"rewrite PTree.gempty in H; discriminate."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : match a with\n| OK e' => m ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend) : match\n  match a with\n  | OK e =>\n      match type_instr e v with\n      | OK e' => OK e'\n      | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n      end\n  | Error _ => a\n  end\nwith\n| OK e' =>\n    (PTree.set k v m) ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend.","conclusion":"match\n  match a with\n  | OK e =>\n      match type_instr e v with\n      | OK e' => OK e'\n      | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n      end\n  | Error _ => a\n  end\nwith\n| OK e' =>\n    (PTree.set k v m) ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : match a with\n| OK e' => m ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend)","proofString":"destruct a as [e|?]; auto.\ndestruct (type_instr e v) as [e'|?] eqn:TYINSTR; auto.\nintros.\nrewrite PTree.gsspec in H2.\ndestruct (peq pc k).\ninv H2.\neapply type_instr_sound; eauto.\neapply H1; eauto.\neapply type_instr_incr; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) : match\n  match type_instr e v with\n  | OK e' => OK e'\n  | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n  end\nwith\n| OK e' =>\n    (PTree.set k v m) ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend.","conclusion":"match\n  match type_instr e v with\n  | OK e' => OK e'\n  | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n  end\nwith\n| OK e' =>\n    (PTree.set k v m) ! pc = Some i -> S.satisf te e' -> wt_instr f te i\n| Error _ => True\nend","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i)","proofString":"destruct (type_instr e v) as [e'|?] eqn:TYINSTR; auto.\nintros.\nrewrite PTree.gsspec in H2.\ndestruct (peq pc k).\ninv H2.\neapply type_instr_sound; eauto.\neapply H1; eauto.\neapply type_instr_incr; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') : (PTree.set k v m) ! pc = Some i -> S.satisf te e' -> wt_instr f te i.","conclusion":"(PTree.set k v m) ! pc = Some i -> S.satisf te e' -> wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e')","proofString":"intros.\nrewrite PTree.gsspec in H2.\ndestruct (peq pc k).\ninv H2.\neapply type_instr_sound; eauto.\neapply H1; eauto.\neapply type_instr_incr; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (H2 : (PTree.set k v m) ! pc = Some i) (H3 : S.satisf te e') : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (H2 : (PTree.set k v m) ! pc = Some i) (H3 : S.satisf te e')","proofString":"rewrite PTree.gsspec in H2.\ndestruct (peq pc k).\ninv H2.\neapply type_instr_sound; eauto.\neapply H1; eauto.\neapply type_instr_incr; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (H2 : (if peq pc k then Some v else m ! pc) = Some i) (H3 : S.satisf te e') : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (H2 : (if peq pc k then Some v else m ! pc) = Some i) (H3 : S.satisf te e')","proofString":"destruct (peq pc k).\ninv H2.\neapply type_instr_sound; eauto.\neapply H1; eauto.\neapply type_instr_incr; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (e2 : pc = k) (H2 : Some v = Some i) (H3 : S.satisf te e') : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (e2 : pc = k) (H2 : Some v = Some i) (H3 : S.satisf te e')","proofString":"inv H2.\neapply type_instr_sound; eauto."},{"statement":"(i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (k : PTree.elt) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (H : m ! k = None) (H0 : (fn_code f) ! k = Some i) (H1 : m ! k = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e i = OK e') (H3 : S.satisf te e') : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (k : PTree.elt) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (H : m ! k = None) (H0 : (fn_code f) ! k = Some i) (H1 : m ! k = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e i = OK e') (H3 : S.satisf te e')","proofString":"eapply type_instr_sound; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (n : pc <> k) (H2 : m ! pc = Some i) (H3 : S.satisf te e') : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (n : pc <> k) (H2 : m ! pc = Some i) (H3 : S.satisf te e')","proofString":"eapply H1; eauto.\neapply type_instr_incr; eauto."},{"statement":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (n : pc <> k) (H2 : m ! pc = Some i) (H3 : S.satisf te e') : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(pc : positive) (i : instruction) (e0 e1 : S.typenv) (te : S.typassign) (TCODE : type_code e0 = OK e1) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (e : S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : m ! pc = Some i -> S.satisf te e -> wt_instr f te i) (e' : S.typenv) (TYINSTR : type_instr e v = OK e') (n : pc <> k) (H2 : m ! pc = Some i) (H3 : S.satisf te e')","proofString":"eapply type_instr_incr; eauto."},{"statement":"(env : regenv) (H : (do e1 <- type_code S.initial;\n do e2 <- S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f));\n do te <- S.solve e2;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te) = \nOK env) : wt_function f env.","conclusion":"wt_function f env","hypotheses":"(env : regenv) (H : (do e1 <- type_code S.initial;\n do e2 <- S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f));\n do te <- S.solve e2;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te) = \nOK env)","proofString":"monadInv H.\nassert (SAT0: S.satisf env x0) by (eapply S.solve_sound; eauto).\nassert (SAT1: S.satisf env x) by (eauto with ty).\nconstructor.\neapply S.set_list_sound; eauto.\nunfold check_params_norepet in EQ2.\ndestruct (list_norepet_dec Reg.eq (fn_params f)); inv EQ2; auto.\nintros.\neapply type_code_sound; eauto.\neauto with ty."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) : wt_function f env.","conclusion":"wt_function f env","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3)","proofString":"assert (SAT0: S.satisf env x0) by (eapply S.solve_sound; eauto).\nassert (SAT1: S.satisf env x) by (eauto with ty).\nconstructor.\neapply S.set_list_sound; eauto.\nunfold check_params_norepet in EQ2.\ndestruct (list_norepet_dec Reg.eq (fn_params f)); inv EQ2; auto.\nintros.\neapply type_code_sound; eauto.\neauto with ty."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) : wt_function f env.","conclusion":"wt_function f env","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0)","proofString":"assert (SAT1: S.satisf env x) by (eauto with ty).\nconstructor.\neapply S.set_list_sound; eauto.\nunfold check_params_norepet in EQ2.\ndestruct (list_norepet_dec Reg.eq (fn_params f)); inv EQ2; auto.\nintros.\neapply type_code_sound; eauto.\neauto with ty."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) : wt_function f env.","conclusion":"wt_function f env","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x)","proofString":"constructor.\neapply S.set_list_sound; eauto.\nunfold check_params_norepet in EQ2.\ndestruct (list_norepet_dec Reg.eq (fn_params f)); inv EQ2; auto.\nintros.\neapply type_code_sound; eauto.\neauto with ty."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) : map env (fn_params f) = proj_sig_args (fn_sig f).","conclusion":"map env (fn_params f) = proj_sig_args (fn_sig f)","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x)","proofString":"eapply S.set_list_sound; eauto."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) : list_norepet (fn_params f).","conclusion":"list_norepet (fn_params f)","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x)","proofString":"unfold check_params_norepet in EQ2.\ndestruct (list_norepet_dec Reg.eq (fn_params f)); inv EQ2; auto."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : (if list_norepet_dec Reg.eq (fn_params f)\n then OK tt\n else Error (msg \"duplicate parameters\")) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) : list_norepet (fn_params f).","conclusion":"list_norepet (fn_params f)","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : (if list_norepet_dec Reg.eq (fn_params f)\n then OK tt\n else Error (msg \"duplicate parameters\")) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x)","proofString":"destruct (list_norepet_dec Reg.eq (fn_params f)); inv EQ2; auto."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr.","conclusion":"forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x)","proofString":"intros.\neapply type_code_sound; eauto."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) (pc : positive) (instr : instruction) (H : (fn_code f) ! pc = Some instr) : wt_instr f env instr.","conclusion":"wt_instr f env instr","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) (pc : positive) (instr : instruction) (H : (fn_code f) ! pc = Some instr)","proofString":"eapply type_code_sound; eauto."},{"statement":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x) : valid_successor f (fn_entrypoint f).","conclusion":"valid_successor f (fn_entrypoint f)","hypotheses":"(env : regenv) (x : S.typenv) (EQ : type_code S.initial = OK x) (x0 : S.typenv) (EQ1 : S.set_list x (fn_params f) (proj_sig_args (fn_sig f)) = OK x0) (EQ0 : S.solve x0 = OK env) (x2 : unit) (EQ2 : check_params_norepet (fn_params f) = OK x2) (x3 : unit) (EQ3 : check_successor (fn_entrypoint f) = OK x3) (SAT0 : S.satisf env x0) (SAT1 : S.satisf env x)","proofString":"eauto with ty."},{"statement":"(te : S.typassign) (p : positive) (e : S.typenv) (H : S.satisf te e) (H0 : te p = Tptr) : exists e' : S.typenv, S.set e p Tptr = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, S.set e p Tptr = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (p : positive) (e : S.typenv) (H : S.satisf te e) (H0 : te p = Tptr)","proofString":"eapply S.set_complete; eauto."},{"statement":"(te : S.typassign) (i : ident) (e : S.typenv) (H : S.satisf te e) (H0 : True) : exists e' : S.typenv, OK e = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, OK e = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (i : ident) (e : S.typenv) (H : S.satisf te e) (H0 : True)","proofString":"exists e; auto."},{"statement":"(s : node) (H : exists i : instruction, (fn_code f) ! s = Some i) : match (fn_code f) ! s with\n| Some _ => OK tt\n| None => Error (MSG \"bad successor \" :: POS s :: nil)\nend = OK tt.","conclusion":"match (fn_code f) ! s with\n| Some _ => OK tt\n| None => Error (MSG \"bad successor \" :: POS s :: nil)\nend = OK tt","hypotheses":"(s : node) (H : exists i : instruction, (fn_code f) ! s = Some i)","proofString":"destruct H as [i EQ]; rewrite EQ; auto."},{"statement":"(e : S.typenv) (ty : typ) : (if typ_eq ty ty then OK e else Error (msg \"unexpected type\")) = OK e.","conclusion":"(if typ_eq ty ty then OK e else Error (msg \"unexpected type\")) = OK e","hypotheses":"(e : S.typenv) (ty : typ)","proofString":"rewrite dec_eq_true; auto."},{"statement":"(te : S.typassign) (a : builtin_arg reg) (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv,\n  type_builtin_arg e a (type_of_builtin_arg te a) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  type_builtin_arg e a (type_of_builtin_arg te a) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (a : builtin_arg reg) (e : S.typenv) (H : S.satisf te e)","proofString":"destruct a; simpl; try (exists e; split; [apply type_expect_complete|assumption]).\napply S.set_complete; auto."},{"statement":"(te : S.typassign) (x : reg) (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv, S.set e x (te x) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, S.set e x (te x) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (x : reg) (e : S.typenv) (H : S.satisf te e)","proofString":"apply S.set_complete; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv, OK e = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, OK e = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e)","proofString":"exists e; auto."},{"statement":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv,\n  (do e1 <- type_builtin_arg e a (type_of_builtin_arg te a);\n   type_builtin_args e1 al (map (type_of_builtin_arg te) al)) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do e1 <- type_builtin_arg e a (type_of_builtin_arg te a);\n   type_builtin_args e1 al (map (type_of_builtin_arg te) al)) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e)","proofString":"destruct (type_builtin_arg_complete te a e) as (e1 & A & B); auto.\ndestruct (IHal e1) as (e2 & C & D); auto.\nexists e2; split; auto.\nrewrite A.\nauto."},{"statement":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do e0 <- type_builtin_arg e a (type_of_builtin_arg te a);\n   type_builtin_args e0 al (map (type_of_builtin_arg te) al)) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do e0 <- type_builtin_arg e a (type_of_builtin_arg te a);\n   type_builtin_args e0 al (map (type_of_builtin_arg te) al)) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1)","proofString":"destruct (IHal e1) as (e2 & C & D); auto.\nexists e2; split; auto.\nrewrite A.\nauto."},{"statement":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_args e1 al (map (type_of_builtin_arg te) al) = OK e2) (D : S.satisf te e2) : exists e' : S.typenv,\n  (do e0 <- type_builtin_arg e a (type_of_builtin_arg te a);\n   type_builtin_args e0 al (map (type_of_builtin_arg te) al)) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do e0 <- type_builtin_arg e a (type_of_builtin_arg te a);\n   type_builtin_args e0 al (map (type_of_builtin_arg te) al)) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_args e1 al (map (type_of_builtin_arg te) al) = OK e2) (D : S.satisf te e2)","proofString":"exists e2; split; auto.\nrewrite A.\nauto."},{"statement":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_args e1 al (map (type_of_builtin_arg te) al) = OK e2) (D : S.satisf te e2) : (do e0 <- type_builtin_arg e a (type_of_builtin_arg te a);\n type_builtin_args e0 al (map (type_of_builtin_arg te) al)) = \nOK e2.","conclusion":"(do e0 <- type_builtin_arg e a (type_of_builtin_arg te a);\n type_builtin_args e0 al (map (type_of_builtin_arg te) al)) = \nOK e2","hypotheses":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_args e1 al (map (type_of_builtin_arg te) al) = OK e2) (D : S.satisf te e2)","proofString":"rewrite A.\nauto."},{"statement":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_args e1 al (map (type_of_builtin_arg te) al) = OK e2) (D : S.satisf te e2) : (do e0 <- OK e1; type_builtin_args e0 al (map (type_of_builtin_arg te) al)) =\nOK e2.","conclusion":"(do e0 <- OK e1; type_builtin_args e0 al (map (type_of_builtin_arg te) al)) =\nOK e2","hypotheses":"(te : S.typassign) (a : builtin_arg reg) (al : list (builtin_arg reg)) (IHal : forall e0 : S.typenv,\nS.satisf te e0 ->\nexists e' : S.typenv,\n  type_builtin_args e0 al (map (type_of_builtin_arg te) al) = OK e' /\\\n  S.satisf te e') (e : S.typenv) (H : S.satisf te e) (e1 : S.typenv) (A : type_builtin_arg e a (type_of_builtin_arg te a) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_args e1 al (map (type_of_builtin_arg te) al) = OK e2) (D : S.satisf te e2)","proofString":"auto."},{"statement":"(te : S.typassign) (a : builtin_res reg) (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv,\n  type_builtin_res e a (type_of_builtin_res te a) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  type_builtin_res e a (type_of_builtin_res te a) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (a : builtin_res reg) (e : S.typenv) (H : S.satisf te e)","proofString":"destruct a; simpl.\napply S.set_complete; auto.\nexists e; auto.\nexists e; auto."},{"statement":"(te : S.typassign) (x : reg) (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv, S.set e x (te x) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, S.set e x (te x) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (x : reg) (e : S.typenv) (H : S.satisf te e)","proofString":"apply S.set_complete; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv, type_expect e Tint Tint = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, type_expect e Tint Tint = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e)","proofString":"exists e; auto."},{"statement":"(te : S.typassign) (a1 a2 : builtin_res reg) (e : S.typenv) (H : S.satisf te e) : exists e' : S.typenv, type_expect e Tint Tint = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, type_expect e Tint Tint = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (a1 a2 : builtin_res reg) (e : S.typenv) (H : S.satisf te e)","proofString":"exists e; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (s : node) (H0 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s; OK e) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s; OK e) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (s : node) (H0 : valid_successor f s)","proofString":"econstructor; split.\nrewrite check_successor_complete; simpl; eauto.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s; do (_, e'0)<- S.move e r r1; OK e'0) = OK e' /\\\n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s; do (_, e'0)<- S.move e r r1; OK e'0) = OK e' /\\\n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s)","proofString":"exploit S.move_complete; eauto.\nintros (changed & e' & A & B).\nexists e'; split.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; auto.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) : (exists (changed : bool) (e' : S.typenv),\n   S.move e r r1 = OK (changed, e') /\\ S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s; do (_, e'0)<- S.move e r r1; OK e'0) = OK e' /\\\n  S.satisf te e'.","conclusion":"(exists (changed : bool) (e' : S.typenv),\n   S.move e r r1 = OK (changed, e') /\\ S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s; do (_, e'0)<- S.move e r r1; OK e'0) = OK e' /\\\n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s)","proofString":"intros (changed & e' & A & B).\nexists e'; split.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; auto.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e') : exists e'0 : S.typenv,\n  (do _ <- check_successor s; do (_, e'1)<- S.move e r r1; OK e'1) = OK e'0 /\\\n  S.satisf te e'0.","conclusion":"exists e'0 : S.typenv,\n  (do _ <- check_successor s; do (_, e'1)<- S.move e r r1; OK e'1) = OK e'0 /\\\n  S.satisf te e'0","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e')","proofString":"exists e'; split.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; auto.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e') : (do _ <- check_successor s; do (_, e'0)<- S.move e r r1; OK e'0) = OK e'.","conclusion":"(do _ <- check_successor s; do (_, e'0)<- S.move e r r1; OK e'0) = OK e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e')","proofString":"rewrite check_successor_complete by auto; simpl.\nrewrite A; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e') : (do (_, e'0)<- S.move e r r1; OK e'0) = OK e'.","conclusion":"(do (_, e'0)<- S.move e r r1; OK e'0) = OK e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e')","proofString":"rewrite A; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e') : S.satisf te e'.","conclusion":"S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (r1 r : reg) (s : node) (H0 : te r = te r1) (H1 : valid_successor f s) (changed : bool) (e' : S.typenv) (A : S.move e r r1 = OK (changed, e')) (B : S.satisf te e')","proofString":"auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (H1 : map te args = fst (type_of_operation op)) (H2 : te res = snd (type_of_operation op)) (H3 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else\n    let (targs, tres) := type_of_operation op in\n    do e1 <- S.set_list e args targs; S.set e1 res tres) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else\n    let (targs, tres) := type_of_operation op in\n    do e1 <- S.set_list e args targs; S.set e1 res tres) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (H1 : map te args = fst (type_of_operation op)) (H2 : te res = snd (type_of_operation op)) (H3 : valid_successor f s)","proofString":"destruct (type_of_operation op) as [targ tres].\nsimpl in *.\nexploit S.set_list_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nreplace (is_move op) with false.\nrewrite A; simpl; rewrite C; auto.\ndestruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = fst (targ, tres)) (H2 : te res = snd (targ, tres)) (H3 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e1 <- S.set_list e args targ; S.set e1 res tres) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e1 <- S.set_list e args targ; S.set e1 res tres) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = fst (targ, tres)) (H2 : te res = snd (targ, tres)) (H3 : valid_successor f s)","proofString":"simpl in *.\nexploit S.set_list_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nreplace (is_move op) with false.\nrewrite A; simpl; rewrite C; auto.\ndestruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e1 <- S.set_list e args targ; S.set e1 res tres) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e1 <- S.set_list e args targ; S.set e1 res tres) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s)","proofString":"exploit S.set_list_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nreplace (is_move op) with false.\nrewrite A; simpl; rewrite C; auto.\ndestruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e0 <- S.set_list e args targ; S.set e0 res tres) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e0 <- S.set_list e args targ; S.set e0 res tres) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1)","proofString":"exploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nreplace (is_move op) with false.\nrewrite A; simpl; rewrite C; auto.\ndestruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e0 <- S.set_list e args targ; S.set e0 res tres) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   if is_move op\n   then\n    match args with\n    | nil => Error (msg \"ill-formed move\")\n    | arg :: nil => do (_, e'0)<- S.move e res arg; OK e'0\n    | arg :: _ :: _ => Error (msg \"ill-formed move\")\n    end\n   else do e0 <- S.set_list e args targ; S.set e0 res tres) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2)","proofString":"exists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nreplace (is_move op) with false.\nrewrite A; simpl; rewrite C; auto.\ndestruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2) : (do _ <- check_successor s;\n if is_move op\n then\n  match args with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e')<- S.move e res arg; OK e'\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else do e0 <- S.set_list e args targ; S.set e0 res tres) = \nOK e2.","conclusion":"(do _ <- check_successor s;\n if is_move op\n then\n  match args with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e')<- S.move e res arg; OK e'\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else do e0 <- S.set_list e args targ; S.set e0 res tres) = \nOK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2)","proofString":"rewrite check_successor_complete by auto; simpl.\nreplace (is_move op) with false.\nrewrite A; simpl; rewrite C; auto.\ndestruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2) : (if is_move op\n then\n  match args with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e')<- S.move e res arg; OK e'\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else do e0 <- S.set_list e args targ; S.set e0 res tres) = \nOK e2.","conclusion":"(if is_move op\n then\n  match args with\n  | nil => Error (msg \"ill-formed move\")\n  | arg :: nil => do (_, e')<- S.move e res arg; OK e'\n  | arg :: _ :: _ => Error (msg \"ill-formed move\")\n  end\n else do e0 <- S.set_list e args targ; S.set e0 res tres) = \nOK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2)","proofString":"replace (is_move op) with false.\nrewrite A; simpl; rewrite C; auto.\ndestruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2) : (do e0 <- S.set_list e args targ; S.set e0 res tres) = OK e2.","conclusion":"(do e0 <- S.set_list e args targ; S.set e0 res tres) = OK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2)","proofString":"rewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2) : false = is_move op.","conclusion":"false = is_move op","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (op : operation) (args : list reg) (res : reg) (s : node) (H0 : op <> Omove) (targ : list typ) (tres : typ) (H1 : map te args = targ) (H2 : te res = tres) (H3 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args targ = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 res tres = OK e2) (D : S.satisf te e2)","proofString":"destruct op; reflexivity || congruence."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <- S.set_list e args (type_of_addressing addr);\n   S.set e1 dst (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <- S.set_list e args (type_of_addressing addr);\n   S.set e1 dst (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s)","proofString":"exploit S.set_list_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 dst (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 dst (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1)","proofString":"exploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 dst (type_of_chunk chunk) = OK e2) (D : S.satisf te e2) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 dst (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 dst (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 dst (type_of_chunk chunk) = OK e2) (D : S.satisf te e2)","proofString":"exists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 dst (type_of_chunk chunk) = OK e2) (D : S.satisf te e2) : (do _ <- check_successor s;\n do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 dst (type_of_chunk chunk)) = OK e2.","conclusion":"(do _ <- check_successor s;\n do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 dst (type_of_chunk chunk)) = OK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 dst (type_of_chunk chunk) = OK e2) (D : S.satisf te e2)","proofString":"rewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 dst (type_of_chunk chunk) = OK e2) (D : S.satisf te e2) : (do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 dst (type_of_chunk chunk)) = OK e2.","conclusion":"(do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 dst (type_of_chunk chunk)) = OK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te dst = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 dst (type_of_chunk chunk) = OK e2) (D : S.satisf te e2)","proofString":"rewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <- S.set_list e args (type_of_addressing addr);\n   S.set e1 src (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <- S.set_list e args (type_of_addressing addr);\n   S.set e1 src (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s)","proofString":"exploit S.set_list_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 src (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 src (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1)","proofString":"exploit S.set_complete.\neexact B.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 src (type_of_chunk chunk) = OK e2) (D : S.satisf te e2) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 src (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- S.set_list e args (type_of_addressing addr);\n   S.set e0 src (type_of_chunk chunk)) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 src (type_of_chunk chunk) = OK e2) (D : S.satisf te e2)","proofString":"exists e2; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 src (type_of_chunk chunk) = OK e2) (D : S.satisf te e2) : (do _ <- check_successor s;\n do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 src (type_of_chunk chunk)) = OK e2.","conclusion":"(do _ <- check_successor s;\n do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 src (type_of_chunk chunk)) = OK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 src (type_of_chunk chunk) = OK e2) (D : S.satisf te e2)","proofString":"rewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 src (type_of_chunk chunk) = OK e2) (D : S.satisf te e2) : (do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 src (type_of_chunk chunk)) = OK e2.","conclusion":"(do e0 <- S.set_list e args (type_of_addressing addr);\n S.set e0 src (type_of_chunk chunk)) = OK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (s : node) (H0 : map te args = type_of_addressing addr) (H1 : te src = type_of_chunk chunk) (H2 : valid_successor f s) (e1 : S.typenv) (A : S.set_list e args (type_of_addressing addr) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set e1 src (type_of_chunk chunk) = OK e2) (D : S.satisf te e2)","proofString":"rewrite A; simpl; rewrite C; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <- type_ros e ros;\n   do e2 <- S.set_list e1 args (proj_sig_args sig);\n   S.set e2 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <- type_ros e ros;\n   do e2 <- S.set_list e1 args (proj_sig_args sig);\n   S.set e2 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s)","proofString":"exploit type_ros_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexploit S.set_list_complete.\neauto.\neauto.\nintros [e2 [C D]].\nexploit S.set_complete.\neexact D.\neauto.\nintros [e3 [E F]].\nexists e3; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; simpl; rewrite E; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- type_ros e ros;\n   do e2 <- S.set_list e0 args (proj_sig_args sig);\n   S.set e2 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- type_ros e ros;\n   do e2 <- S.set_list e0 args (proj_sig_args sig);\n   S.set e2 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1)","proofString":"exploit S.set_list_complete.\neauto.\neauto.\nintros [e2 [C D]].\nexploit S.set_complete.\neexact D.\neauto.\nintros [e3 [E F]].\nexists e3; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; simpl; rewrite E; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- type_ros e ros;\n   do e3 <- S.set_list e0 args (proj_sig_args sig);\n   S.set e3 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- type_ros e ros;\n   do e3 <- S.set_list e0 args (proj_sig_args sig);\n   S.set e3 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"exploit S.set_complete.\neexact D.\neauto.\nintros [e3 [E F]].\nexists e3; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; simpl; rewrite E; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : S.set e2 res (proj_sig_res sig) = OK e3) (F : S.satisf te e3) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- type_ros e ros;\n   do e4 <- S.set_list e0 args (proj_sig_args sig);\n   S.set e4 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <- type_ros e ros;\n   do e4 <- S.set_list e0 args (proj_sig_args sig);\n   S.set e4 res (proj_sig_res sig)) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : S.set e2 res (proj_sig_res sig) = OK e3) (F : S.satisf te e3)","proofString":"exists e3; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; simpl; rewrite E; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : S.set e2 res (proj_sig_res sig) = OK e3) (F : S.satisf te e3) : (do _ <- check_successor s;\n do e0 <- type_ros e ros;\n do e4 <- S.set_list e0 args (proj_sig_args sig);\n S.set e4 res (proj_sig_res sig)) = OK e3.","conclusion":"(do _ <- check_successor s;\n do e0 <- type_ros e ros;\n do e4 <- S.set_list e0 args (proj_sig_args sig);\n S.set e4 res (proj_sig_res sig)) = OK e3","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : S.set e2 res (proj_sig_res sig) = OK e3) (F : S.satisf te e3)","proofString":"rewrite check_successor_complete by auto; simpl.\nrewrite A; simpl; rewrite C; simpl; rewrite E; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : S.set e2 res (proj_sig_res sig) = OK e3) (F : S.satisf te e3) : (do e0 <- type_ros e ros;\n do e4 <- S.set_list e0 args (proj_sig_args sig);\n S.set e4 res (proj_sig_res sig)) = OK e3.","conclusion":"(do e0 <- type_ros e ros;\n do e4 <- S.set_list e0 args (proj_sig_args sig);\n S.set e4 res (proj_sig_res sig)) = OK e3","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (res : reg) (s : node) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : te res = proj_sig_res sig) (H3 : valid_successor f s) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : S.set e2 res (proj_sig_res sig) = OK e3) (F : S.satisf te e3)","proofString":"rewrite A; simpl; rewrite C; simpl; rewrite E; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) : exists e' : S.typenv,\n  (do e1 <- type_ros e ros;\n   do e2 <- S.set_list e1 args (proj_sig_args sig);\n   if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n   then\n    if tailcall_is_possible sig\n    then OK e2\n    else Error (msg \"tailcall not possible\")\n   else Error (msg \"bad return type in tailcall\")) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do e1 <- type_ros e ros;\n   do e2 <- S.set_list e1 args (proj_sig_args sig);\n   if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n   then\n    if tailcall_is_possible sig\n    then OK e2\n    else Error (msg \"tailcall not possible\")\n   else Error (msg \"bad return type in tailcall\")) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig)","proofString":"exploit type_ros_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexploit S.set_list_complete.\neauto.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite A; simpl; rewrite C; simpl.\nrewrite H2; rewrite dec_eq_true.\nreplace (tailcall_is_possible sig) with true; auto.\nsymmetry.\nunfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do e0 <- type_ros e ros;\n   do e2 <- S.set_list e0 args (proj_sig_args sig);\n   if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n   then\n    if tailcall_is_possible sig\n    then OK e2\n    else Error (msg \"tailcall not possible\")\n   else Error (msg \"bad return type in tailcall\")) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do e0 <- type_ros e ros;\n   do e2 <- S.set_list e0 args (proj_sig_args sig);\n   if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n   then\n    if tailcall_is_possible sig\n    then OK e2\n    else Error (msg \"tailcall not possible\")\n   else Error (msg \"bad return type in tailcall\")) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1)","proofString":"exploit S.set_list_complete.\neauto.\neauto.\nintros [e2 [C D]].\nexists e2; split; auto.\nrewrite A; simpl; rewrite C; simpl.\nrewrite H2; rewrite dec_eq_true.\nreplace (tailcall_is_possible sig) with true; auto.\nsymmetry.\nunfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : exists e' : S.typenv,\n  (do e0 <- type_ros e ros;\n   do e3 <- S.set_list e0 args (proj_sig_args sig);\n   if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n   then\n    if tailcall_is_possible sig\n    then OK e3\n    else Error (msg \"tailcall not possible\")\n   else Error (msg \"bad return type in tailcall\")) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do e0 <- type_ros e ros;\n   do e3 <- S.set_list e0 args (proj_sig_args sig);\n   if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n   then\n    if tailcall_is_possible sig\n    then OK e3\n    else Error (msg \"tailcall not possible\")\n   else Error (msg \"bad return type in tailcall\")) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"exists e2; split; auto.\nrewrite A; simpl; rewrite C; simpl.\nrewrite H2; rewrite dec_eq_true.\nreplace (tailcall_is_possible sig) with true; auto.\nsymmetry.\nunfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : (do e0 <- type_ros e ros;\n do e3 <- S.set_list e0 args (proj_sig_args sig);\n if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible sig\n  then OK e3\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e2.","conclusion":"(do e0 <- type_ros e ros;\n do e3 <- S.set_list e0 args (proj_sig_args sig);\n if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible sig\n  then OK e3\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"rewrite A; simpl; rewrite C; simpl.\nrewrite H2; rewrite dec_eq_true.\nreplace (tailcall_is_possible sig) with true; auto.\nsymmetry.\nunfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : (if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible sig\n  then OK e2\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e2.","conclusion":"(if xtype_eq (sig_res sig) (sig_res (fn_sig f))\n then\n  if tailcall_is_possible sig\n  then OK e2\n  else Error (msg \"tailcall not possible\")\n else Error (msg \"bad return type in tailcall\")) = \nOK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"rewrite H2; rewrite dec_eq_true.\nreplace (tailcall_is_possible sig) with true; auto.\nsymmetry.\nunfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : (if tailcall_is_possible sig\n then OK e2\n else Error (msg \"tailcall not possible\")) = OK e2.","conclusion":"(if tailcall_is_possible sig\n then OK e2\n else Error (msg \"tailcall not possible\")) = OK e2","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"replace (tailcall_is_possible sig) with true; auto.\nsymmetry.\nunfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : true = tailcall_is_possible sig.","conclusion":"true = tailcall_is_possible sig","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"symmetry.\nunfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : tailcall_is_possible sig = true.","conclusion":"tailcall_is_possible sig = true","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"unfold tailcall_is_possible.\napply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : forallb\n  (fun l : Locations.loc =>\n   match l with\n   | Locations.R _ => true\n   | Locations.S _ _ _ => false\n   end) (regs_of_rpairs (loc_arguments sig)) = true.","conclusion":"forallb\n  (fun l : Locations.loc =>\n   match l with\n   | Locations.R _ => true\n   | Locations.S _ _ _ => false\n   end) (regs_of_rpairs (loc_arguments sig)) = true","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"apply forallb_forall.\nintros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) : forall x : Locations.loc,\nIn x (regs_of_rpairs (loc_arguments sig)) ->\nmatch x with\n| Locations.R _ => true\n| Locations.S _ _ _ => false\nend = true.","conclusion":"forall x : Locations.loc,\nIn x (regs_of_rpairs (loc_arguments sig)) ->\nmatch x with\n| Locations.R _ => true\n| Locations.S _ _ _ => false\nend = true","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2)","proofString":"intros.\napply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (x : Locations.loc) (H4 : In x (regs_of_rpairs (loc_arguments sig))) : match x with\n| Locations.R _ => true\n| Locations.S _ _ _ => false\nend = true.","conclusion":"match x with\n| Locations.R _ => true\n| Locations.S _ _ _ => false\nend = true","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (x : Locations.loc) (H4 : In x (regs_of_rpairs (loc_arguments sig)))","proofString":"apply H3 in H4.\ndestruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (x : Locations.loc) (H4 : match x with\n| Locations.R _ => True\n| Locations.S _ _ _ => False\nend) : match x with\n| Locations.R _ => true\n| Locations.S _ _ _ => false\nend = true.","conclusion":"match x with\n| Locations.R _ => true\n| Locations.S _ _ _ => false\nend = true","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (sig : signature) (ros : reg + ident) (args : list reg) (H0 : match ros with\n| inl r => te r = Tptr\n| inr _ => True\nend) (H1 : map te args = proj_sig_args sig) (H2 : sig_res sig = sig_res (fn_sig f)) (H3 : tailcall_possible sig) (e1 : S.typenv) (A : type_ros e ros = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 args (proj_sig_args sig) = OK e2) (D : S.satisf te e2) (x : Locations.loc) (H4 : match x with\n| Locations.R _ => True\n| Locations.S _ _ _ => False\nend)","proofString":"destruct x; intuition auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e1 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e1 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s)","proofString":"exploit type_builtin_args_complete; eauto.\ninstantiate (1 := args).\nintros [e1 [A B]].\nexploit type_builtin_res_complete; eauto.\ninstantiate (1 := res).\nintros [e2 [C D]].\nexploit type_builtin_res_complete.\neexact H.\ninstantiate (1 := res).\nintros [e3 [E F]].\nrewrite check_successor_complete by auto.\nsimpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) : (exists e' : S.typenv,\n   type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e' /\\\n   S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e1 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"(exists e' : S.typenv,\n   type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e' /\\\n   S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e1 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e1 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s)","proofString":"intros [e1 [A B]].\nexploit type_builtin_res_complete; eauto.\ninstantiate (1 := res).\nintros [e2 [C D]].\nexploit type_builtin_res_complete.\neexact H.\ninstantiate (1 := res).\nintros [e3 [E F]].\nrewrite check_successor_complete by auto.\nsimpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1)","proofString":"exploit type_builtin_res_complete; eauto.\ninstantiate (1 := res).\nintros [e2 [C D]].\nexploit type_builtin_res_complete.\neexact H.\ninstantiate (1 := res).\nintros [e3 [E F]].\nrewrite check_successor_complete by auto.\nsimpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) : (exists e' : S.typenv,\n   type_builtin_res e1 res (type_of_builtin_res te res) = OK e' /\\\n   S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"(exists e' : S.typenv,\n   type_builtin_res e1 res (type_of_builtin_res te res) = OK e' /\\\n   S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1)","proofString":"intros [e2 [C D]].\nexploit type_builtin_res_complete.\neexact H.\ninstantiate (1 := res).\nintros [e3 [E F]].\nrewrite check_successor_complete by auto.\nsimpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2)","proofString":"exploit type_builtin_res_complete.\neexact H.\ninstantiate (1 := res).\nintros [e3 [E F]].\nrewrite check_successor_complete by auto.\nsimpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) : (exists e' : S.typenv,\n   type_builtin_res e res (type_of_builtin_res te res) = OK e' /\\\n   S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"(exists e' : S.typenv,\n   type_builtin_res e res (type_of_builtin_res te res) = OK e' /\\\n   S.satisf te e') ->\nexists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2)","proofString":"intros [e3 [E F]].\nrewrite check_successor_complete by auto.\nsimpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3) : exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3)","proofString":"rewrite check_successor_complete by auto.\nsimpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3) : exists e' : S.typenv,\n  (do _ <- OK tt;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- OK tt;\n   do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3)","proofString":"simpl.\nexists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3) : exists e' : S.typenv,\n  (do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do e0 <-\n   match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n   | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n   end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) = \n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3)","proofString":"exists (match ef with EF_annot _ _ _ | EF_debug _ _ _ => e3 | _ => e2 end); split.\nrewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto.\ndestruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3) : (do e0 <-\n match ef with\n | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) =\nOK match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => e3\n   | _ => e2\n   end.","conclusion":"(do e0 <-\n match ef with\n | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) =\nOK match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => e3\n   | _ => e2\n   end","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3)","proofString":"rewrite H1 in C, E.\ndestruct ef; try (rewrite <- H0; rewrite A); simpl; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (proj_sig_res (ef_sig ef)) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (proj_sig_res (ef_sig ef)) = OK e3) (F : S.satisf te e3) : (do e0 <-\n match ef with\n | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) =\nOK match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => e3\n   | _ => e2\n   end.","conclusion":"(do e0 <-\n match ef with\n | EF_annot _ _ _ | EF_debug _ _ _ => OK e\n | _ => type_builtin_args e args (proj_sig_args (ef_sig ef))\n end; type_builtin_res e0 res (proj_sig_res (ef_sig ef))) =\nOK match ef with\n   | EF_annot _ _ _ | EF_debug _ _ _ => e3\n   | _ => e2\n   end","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (proj_sig_res (ef_sig ef)) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (proj_sig_res (ef_sig ef)) = OK e3) (F : S.satisf te e3)","proofString":"destruct ef; try (rewrite <- H0; rewrite A); simpl; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3) : S.satisf te\n  match ef with\n  | EF_annot _ _ _ | EF_debug _ _ _ => e3\n  | _ => e2\n  end.","conclusion":"S.satisf te\n  match ef with\n  | EF_annot _ _ _ | EF_debug _ _ _ => e3\n  | _ => e2\n  end","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (H0 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg te) args = proj_sig_args (ef_sig ef)\nend) (H1 : type_of_builtin_res te res = proj_sig_res (ef_sig ef)) (H2 : valid_successor f s) (e1 : S.typenv) (A : type_builtin_args e args (map (type_of_builtin_arg te) args) = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : type_builtin_res e1 res (type_of_builtin_res te res) = OK e2) (D : S.satisf te e2) (e3 : S.typenv) (E : type_builtin_res e res (type_of_builtin_res te res) = OK e3) (F : S.satisf te e3)","proofString":"destruct ef; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) : exists e' : S.typenv,\n  (do _ <- check_successor s1;\n   do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s1;\n   do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2)","proofString":"exploit S.set_list_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexists e1; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite check_successor_complete by auto; simpl.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do _ <- check_successor s1;\n   do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\n  OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successor s1;\n   do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\n  OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1)","proofString":"exists e1; split; auto.\nrewrite check_successor_complete by auto; simpl.\nrewrite check_successor_complete by auto; simpl.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1) : (do _ <- check_successor s1;\n do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\nOK e1.","conclusion":"(do _ <- check_successor s1;\n do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\nOK e1","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1)","proofString":"rewrite check_successor_complete by auto; simpl.\nrewrite check_successor_complete by auto; simpl.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1) : (do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\nOK e1.","conclusion":"(do _ <- check_successor s2; S.set_list e args (type_of_condition cond)) =\nOK e1","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1)","proofString":"rewrite check_successor_complete by auto; simpl.\nauto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1) : S.set_list e args (type_of_condition cond) = OK e1.","conclusion":"S.set_list e args (type_of_condition cond) = OK e1","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (cond : condition) (args : list reg) (s1 s2 : node) (H0 : map te args = type_of_condition cond) (H1 : valid_successor f s1) (H2 : valid_successor f s2) (e1 : S.typenv) (A : S.set_list e args (type_of_condition cond) = OK e1) (B : S.satisf te e1)","proofString":"auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) : exists e' : S.typenv,\n  (do _ <- check_successors tbl;\n   do e1 <- S.set e arg Tint;\n   if zle (list_length_z tbl * 4) Int.max_unsigned\n   then OK e1\n   else Error (msg \"jumptable too big\")) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successors tbl;\n   do e1 <- S.set e arg Tint;\n   if zle (list_length_z tbl * 4) Int.max_unsigned\n   then OK e1\n   else Error (msg \"jumptable too big\")) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned)","proofString":"exploit S.set_complete.\neauto.\neauto.\nintros [e1 [A B]].\nexists e1; split; auto.\nreplace (check_successors tbl) with (OK tt).\nsimpl.\nrewrite A; simpl.\napply zle_true; auto.\nrevert H1.\ngeneralize tbl.\ninduction tbl0; simpl; intros.\nauto.\nrewrite check_successor_complete by auto; simpl.\napply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : exists e' : S.typenv,\n  (do _ <- check_successors tbl;\n   do e0 <- S.set e arg Tint;\n   if zle (list_length_z tbl * 4) Int.max_unsigned\n   then OK e0\n   else Error (msg \"jumptable too big\")) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (do _ <- check_successors tbl;\n   do e0 <- S.set e arg Tint;\n   if zle (list_length_z tbl * 4) Int.max_unsigned\n   then OK e0\n   else Error (msg \"jumptable too big\")) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"exists e1; split; auto.\nreplace (check_successors tbl) with (OK tt).\nsimpl.\nrewrite A; simpl.\napply zle_true; auto.\nrevert H1.\ngeneralize tbl.\ninduction tbl0; simpl; intros.\nauto.\nrewrite check_successor_complete by auto; simpl.\napply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : (do _ <- check_successors tbl;\n do e0 <- S.set e arg Tint;\n if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e0\n else Error (msg \"jumptable too big\")) = OK e1.","conclusion":"(do _ <- check_successors tbl;\n do e0 <- S.set e arg Tint;\n if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e0\n else Error (msg \"jumptable too big\")) = OK e1","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"replace (check_successors tbl) with (OK tt).\nsimpl.\nrewrite A; simpl.\napply zle_true; auto.\nrevert H1.\ngeneralize tbl.\ninduction tbl0; simpl; intros.\nauto.\nrewrite check_successor_complete by auto; simpl.\napply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : (do _ <- OK tt;\n do e0 <- S.set e arg Tint;\n if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e0\n else Error (msg \"jumptable too big\")) = OK e1.","conclusion":"(do _ <- OK tt;\n do e0 <- S.set e arg Tint;\n if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e0\n else Error (msg \"jumptable too big\")) = OK e1","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"simpl.\nrewrite A; simpl.\napply zle_true; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : (do e0 <- S.set e arg Tint;\n if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e0\n else Error (msg \"jumptable too big\")) = OK e1.","conclusion":"(do e0 <- S.set e arg Tint;\n if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e0\n else Error (msg \"jumptable too big\")) = OK e1","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"rewrite A; simpl.\napply zle_true; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : (if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e1\n else Error (msg \"jumptable too big\")) = OK e1.","conclusion":"(if zle (list_length_z tbl * 4) Int.max_unsigned\n then OK e1\n else Error (msg \"jumptable too big\")) = OK e1","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"apply zle_true; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : OK tt = check_successors tbl.","conclusion":"OK tt = check_successors tbl","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H1 : forall s : node, In s tbl -> valid_successor f s) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"revert H1.\ngeneralize tbl.\ninduction tbl0; simpl; intros.\nauto.\nrewrite check_successor_complete by auto; simpl.\napply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : (forall s : node, In s tbl -> valid_successor f s) ->\nOK tt = check_successors tbl.","conclusion":"(forall s : node, In s tbl -> valid_successor f s) ->\nOK tt = check_successors tbl","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"generalize tbl.\ninduction tbl0; simpl; intros.\nauto.\nrewrite check_successor_complete by auto; simpl.\napply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) : forall tbl0 : list node,\n(forall s : node, In s tbl0 -> valid_successor f s) ->\nOK tt = check_successors tbl0.","conclusion":"forall tbl0 : list node,\n(forall s : node, In s tbl0 -> valid_successor f s) ->\nOK tt = check_successors tbl0","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1)","proofString":"induction tbl0; simpl; intros.\nauto.\nrewrite check_successor_complete by auto; simpl.\napply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) (H1 : forall s : node, False -> valid_successor f s) : OK tt = OK tt.","conclusion":"OK tt = OK tt","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) (H1 : forall s : node, False -> valid_successor f s)","proofString":"auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) (a : node) (tbl0 : list node) (IHtbl0 : (forall s : node, In s tbl0 -> valid_successor f s) ->\nOK tt = check_successors tbl0) (H1 : forall s : node, a = s \\/ In s tbl0 -> valid_successor f s) : OK tt = (do _ <- check_successor a; check_successors tbl0).","conclusion":"OK tt = (do _ <- check_successor a; check_successors tbl0)","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) (a : node) (tbl0 : list node) (IHtbl0 : (forall s : node, In s tbl0 -> valid_successor f s) ->\nOK tt = check_successors tbl0) (H1 : forall s : node, a = s \\/ In s tbl0 -> valid_successor f s)","proofString":"rewrite check_successor_complete by auto; simpl.\napply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) (a : node) (tbl0 : list node) (IHtbl0 : (forall s : node, In s tbl0 -> valid_successor f s) ->\nOK tt = check_successors tbl0) (H1 : forall s : node, a = s \\/ In s tbl0 -> valid_successor f s) : OK tt = check_successors tbl0.","conclusion":"OK tt = check_successors tbl0","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (tbl : list node) (H0 : te arg = Tint) (H2 : list_length_z tbl * 4 <= Int.max_unsigned) (e1 : S.typenv) (A : S.set e arg Tint = OK e1) (B : S.satisf te e1) (a : node) (tbl0 : list node) (IHtbl0 : (forall s : node, In s tbl0 -> valid_successor f s) ->\nOK tt = check_successors tbl0) (H1 : forall s : node, a = s \\/ In s tbl0 -> valid_successor f s)","proofString":"apply IHtbl0; intros; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (H0 : sig_res (fn_sig f) = Xvoid) : exists e' : S.typenv,\n  (if xtype_eq (sig_res (fn_sig f)) Xvoid\n   then OK e\n   else Error (msg \"bad return\")) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (if xtype_eq (sig_res (fn_sig f)) Xvoid\n   then OK e\n   else Error (msg \"bad return\")) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (H0 : sig_res (fn_sig f) = Xvoid)","proofString":"rewrite H0, dec_eq_true.\nexists e; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (H0 : sig_res (fn_sig f) = Xvoid) : exists e' : S.typenv, OK e = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, OK e = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (H0 : sig_res (fn_sig f) = Xvoid)","proofString":"exists e; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (ty : typ) (H0 : sig_res (fn_sig f) <> Xvoid) (H1 : te arg = proj_sig_res (fn_sig f)) (H2 : te arg = ty) : exists e' : S.typenv,\n  (if xtype_eq (sig_res (fn_sig f)) Xvoid\n   then Error (msg \"bad return\")\n   else S.set e arg (proj_sig_res (fn_sig f))) = OK e' /\\ \n  S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  (if xtype_eq (sig_res (fn_sig f)) Xvoid\n   then Error (msg \"bad return\")\n   else S.set e arg (proj_sig_res (fn_sig f))) = OK e' /\\ \n  S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (ty : typ) (H0 : sig_res (fn_sig f) <> Xvoid) (H1 : te arg = proj_sig_res (fn_sig f)) (H2 : te arg = ty)","proofString":"rewrite dec_eq_false by auto.\napply S.set_complete; auto."},{"statement":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (ty : typ) (H0 : sig_res (fn_sig f) <> Xvoid) (H1 : te arg = proj_sig_res (fn_sig f)) (H2 : te arg = ty) : exists e' : S.typenv,\n  S.set e arg (proj_sig_res (fn_sig f)) = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  S.set e arg (proj_sig_res (fn_sig f)) = OK e' /\\ S.satisf te e'","hypotheses":"(te : S.typassign) (e : S.typenv) (H : S.satisf te e) (arg : reg) (ty : typ) (H0 : sig_res (fn_sig f) <> Xvoid) (H1 : te arg = proj_sig_res (fn_sig f)) (H2 : te arg = ty)","proofString":"apply S.set_complete; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) : exists e' : S.typenv, type_code e0 = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, type_code e0 = OK e' /\\ S.satisf te e'","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0)","proofString":"set (P := fun c res =>        (forall pc i, c!pc = Some i -> wt_instr f te i) ->        exists e', res = OK e' /\\ S.satisf te e').\nassert (P f.(fn_code) (type_code e0)).\nunfold type_code.\napply PTree_Properties.fold_rec; unfold P; intros.\napply H0.\nintros.\napply H1 with pc.\nrewrite <- H; auto.\nexists e0; auto.\ndestruct H1 as [e [A B]].\nintros.\napply H2 with pc.\nrewrite PTree.gso; auto.\ncongruence.\nsubst a.\ndestruct (type_instr_complete te e v) as [e' [C D]].\nauto.\napply H2 with k.\napply PTree.gss.\nexists e'; split; auto.\nrewrite C; auto.\napply H; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc : positive) (i : instruction), m' ! pc = Some i -> wt_instr f te i) : exists e' : S.typenv, a = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, a = OK e' /\\ S.satisf te e'","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc : positive) (i : instruction), m' ! pc = Some i -> wt_instr f te i)","proofString":"apply H0.\nintros.\napply H1 with pc.\nrewrite <- H; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc : positive) (i : instruction), m' ! pc = Some i -> wt_instr f te i) : forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i.","conclusion":"forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc : positive) (i : instruction), m' ! pc = Some i -> wt_instr f te i)","proofString":"intros.\napply H1 with pc.\nrewrite <- H; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc0 : positive) (i0 : instruction),\n m ! pc0 = Some i0 -> wt_instr f te i0) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc0 : positive) (i0 : instruction),\nm' ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H2 : m ! pc = Some i) : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc0 : positive) (i0 : instruction),\n m ! pc0 = Some i0 -> wt_instr f te i0) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc0 : positive) (i0 : instruction),\nm' ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H2 : m ! pc = Some i)","proofString":"apply H1 with pc.\nrewrite <- H; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc0 : positive) (i0 : instruction),\n m ! pc0 = Some i0 -> wt_instr f te i0) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc0 : positive) (i0 : instruction),\nm' ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H2 : m ! pc = Some i) : m' ! pc = Some i.","conclusion":"m' ! pc = Some i","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m m' : PTree.t instruction) (a : res S.typenv) (H : forall x : PTree.elt, m ! x = m' ! x) (H0 : (forall (pc0 : positive) (i0 : instruction),\n m ! pc0 = Some i0 -> wt_instr f te i0) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H1 : forall (pc0 : positive) (i0 : instruction),\nm' ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H2 : m ! pc = Some i)","proofString":"rewrite <- H; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (H : forall (pc : positive) (i : instruction),\n(PTree.empty instruction) ! pc = Some i -> wt_instr f te i) : exists e' : S.typenv, OK e0 = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv, OK e0 = OK e' /\\ S.satisf te e'","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (H : forall (pc : positive) (i : instruction),\n(PTree.empty instruction) ! pc = Some i -> wt_instr f te i)","proofString":"exists e0; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : (forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) : exists e' : S.typenv,\n  match a with\n  | OK e =>\n      match type_instr e v with\n      | OK e'0 => OK e'0\n      | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n      end\n  | Error _ => a\n  end = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  match a with\n  | OK e =>\n      match type_instr e v with\n      | OK e'0 => OK e'0\n      | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n      end\n  | Error _ => a\n  end = OK e' /\\ S.satisf te e'","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H1 : (forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i) ->\nexists e' : S.typenv, a = OK e' /\\ S.satisf te e') (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i)","proofString":"destruct H1 as [e [A B]].\nintros.\napply H2 with pc.\nrewrite PTree.gso; auto.\ncongruence.\nsubst a.\ndestruct (type_instr_complete te e v) as [e' [C D]].\nauto.\napply H2 with k.\napply PTree.gss.\nexists e'; split; auto.\nrewrite C; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) : forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i.","conclusion":"forall (pc : positive) (i : instruction), m ! pc = Some i -> wt_instr f te i","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i)","proofString":"intros.\napply H2 with pc.\nrewrite PTree.gso; auto.\ncongruence."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc0 : positive) (i0 : instruction),\n(PTree.set k v m) ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H1 : m ! pc = Some i) : wt_instr f te i.","conclusion":"wt_instr f te i","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc0 : positive) (i0 : instruction),\n(PTree.set k v m) ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H1 : m ! pc = Some i)","proofString":"apply H2 with pc.\nrewrite PTree.gso; auto.\ncongruence."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc0 : positive) (i0 : instruction),\n(PTree.set k v m) ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H1 : m ! pc = Some i) : (PTree.set k v m) ! pc = Some i.","conclusion":"(PTree.set k v m) ! pc = Some i","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc0 : positive) (i0 : instruction),\n(PTree.set k v m) ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H1 : m ! pc = Some i)","proofString":"rewrite PTree.gso; auto.\ncongruence."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc0 : positive) (i0 : instruction),\n(PTree.set k v m) ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H1 : m ! pc = Some i) : pc <> k.","conclusion":"pc <> k","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc0 : positive) (i0 : instruction),\n(PTree.set k v m) ! pc0 = Some i0 -> wt_instr f te i0) (pc : positive) (i : instruction) (H1 : m ! pc = Some i)","proofString":"congruence."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (A : a = OK e) (B : S.satisf te e) : exists e' : S.typenv,\n  match a with\n  | OK e1 =>\n      match type_instr e1 v with\n      | OK e'0 => OK e'0\n      | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n      end\n  | Error _ => a\n  end = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  match a with\n  | OK e1 =>\n      match type_instr e1 v with\n      | OK e'0 => OK e'0\n      | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n      end\n  | Error _ => a\n  end = OK e' /\\ S.satisf te e'","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (a : res S.typenv) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (A : a = OK e) (B : S.satisf te e)","proofString":"subst a.\ndestruct (type_instr_complete te e v) as [e' [C D]].\nauto.\napply H2 with k.\napply PTree.gss.\nexists e'; split; auto.\nrewrite C; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) : exists e' : S.typenv,\n  match type_instr e v with\n  | OK e'0 => OK e'0\n  | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n  end = OK e' /\\ S.satisf te e'.","conclusion":"exists e' : S.typenv,\n  match type_instr e v with\n  | OK e'0 => OK e'0\n  | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n  end = OK e' /\\ S.satisf te e'","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e)","proofString":"destruct (type_instr_complete te e v) as [e' [C D]].\nauto.\napply H2 with k.\napply PTree.gss.\nexists e'; split; auto.\nrewrite C; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) : S.satisf te e.","conclusion":"S.satisf te e","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e)","proofString":"auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) : wt_instr f te v.","conclusion":"wt_instr f te v","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e)","proofString":"apply H2 with k.\napply PTree.gss."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) : (PTree.set k v m) ! k = Some v.","conclusion":"(PTree.set k v m) ! k = Some v","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e)","proofString":"apply PTree.gss."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) (e' : S.typenv) (C : type_instr e v = OK e') (D : S.satisf te e') : exists e'0 : S.typenv,\n  match type_instr e v with\n  | OK e'1 => OK e'1\n  | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n  end = OK e'0 /\\ S.satisf te e'0.","conclusion":"exists e'0 : S.typenv,\n  match type_instr e v with\n  | OK e'1 => OK e'1\n  | Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\n  end = OK e'0 /\\ S.satisf te e'0","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) (e' : S.typenv) (C : type_instr e v = OK e') (D : S.satisf te e')","proofString":"exists e'; split; auto.\nrewrite C; auto."},{"statement":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) (e' : S.typenv) (C : type_instr e v = OK e') (D : S.satisf te e') : match type_instr e v with\n| OK e'0 => OK e'0\n| Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\nend = OK e'.","conclusion":"match type_instr e v with\n| OK e'0 => OK e'0\n| Error msg => Error (MSG \"At PC \" :: POS k :: MSG \": \" :: msg)\nend = OK e'","hypotheses":"(te : regenv) (e0 : S.typenv) (WTC : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (SAT0 : S.satisf te e0) (P : PTree.tree instruction -> res S.typenv -> Prop) (m : PTree.t instruction) (k : PTree.elt) (v : instruction) (H : m ! k = None) (H0 : (fn_code f) ! k = Some v) (H2 : forall (pc : positive) (i : instruction),\n(PTree.set k v m) ! pc = Some i -> wt_instr f te i) (e : S.typenv) (B : S.satisf te e) (e' : S.typenv) (C : type_instr e v = OK e') (D : S.satisf te e')","proofString":"rewrite C; auto."},{"statement":"(te : regenv) (H : wt_function f te) : exists te0 : regenv, type_function = OK te0.","conclusion":"exists te0 : regenv, type_function = OK te0","hypotheses":"(te : regenv) (H : wt_function f te)","proofString":"destruct H.\ndestruct (type_code_complete te S.initial) as (e1 & A & B).\nauto.\napply S.satisf_initial.\ndestruct (S.set_list_complete te f.(fn_params) (proj_sig_args f.(fn_sig)) e1) as (e2 & C & D); auto.\ndestruct (S.solve_complete te e2) as (te' & E); auto.\nexists te'; unfold type_function.\nrewrite A; simpl.\nrewrite C; simpl.\nrewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : exists te0 : regenv, type_function = OK te0.","conclusion":"exists te0 : regenv, type_function = OK te0","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"destruct (type_code_complete te S.initial) as (e1 & A & B).\nauto.\napply S.satisf_initial.\ndestruct (S.set_list_complete te f.(fn_params) (proj_sig_args f.(fn_sig)) e1) as (e2 & C & D); auto.\ndestruct (S.solve_complete te e2) as (te' & E); auto.\nexists te'; unfold type_function.\nrewrite A; simpl.\nrewrite C; simpl.\nrewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr.","conclusion":"forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"auto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : S.satisf te S.initial.","conclusion":"S.satisf te S.initial","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"apply S.satisf_initial."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) : exists te0 : regenv, type_function = OK te0.","conclusion":"exists te0 : regenv, type_function = OK te0","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1)","proofString":"destruct (S.set_list_complete te f.(fn_params) (proj_sig_args f.(fn_sig)) e1) as (e2 & C & D); auto.\ndestruct (S.solve_complete te e2) as (te' & E); auto.\nexists te'; unfold type_function.\nrewrite A; simpl.\nrewrite C; simpl.\nrewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) : exists te0 : regenv, type_function = OK te0.","conclusion":"exists te0 : regenv, type_function = OK te0","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2)","proofString":"destruct (S.solve_complete te e2) as (te' & E); auto.\nexists te'; unfold type_function.\nrewrite A; simpl.\nrewrite C; simpl.\nrewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : exists te0 : regenv, type_function = OK te0.","conclusion":"exists te0 : regenv, type_function = OK te0","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"exists te'; unfold type_function.\nrewrite A; simpl.\nrewrite C; simpl.\nrewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do e0 <- type_code S.initial;\n do e3 <- S.set_list e0 (fn_params f) (proj_sig_args (fn_sig f));\n do te0 <- S.solve e3;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te0) = \nOK te'.","conclusion":"(do e0 <- type_code S.initial;\n do e3 <- S.set_list e0 (fn_params f) (proj_sig_args (fn_sig f));\n do te0 <- S.solve e3;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te0) = \nOK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"rewrite A; simpl.\nrewrite C; simpl.\nrewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do e0 <- S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f));\n do te0 <- S.solve e0;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te0) = \nOK te'.","conclusion":"(do e0 <- S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f));\n do te0 <- S.solve e0;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te0) = \nOK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"rewrite C; simpl.\nrewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do te0 <- S.solve e2;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te0) = \nOK te'.","conclusion":"(do te0 <- S.solve e2;\n do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te0) = \nOK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"rewrite E; simpl.\nunfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te') = \nOK te'.","conclusion":"(do _ <- check_params_norepet (fn_params f);\n do _ <- check_successor (fn_entrypoint f); OK te') = \nOK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"unfold check_params_norepet.\nrewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do _ <-\n (if list_norepet_dec Reg.eq (fn_params f)\n  then OK tt\n  else Error (msg \"duplicate parameters\"));\n do _ <- check_successor (fn_entrypoint f); OK te') = \nOK te'.","conclusion":"(do _ <-\n (if list_norepet_dec Reg.eq (fn_params f)\n  then OK tt\n  else Error (msg \"duplicate parameters\"));\n do _ <- check_successor (fn_entrypoint f); OK te') = \nOK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"rewrite pred_dec_true; auto.\nsimpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do _ <- OK tt; do _ <- check_successor (fn_entrypoint f); OK te') = OK te'.","conclusion":"(do _ <- OK tt; do _ <- check_successor (fn_entrypoint f); OK te') = OK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"simpl.\nrewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do _ <- check_successor (fn_entrypoint f); OK te') = OK te'.","conclusion":"(do _ <- check_successor (fn_entrypoint f); OK te') = OK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"rewrite check_successor_complete by auto.\nauto."},{"statement":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te') : (do _ <- OK tt; OK te') = OK te'.","conclusion":"(do _ <- OK tt; OK te') = OK te'","hypotheses":"(te : regenv) (wt_params0 : map te (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f te instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) (e1 : S.typenv) (A : type_code S.initial = OK e1) (B : S.satisf te e1) (e2 : S.typenv) (C : S.set_list e1 (fn_params f) (proj_sig_args (fn_sig f)) = OK e2) (D : S.satisf te e2) (te' : S.typassign) (E : S.solve e2 = OK te')","proofString":"auto."},{"statement":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive) : Val.has_type (rs # r <- v) # r0 (env r0).","conclusion":"Val.has_type (rs # r <- v) # r0 (env r0)","hypotheses":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive)","proofString":"rewrite Regmap.gsspec.\ncase (peq r0 r); intro.\nsubst r0.\nassumption.\napply H."},{"statement":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive) : Val.has_type (if peq r0 r then v else rs # r0) (env r0).","conclusion":"Val.has_type (if peq r0 r then v else rs # r0) (env r0)","hypotheses":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive)","proofString":"case (peq r0 r); intro.\nsubst r0.\nassumption.\napply H."},{"statement":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive) (e : r0 = r) : Val.has_type v (env r0).","conclusion":"Val.has_type v (env r0)","hypotheses":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive) (e : r0 = r)","proofString":"subst r0.\nassumption."},{"statement":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) : Val.has_type v (env r).","conclusion":"Val.has_type v (env r)","hypotheses":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r))","proofString":"assumption."},{"statement":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive) (n : r0 <> r) : Val.has_type rs # r0 (env r0).","conclusion":"Val.has_type rs # r0 (env r0)","hypotheses":"(env : regenv) (rs : regset) (v : val) (r : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env r)) (r0 : positive) (n : r0 <> r)","proofString":"apply H."},{"statement":"(env : regenv) (rs : regset) (H : wt_regset env rs) : True.","conclusion":"True","hypotheses":"(env : regenv) (rs : regset) (H : wt_regset env rs)","proofString":"auto."},{"statement":"(env : regenv) (rs : regset) (H : wt_regset env rs) (a : positive) (rl : list positive) (IHrl : Val.has_type_list rs ## rl (map env rl)) : Val.has_type rs # a (env a) /\\ Val.has_type_list rs ## rl (map env rl).","conclusion":"Val.has_type rs # a (env a) /\\ Val.has_type_list rs ## rl (map env rl)","hypotheses":"(env : regenv) (rs : regset) (H : wt_regset env rs) (a : positive) (rl : list positive) (IHrl : Val.has_type_list rs ## rl (map env rl))","proofString":"split.\napply H.\napply IHrl."},{"statement":"(env : regenv) (rs : regset) (H : wt_regset env rs) (a : positive) (rl : list positive) (IHrl : Val.has_type_list rs ## rl (map env rl)) : Val.has_type rs # a (env a).","conclusion":"Val.has_type rs # a (env a)","hypotheses":"(env : regenv) (rs : regset) (H : wt_regset env rs) (a : positive) (rl : list positive) (IHrl : Val.has_type_list rs ## rl (map env rl))","proofString":"apply H."},{"statement":"(env : regenv) (rs : regset) (H : wt_regset env rs) (a : positive) (rl : list positive) (IHrl : Val.has_type_list rs ## rl (map env rl)) : Val.has_type_list rs ## rl (map env rl).","conclusion":"Val.has_type_list rs ## rl (map env rl)","hypotheses":"(env : regenv) (rs : regset) (H : wt_regset env rs) (a : positive) (rl : list positive) (IHrl : Val.has_type_list rs ## rl (map env rl))","proofString":"apply IHrl."},{"statement":"(env : regenv) (rs : regset) (v : val) (res : builtin_res reg) (H : wt_regset env rs) (H0 : Val.has_type v (type_of_builtin_res env res)) : wt_regset env (regmap_setres res v rs).","conclusion":"wt_regset env (regmap_setres res v rs)","hypotheses":"(env : regenv) (rs : regset) (v : val) (res : builtin_res reg) (H : wt_regset env rs) (H0 : Val.has_type v (type_of_builtin_res env res))","proofString":"destruct res; simpl in *; auto.\napply wt_regset_assign; auto."},{"statement":"(env : regenv) (rs : regset) (v : val) (x : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env x)) : wt_regset env rs # x <- v.","conclusion":"wt_regset env rs # x <- v","hypotheses":"(env : regenv) (rs : regset) (v : val) (x : reg) (H : wt_regset env rs) (H0 : Val.has_type v (env x))","proofString":"apply wt_regset_assign; auto."},{"statement":"(env : reg -> typ) (H : True) : wt_regset env (Regmap.init Vundef).","conclusion":"wt_regset env (Regmap.init Vundef)","hypotheses":"(env : reg -> typ) (H : True)","proofString":"red; intros.\nrewrite Regmap.gi.\nsimpl; auto."},{"statement":"(env : reg -> typ) (H : True) (r : positive) : Val.has_type (Regmap.init Vundef) # r (env r).","conclusion":"Val.has_type (Regmap.init Vundef) # r (env r)","hypotheses":"(env : reg -> typ) (H : True) (r : positive)","proofString":"rewrite Regmap.gi.\nsimpl; auto."},{"statement":"(env : reg -> typ) (H : True) (r : positive) : Val.has_type Vundef (env r).","conclusion":"Val.has_type Vundef (env r)","hypotheses":"(env : reg -> typ) (H : True) (r : positive)","proofString":"simpl; auto."},{"statement":"(env : reg -> typ) (a : reg) (rl : list reg) (IHrl : forall args0 : list val,\nVal.has_type_list args0 (map env rl) -> wt_regset env (init_regs args0 rl)) (v : val) (args : list val) (H0 : Val.has_type v (env a)) (H1 : Val.has_type_list args (map env rl)) : wt_regset env (init_regs args rl) # a <- v.","conclusion":"wt_regset env (init_regs args rl) # a <- v","hypotheses":"(env : reg -> typ) (a : reg) (rl : list reg) (IHrl : forall args0 : list val,\nVal.has_type_list args0 (map env rl) -> wt_regset env (init_regs args0 rl)) (v : val) (args : list val) (H0 : Val.has_type v (env a)) (H1 : Val.has_type_list args (map env rl))","proofString":"apply wt_regset_assign; auto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H : wt_instr f env (Iop op args res s)) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs) : wt_regset env rs # res <- v.","conclusion":"wt_regset env rs # res <- v","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H : wt_instr f env (Iop op args res s)) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs)","proofString":"inv H.\nsimpl in H0.\ninv H0.\napply wt_regset_assign; auto.\nrewrite H4; auto.\neapply wt_regset_assign; auto.\nrewrite H8.\neapply type_of_operation_sound; eauto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (r1 : reg) (H0 : eval_operation ge sp Omove rs ## (r1 :: nil) m = Some v) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s) : wt_regset env rs # res <- v.","conclusion":"wt_regset env rs # res <- v","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (r1 : reg) (H0 : eval_operation ge sp Omove rs ## (r1 :: nil) m = Some v) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s)","proofString":"simpl in H0.\ninv H0.\napply wt_regset_assign; auto.\nrewrite H4; auto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (r1 : reg) (H0 : Some rs # r1 = Some v) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s) : wt_regset env rs # res <- v.","conclusion":"wt_regset env rs # res <- v","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (r1 : reg) (H0 : Some rs # r1 = Some v) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s)","proofString":"inv H0.\napply wt_regset_assign; auto.\nrewrite H4; auto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (r1 : reg) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s) : wt_regset env rs # res <- (rs # r1).","conclusion":"wt_regset env rs # res <- (rs # r1)","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (r1 : reg) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s)","proofString":"apply wt_regset_assign; auto.\nrewrite H4; auto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (r1 : reg) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s) : Val.has_type rs # r1 (env res).","conclusion":"Val.has_type rs # r1 (env res)","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (r1 : reg) (H1 : wt_regset env rs) (H4 : env res = env r1) (H7 : valid_successor f s)","proofString":"rewrite H4; auto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs) (H6 : op <> Omove) (H7 : map env args = fst (type_of_operation op)) (H8 : env res = snd (type_of_operation op)) (H9 : valid_successor f s) : wt_regset env rs # res <- v.","conclusion":"wt_regset env rs # res <- v","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs) (H6 : op <> Omove) (H7 : map env args = fst (type_of_operation op)) (H8 : env res = snd (type_of_operation op)) (H9 : valid_successor f s)","proofString":"eapply wt_regset_assign; auto.\nrewrite H8.\neapply type_of_operation_sound; eauto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs) (H6 : op <> Omove) (H7 : map env args = fst (type_of_operation op)) (H8 : env res = snd (type_of_operation op)) (H9 : valid_successor f s) : Val.has_type v (env res).","conclusion":"Val.has_type v (env res)","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs) (H6 : op <> Omove) (H7 : map env args = fst (type_of_operation op)) (H8 : env res = snd (type_of_operation op)) (H9 : valid_successor f s)","proofString":"rewrite H8.\neapply type_of_operation_sound; eauto."},{"statement":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs) (H6 : op <> Omove) (H7 : map env args = fst (type_of_operation op)) (H8 : env res = snd (type_of_operation op)) (H9 : valid_successor f s) : Val.has_type v (snd (type_of_operation op)).","conclusion":"Val.has_type v (snd (type_of_operation op))","hypotheses":"(ge : genv) (env : regenv) (f : function) (sp : val) (op : operation) (args : list reg) (res : reg) (s : node) (rs : Regmap.t val) (m : mem) (v : val) (H0 : eval_operation ge sp op rs ## args m = Some v) (H1 : wt_regset env rs) (H6 : op <> Omove) (H7 : map env args = fst (type_of_operation op)) (H8 : env res = snd (type_of_operation op)) (H9 : valid_successor f s)","proofString":"eapply type_of_operation_sound; eauto."},{"statement":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (a v : val) (rs : regset) (H : wt_instr f env (Iload chunk addr args dst s)) (H0 : Mem.loadv chunk m a = Some v) (H1 : wt_regset env rs) : wt_regset env rs # dst <- v.","conclusion":"wt_regset env rs # dst <- v","hypotheses":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (a v : val) (rs : regset) (H : wt_instr f env (Iload chunk addr args dst s)) (H0 : Mem.loadv chunk m a = Some v) (H1 : wt_regset env rs)","proofString":"destruct a; simpl in H0; try discriminate.\ninv H.\neapply wt_regset_assign; eauto.\nrewrite H8; eapply Mem.load_type; eauto."},{"statement":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (b : block) (i : ptrofs) (v : val) (rs : regset) (H : wt_instr f env (Iload chunk addr args dst s)) (H0 : Mem.load chunk m b (Ptrofs.unsigned i) = Some v) (H1 : wt_regset env rs) : wt_regset env rs # dst <- v.","conclusion":"wt_regset env rs # dst <- v","hypotheses":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (b : block) (i : ptrofs) (v : val) (rs : regset) (H : wt_instr f env (Iload chunk addr args dst s)) (H0 : Mem.load chunk m b (Ptrofs.unsigned i) = Some v) (H1 : wt_regset env rs)","proofString":"inv H.\neapply wt_regset_assign; eauto.\nrewrite H8; eapply Mem.load_type; eauto."},{"statement":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (b : block) (i : ptrofs) (v : val) (rs : regset) (H0 : Mem.load chunk m b (Ptrofs.unsigned i) = Some v) (H1 : wt_regset env rs) (H5 : map env args = type_of_addressing addr) (H8 : env dst = type_of_chunk chunk) (H9 : valid_successor f s) : wt_regset env rs # dst <- v.","conclusion":"wt_regset env rs # dst <- v","hypotheses":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (b : block) (i : ptrofs) (v : val) (rs : regset) (H0 : Mem.load chunk m b (Ptrofs.unsigned i) = Some v) (H1 : wt_regset env rs) (H5 : map env args = type_of_addressing addr) (H8 : env dst = type_of_chunk chunk) (H9 : valid_successor f s)","proofString":"eapply wt_regset_assign; eauto.\nrewrite H8; eapply Mem.load_type; eauto."},{"statement":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (b : block) (i : ptrofs) (v : val) (rs : regset) (H0 : Mem.load chunk m b (Ptrofs.unsigned i) = Some v) (H1 : wt_regset env rs) (H5 : map env args = type_of_addressing addr) (H8 : env dst = type_of_chunk chunk) (H9 : valid_successor f s) : Val.has_type v (env dst).","conclusion":"Val.has_type v (env dst)","hypotheses":"(env : regenv) (f : function) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (s : node) (m : mem) (b : block) (i : ptrofs) (v : val) (rs : regset) (H0 : Mem.load chunk m b (Ptrofs.unsigned i) = Some v) (H1 : wt_regset env rs) (H5 : map env args = type_of_addressing addr) (H8 : env dst = type_of_chunk chunk) (H9 : valid_successor f s)","proofString":"rewrite H8; eapply Mem.load_type; eauto."},{"statement":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H : wt_instr f env (Ibuiltin ef args res s)) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs) : wt_regset env (regmap_setres res vres rs).","conclusion":"wt_regset env (regmap_setres res vres rs)","hypotheses":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H : wt_instr f env (Ibuiltin ef args res s)) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs)","proofString":"inv H.\neapply wt_regset_setres; eauto.\nrewrite H7.\neapply external_call_well_typed; eauto."},{"statement":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs) (H5 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg env) args = proj_sig_args (ef_sig ef)\nend) (H7 : type_of_builtin_res env res = proj_sig_res (ef_sig ef)) (H8 : valid_successor f s) : wt_regset env (regmap_setres res vres rs).","conclusion":"wt_regset env (regmap_setres res vres rs)","hypotheses":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs) (H5 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg env) args = proj_sig_args (ef_sig ef)\nend) (H7 : type_of_builtin_res env res = proj_sig_res (ef_sig ef)) (H8 : valid_successor f s)","proofString":"eapply wt_regset_setres; eauto.\nrewrite H7.\neapply external_call_well_typed; eauto."},{"statement":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs) (H5 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg env) args = proj_sig_args (ef_sig ef)\nend) (H7 : type_of_builtin_res env res = proj_sig_res (ef_sig ef)) (H8 : valid_successor f s) : Val.has_type vres (type_of_builtin_res env res).","conclusion":"Val.has_type vres (type_of_builtin_res env res)","hypotheses":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs) (H5 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg env) args = proj_sig_args (ef_sig ef)\nend) (H7 : type_of_builtin_res env res = proj_sig_res (ef_sig ef)) (H8 : valid_successor f s)","proofString":"rewrite H7.\neapply external_call_well_typed; eauto."},{"statement":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs) (H5 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg env) args = proj_sig_args (ef_sig ef)\nend) (H7 : type_of_builtin_res env res = proj_sig_res (ef_sig ef)) (H8 : valid_successor f s) : Val.has_type vres (proj_sig_res (ef_sig ef)).","conclusion":"Val.has_type vres (proj_sig_res (ef_sig ef))","hypotheses":"(env : regenv) (f : function) (ef : external_function) (ge : genv) (args : list (builtin_arg reg)) (res : builtin_res reg) (s : node) (vargs : list val) (m : mem) (t : trace) (vres : val) (m' : mem) (rs : regset) (H0 : external_call ef ge vargs m t vres m') (H1 : wt_regset env rs) (H5 : match ef with\n| EF_annot _ _ _ | EF_debug _ _ _ => True\n| _ => map (type_of_builtin_arg env) args = proj_sig_args (ef_sig ef)\nend) (H7 : type_of_builtin_res env res = proj_sig_res (ef_sig ef)) (H8 : valid_successor f s)","proofString":"eapply external_call_well_typed; eauto."},{"statement":"(f : function) (env : regenv) (pc : positive) (i : instruction) (H : wt_function f env) (H0 : (fn_code f) ! pc = Some i) : wt_instr f env i.","conclusion":"wt_instr f env i","hypotheses":"(f : function) (env : regenv) (pc : positive) (i : instruction) (H : wt_function f env) (H0 : (fn_code f) ! pc = Some i)","proofString":"inv H.\neauto."},{"statement":"(f : function) (env : regenv) (pc : positive) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : wt_instr f env i.","conclusion":"wt_instr f env i","hypotheses":"(f : function) (env : regenv) (pc : positive) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"eauto."},{"statement":"(s : list stackframe) (sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (H0 : wt_stackframes s sg1) : wt_stackframes s sg2.","conclusion":"wt_stackframes s sg2","hypotheses":"(s : list stackframe) (sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (H0 : wt_stackframes s sg1)","proofString":"inv H0.\nconstructor; congruence.\neconstructor; eauto.\nrewrite H3.\nunfold proj_sig_res.\nrewrite H.\nauto."},{"statement":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (H1 : sig_res sg1 = Xint) : wt_stackframes nil sg2.","conclusion":"wt_stackframes nil sg2","hypotheses":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (H1 : sig_res sg1 = Xint)","proofString":"constructor; congruence."},{"statement":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f)) : wt_stackframes (Stackframe res f sp pc rs :: s0) sg2.","conclusion":"wt_stackframes (Stackframe res f sp pc rs :: s0) sg2","hypotheses":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f))","proofString":"econstructor; eauto.\nrewrite H3.\nunfold proj_sig_res.\nrewrite H.\nauto."},{"statement":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f)) : env res = proj_sig_res sg2.","conclusion":"env res = proj_sig_res sg2","hypotheses":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f))","proofString":"rewrite H3.\nunfold proj_sig_res.\nrewrite H.\nauto."},{"statement":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f)) : proj_sig_res sg1 = proj_sig_res sg2.","conclusion":"proj_sig_res sg1 = proj_sig_res sg2","hypotheses":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f))","proofString":"unfold proj_sig_res.\nrewrite H.\nauto."},{"statement":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f)) : proj_xtype (sig_res sg1) = proj_xtype (sig_res sg2).","conclusion":"proj_xtype (sig_res sg1) = proj_xtype (sig_res sg2)","hypotheses":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f))","proofString":"rewrite H.\nauto."},{"statement":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f)) : proj_xtype (sig_res sg2) = proj_xtype (sig_res sg2).","conclusion":"proj_xtype (sig_res sg2) = proj_xtype (sig_res sg2)","hypotheses":"(sg1 sg2 : signature) (H : sig_res sg1 = sig_res sg2) (s0 : list stackframe) (res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (env : regenv) (H1 : wt_function f env) (H2 : wt_regset env rs) (H3 : env res = proj_sig_res sg1) (H4 : wt_stackframes s0 (fn_sig f))","proofString":"auto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (pc' : node) (H : (fn_code f) ! pc = Some (Inop pc')) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Inop pc')) : wt_state (State s f sp pc' rs m).","conclusion":"wt_state (State s f sp pc' rs m)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (pc' : node) (H : (fn_code f) ! pc = Some (Inop pc')) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Inop pc'))","proofString":"econstructor; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (op : operation) (args : list reg) (res : reg) (pc' : node) (v : val) (H : (fn_code f) ! pc = Some (Iop op args res pc')) (H0 : eval_operation ge sp op rs ## args m = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iop op args res pc')) : wt_state (State s f sp pc' rs # res <- v m).","conclusion":"wt_state (State s f sp pc' rs # res <- v m)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (op : operation) (args : list reg) (res : reg) (pc' : node) (v : val) (H : (fn_code f) ! pc = Some (Iop op args res pc')) (H0 : eval_operation ge sp op rs ## args m = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iop op args res pc'))","proofString":"econstructor; eauto.\neapply wt_exec_Iop; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (op : operation) (args : list reg) (res : reg) (pc' : node) (v : val) (H : (fn_code f) ! pc = Some (Iop op args res pc')) (H0 : eval_operation ge sp op rs ## args m = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iop op args res pc')) : wt_regset env rs # res <- v.","conclusion":"wt_regset env rs # res <- v","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (op : operation) (args : list reg) (res : reg) (pc' : node) (v : val) (H : (fn_code f) ! pc = Some (Iop op args res pc')) (H0 : eval_operation ge sp op rs ## args m = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iop op args res pc'))","proofString":"eapply wt_exec_Iop; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (pc' : node) (a v : val) (H : (fn_code f) ! pc = Some (Iload chunk addr args dst pc')) (H0 : eval_addressing ge sp addr rs ## args = Some a) (H1 : Mem.loadv chunk m a = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iload chunk addr args dst pc')) : wt_state (State s f sp pc' rs # dst <- v m).","conclusion":"wt_state (State s f sp pc' rs # dst <- v m)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (pc' : node) (a v : val) (H : (fn_code f) ! pc = Some (Iload chunk addr args dst pc')) (H0 : eval_addressing ge sp addr rs ## args = Some a) (H1 : Mem.loadv chunk m a = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iload chunk addr args dst pc'))","proofString":"econstructor; eauto.\neapply wt_exec_Iload; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (pc' : node) (a v : val) (H : (fn_code f) ! pc = Some (Iload chunk addr args dst pc')) (H0 : eval_addressing ge sp addr rs ## args = Some a) (H1 : Mem.loadv chunk m a = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iload chunk addr args dst pc')) : wt_regset env rs # dst <- v.","conclusion":"wt_regset env rs # dst <- v","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (chunk : memory_chunk) (addr : addressing) (args : list reg) (dst : reg) (pc' : node) (a v : val) (H : (fn_code f) ! pc = Some (Iload chunk addr args dst pc')) (H0 : eval_addressing ge sp addr rs ## args = Some a) (H1 : Mem.loadv chunk m a = Some v) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Iload chunk addr args dst pc'))","proofString":"eapply wt_exec_Iload; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (pc' : node) (a : val) (m' : mem) (H : (fn_code f) ! pc = Some (Istore chunk addr args src pc')) (H0 : eval_addressing ge sp addr rs ## args = Some a) (H1 : Mem.storev chunk m a rs # src = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Istore chunk addr args src pc')) : wt_state (State s f sp pc' rs m').","conclusion":"wt_state (State s f sp pc' rs m')","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (chunk : memory_chunk) (addr : addressing) (args : list reg) (src : reg) (pc' : node) (a : val) (m' : mem) (H : (fn_code f) ! pc = Some (Istore chunk addr args src pc')) (H0 : eval_addressing ge sp addr rs ## args = Some a) (H1 : Mem.storev chunk m a rs # src = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Istore chunk addr args src pc'))","proofString":"econstructor; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) : wt_state (Callstate (Stackframe res f sp pc' rs :: s) fd rs ## args m).","conclusion":"wt_state (Callstate (Stackframe res f sp pc' rs :: s) fd rs ## args m)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc'))","proofString":"assert (wt_fundef fd).\ndestruct ros; simpl in H0.\npattern fd.\napply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0.\ncaseEq (Genv.find_symbol ge i); intros; rewrite H1 in H0.\npattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0.\ndiscriminate.\neconstructor; eauto.\neconstructor; eauto.\ninv WTI; auto.\ninv WTI.\nrewrite <- H8.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc'))","proofString":"destruct ros; simpl in H0.\npattern fd.\napply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0.\ncaseEq (Genv.find_symbol ge i); intros; rewrite H1 in H0.\npattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0.\ndiscriminate."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc')) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc'))","proofString":"pattern fd.\napply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc')) : (fun f0 : fundef => wt_fundef f0) fd.","conclusion":"(fun f0 : fundef => wt_fundef f0) fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc'))","proofString":"apply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc')) : forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0.","conclusion":"forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc'))","proofString":"exact wt_p."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc')) : Genv.find_funct (Genv.globalenv p) rs # r = Some fd.","conclusion":"Genv.find_funct (Genv.globalenv p) rs # r = Some fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inl r) args res pc')) (H0 : Genv.find_funct ge rs # r = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inl r) args res pc'))","proofString":"exact H0."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (H0 : match Genv.find_symbol ge i with\n| Some b => Genv.find_funct_ptr ge b\n| None => None\nend = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (H0 : match Genv.find_symbol ge i with\n| Some b => Genv.find_funct_ptr ge b\n| None => None\nend = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc'))","proofString":"caseEq (Genv.find_symbol ge i); intros; rewrite H1 in H0.\npattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0.\ndiscriminate."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b)","proofString":"pattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b) : (fun f0 : fundef => wt_fundef f0) fd.","conclusion":"(fun f0 : fundef => wt_fundef f0) fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b)","proofString":"apply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b) : forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0.","conclusion":"forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b)","proofString":"exact wt_p."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b) : Genv.find_funct_ptr (Genv.globalenv p) b = Some fd.","conclusion":"Genv.find_funct_ptr (Genv.globalenv p) b = Some fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = Some b)","proofString":"exact H0."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (H0 : None = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = None) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) (inr i) args res pc')) (H0 : None = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) (inr i) args res pc')) (H1 : Genv.find_symbol ge i = None)","proofString":"discriminate."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd) : wt_state (Callstate (Stackframe res f sp pc' rs :: s) fd rs ## args m).","conclusion":"wt_state (Callstate (Stackframe res f sp pc' rs :: s) fd rs ## args m)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd)","proofString":"econstructor; eauto.\neconstructor; eauto.\ninv WTI; auto.\ninv WTI.\nrewrite <- H8.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd) : wt_stackframes (Stackframe res f sp pc' rs :: s) (funsig fd).","conclusion":"wt_stackframes (Stackframe res f sp pc' rs :: s) (funsig fd)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd)","proofString":"econstructor; eauto.\ninv WTI; auto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd) : env res = proj_sig_res (funsig fd).","conclusion":"env res = proj_sig_res (funsig fd)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd)","proofString":"inv WTI; auto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd) : Val.has_type_list rs ## args (proj_sig_args (funsig fd)).","conclusion":"Val.has_type_list rs ## args (proj_sig_args (funsig fd))","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icall (funsig fd) ros args res pc')) (H1 : wt_fundef fd)","proofString":"inv WTI.\nrewrite <- H8.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H8 : map env args = proj_sig_args (funsig fd)) (H9 : env res = proj_sig_res (funsig fd)) (H10 : valid_successor f pc') : Val.has_type_list rs ## args (proj_sig_args (funsig fd)).","conclusion":"Val.has_type_list rs ## args (proj_sig_args (funsig fd))","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H8 : map env args = proj_sig_args (funsig fd)) (H9 : env res = proj_sig_res (funsig fd)) (H10 : valid_successor f pc')","proofString":"rewrite <- H8.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H8 : map env args = proj_sig_args (funsig fd)) (H9 : env res = proj_sig_res (funsig fd)) (H10 : valid_successor f pc') : Val.has_type_list rs ## args (map env args).","conclusion":"Val.has_type_list rs ## args (map env args)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H8 : map env args = proj_sig_args (funsig fd)) (H9 : env res = proj_sig_res (funsig fd)) (H10 : valid_successor f pc')","proofString":"apply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H8 : map env args = proj_sig_args (funsig fd)) (H9 : env res = proj_sig_res (funsig fd)) (H10 : valid_successor f pc') : wt_regset env rs.","conclusion":"wt_regset env rs","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (res : reg) (pc' : node) (fd : fundef) (H : (fn_code f) ! pc = Some (Icall (funsig fd) ros args res pc')) (H0 : find_function ge ros rs = Some fd) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H8 : map env args = proj_sig_args (funsig fd)) (H9 : env res = proj_sig_res (funsig fd)) (H10 : valid_successor f pc')","proofString":"auto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) : wt_state (Callstate s fd rs ## args m').","conclusion":"wt_state (Callstate s fd rs ## args m')","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args))","proofString":"assert (wt_fundef fd).\ndestruct ros; simpl in H0.\npattern fd.\napply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0.\ncaseEq (Genv.find_symbol ge i); intros; rewrite H1 in H0.\npattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0.\ndiscriminate.\neconstructor; eauto.\ninv WTI.\napply wt_stackframes_change_sig with (fn_sig f); auto.\ninv WTI.\nrewrite <- H7.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args))","proofString":"destruct ros; simpl in H0.\npattern fd.\napply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0.\ncaseEq (Genv.find_symbol ge i); intros; rewrite H1 in H0.\npattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0.\ndiscriminate."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args)) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args))","proofString":"pattern fd.\napply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args)) : (fun f0 : fundef => wt_fundef f0) fd.","conclusion":"(fun f0 : fundef => wt_fundef f0) fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args))","proofString":"apply Genv.find_funct_prop with fundef unit p (rs#r).\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args)) : forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0.","conclusion":"forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args))","proofString":"exact wt_p."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args)) : Genv.find_funct (Genv.globalenv p) rs # r = Some fd.","conclusion":"Genv.find_funct (Genv.globalenv p) rs # r = Some fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (r : reg) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inl r) args)) (H0 : Genv.find_funct ge rs # r = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inl r) args))","proofString":"exact H0."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (H0 : match Genv.find_symbol ge i with\n| Some b => Genv.find_funct_ptr ge b\n| None => None\nend = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (H0 : match Genv.find_symbol ge i with\n| Some b => Genv.find_funct_ptr ge b\n| None => None\nend = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args))","proofString":"caseEq (Genv.find_symbol ge i); intros; rewrite H1 in H0.\npattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0.\ndiscriminate."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b)","proofString":"pattern fd.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b) : (fun f0 : fundef => wt_fundef f0) fd.","conclusion":"(fun f0 : fundef => wt_fundef f0) fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b)","proofString":"apply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H0."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b) : forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0.","conclusion":"forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b)","proofString":"exact wt_p."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b) : Genv.find_funct_ptr (Genv.globalenv p) b = Some fd.","conclusion":"Genv.find_funct_ptr (Genv.globalenv p) b = Some fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (b : block) (H0 : Genv.find_funct_ptr ge b = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = Some b)","proofString":"exact H0."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (H0 : None = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = None) : wt_fundef fd.","conclusion":"wt_fundef fd","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (i : ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) (inr i) args)) (H0 : None = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) (inr i) args)) (H1 : Genv.find_symbol ge i = None)","proofString":"discriminate."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) (H1 : wt_fundef fd) : wt_state (Callstate s fd rs ## args m').","conclusion":"wt_state (Callstate s fd rs ## args m')","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) (H1 : wt_fundef fd)","proofString":"econstructor; eauto.\ninv WTI.\napply wt_stackframes_change_sig with (fn_sig f); auto.\ninv WTI.\nrewrite <- H7.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) (H1 : wt_fundef fd) : wt_stackframes s (funsig fd).","conclusion":"wt_stackframes s (funsig fd)","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) (H1 : wt_fundef fd)","proofString":"inv WTI.\napply wt_stackframes_change_sig with (fn_sig f); auto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd)) : wt_stackframes s (funsig fd).","conclusion":"wt_stackframes s (funsig fd)","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd))","proofString":"apply wt_stackframes_change_sig with (fn_sig f); auto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) (H1 : wt_fundef fd) : Val.has_type_list rs ## args (proj_sig_args (funsig fd)).","conclusion":"Val.has_type_list rs ## args (proj_sig_args (funsig fd))","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Itailcall (funsig fd) ros args)) (H1 : wt_fundef fd)","proofString":"inv WTI.\nrewrite <- H7.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd)) : Val.has_type_list rs ## args (proj_sig_args (funsig fd)).","conclusion":"Val.has_type_list rs ## args (proj_sig_args (funsig fd))","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd))","proofString":"rewrite <- H7.\napply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd)) : Val.has_type_list rs ## args (map env args).","conclusion":"Val.has_type_list rs ## args (map env args)","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd))","proofString":"apply wt_regset_list.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd)) : wt_regset env rs.","conclusion":"wt_regset env rs","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (ros : reg + ident) (args : list reg) (fd : fundef) (m' : mem) (H : (fn_code f) ! pc = Some (Itailcall (funsig fd) ros args)) (H0 : find_function ge ros rs = Some fd) (H2 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H1 : wt_fundef fd) (H6 : match ros with\n| inl r => env r = Tptr\n| inr _ => True\nend) (H7 : map env args = proj_sig_args (funsig fd)) (H8 : sig_res (funsig fd) = sig_res (fn_sig f)) (H9 : tailcall_possible (funsig fd))","proofString":"auto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (pc' : node) (vargs : list val) (t : trace) (vres : val) (m' : mem) (H : (fn_code f) ! pc = Some (Ibuiltin ef args res pc')) (H0 : eval_builtin_args ge (fun r : positive => rs # r) sp m args vargs) (H1 : external_call ef ge vargs m t vres m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ibuiltin ef args res pc')) : wt_state (State s f sp pc' (regmap_setres res vres rs) m').","conclusion":"wt_state (State s f sp pc' (regmap_setres res vres rs) m')","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (pc' : node) (vargs : list val) (t : trace) (vres : val) (m' : mem) (H : (fn_code f) ! pc = Some (Ibuiltin ef args res pc')) (H0 : eval_builtin_args ge (fun r : positive => rs # r) sp m args vargs) (H1 : external_call ef ge vargs m t vres m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ibuiltin ef args res pc'))","proofString":"econstructor; eauto.\neapply wt_exec_Ibuiltin; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (pc' : node) (vargs : list val) (t : trace) (vres : val) (m' : mem) (H : (fn_code f) ! pc = Some (Ibuiltin ef args res pc')) (H0 : eval_builtin_args ge (fun r : positive => rs # r) sp m args vargs) (H1 : external_call ef ge vargs m t vres m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ibuiltin ef args res pc')) : wt_regset env (regmap_setres res vres rs).","conclusion":"wt_regset env (regmap_setres res vres rs)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (ef : external_function) (args : list (builtin_arg reg)) (res : builtin_res reg) (pc' : node) (vargs : list val) (t : trace) (vres : val) (m' : mem) (H : (fn_code f) ! pc = Some (Ibuiltin ef args res pc')) (H0 : eval_builtin_args ge (fun r : positive => rs # r) sp m args vargs) (H1 : external_call ef ge vargs m t vres m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ibuiltin ef args res pc'))","proofString":"eapply wt_exec_Ibuiltin; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (cond : condition) (args : list reg) (ifso ifnot : node) (b : bool) (H : (fn_code f) ! pc = Some (Icond cond args ifso ifnot)) (H0 : eval_condition cond rs ## args m = Some b) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icond cond args ifso ifnot)) : wt_state (State s f sp (if b then ifso else ifnot) rs m).","conclusion":"wt_state (State s f sp (if b then ifso else ifnot) rs m)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (cond : condition) (args : list reg) (ifso ifnot : node) (b : bool) (H : (fn_code f) ! pc = Some (Icond cond args ifso ifnot)) (H0 : eval_condition cond rs ## args m = Some b) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Icond cond args ifso ifnot))","proofString":"econstructor; eauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (arg : reg) (tbl : list node) (n : int) (pc' : node) (H : (fn_code f) ! pc = Some (Ijumptable arg tbl)) (H0 : rs # arg = Vint n) (H1 : list_nth_z tbl (Int.unsigned n) = Some pc') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ijumptable arg tbl)) : wt_state (State s f sp pc' rs m).","conclusion":"wt_state (State s f sp pc' rs m)","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : positive) (rs : Regmap.t val) (m : mem) (arg : reg) (tbl : list node) (n : int) (pc' : node) (H : (fn_code f) ! pc = Some (Ijumptable arg tbl)) (H0 : rs # arg = Vint n) (H1 : list_nth_z tbl (Int.unsigned n) = Some pc') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ijumptable arg tbl))","proofString":"econstructor; eauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (or : option reg) (m' : mem) (H : (fn_code f) ! pc = Some (Ireturn or)) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ireturn or)) : wt_state (Returnstate s (regmap_optget or Vundef rs) m').","conclusion":"wt_state (Returnstate s (regmap_optget or Vundef rs) m')","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (or : option reg) (m' : mem) (H : (fn_code f) ! pc = Some (Ireturn or)) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ireturn or))","proofString":"econstructor; eauto.\ninv WTI; simpl.\nauto.\nrewrite <- H3.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (or : option reg) (m' : mem) (H : (fn_code f) ! pc = Some (Ireturn or)) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ireturn or)) : Val.has_type (regmap_optget or Vundef rs) (proj_sig_res (fn_sig f)).","conclusion":"Val.has_type (regmap_optget or Vundef rs) (proj_sig_res (fn_sig f))","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m : mem) (or : option reg) (m' : mem) (H : (fn_code f) ! pc = Some (Ireturn or)) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (WTI : wt_instr f env (Ireturn or))","proofString":"inv WTI; simpl.\nauto.\nrewrite <- H3.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m m' : mem) (H : (fn_code f) ! pc = Some (Ireturn None)) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H2 : sig_res (fn_sig f) = Xvoid) : True.","conclusion":"True","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m m' : mem) (H : (fn_code f) ! pc = Some (Ireturn None)) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H2 : sig_res (fn_sig f) = Xvoid)","proofString":"auto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m m' : mem) (arg : reg) (H : (fn_code f) ! pc = Some (Ireturn (Some arg))) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H2 : sig_res (fn_sig f) <> Xvoid) (H3 : env arg = proj_sig_res (fn_sig f)) : Val.has_type rs # arg (proj_sig_res (fn_sig f)).","conclusion":"Val.has_type rs # arg (proj_sig_res (fn_sig f))","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m m' : mem) (arg : reg) (H : (fn_code f) ! pc = Some (Ireturn (Some arg))) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H2 : sig_res (fn_sig f) <> Xvoid) (H3 : env arg = proj_sig_res (fn_sig f))","proofString":"rewrite <- H3.\nauto."},{"statement":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m m' : mem) (arg : reg) (H : (fn_code f) ! pc = Some (Ireturn (Some arg))) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H2 : sig_res (fn_sig f) <> Xvoid) (H3 : env arg = proj_sig_res (fn_sig f)) : Val.has_type rs # arg (env arg).","conclusion":"Val.has_type rs # arg (env arg)","hypotheses":"(s : list stackframe) (f : function) (stk : block) (pc : positive) (rs : regset) (m m' : mem) (arg : reg) (H : (fn_code f) ! pc = Some (Ireturn (Some arg))) (H0 : Mem.free m stk 0 (fn_stacksize f) = Some m') (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) (H2 : sig_res (fn_sig f) <> Xvoid) (H3 : env arg = proj_sig_res (fn_sig f))","proofString":"auto."},{"statement":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (funsig (Internal f))) (H6 : wt_fundef (Internal f)) (H7 : Val.has_type_list args (proj_sig_args (funsig (Internal f)))) : wt_state\n  (State s f (Vptr stk Ptrofs.zero) (fn_entrypoint f)\n     (init_regs args (fn_params f)) m').","conclusion":"wt_state\n  (State s f (Vptr stk Ptrofs.zero) (fn_entrypoint f)\n     (init_regs args (fn_params f)) m')","hypotheses":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (funsig (Internal f))) (H6 : wt_fundef (Internal f)) (H7 : Val.has_type_list args (proj_sig_args (funsig (Internal f))))","proofString":"simpl in *.\ninv H6.\neconstructor; eauto.\ninv H2.\napply wt_init_regs; auto.\nrewrite wt_params0.\nauto."},{"statement":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H6 : wt_fundef (Internal f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) : wt_state\n  (State s f (Vptr stk Ptrofs.zero) (fn_entrypoint f)\n     (init_regs args (fn_params f)) m').","conclusion":"wt_state\n  (State s f (Vptr stk Ptrofs.zero) (fn_entrypoint f)\n     (init_regs args (fn_params f)) m')","hypotheses":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H6 : wt_fundef (Internal f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f)))","proofString":"inv H6.\neconstructor; eauto.\ninv H2.\napply wt_init_regs; auto.\nrewrite wt_params0.\nauto."},{"statement":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (H2 : wt_function f env) : wt_state\n  (State s f (Vptr stk Ptrofs.zero) (fn_entrypoint f)\n     (init_regs args (fn_params f)) m').","conclusion":"wt_state\n  (State s f (Vptr stk Ptrofs.zero) (fn_entrypoint f)\n     (init_regs args (fn_params f)) m')","hypotheses":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (H2 : wt_function f env)","proofString":"econstructor; eauto.\ninv H2.\napply wt_init_regs; auto.\nrewrite wt_params0.\nauto."},{"statement":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (H2 : wt_function f env) : wt_regset env (init_regs args (fn_params f)).","conclusion":"wt_regset env (init_regs args (fn_params f))","hypotheses":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (H2 : wt_function f env)","proofString":"inv H2.\napply wt_init_regs; auto.\nrewrite wt_params0.\nauto."},{"statement":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : wt_regset env (init_regs args (fn_params f)).","conclusion":"wt_regset env (init_regs args (fn_params f))","hypotheses":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"apply wt_init_regs; auto.\nrewrite wt_params0.\nauto."},{"statement":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : Val.has_type_list args (map env (fn_params f)).","conclusion":"Val.has_type_list args (map env (fn_params f))","hypotheses":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"rewrite wt_params0.\nauto."},{"statement":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : Val.has_type_list args (proj_sig_args (fn_sig f)).","conclusion":"Val.has_type_list args (proj_sig_args (fn_sig f))","hypotheses":"(s : list stackframe) (f : function) (args : list val) (m : mem) (m' : Mem.mem') (stk : block) (H : Val.has_argtype_list args (sig_args (fn_sig f))) (H0 : Mem.alloc m 0 (fn_stacksize f) = (m', stk)) (H4 : wt_stackframes s (fn_sig f)) (H7 : Val.has_type_list args (proj_sig_args (fn_sig f))) (env : regenv) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc : positive) (instr : instruction),\n(fn_code f) ! pc = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"auto."},{"statement":"(s : list stackframe) (ef : external_function) (args : list val) (res : val) (t : trace) (m m' : mem) (H : external_call ef ge args m t res m') (H3 : wt_stackframes s (funsig (External ef))) (H5 : wt_fundef (External ef)) (H6 : Val.has_type_list args (proj_sig_args (funsig (External ef)))) : wt_state (Returnstate s res m').","conclusion":"wt_state (Returnstate s res m')","hypotheses":"(s : list stackframe) (ef : external_function) (args : list val) (res : val) (t : trace) (m m' : mem) (H : external_call ef ge args m t res m') (H3 : wt_stackframes s (funsig (External ef))) (H5 : wt_fundef (External ef)) (H6 : Val.has_type_list args (proj_sig_args (funsig (External ef))))","proofString":"econstructor; eauto.\neapply external_call_well_typed; eauto."},{"statement":"(s : list stackframe) (ef : external_function) (args : list val) (res : val) (t : trace) (m m' : mem) (H : external_call ef ge args m t res m') (H3 : wt_stackframes s (funsig (External ef))) (H5 : wt_fundef (External ef)) (H6 : Val.has_type_list args (proj_sig_args (funsig (External ef)))) : Val.has_type res (proj_sig_res (funsig (External ef))).","conclusion":"Val.has_type res (proj_sig_res (funsig (External ef)))","hypotheses":"(s : list stackframe) (ef : external_function) (args : list val) (res : val) (t : trace) (m m' : mem) (H : external_call ef ge args m t res m') (H3 : wt_stackframes s (funsig (External ef))) (H5 : wt_fundef (External ef)) (H6 : Val.has_type_list args (proj_sig_args (funsig (External ef))))","proofString":"eapply external_call_well_typed; eauto."},{"statement":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H1 : wt_stackframes (Stackframe res f sp pc rs :: s) sg) (H3 : Val.has_type vres (proj_sig_res sg)) : wt_state (State s f sp pc rs # res <- vres m).","conclusion":"wt_state (State s f sp pc rs # res <- vres m)","hypotheses":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H1 : wt_stackframes (Stackframe res f sp pc rs :: s) sg) (H3 : Val.has_type vres (proj_sig_res sg))","proofString":"inv H1.\neconstructor; eauto.\napply wt_regset_assign; auto.\nrewrite H10; auto."},{"statement":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H3 : Val.has_type vres (proj_sig_res sg)) (env : regenv) (H8 : wt_function f env) (H9 : wt_regset env rs) (H10 : env res = proj_sig_res sg) (H11 : wt_stackframes s (fn_sig f)) : wt_state (State s f sp pc rs # res <- vres m).","conclusion":"wt_state (State s f sp pc rs # res <- vres m)","hypotheses":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H3 : Val.has_type vres (proj_sig_res sg)) (env : regenv) (H8 : wt_function f env) (H9 : wt_regset env rs) (H10 : env res = proj_sig_res sg) (H11 : wt_stackframes s (fn_sig f))","proofString":"econstructor; eauto.\napply wt_regset_assign; auto.\nrewrite H10; auto."},{"statement":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H3 : Val.has_type vres (proj_sig_res sg)) (env : regenv) (H8 : wt_function f env) (H9 : wt_regset env rs) (H10 : env res = proj_sig_res sg) (H11 : wt_stackframes s (fn_sig f)) : wt_regset env rs # res <- vres.","conclusion":"wt_regset env rs # res <- vres","hypotheses":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H3 : Val.has_type vres (proj_sig_res sg)) (env : regenv) (H8 : wt_function f env) (H9 : wt_regset env rs) (H10 : env res = proj_sig_res sg) (H11 : wt_stackframes s (fn_sig f))","proofString":"apply wt_regset_assign; auto.\nrewrite H10; auto."},{"statement":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H3 : Val.has_type vres (proj_sig_res sg)) (env : regenv) (H8 : wt_function f env) (H9 : wt_regset env rs) (H10 : env res = proj_sig_res sg) (H11 : wt_stackframes s (fn_sig f)) : Val.has_type vres (env res).","conclusion":"Val.has_type vres (env res)","hypotheses":"(res : reg) (f : function) (sp : val) (pc : node) (rs : regset) (s : list stackframe) (vres : val) (m : mem) (sg : signature) (H3 : Val.has_type vres (proj_sig_res sg)) (env : regenv) (H8 : wt_function f env) (H9 : wt_regset env rs) (H10 : env res = proj_sig_res sg) (H11 : wt_stackframes s (fn_sig f))","proofString":"rewrite H10; auto."},{"statement":"(S : state) (H : initial_state p S) : wt_state S.","conclusion":"wt_state S","hypotheses":"(S : state) (H : initial_state p S)","proofString":"inv H.\nconstructor.\nconstructor.\nrewrite H3; auto.\npattern f.\napply Genv.find_funct_ptr_prop with fundef unit p b.\nexact wt_p.\nexact H2.\nrewrite H3.\nconstructor."},{"statement":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main) : wt_stackframes nil (funsig f).","conclusion":"wt_stackframes nil (funsig f)","hypotheses":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main)","proofString":"constructor.\nrewrite H3; auto."},{"statement":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main) : sig_res (funsig f) = Xint.","conclusion":"sig_res (funsig f) = Xint","hypotheses":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main)","proofString":"rewrite H3; auto."},{"statement":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main) : forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0.","conclusion":"forall (id : ident) (f0 : fundef),\nIn (id, Gfun f0) (prog_defs p) -> wt_fundef f0","hypotheses":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main)","proofString":"exact wt_p."},{"statement":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main) : Val.has_type_list nil (proj_sig_args (funsig f)).","conclusion":"Val.has_type_list nil (proj_sig_args (funsig f))","hypotheses":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main)","proofString":"rewrite H3.\nconstructor."},{"statement":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main) : Val.has_type_list nil (proj_sig_args signature_main).","conclusion":"Val.has_type_list nil (proj_sig_args signature_main)","hypotheses":"(b : block) (f : fundef) (m0 : mem) (ge0 : Genv.t fundef unit) (H0 : Genv.init_mem p = Some m0) (H1 : Genv.find_symbol ge0 (prog_main p) = Some b) (H2 : Genv.find_funct_ptr ge0 b = Some f) (H3 : funsig f = signature_main)","proofString":"constructor."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H : wt_state (State s f sp pc rs m)) (H0 : (fn_code f) ! pc = Some i) : exists env : regenv, wt_instr f env i /\\ wt_regset env rs.","conclusion":"exists env : regenv, wt_instr f env i /\\ wt_regset env rs","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H : wt_state (State s f sp pc rs m)) (H0 : (fn_code f) ! pc = Some i)","proofString":"inv H.\nexists env; split; auto.\ninv WT_FN.\neauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) : exists env0 : regenv, wt_instr f env0 i /\\ wt_regset env0 rs.","conclusion":"exists env0 : regenv, wt_instr f env0 i /\\ wt_regset env0 rs","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs)","proofString":"exists env; split; auto.\ninv WT_FN.\neauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs) : wt_instr f env i.","conclusion":"wt_instr f env i","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_FN : wt_function f env) (WT_RS : wt_regset env rs)","proofString":"inv WT_FN.\neauto."},{"statement":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_RS : wt_regset env rs) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f)) : wt_instr f env i.","conclusion":"wt_instr f env i","hypotheses":"(s : list stackframe) (f : function) (sp : val) (pc : node) (rs : regset) (m : mem) (i : instruction) (H0 : (fn_code f) ! pc = Some i) (env : regenv) (WT_STK : wt_stackframes s (fn_sig f)) (WT_RS : wt_regset env rs) (wt_params0 : map env (fn_params f) = proj_sig_args (fn_sig f)) (wt_norepet0 : list_norepet (fn_params f)) (wt_instrs0 : forall (pc0 : positive) (instr : instruction),\n(fn_code f) ! pc0 = Some instr -> wt_instr f env instr) (wt_entrypoint0 : valid_successor f (fn_entrypoint f))","proofString":"eauto."}]}