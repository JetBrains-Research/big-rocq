{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Core/Zaux.v","fileSamples":[{"statement":"(x y : Z) (Hxy : (- y <= - x)%Z) : (x <= y)%Z.","conclusion":"(x <= y)%Z","hypotheses":"(x y : Z) (Hxy : (- y <= - x)%Z)","proofString":"apply Zplus_le_reg_r with (-x - y)%Z.\nnow ring_simplify."},{"statement":"(x y : Z) (Hxy : (- y <= - x)%Z) : (x + (- x - y) <= y + (- x - y))%Z.","conclusion":"(x + (- x - y) <= y + (- x - y))%Z","hypotheses":"(x y : Z) (Hxy : (- y <= - x)%Z)","proofString":"now ring_simplify."},{"statement":"(x y : Z) (H : (y < x)%Z) (Hn : x = y) : False.","conclusion":"False","hypotheses":"(x y : Z) (H : (y < x)%Z) (Hn : x = y)","proofString":"apply Z.lt_irrefl with x.\nnow rewrite Hn at 1."},{"statement":"(x y : Z) (H : (y < x)%Z) (Hn : x = y) : (x < x)%Z.","conclusion":"(x < x)%Z","hypotheses":"(x y : Z) (H : (y < x)%Z) (Hn : x = y)","proofString":"now rewrite Hn at 1."},{"statement":"forall h : true = true, eq_refl = h.","conclusion":"forall h : true = true, eq_refl = h","hypotheses":"","proofString":"apply (eq_dep_elim bool true (eqbool_dep _ _) (refl_equal _))."},{"statement":"(H : forall h : true = true, eq_refl = h) : forall (b : bool) (h1 h2 : b = true), h1 = h2.","conclusion":"forall (b : bool) (h1 h2 : b = true), h1 = h2","hypotheses":"(H : forall h : true = true, eq_refl = h)","proofString":"intros b.\ncase b.\nintros h1 h2.\nnow rewrite <- (H h1).\nintros h.\ndiscriminate h."},{"statement":"(H : forall h : true = true, eq_refl = h) (b : bool) : forall h1 h2 : b = true, h1 = h2.","conclusion":"forall h1 h2 : b = true, h1 = h2","hypotheses":"(H : forall h : true = true, eq_refl = h) (b : bool)","proofString":"case b.\nintros h1 h2.\nnow rewrite <- (H h1).\nintros h.\ndiscriminate h."},{"statement":"(H : forall h : true = true, eq_refl = h) (b : bool) : forall h1 h2 : true = true, h1 = h2.","conclusion":"forall h1 h2 : true = true, h1 = h2","hypotheses":"(H : forall h : true = true, eq_refl = h) (b : bool)","proofString":"intros h1 h2.\nnow rewrite <- (H h1)."},{"statement":"(H : forall h : true = true, eq_refl = h) (b : bool) (h1 h2 : true = true) : h1 = h2.","conclusion":"h1 = h2","hypotheses":"(H : forall h : true = true, eq_refl = h) (b : bool) (h1 h2 : true = true)","proofString":"now rewrite <- (H h1)."},{"statement":"(H : forall h : true = true, eq_refl = h) (b : bool) : forall h1 h2 : false = true, h1 = h2.","conclusion":"forall h1 h2 : false = true, h1 = h2","hypotheses":"(H : forall h : true = true, eq_refl = h) (b : bool)","proofString":"intros h.\ndiscriminate h."},{"statement":"(H : forall h0 : true = true, eq_refl = h0) (b : bool) (h : false = true) : forall h2 : false = true, h = h2.","conclusion":"forall h2 : false = true, h = h2","hypotheses":"(H : forall h0 : true = true, eq_refl = h0) (b : bool) (h : false = true)","proofString":"discriminate h."},{"statement":"exists p : Z, 0%Z = (2 * p + (if Z.even 0 then 0 else 1))%Z.","conclusion":"exists p : Z, 0%Z = (2 * p + (if Z.even 0 then 0 else 1))%Z","hypotheses":"","proofString":"now exists Z0."},{"statement":"(n : positive) : exists p : Z, Z.pos n~1 = (2 * p + (if Z.even (Z.pos n~1) then 0 else 1))%Z.","conclusion":"exists p : Z, Z.pos n~1 = (2 * p + (if Z.even (Z.pos n~1) then 0 else 1))%Z","hypotheses":"(n : positive)","proofString":"now exists (Zpos n)."},{"statement":"(n : positive) : exists p : Z, Z.pos n~0 = (2 * p + (if Z.even (Z.pos n~0) then 0 else 1))%Z.","conclusion":"exists p : Z, Z.pos n~0 = (2 * p + (if Z.even (Z.pos n~0) then 0 else 1))%Z","hypotheses":"(n : positive)","proofString":"now exists (Zpos n)."},{"statement":"exists p : Z, 1%Z = (2 * p + (if Z.even 1 then 0 else 1))%Z.","conclusion":"exists p : Z, 1%Z = (2 * p + (if Z.even 1 then 0 else 1))%Z","hypotheses":"","proofString":"now exists Z0."},{"statement":"(n : positive) : exists p : Z, Z.neg n~1 = (2 * p + (if Z.even (Z.neg n~1) then 0 else 1))%Z.","conclusion":"exists p : Z, Z.neg n~1 = (2 * p + (if Z.even (Z.neg n~1) then 0 else 1))%Z","hypotheses":"(n : positive)","proofString":"exists (Zneg n - 1)%Z.\nchange (2 * Zneg n - 1 = 2 * (Zneg n - 1) + 1)%Z.\nring."},{"statement":"(n : positive) : Z.neg n~1 = (2 * (Z.neg n - 1) + (if Z.even (Z.neg n~1) then 0 else 1))%Z.","conclusion":"Z.neg n~1 = (2 * (Z.neg n - 1) + (if Z.even (Z.neg n~1) then 0 else 1))%Z","hypotheses":"(n : positive)","proofString":"change (2 * Zneg n - 1 = 2 * (Zneg n - 1) + 1)%Z.\nring."},{"statement":"(n : positive) : (2 * Z.neg n - 1)%Z = (2 * (Z.neg n - 1) + 1)%Z.","conclusion":"(2 * Z.neg n - 1)%Z = (2 * (Z.neg n - 1) + 1)%Z","hypotheses":"(n : positive)","proofString":"ring."},{"statement":"(n : positive) : exists p : Z, Z.neg n~0 = (2 * p + (if Z.even (Z.neg n~0) then 0 else 1))%Z.","conclusion":"exists p : Z, Z.neg n~0 = (2 * p + (if Z.even (Z.neg n~0) then 0 else 1))%Z","hypotheses":"(n : positive)","proofString":"now exists (Zneg n)."},{"statement":"exists p : Z, (-1)%Z = (2 * p + (if Z.even (-1) then 0 else 1))%Z.","conclusion":"exists p : Z, (-1)%Z = (2 * p + (if Z.even (-1) then 0 else 1))%Z","hypotheses":"","proofString":"now exists (-1)%Z."},{"statement":"(n k1 k2 : Z) (H1 : (0 <= k1)%Z) (H2 : (0 <= k2)%Z) : (n ^ (k1 + k2))%Z = (n ^ k1 * n ^ k2)%Z.","conclusion":"(n ^ (k1 + k2))%Z = (n ^ k1 * n ^ k2)%Z","hypotheses":"(n k1 k2 : Z) (H1 : (0 <= k1)%Z) (H2 : (0 <= k2)%Z)","proofString":"now apply Zpower_exp ; apply Z.le_ge."},{"statement":"(b : Z) (He : (0 <= 0)%Z) : (b ^ 0)%Z = Zpower_nat b (Z.abs_nat 0).","conclusion":"(b ^ 0)%Z = Zpower_nat b (Z.abs_nat 0)","hypotheses":"(b : Z) (He : (0 <= 0)%Z)","proofString":"apply refl_equal."},{"statement":"(b : Z) (e : positive) (He : (0 <= Z.pos e)%Z) : (b ^ Z.pos e)%Z = Zpower_nat b (Z.abs_nat (Z.pos e)).","conclusion":"(b ^ Z.pos e)%Z = Zpower_nat b (Z.abs_nat (Z.pos e))","hypotheses":"(b : Z) (e : positive) (He : (0 <= Z.pos e)%Z)","proofString":"apply Zpower_pos_nat."},{"statement":"(b : Z) (e : positive) (He : (0 <= Z.neg e)%Z) : (b ^ Z.neg e)%Z = Zpower_nat b (Z.abs_nat (Z.neg e)).","conclusion":"(b ^ Z.neg e)%Z = Zpower_nat b (Z.abs_nat (Z.neg e))","hypotheses":"(b : Z) (e : positive) (He : (0 <= Z.neg e)%Z)","proofString":"elim He.\napply refl_equal."},{"statement":"(b : Z) (e : positive) (He : (0 <= Z.neg e)%Z) : (0 ?= Z.neg e)%Z = Gt.","conclusion":"(0 ?= Z.neg e)%Z = Gt","hypotheses":"(b : Z) (e : positive) (He : (0 <= Z.neg e)%Z)","proofString":"apply refl_equal."},{"statement":"(b : Z) (e : nat) : Zpower_nat b (S e) = (b * Zpower_nat b e)%Z.","conclusion":"Zpower_nat b (S e) = (b * Zpower_nat b e)%Z","hypotheses":"(b : Z) (e : nat)","proofString":"rewrite (Zpower_nat_is_exp 1 e).\napply (f_equal (fun x => x * _)%Z).\napply Zmult_1_r."},{"statement":"(b : Z) (e : nat) : (Zpower_nat b 1 * Zpower_nat b e)%Z = (b * Zpower_nat b e)%Z.","conclusion":"(Zpower_nat b 1 * Zpower_nat b e)%Z = (b * Zpower_nat b e)%Z","hypotheses":"(b : Z) (e : nat)","proofString":"apply (f_equal (fun x => x * _)%Z).\napply Zmult_1_r."},{"statement":"(b : Z) (e : nat) : Zpower_nat b 1 = b.","conclusion":"Zpower_nat b 1 = b","hypotheses":"(b : Z) (e : nat)","proofString":"apply Zmult_1_r."},{"statement":"(b : Z) (p : positive) (Hb : (0 < b)%Z) : (0 < Z.pow_pos b p)%Z.","conclusion":"(0 < Z.pow_pos b p)%Z","hypotheses":"(b : Z) (p : positive) (Hb : (0 < b)%Z)","proofString":"rewrite Zpower_pos_nat.\ninduction (nat_of_P p).\neasy.\nrewrite Zpower_nat_S.\nnow apply Zmult_lt_0_compat."},{"statement":"(b : Z) (p : positive) (Hb : (0 < b)%Z) : (0 < Zpower_nat b (Pos.to_nat p))%Z.","conclusion":"(0 < Zpower_nat b (Pos.to_nat p))%Z","hypotheses":"(b : Z) (p : positive) (Hb : (0 < b)%Z)","proofString":"induction (nat_of_P p).\neasy.\nrewrite Zpower_nat_S.\nnow apply Zmult_lt_0_compat."},{"statement":"(b : Z) (p : positive) (Hb : (0 < b)%Z) : (0 < Zpower_nat b 0)%Z.","conclusion":"(0 < Zpower_nat b 0)%Z","hypotheses":"(b : Z) (p : positive) (Hb : (0 < b)%Z)","proofString":"easy."},{"statement":"(b : Z) (p : positive) (Hb : (0 < b)%Z) (n : nat) (IHn : (0 < Zpower_nat b n)%Z) : (0 < Zpower_nat b (S n))%Z.","conclusion":"(0 < Zpower_nat b (S n))%Z","hypotheses":"(b : Z) (p : positive) (Hb : (0 < b)%Z) (n : nat) (IHn : (0 < Zpower_nat b n)%Z)","proofString":"rewrite Zpower_nat_S.\nnow apply Zmult_lt_0_compat."},{"statement":"(b : Z) (p : positive) (Hb : (0 < b)%Z) (n : nat) (IHn : (0 < Zpower_nat b n)%Z) : (0 < b * Zpower_nat b n)%Z.","conclusion":"(0 < b * Zpower_nat b n)%Z","hypotheses":"(b : Z) (p : positive) (Hb : (0 < b)%Z) (n : nat) (IHn : (0 < Zpower_nat b n)%Z)","proofString":"now apply Zmult_lt_0_compat."},{"statement":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false) : Z.even (b ^ e) = false.","conclusion":"Z.even (b ^ e) = false","hypotheses":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false)","proofString":"destruct (Z_le_lt_eq_dec _ _ He) as [He'|He'].\nrewrite <- Hb.\nnow apply Z.even_pow.\nnow rewrite <- He'."},{"statement":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false) (He' : (0 < e)%Z) : Z.even (b ^ e) = false.","conclusion":"Z.even (b ^ e) = false","hypotheses":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false) (He' : (0 < e)%Z)","proofString":"rewrite <- Hb.\nnow apply Z.even_pow."},{"statement":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false) (He' : (0 < e)%Z) : Z.even (b ^ e) = Z.even b.","conclusion":"Z.even (b ^ e) = Z.even b","hypotheses":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false) (He' : (0 < e)%Z)","proofString":"now apply Z.even_pow."},{"statement":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false) (He' : 0%Z = e) : Z.even (b ^ e) = false.","conclusion":"Z.even (b ^ e) = false","hypotheses":"(b e : Z) (He : (0 <= e)%Z) (Hb : Z.even b = false) (He' : 0%Z = e)","proofString":"now rewrite <- He'."},{"statement":"(r1 : Z) (H1 : (2 <=? r1)%Z = true) (r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2) : {| radix_val := r1; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}.","conclusion":"{| radix_val := r1; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}","hypotheses":"(r1 : Z) (H1 : (2 <=? r1)%Z = true) (r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2)","proofString":"revert H1.\nrewrite H.\nintros H1.\napply f_equal.\napply eqbool_irrelevance."},{"statement":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2) : forall H1 : (2 <=? r1)%Z = true,\n{| radix_val := r1; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}.","conclusion":"forall H1 : (2 <=? r1)%Z = true,\n{| radix_val := r1; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}","hypotheses":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2)","proofString":"rewrite H.\nintros H1.\napply f_equal.\napply eqbool_irrelevance."},{"statement":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2) : forall H1 : (2 <=? r2)%Z = true,\n{| radix_val := r2; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}.","conclusion":"forall H1 : (2 <=? r2)%Z = true,\n{| radix_val := r2; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}","hypotheses":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2)","proofString":"intros H1.\napply f_equal.\napply eqbool_irrelevance."},{"statement":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2) (H1 : (2 <=? r2)%Z = true) : {| radix_val := r2; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}.","conclusion":"{| radix_val := r2; radix_prop := H1 |} =\n{| radix_val := r2; radix_prop := H2 |}","hypotheses":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2) (H1 : (2 <=? r2)%Z = true)","proofString":"apply f_equal.\napply eqbool_irrelevance."},{"statement":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2) (H1 : (2 <=? r2)%Z = true) : H1 = H2.","conclusion":"H1 = H2","hypotheses":"(r1 r2 : Z) (H2 : (2 <=? r2)%Z = true) (H : r1 = r2) (H1 : (2 <=? r2)%Z = true)","proofString":"apply eqbool_irrelevance."},{"statement":"(0 < 2)%Z.","conclusion":"(0 < 2)%Z","hypotheses":"","proofString":"easy."},{"statement":"(2 <= r)%Z.","conclusion":"(2 <= r)%Z","hypotheses":"","proofString":"apply Zle_bool_imp_le.\napply r."},{"statement":"(2 <=? r)%Z = true.","conclusion":"(2 <=? r)%Z = true","hypotheses":"","proofString":"apply r."},{"statement":"(v : Z) (Hr : (2 <=? v)%Z = true) : (1 < {| radix_val := v; radix_prop := Hr |})%Z.","conclusion":"(1 < {| radix_val := v; radix_prop := Hr |})%Z","hypotheses":"(v : Z) (Hr : (2 <=? v)%Z = true)","proofString":"simpl.\napply Z.lt_le_trans with 2%Z.\neasy.\nnow apply Zle_bool_imp_le."},{"statement":"(v : Z) (Hr : (2 <=? v)%Z = true) : (1 < v)%Z.","conclusion":"(1 < v)%Z","hypotheses":"(v : Z) (Hr : (2 <=? v)%Z = true)","proofString":"apply Z.lt_le_trans with 2%Z.\neasy.\nnow apply Zle_bool_imp_le."},{"statement":"(v : Z) (Hr : (2 <=? v)%Z = true) : (1 < 2)%Z.","conclusion":"(1 < 2)%Z","hypotheses":"(v : Z) (Hr : (2 <=? v)%Z = true)","proofString":"easy."},{"statement":"(v : Z) (Hr : (2 <=? v)%Z = true) : (2 <= v)%Z.","conclusion":"(2 <= v)%Z","hypotheses":"(v : Z) (Hr : (2 <=? v)%Z = true)","proofString":"now apply Zle_bool_imp_le."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) : (1 < r ^ Z.pos p)%Z.","conclusion":"(1 < r ^ Z.pos p)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z)","proofString":"simpl.\nrewrite Zpower_pos_nat.\ngeneralize (lt_O_nat_of_P p).\ninduction (nat_of_P p).\neasy.\nintros _.\nrewrite Zpower_nat_S.\nassert (0 < Zpower_nat r n)%Z.\nclear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0.\napply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) : (1 < Z.pow_pos r p)%Z.","conclusion":"(1 < Z.pow_pos r p)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z)","proofString":"rewrite Zpower_pos_nat.\ngeneralize (lt_O_nat_of_P p).\ninduction (nat_of_P p).\neasy.\nintros _.\nrewrite Zpower_nat_S.\nassert (0 < Zpower_nat r n)%Z.\nclear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0.\napply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) : (1 < Zpower_nat r (Pos.to_nat p))%Z.","conclusion":"(1 < Zpower_nat r (Pos.to_nat p))%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z)","proofString":"generalize (lt_O_nat_of_P p).\ninduction (nat_of_P p).\neasy.\nintros _.\nrewrite Zpower_nat_S.\nassert (0 < Zpower_nat r n)%Z.\nclear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0.\napply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) : 0 < Pos.to_nat p -> (1 < Zpower_nat r (Pos.to_nat p))%Z.","conclusion":"0 < Pos.to_nat p -> (1 < Zpower_nat r (Pos.to_nat p))%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z)","proofString":"induction (nat_of_P p).\neasy.\nintros _.\nrewrite Zpower_nat_S.\nassert (0 < Zpower_nat r n)%Z.\nclear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0.\napply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) : 0 < 0 -> (1 < Zpower_nat r 0)%Z.","conclusion":"0 < 0 -> (1 < Zpower_nat r 0)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z)","proofString":"easy."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) : 0 < S n -> (1 < Zpower_nat r (S n))%Z.","conclusion":"0 < S n -> (1 < Zpower_nat r (S n))%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z)","proofString":"intros _.\nrewrite Zpower_nat_S.\nassert (0 < Zpower_nat r n)%Z.\nclear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0.\napply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) : (1 < Zpower_nat r (S n))%Z.","conclusion":"(1 < Zpower_nat r (S n))%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z)","proofString":"rewrite Zpower_nat_S.\nassert (0 < Zpower_nat r n)%Z.\nclear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0.\napply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) : (1 < r * Zpower_nat r n)%Z.","conclusion":"(1 < r * Zpower_nat r n)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z)","proofString":"assert (0 < Zpower_nat r n)%Z.\nclear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0.\napply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) : (0 < Zpower_nat r n)%Z.","conclusion":"(0 < Zpower_nat r n)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z)","proofString":"clear.\ninduction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(n : nat) : (0 < Zpower_nat r n)%Z.","conclusion":"(0 < Zpower_nat r n)%Z","hypotheses":"(n : nat)","proofString":"induction n.\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(0 < Zpower_nat r 0)%Z.","conclusion":"(0 < Zpower_nat r 0)%Z","hypotheses":"","proofString":"easy."},{"statement":"(n : nat) (IHn : (0 < Zpower_nat r n)%Z) : (0 < Zpower_nat r (S n))%Z.","conclusion":"(0 < Zpower_nat r (S n))%Z","hypotheses":"(n : nat) (IHn : (0 < Zpower_nat r n)%Z)","proofString":"rewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(n : nat) (IHn : (0 < Zpower_nat r n)%Z) : (0 < r * Zpower_nat r n)%Z.","conclusion":"(0 < r * Zpower_nat r n)%Z","hypotheses":"(n : nat) (IHn : (0 < Zpower_nat r n)%Z)","proofString":"apply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(n : nat) (IHn : (0 < Zpower_nat r n)%Z) : (0 < r)%Z.","conclusion":"(0 < r)%Z","hypotheses":"(n : nat) (IHn : (0 < Zpower_nat r n)%Z)","proofString":"apply radix_gt_0."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z) : (1 < r * Zpower_nat r n)%Z.","conclusion":"(1 < r * Zpower_nat r n)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z)","proofString":"apply Z.le_lt_trans with (1 * Zpower_nat r n)%Z.\nrewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0).\napply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z) : (1 <= 1 * Zpower_nat r n)%Z.","conclusion":"(1 <= 1 * Zpower_nat r n)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z)","proofString":"rewrite Zmult_1_l.\nnow apply (Zlt_le_succ 0)."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z) : (1 <= Zpower_nat r n)%Z.","conclusion":"(1 <= Zpower_nat r n)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z)","proofString":"now apply (Zlt_le_succ 0)."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z) : (1 * Zpower_nat r n < r * Zpower_nat r n)%Z.","conclusion":"(1 * Zpower_nat r n < r * Zpower_nat r n)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z)","proofString":"apply Zmult_lt_compat_r with (1 := H).\napply radix_gt_1."},{"statement":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z) : (1 < r)%Z.","conclusion":"(1 < r)%Z","hypotheses":"(p : positive) (Hp : (0 < Z.pos p)%Z) (n : nat) (IHn : 0 < n -> (1 < Zpower_nat r n)%Z) (H : (0 < Zpower_nat r n)%Z)","proofString":"apply radix_gt_1."},{"statement":"(p : Z) (Hp : (0 <= p)%Z) : (0 < r ^ p)%Z.","conclusion":"(0 < r ^ p)%Z","hypotheses":"(p : Z) (Hp : (0 <= p)%Z)","proofString":"rewrite Zpower_Zpower_nat with (1 := Hp).\ninduction (Z.abs_nat p).\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(p : Z) (Hp : (0 <= p)%Z) : (0 < Zpower_nat r (Z.abs_nat p))%Z.","conclusion":"(0 < Zpower_nat r (Z.abs_nat p))%Z","hypotheses":"(p : Z) (Hp : (0 <= p)%Z)","proofString":"induction (Z.abs_nat p).\neasy.\nrewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(p : Z) (Hp : (0 <= p)%Z) : (0 < Zpower_nat r 0)%Z.","conclusion":"(0 < Zpower_nat r 0)%Z","hypotheses":"(p : Z) (Hp : (0 <= p)%Z)","proofString":"easy."},{"statement":"(p : Z) (Hp : (0 <= p)%Z) (n : nat) (IHn : (0 < Zpower_nat r n)%Z) : (0 < Zpower_nat r (S n))%Z.","conclusion":"(0 < Zpower_nat r (S n))%Z","hypotheses":"(p : Z) (Hp : (0 <= p)%Z) (n : nat) (IHn : (0 < Zpower_nat r n)%Z)","proofString":"rewrite Zpower_nat_S.\napply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(p : Z) (Hp : (0 <= p)%Z) (n : nat) (IHn : (0 < Zpower_nat r n)%Z) : (0 < r * Zpower_nat r n)%Z.","conclusion":"(0 < r * Zpower_nat r n)%Z","hypotheses":"(p : Z) (Hp : (0 <= p)%Z) (n : nat) (IHn : (0 < Zpower_nat r n)%Z)","proofString":"apply Zmult_lt_0_compat with (2 := IHn).\napply radix_gt_0."},{"statement":"(p : Z) (Hp : (0 <= p)%Z) (n : nat) (IHn : (0 < Zpower_nat r n)%Z) : (0 < r)%Z.","conclusion":"(0 < r)%Z","hypotheses":"(p : Z) (Hp : (0 <= p)%Z) (n : nat) (IHn : (0 < Zpower_nat r n)%Z)","proofString":"apply radix_gt_0."},{"statement":"(e : positive) : (0 <= r ^ Z.pos e)%Z.","conclusion":"(0 <= r ^ Z.pos e)%Z","hypotheses":"(e : positive)","proofString":"apply Zlt_le_weak.\nnow apply Zpower_gt_0."},{"statement":"(e : positive) : (0 < r ^ Z.pos e)%Z.","conclusion":"(0 < r ^ Z.pos e)%Z","hypotheses":"(e : positive)","proofString":"now apply Zpower_gt_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) : (r ^ e1 <= r ^ e2)%Z.","conclusion":"(r ^ e1 <= r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z)","proofString":"destruct (Zle_or_lt 0 e1)%Z as [H1|H1].\nreplace e2 with (e2 - e1 + e1)%Z by ring.\nrewrite Zpower_plus with (2 := H1).\nrewrite <- (Zmult_1_l (r ^ e1)) at 1.\napply Zmult_le_compat_r.\napply (Zlt_le_succ 0).\napply Zpower_gt_0.\nnow apply Zle_minus_le_0.\napply Zpower_ge_0.\nnow apply Zle_minus_le_0.\nclear He.\ndestruct e1 as [|e1|e1] ; try easy.\napply Zpower_ge_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 <= r ^ e2)%Z.","conclusion":"(r ^ e1 <= r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"replace e2 with (e2 - e1 + e1)%Z by ring.\nrewrite Zpower_plus with (2 := H1).\nrewrite <- (Zmult_1_l (r ^ e1)) at 1.\napply Zmult_le_compat_r.\napply (Zlt_le_succ 0).\napply Zpower_gt_0.\nnow apply Zle_minus_le_0.\napply Zpower_ge_0.\nnow apply Zle_minus_le_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 <= r ^ (e2 - e1 + e1))%Z.","conclusion":"(r ^ e1 <= r ^ (e2 - e1 + e1))%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"rewrite Zpower_plus with (2 := H1).\nrewrite <- (Zmult_1_l (r ^ e1)) at 1.\napply Zmult_le_compat_r.\napply (Zlt_le_succ 0).\napply Zpower_gt_0.\nnow apply Zle_minus_le_0.\napply Zpower_ge_0.\nnow apply Zle_minus_le_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 <= r ^ (e2 - e1) * r ^ e1)%Z.","conclusion":"(r ^ e1 <= r ^ (e2 - e1) * r ^ e1)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"rewrite <- (Zmult_1_l (r ^ e1)) at 1.\napply Zmult_le_compat_r.\napply (Zlt_le_succ 0).\napply Zpower_gt_0.\nnow apply Zle_minus_le_0.\napply Zpower_ge_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (1 * r ^ e1 <= r ^ (e2 - e1) * r ^ e1)%Z.","conclusion":"(1 * r ^ e1 <= r ^ (e2 - e1) * r ^ e1)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply Zmult_le_compat_r.\napply (Zlt_le_succ 0).\napply Zpower_gt_0.\nnow apply Zle_minus_le_0.\napply Zpower_ge_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (1 <= r ^ (e2 - e1))%Z.","conclusion":"(1 <= r ^ (e2 - e1))%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply (Zlt_le_succ 0).\napply Zpower_gt_0.\nnow apply Zle_minus_le_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (0 < r ^ (e2 - e1))%Z.","conclusion":"(0 < r ^ (e2 - e1))%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply Zpower_gt_0.\nnow apply Zle_minus_le_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (0 <= e2 - e1)%Z.","conclusion":"(0 <= e2 - e1)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"now apply Zle_minus_le_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (0 <= r ^ e1)%Z.","conclusion":"(0 <= r ^ e1)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply Zpower_ge_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z) : (0 <= e2 - e1)%Z.","conclusion":"(0 <= e2 - e1)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"now apply Zle_minus_le_0."},{"statement":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (e1 < 0)%Z) : (r ^ e1 <= r ^ e2)%Z.","conclusion":"(r ^ e1 <= r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He : (e1 <= e2)%Z) (H1 : (e1 < 0)%Z)","proofString":"clear He.\ndestruct e1 as [|e1|e1] ; try easy.\napply Zpower_ge_0."},{"statement":"(e1 e2 : Z) (H1 : (e1 < 0)%Z) : (r ^ e1 <= r ^ e2)%Z.","conclusion":"(r ^ e1 <= r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (H1 : (e1 < 0)%Z)","proofString":"destruct e1 as [|e1|e1] ; try easy.\napply Zpower_ge_0."},{"statement":"(e1 : positive) (e2 : Z) (H1 : (Z.neg e1 < 0)%Z) : (r ^ Z.neg e1 <= r ^ e2)%Z.","conclusion":"(r ^ Z.neg e1 <= r ^ e2)%Z","hypotheses":"(e1 : positive) (e2 : Z) (H1 : (Z.neg e1 < 0)%Z)","proofString":"apply Zpower_ge_0."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) : (r ^ e1 < r ^ e2)%Z.","conclusion":"(r ^ e1 < r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z)","proofString":"destruct (Zle_or_lt 0 e1)%Z as [H1|H1].\nreplace e2 with (e2 - e1 + e1)%Z by ring.\nrewrite Zpower_plus with (2 := H1).\nrewrite Zmult_comm.\nrewrite <- (Zmult_1_r (r ^ e1)) at 1.\napply Zmult_lt_compat2.\nsplit.\nnow apply Zpower_gt_0.\napply Z.le_refl.\nsplit.\neasy.\napply Zpower_gt_1.\nclear -He ; lia.\napply Zle_minus_le_0.\nnow apply Zlt_le_weak.\nrevert H1.\nclear -He2.\ndestruct e1 ; try easy.\nintros _.\nnow apply Zpower_gt_0."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 < r ^ e2)%Z.","conclusion":"(r ^ e1 < r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"replace e2 with (e2 - e1 + e1)%Z by ring.\nrewrite Zpower_plus with (2 := H1).\nrewrite Zmult_comm.\nrewrite <- (Zmult_1_r (r ^ e1)) at 1.\napply Zmult_lt_compat2.\nsplit.\nnow apply Zpower_gt_0.\napply Z.le_refl.\nsplit.\neasy.\napply Zpower_gt_1.\nclear -He ; lia.\napply Zle_minus_le_0.\nnow apply Zlt_le_weak."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 < r ^ (e2 - e1 + e1))%Z.","conclusion":"(r ^ e1 < r ^ (e2 - e1 + e1))%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"rewrite Zpower_plus with (2 := H1).\nrewrite Zmult_comm.\nrewrite <- (Zmult_1_r (r ^ e1)) at 1.\napply Zmult_lt_compat2.\nsplit.\nnow apply Zpower_gt_0.\napply Z.le_refl.\nsplit.\neasy.\napply Zpower_gt_1.\nclear -He ; lia.\napply Zle_minus_le_0.\nnow apply Zlt_le_weak."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 < r ^ (e2 - e1) * r ^ e1)%Z.","conclusion":"(r ^ e1 < r ^ (e2 - e1) * r ^ e1)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"rewrite Zmult_comm.\nrewrite <- (Zmult_1_r (r ^ e1)) at 1.\napply Zmult_lt_compat2.\nsplit.\nnow apply Zpower_gt_0.\napply Z.le_refl.\nsplit.\neasy.\napply Zpower_gt_1.\nclear -He ; lia."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 < r ^ e1 * r ^ (e2 - e1))%Z.","conclusion":"(r ^ e1 < r ^ e1 * r ^ (e2 - e1))%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"rewrite <- (Zmult_1_r (r ^ e1)) at 1.\napply Zmult_lt_compat2.\nsplit.\nnow apply Zpower_gt_0.\napply Z.le_refl.\nsplit.\neasy.\napply Zpower_gt_1.\nclear -He ; lia."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 * 1 < r ^ e1 * r ^ (e2 - e1))%Z.","conclusion":"(r ^ e1 * 1 < r ^ e1 * r ^ (e2 - e1))%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply Zmult_lt_compat2.\nsplit.\nnow apply Zpower_gt_0.\napply Z.le_refl.\nsplit.\neasy.\napply Zpower_gt_1.\nclear -He ; lia."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (0 < r ^ e1 <= r ^ e1)%Z.","conclusion":"(0 < r ^ e1 <= r ^ e1)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"split.\nnow apply Zpower_gt_0.\napply Z.le_refl."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (0 < r ^ e1)%Z.","conclusion":"(0 < r ^ e1)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"now apply Zpower_gt_0."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (r ^ e1 <= r ^ e1)%Z.","conclusion":"(r ^ e1 <= r ^ e1)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply Z.le_refl."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (0 < 1 < r ^ (e2 - e1))%Z.","conclusion":"(0 < 1 < r ^ (e2 - e1))%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"split.\neasy.\napply Zpower_gt_1.\nclear -He ; lia."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (0 < 1)%Z.","conclusion":"(0 < 1)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"easy."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (1 < r ^ (e2 - e1))%Z.","conclusion":"(1 < r ^ (e2 - e1))%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply Zpower_gt_1.\nclear -He ; lia."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (0 < e2 - e1)%Z.","conclusion":"(0 < e2 - e1)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"clear -He ; lia."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (0 <= e2 - e1)%Z.","conclusion":"(0 <= e2 - e1)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"apply Zle_minus_le_0.\nnow apply Zlt_le_weak."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z) : (e1 <= e2)%Z.","conclusion":"(e1 <= e2)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (0 <= e1)%Z)","proofString":"now apply Zlt_le_weak."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (e1 < 0)%Z) : (r ^ e1 < r ^ e2)%Z.","conclusion":"(r ^ e1 < r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) (H1 : (e1 < 0)%Z)","proofString":"revert H1.\nclear -He2.\ndestruct e1 ; try easy.\nintros _.\nnow apply Zpower_gt_0."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z) : (e1 < 0)%Z -> (r ^ e1 < r ^ e2)%Z.","conclusion":"(e1 < 0)%Z -> (r ^ e1 < r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) (He : (e1 < e2)%Z)","proofString":"clear -He2.\ndestruct e1 ; try easy.\nintros _.\nnow apply Zpower_gt_0."},{"statement":"(e1 e2 : Z) (He2 : (0 <= e2)%Z) : (e1 < 0)%Z -> (r ^ e1 < r ^ e2)%Z.","conclusion":"(e1 < 0)%Z -> (r ^ e1 < r ^ e2)%Z","hypotheses":"(e1 e2 : Z) (He2 : (0 <= e2)%Z)","proofString":"destruct e1 ; try easy.\nintros _.\nnow apply Zpower_gt_0."},{"statement":"(p : positive) (e2 : Z) (He2 : (0 <= e2)%Z) : (Z.neg p < 0)%Z -> (r ^ Z.neg p < r ^ e2)%Z.","conclusion":"(Z.neg p < 0)%Z -> (r ^ Z.neg p < r ^ e2)%Z","hypotheses":"(p : positive) (e2 : Z) (He2 : (0 <= e2)%Z)","proofString":"intros _.\nnow apply Zpower_gt_0."},{"statement":"(p : positive) (e2 : Z) (He2 : (0 <= e2)%Z) : (r ^ Z.neg p < r ^ e2)%Z.","conclusion":"(r ^ Z.neg p < r ^ e2)%Z","hypotheses":"(p : positive) (e2 : Z) (He2 : (0 <= e2)%Z)","proofString":"now apply Zpower_gt_0."},{"statement":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) : (e1 <= e2)%Z.","conclusion":"(e1 <= e2)%Z","hypotheses":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z)","proofString":"apply Znot_gt_le.\nintros H.\napply Zlt_not_le with (1 := He).\napply Zpower_le.\nclear -H ; lia."},{"statement":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) : ~ (e1 > e2)%Z.","conclusion":"~ (e1 > e2)%Z","hypotheses":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z)","proofString":"intros H.\napply Zlt_not_le with (1 := He).\napply Zpower_le.\nclear -H ; lia."},{"statement":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) (H : (e1 > e2)%Z) : False.","conclusion":"False","hypotheses":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) (H : (e1 > e2)%Z)","proofString":"apply Zlt_not_le with (1 := He).\napply Zpower_le.\nclear -H ; lia."},{"statement":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) (H : (e1 > e2)%Z) : (r ^ e2 <= r ^ (e1 - 1))%Z.","conclusion":"(r ^ e2 <= r ^ (e1 - 1))%Z","hypotheses":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) (H : (e1 > e2)%Z)","proofString":"apply Zpower_le.\nclear -H ; lia."},{"statement":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) (H : (e1 > e2)%Z) : (e2 <= e1 - 1)%Z.","conclusion":"(e2 <= e1 - 1)%Z","hypotheses":"(e1 e2 : Z) (He : (r ^ (e1 - 1) < r ^ e2)%Z) (H : (e1 > e2)%Z)","proofString":"clear -H ; lia."},{"statement":"(n : positive) : (Z.pos n < r ^ Z.pos n)%Z.","conclusion":"(Z.pos n < r ^ Z.pos n)%Z","hypotheses":"(n : positive)","proofString":"simpl.\nrewrite Zpower_pos_nat.\nrewrite Zpos_eq_Z_of_nat_o_nat_of_P.\ninduction (nat_of_P n).\neasy.\nrewrite inj_S.\nchange (Zpower_nat r (S n0)) with (r * Zpower_nat r n0)%Z.\nunfold Z.succ.\napply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) : (Z.pos n < Z.pow_pos r n)%Z.","conclusion":"(Z.pos n < Z.pow_pos r n)%Z","hypotheses":"(n : positive)","proofString":"rewrite Zpower_pos_nat.\nrewrite Zpos_eq_Z_of_nat_o_nat_of_P.\ninduction (nat_of_P n).\neasy.\nrewrite inj_S.\nchange (Zpower_nat r (S n0)) with (r * Zpower_nat r n0)%Z.\nunfold Z.succ.\napply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) : (Z.pos n < Zpower_nat r (Pos.to_nat n))%Z.","conclusion":"(Z.pos n < Zpower_nat r (Pos.to_nat n))%Z","hypotheses":"(n : positive)","proofString":"rewrite Zpos_eq_Z_of_nat_o_nat_of_P.\ninduction (nat_of_P n).\neasy.\nrewrite inj_S.\nchange (Zpower_nat r (S n0)) with (r * Zpower_nat r n0)%Z.\nunfold Z.succ.\napply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) : (Z.of_nat (Pos.to_nat n) < Zpower_nat r (Pos.to_nat n))%Z.","conclusion":"(Z.of_nat (Pos.to_nat n) < Zpower_nat r (Pos.to_nat n))%Z","hypotheses":"(n : positive)","proofString":"induction (nat_of_P n).\neasy.\nrewrite inj_S.\nchange (Zpower_nat r (S n0)) with (r * Zpower_nat r n0)%Z.\nunfold Z.succ.\napply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) : (Z.of_nat 0 < Zpower_nat r 0)%Z.","conclusion":"(Z.of_nat 0 < Zpower_nat r 0)%Z","hypotheses":"(n : positive)","proofString":"easy."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (Z.of_nat (S n0) < Zpower_nat r (S n0))%Z.","conclusion":"(Z.of_nat (S n0) < Zpower_nat r (S n0))%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"rewrite inj_S.\nchange (Zpower_nat r (S n0)) with (r * Zpower_nat r n0)%Z.\nunfold Z.succ.\napply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (Z.succ (Z.of_nat n0) < Zpower_nat r (S n0))%Z.","conclusion":"(Z.succ (Z.of_nat n0) < Zpower_nat r (S n0))%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"change (Zpower_nat r (S n0)) with (r * Zpower_nat r n0)%Z.\nunfold Z.succ.\napply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (Z.succ (Z.of_nat n0) < r * Zpower_nat r n0)%Z.","conclusion":"(Z.succ (Z.of_nat n0) < r * Zpower_nat r n0)%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"unfold Z.succ.\napply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (Z.of_nat n0 + 1 < r * Zpower_nat r n0)%Z.","conclusion":"(Z.of_nat n0 + 1 < r * Zpower_nat r n0)%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"apply Z.lt_le_trans with (r * (Z_of_nat n0 + 1))%Z.\nclear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat.\napply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (Z.of_nat n0 + 1 < r * (Z.of_nat n0 + 1))%Z.","conclusion":"(Z.of_nat n0 + 1 < r * (Z.of_nat n0 + 1))%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"clear.\napply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat."},{"statement":"(n0 : nat) : (Z.of_nat n0 + 1 < r * (Z.of_nat n0 + 1))%Z.","conclusion":"(Z.of_nat n0 + 1 < r * (Z.of_nat n0 + 1))%Z","hypotheses":"(n0 : nat)","proofString":"apply Zlt_0_minus_lt.\nreplace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat."},{"statement":"(n0 : nat) : (0 < r * (Z.of_nat n0 + 1) - (Z.of_nat n0 + 1))%Z.","conclusion":"(0 < r * (Z.of_nat n0 + 1) - (Z.of_nat n0 + 1))%Z","hypotheses":"(n0 : nat)","proofString":"replace (r * (Z_of_nat n0 + 1) - (Z_of_nat n0 + 1))%Z with ((r - 1) * (Z_of_nat n0 + 1))%Z by ring.\napply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat."},{"statement":"(n0 : nat) : (0 < (r - 1) * (Z.of_nat n0 + 1))%Z.","conclusion":"(0 < (r - 1) * (Z.of_nat n0 + 1))%Z","hypotheses":"(n0 : nat)","proofString":"apply Zmult_lt_0_compat.\ncut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r.\napply (Zle_lt_succ 0).\napply Zle_0_nat."},{"statement":"(n0 : nat) : (0 < r - 1)%Z.","conclusion":"(0 < r - 1)%Z","hypotheses":"(n0 : nat)","proofString":"cut (2 <= r)%Z.\nlia.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n0 : nat) : (2 <= r)%Z -> (0 < r - 1)%Z.","conclusion":"(2 <= r)%Z -> (0 < r - 1)%Z","hypotheses":"(n0 : nat)","proofString":"lia."},{"statement":"(n0 : nat) : (2 <= r)%Z.","conclusion":"(2 <= r)%Z","hypotheses":"(n0 : nat)","proofString":"apply Zle_bool_imp_le.\napply r."},{"statement":"(n0 : nat) : (2 <=? r)%Z = true.","conclusion":"(2 <=? r)%Z = true","hypotheses":"(n0 : nat)","proofString":"apply r."},{"statement":"(n0 : nat) : (0 < Z.of_nat n0 + 1)%Z.","conclusion":"(0 < Z.of_nat n0 + 1)%Z","hypotheses":"(n0 : nat)","proofString":"apply (Zle_lt_succ 0).\napply Zle_0_nat."},{"statement":"(n0 : nat) : (0 <= Z.of_nat n0)%Z.","conclusion":"(0 <= Z.of_nat n0)%Z","hypotheses":"(n0 : nat)","proofString":"apply Zle_0_nat."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (r * (Z.of_nat n0 + 1) <= r * Zpower_nat r n0)%Z.","conclusion":"(r * (Z.of_nat n0 + 1) <= r * Zpower_nat r n0)%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"apply Zmult_le_compat_l.\nnow apply Zlt_le_succ.\napply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (Z.of_nat n0 + 1 <= Zpower_nat r n0)%Z.","conclusion":"(Z.of_nat n0 + 1 <= Zpower_nat r n0)%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"now apply Zlt_le_succ."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (0 <= r)%Z.","conclusion":"(0 <= r)%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"apply Z.le_trans with 2%Z.\neasy.\napply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (0 <= 2)%Z.","conclusion":"(0 <= 2)%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"easy."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (2 <= r)%Z.","conclusion":"(2 <= r)%Z","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"apply Zle_bool_imp_le.\napply r."},{"statement":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z) : (2 <=? r)%Z = true.","conclusion":"(2 <=? r)%Z = true","hypotheses":"(n : positive) (n0 : nat) (IHn0 : (Z.of_nat n0 < Zpower_nat r n0)%Z)","proofString":"apply r."},{"statement":"(n a b : Z) (Ha : (0 < a)%Z) (Hb : (0 <= b)%Z) : ((n mod (a * b)) mod b)%Z = (n mod b)%Z.","conclusion":"((n mod (a * b)) mod b)%Z = (n mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 < a)%Z) (Hb : (0 <= b)%Z)","proofString":"destruct (Zle_lt_or_eq _ _ Hb) as [H'b|H'b].\nrewrite (Z.mul_comm a b), Z.rem_mul_r, Z.add_mod, Z.mul_mod, Z.mod_same,      Z.mul_0_l, Z.mod_0_l, Z.add_0_r, !Z.mod_mod; lia.\nsubst.\nnow rewrite Z.mul_0_r, !Zmod_0_r."},{"statement":"(n a b : Z) (Ha : (0 < a)%Z) (Hb : (0 <= b)%Z) (H'b : (0 < b)%Z) : ((n mod (a * b)) mod b)%Z = (n mod b)%Z.","conclusion":"((n mod (a * b)) mod b)%Z = (n mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 < a)%Z) (Hb : (0 <= b)%Z) (H'b : (0 < b)%Z)","proofString":"rewrite (Z.mul_comm a b), Z.rem_mul_r, Z.add_mod, Z.mul_mod, Z.mod_same,      Z.mul_0_l, Z.mod_0_l, Z.add_0_r, !Z.mod_mod; lia."},{"statement":"(n a b : Z) (Ha : (0 < a)%Z) (Hb : (0 <= b)%Z) (H'b : 0%Z = b) : ((n mod (a * b)) mod b)%Z = (n mod b)%Z.","conclusion":"((n mod (a * b)) mod b)%Z = (n mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 < a)%Z) (Hb : (0 <= b)%Z) (H'b : 0%Z = b)","proofString":"subst.\nnow rewrite Z.mul_0_r, !Zmod_0_r."},{"statement":"(n a : Z) (Ha : (0 < a)%Z) (Hb : (0 <= 0)%Z) : ((n mod (a * 0)) mod 0)%Z = (n mod 0)%Z.","conclusion":"((n mod (a * 0)) mod 0)%Z = (n mod 0)%Z","hypotheses":"(n a : Z) (Ha : (0 < a)%Z) (Hb : (0 <= 0)%Z)","proofString":"now rewrite Z.mul_0_r, !Zmod_0_r."},{"statement":"(a b : Z) : Z.rem a b = (a - a ÷ b * b)%Z.","conclusion":"Z.rem a b = (a - a ÷ b * b)%Z","hypotheses":"(a b : Z)","proofString":"rewrite (Z.quot_rem' a b) at 2.\nring."},{"statement":"(a b : Z) : Z.rem a b = (b * (a ÷ b) + Z.rem a b - a ÷ b * b)%Z.","conclusion":"Z.rem a b = (b * (a ÷ b) + Z.rem a b - a ÷ b * b)%Z","hypotheses":"(a b : Z)","proofString":"ring."},{"statement":"(n a b : Z) : Z.rem (Z.rem n (a * b)) b = Z.rem n b.","conclusion":"Z.rem (Z.rem n (a * b)) b = Z.rem n b","hypotheses":"(n a b : Z)","proofString":"assert (Z.rem n (a * b) = n + - (Z.quot n (a * b) * a) * b)%Z.\nrewrite <- Zopp_mult_distr_l.\nrewrite <- Zmult_assoc.\napply ZOmod_eq.\nrewrite H.\napply Z_rem_plus.\nrewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z.","conclusion":"Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z","hypotheses":"(n a b : Z)","proofString":"rewrite <- Zopp_mult_distr_l.\nrewrite <- Zmult_assoc.\napply ZOmod_eq."},{"statement":"(n a b : Z) : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a * b))%Z.","conclusion":"Z.rem n (a * b) = (n + - (n ÷ (a * b) * a * b))%Z","hypotheses":"(n a b : Z)","proofString":"rewrite <- Zmult_assoc.\napply ZOmod_eq."},{"statement":"(n a b : Z) : Z.rem n (a * b) = (n + - (n ÷ (a * b) * (a * b)))%Z.","conclusion":"Z.rem n (a * b) = (n + - (n ÷ (a * b) * (a * b)))%Z","hypotheses":"(n a b : Z)","proofString":"apply ZOmod_eq."},{"statement":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z) : Z.rem (Z.rem n (a * b)) b = Z.rem n b.","conclusion":"Z.rem (Z.rem n (a * b)) b = Z.rem n b","hypotheses":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z)","proofString":"rewrite H.\napply Z_rem_plus.\nrewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z) : Z.rem (n + - (n ÷ (a * b) * a) * b) b = Z.rem n b.","conclusion":"Z.rem (n + - (n ÷ (a * b) * a) * b) b = Z.rem n b","hypotheses":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z)","proofString":"apply Z_rem_plus.\nrewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z) : (0 <= (n + - (n ÷ (a * b) * a) * b) * n)%Z.","conclusion":"(0 <= (n + - (n ÷ (a * b) * a) * b) * n)%Z","hypotheses":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z)","proofString":"rewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z) : (0 <= Z.rem n (a * b) * n)%Z.","conclusion":"(0 <= Z.rem n (a * b) * n)%Z","hypotheses":"(n a b : Z) (H : Z.rem n (a * b) = (n + - (n ÷ (a * b) * a) * b)%Z)","proofString":"apply Zrem_sgn2."},{"statement":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) : (n mod (a * b) / a)%Z = ((n / a) mod b)%Z.","conclusion":"(n mod (a * b) / a)%Z = ((n / a) mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z)","proofString":"destruct (Zle_lt_or_eq _ _ Ha) as [Ha'|<-].\ndestruct (Zle_lt_or_eq _ _ Hb) as [Hb'|<-].\nrewrite Z.rem_mul_r, Z.add_comm, Z.mul_comm, Z.div_add_l by lia.\nrewrite (Zdiv_small (Zmod n a)).\napply Z.add_0_r.\nnow apply Z.mod_pos_bound.\nnow rewrite Z.mul_0_r, !Zmod_0_r, ?Zdiv_0_l.\nnow rewrite Z.mul_0_l, !Zdiv_0_r, Zmod_0_l."},{"statement":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) : (n mod (a * b) / a)%Z = ((n / a) mod b)%Z.","conclusion":"(n mod (a * b) / a)%Z = ((n / a) mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z)","proofString":"destruct (Zle_lt_or_eq _ _ Hb) as [Hb'|<-].\nrewrite Z.rem_mul_r, Z.add_comm, Z.mul_comm, Z.div_add_l by lia.\nrewrite (Zdiv_small (Zmod n a)).\napply Z.add_0_r.\nnow apply Z.mod_pos_bound.\nnow rewrite Z.mul_0_r, !Zmod_0_r, ?Zdiv_0_l."},{"statement":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z) : (n mod (a * b) / a)%Z = ((n / a) mod b)%Z.","conclusion":"(n mod (a * b) / a)%Z = ((n / a) mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z)","proofString":"rewrite Z.rem_mul_r, Z.add_comm, Z.mul_comm, Z.div_add_l by lia.\nrewrite (Zdiv_small (Zmod n a)).\napply Z.add_0_r.\nnow apply Z.mod_pos_bound."},{"statement":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z) : ((n / a) mod b + n mod a / a)%Z = ((n / a) mod b)%Z.","conclusion":"((n / a) mod b + n mod a / a)%Z = ((n / a) mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z)","proofString":"rewrite (Zdiv_small (Zmod n a)).\napply Z.add_0_r.\nnow apply Z.mod_pos_bound."},{"statement":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z) : ((n / a) mod b + 0)%Z = ((n / a) mod b)%Z.","conclusion":"((n / a) mod b + 0)%Z = ((n / a) mod b)%Z","hypotheses":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z)","proofString":"apply Z.add_0_r."},{"statement":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z) : (0 <= n mod a < a)%Z.","conclusion":"(0 <= n mod a < a)%Z","hypotheses":"(n a b : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= b)%Z) (Ha' : (0 < a)%Z) (Hb' : (0 < b)%Z)","proofString":"now apply Z.mod_pos_bound."},{"statement":"(n a : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= 0)%Z) (Ha' : (0 < a)%Z) : (n mod (a * 0) / a)%Z = ((n / a) mod 0)%Z.","conclusion":"(n mod (a * 0) / a)%Z = ((n / a) mod 0)%Z","hypotheses":"(n a : Z) (Ha : (0 <= a)%Z) (Hb : (0 <= 0)%Z) (Ha' : (0 < a)%Z)","proofString":"now rewrite Z.mul_0_r, !Zmod_0_r, ?Zdiv_0_l."},{"statement":"(n b : Z) (Ha : (0 <= 0)%Z) (Hb : (0 <= b)%Z) : (n mod (0 * b) / 0)%Z = ((n / 0) mod b)%Z.","conclusion":"(n mod (0 * b) / 0)%Z = ((n / 0) mod b)%Z","hypotheses":"(n b : Z) (Ha : (0 <= 0)%Z) (Hb : (0 <= b)%Z)","proofString":"now rewrite Z.mul_0_l, !Zdiv_0_r, Zmod_0_l."},{"statement":"(n a b : Z) : (Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b.","conclusion":"(Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b","hypotheses":"(n a b : Z)","proofString":"destruct (Z.eq_dec a 0) as [Za|Za].\nrewrite Za.\nnow rewrite 2!Zquot_0_r, Zrem_0_l.\nassert (Z.rem n (a * b) = n + - (Z.quot (Z.quot n a) b * b) * a)%Z.\nrewrite (ZOmod_eq n (a * b)) at 1.\nrewrite Zquot_Zquot.\nring.\nrewrite H.\nrewrite Z_quot_plus with (2 := Za).\napply sym_eq.\napply ZOmod_eq.\nrewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (Za : a = 0%Z) : (Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b.","conclusion":"(Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b","hypotheses":"(n a b : Z) (Za : a = 0%Z)","proofString":"rewrite Za.\nnow rewrite 2!Zquot_0_r, Zrem_0_l."},{"statement":"(n a b : Z) (Za : a = 0%Z) : (Z.rem n (0 * b) ÷ 0)%Z = Z.rem (n ÷ 0) b.","conclusion":"(Z.rem n (0 * b) ÷ 0)%Z = Z.rem (n ÷ 0) b","hypotheses":"(n a b : Z) (Za : a = 0%Z)","proofString":"now rewrite 2!Zquot_0_r, Zrem_0_l."},{"statement":"(n a b : Z) (Za : a <> 0%Z) : (Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b.","conclusion":"(Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b","hypotheses":"(n a b : Z) (Za : a <> 0%Z)","proofString":"assert (Z.rem n (a * b) = n + - (Z.quot (Z.quot n a) b * b) * a)%Z.\nrewrite (ZOmod_eq n (a * b)) at 1.\nrewrite Zquot_Zquot.\nring.\nrewrite H.\nrewrite Z_quot_plus with (2 := Za).\napply sym_eq.\napply ZOmod_eq.\nrewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (Za : a <> 0%Z) : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z.","conclusion":"Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z","hypotheses":"(n a b : Z) (Za : a <> 0%Z)","proofString":"rewrite (ZOmod_eq n (a * b)) at 1.\nrewrite Zquot_Zquot.\nring."},{"statement":"(n a b : Z) (Za : a <> 0%Z) : (n - n ÷ (a * b) * (a * b))%Z = (n + - (n ÷ a ÷ b * b) * a)%Z.","conclusion":"(n - n ÷ (a * b) * (a * b))%Z = (n + - (n ÷ a ÷ b * b) * a)%Z","hypotheses":"(n a b : Z) (Za : a <> 0%Z)","proofString":"rewrite Zquot_Zquot.\nring."},{"statement":"(n a b : Z) (Za : a <> 0%Z) : (n - n ÷ (a * b) * (a * b))%Z = (n + - (n ÷ (a * b) * b) * a)%Z.","conclusion":"(n - n ÷ (a * b) * (a * b))%Z = (n + - (n ÷ (a * b) * b) * a)%Z","hypotheses":"(n a b : Z) (Za : a <> 0%Z)","proofString":"ring."},{"statement":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z) : (Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b.","conclusion":"(Z.rem n (a * b) ÷ a)%Z = Z.rem (n ÷ a) b","hypotheses":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z)","proofString":"rewrite H.\nrewrite Z_quot_plus with (2 := Za).\napply sym_eq.\napply ZOmod_eq.\nrewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z) : ((n + - (n ÷ a ÷ b * b) * a) ÷ a)%Z = Z.rem (n ÷ a) b.","conclusion":"((n + - (n ÷ a ÷ b * b) * a) ÷ a)%Z = Z.rem (n ÷ a) b","hypotheses":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z)","proofString":"rewrite Z_quot_plus with (2 := Za).\napply sym_eq.\napply ZOmod_eq.\nrewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z) : (n ÷ a + - (n ÷ a ÷ b * b))%Z = Z.rem (n ÷ a) b.","conclusion":"(n ÷ a + - (n ÷ a ÷ b * b))%Z = Z.rem (n ÷ a) b","hypotheses":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z)","proofString":"apply sym_eq.\napply ZOmod_eq."},{"statement":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z) : Z.rem (n ÷ a) b = (n ÷ a + - (n ÷ a ÷ b * b))%Z.","conclusion":"Z.rem (n ÷ a) b = (n ÷ a + - (n ÷ a ÷ b * b))%Z","hypotheses":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z)","proofString":"apply ZOmod_eq."},{"statement":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z) : (0 <= (n + - (n ÷ a ÷ b * b) * a) * n)%Z.","conclusion":"(0 <= (n + - (n ÷ a ÷ b * b) * a) * n)%Z","hypotheses":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z)","proofString":"rewrite <- H.\napply Zrem_sgn2."},{"statement":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z) : (0 <= Z.rem n (a * b) * n)%Z.","conclusion":"(0 <= Z.rem n (a * b) * n)%Z","hypotheses":"(n a b : Z) (Za : a <> 0%Z) (H : Z.rem n (a * b) = (n + - (n ÷ a ÷ b * b) * a)%Z)","proofString":"apply Zrem_sgn2."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) : (a ÷ b)%Z = 0%Z.","conclusion":"(a ÷ b)%Z = 0%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z)","proofString":"destruct (Zle_or_lt 0 a) as [H|H].\napply Z.quot_small.\nsplit.\nexact H.\nnow rewrite Z.abs_eq in Ha.\napply Z.opp_inj.\nrewrite <- Zquot_opp_l, Z.opp_0.\napply Z.quot_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : (a ÷ b)%Z = 0%Z.","conclusion":"(a ÷ b)%Z = 0%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"apply Z.quot_small.\nsplit.\nexact H.\nnow rewrite Z.abs_eq in Ha."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : (0 <= a < b)%Z.","conclusion":"(0 <= a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"split.\nexact H.\nnow rewrite Z.abs_eq in Ha."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : (0 <= a)%Z.","conclusion":"(0 <= a)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"exact H."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : (a < b)%Z.","conclusion":"(a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"now rewrite Z.abs_eq in Ha."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : (a ÷ b)%Z = 0%Z.","conclusion":"(a ÷ b)%Z = 0%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"apply Z.opp_inj.\nrewrite <- Zquot_opp_l, Z.opp_0.\napply Z.quot_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : (- (a ÷ b))%Z = (- 0)%Z.","conclusion":"(- (a ÷ b))%Z = (- 0)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"rewrite <- Zquot_opp_l, Z.opp_0.\napply Z.quot_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : (- a ÷ b)%Z = 0%Z.","conclusion":"(- a ÷ b)%Z = 0%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"apply Z.quot_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : (0 <= - a < b)%Z.","conclusion":"(0 <= - a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"generalize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : ((a <= 0)%Z -> Z.abs a = (- a)%Z) -> (0 <= - a < b)%Z.","conclusion":"((a <= 0)%Z -> Z.abs a = (- a)%Z) -> (0 <= - a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"lia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) : Z.rem a b = a.","conclusion":"Z.rem a b = a","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z)","proofString":"destruct (Zle_or_lt 0 a) as [H|H].\napply Z.rem_small.\nsplit.\nexact H.\nnow rewrite Z.abs_eq in Ha.\napply Z.opp_inj.\nrewrite <- Zrem_opp_l.\napply Z.rem_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : Z.rem a b = a.","conclusion":"Z.rem a b = a","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"apply Z.rem_small.\nsplit.\nexact H.\nnow rewrite Z.abs_eq in Ha."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : (0 <= a < b)%Z.","conclusion":"(0 <= a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"split.\nexact H.\nnow rewrite Z.abs_eq in Ha."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : (0 <= a)%Z.","conclusion":"(0 <= a)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"exact H."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z) : (a < b)%Z.","conclusion":"(a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (0 <= a)%Z)","proofString":"now rewrite Z.abs_eq in Ha."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : Z.rem a b = a.","conclusion":"Z.rem a b = a","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"apply Z.opp_inj.\nrewrite <- Zrem_opp_l.\napply Z.rem_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : (- Z.rem a b)%Z = (- a)%Z.","conclusion":"(- Z.rem a b)%Z = (- a)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"rewrite <- Zrem_opp_l.\napply Z.rem_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : Z.rem (- a) b = (- a)%Z.","conclusion":"Z.rem (- a) b = (- a)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"apply Z.rem_small.\ngeneralize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : (0 <= - a < b)%Z.","conclusion":"(0 <= - a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"generalize (Zabs_non_eq a).\nlia."},{"statement":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z) : ((a <= 0)%Z -> Z.abs a = (- a)%Z) -> (0 <= - a < b)%Z.","conclusion":"((a <= 0)%Z -> Z.abs a = (- a)%Z) -> (0 <= - a < b)%Z","hypotheses":"(a b : Z) (Ha : (Z.abs a < b)%Z) (H : (a < 0)%Z)","proofString":"lia."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) : ((a + b) ÷ c)%Z = (a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c)%Z.","conclusion":"((a + b) ÷ c)%Z = (a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z)","proofString":"destruct (Z.eq_dec c 0) as [Zc|Zc].\nnow rewrite Zc, 4!Zquot_0_r.\napply Zmult_reg_r with (1 := Zc).\nrewrite 2!Zmult_plus_distr_l.\nassert (forall d, Z.quot d c * c = d - Z.rem d c)%Z.\nintros d.\nrewrite ZOmod_eq.\nring.\nrewrite 4!H.\nrewrite <- Zplus_rem with (1 := Hab).\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c = 0%Z) : ((a + b) ÷ c)%Z = (a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c)%Z.","conclusion":"((a + b) ÷ c)%Z = (a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c = 0%Z)","proofString":"now rewrite Zc, 4!Zquot_0_r."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) : ((a + b) ÷ c)%Z = (a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c)%Z.","conclusion":"((a + b) ÷ c)%Z = (a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z)","proofString":"apply Zmult_reg_r with (1 := Zc).\nrewrite 2!Zmult_plus_distr_l.\nassert (forall d, Z.quot d c * c = d - Z.rem d c)%Z.\nintros d.\nrewrite ZOmod_eq.\nring.\nrewrite 4!H.\nrewrite <- Zplus_rem with (1 := Hab).\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) : ((a + b) ÷ c * c)%Z = ((a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c) * c)%Z.","conclusion":"((a + b) ÷ c * c)%Z = ((a ÷ c + b ÷ c + (Z.rem a c + Z.rem b c) ÷ c) * c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z)","proofString":"rewrite 2!Zmult_plus_distr_l.\nassert (forall d, Z.quot d c * c = d - Z.rem d c)%Z.\nintros d.\nrewrite ZOmod_eq.\nring.\nrewrite 4!H.\nrewrite <- Zplus_rem with (1 := Hab).\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) : ((a + b) ÷ c * c)%Z =\n(a ÷ c * c + b ÷ c * c + (Z.rem a c + Z.rem b c) ÷ c * c)%Z.","conclusion":"((a + b) ÷ c * c)%Z =\n(a ÷ c * c + b ÷ c * c + (Z.rem a c + Z.rem b c) ÷ c * c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z)","proofString":"assert (forall d, Z.quot d c * c = d - Z.rem d c)%Z.\nintros d.\nrewrite ZOmod_eq.\nring.\nrewrite 4!H.\nrewrite <- Zplus_rem with (1 := Hab).\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) : forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z.","conclusion":"forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z)","proofString":"intros d.\nrewrite ZOmod_eq.\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (d : Z) : (d ÷ c * c)%Z = (d - Z.rem d c)%Z.","conclusion":"(d ÷ c * c)%Z = (d - Z.rem d c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (d : Z)","proofString":"rewrite ZOmod_eq.\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (d : Z) : (d ÷ c * c)%Z = (d - (d - d ÷ c * c))%Z.","conclusion":"(d ÷ c * c)%Z = (d - (d - d ÷ c * c))%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (d : Z)","proofString":"ring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (H : forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z) : ((a + b) ÷ c * c)%Z =\n(a ÷ c * c + b ÷ c * c + (Z.rem a c + Z.rem b c) ÷ c * c)%Z.","conclusion":"((a + b) ÷ c * c)%Z =\n(a ÷ c * c + b ÷ c * c + (Z.rem a c + Z.rem b c) ÷ c * c)%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (H : forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z)","proofString":"rewrite 4!H.\nrewrite <- Zplus_rem with (1 := Hab).\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (H : forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z) : (a + b - Z.rem (a + b) c)%Z =\n(a - Z.rem a c + (b - Z.rem b c) +\n (Z.rem a c + Z.rem b c - Z.rem (Z.rem a c + Z.rem b c) c))%Z.","conclusion":"(a + b - Z.rem (a + b) c)%Z =\n(a - Z.rem a c + (b - Z.rem b c) +\n (Z.rem a c + Z.rem b c - Z.rem (Z.rem a c + Z.rem b c) c))%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (H : forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z)","proofString":"rewrite <- Zplus_rem with (1 := Hab).\nring."},{"statement":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (H : forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z) : (a + b - Z.rem (a + b) c)%Z =\n(a - Z.rem a c + (b - Z.rem b c) + (Z.rem a c + Z.rem b c - Z.rem (a + b) c))%Z.","conclusion":"(a + b - Z.rem (a + b) c)%Z =\n(a - Z.rem a c + (b - Z.rem b c) + (Z.rem a c + Z.rem b c - Z.rem (a + b) c))%Z","hypotheses":"(a b c : Z) (Hab : (0 <= a * b)%Z) (Zc : c <> 0%Z) (H : forall d : Z, (d ÷ c * c)%Z = (d - Z.rem d c)%Z)","proofString":"ring."},{"statement":"(v : Z) (Hp : (0 < 0)%Z -> (0 <= v)%Z) (Hn : (0 < - 0)%Z -> (0 <= - v)%Z) : (0 <= 0 * v)%Z.","conclusion":"(0 <= 0 * v)%Z","hypotheses":"(v : Z) (Hp : (0 < 0)%Z -> (0 <= v)%Z) (Hn : (0 < - 0)%Z -> (0 <= - v)%Z)","proofString":"easy."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.pos u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.pos u)%Z -> (0 <= - v)%Z) : (0 <= Z.pos u * v)%Z.","conclusion":"(0 <= Z.pos u * v)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.pos u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.pos u)%Z -> (0 <= - v)%Z)","proofString":"apply Zmult_le_0_compat.\neasy.\nnow apply Hp."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.pos u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.pos u)%Z -> (0 <= - v)%Z) : (0 <= Z.pos u)%Z.","conclusion":"(0 <= Z.pos u)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.pos u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.pos u)%Z -> (0 <= - v)%Z)","proofString":"easy."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.pos u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.pos u)%Z -> (0 <= - v)%Z) : (0 <= v)%Z.","conclusion":"(0 <= v)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.pos u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.pos u)%Z -> (0 <= - v)%Z)","proofString":"now apply Hp."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z) : (0 <= Z.neg u * v)%Z.","conclusion":"(0 <= Z.neg u * v)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z)","proofString":"replace (Zneg u * v)%Z with (Zpos u * (-v))%Z.\napply Zmult_le_0_compat.\neasy.\nnow apply Hn.\nrewrite <- Zopp_mult_distr_r.\napply Zopp_mult_distr_l."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z) : (0 <= Z.pos u * - v)%Z.","conclusion":"(0 <= Z.pos u * - v)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z)","proofString":"apply Zmult_le_0_compat.\neasy.\nnow apply Hn."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z) : (0 <= Z.pos u)%Z.","conclusion":"(0 <= Z.pos u)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z)","proofString":"easy."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z) : (0 <= - v)%Z.","conclusion":"(0 <= - v)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z)","proofString":"now apply Hn."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z) : (Z.pos u * - v)%Z = (Z.neg u * v)%Z.","conclusion":"(Z.pos u * - v)%Z = (Z.neg u * v)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z)","proofString":"rewrite <- Zopp_mult_distr_r.\napply Zopp_mult_distr_l."},{"statement":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z) : (- (Z.pos u * v))%Z = (Z.neg u * v)%Z.","conclusion":"(- (Z.pos u * v))%Z = (Z.neg u * v)%Z","hypotheses":"(u : positive) (v : Z) (Hp : (0 < Z.neg u)%Z -> (0 <= v)%Z) (Hn : (0 < - Z.neg u)%Z -> (0 <= - v)%Z)","proofString":"apply Zopp_mult_distr_l."},{"statement":"(u v : Z) (Hv : (0 <= v)%Z) : (0 <= u * (u ÷ v))%Z.","conclusion":"(0 <= u * (u ÷ v))%Z","hypotheses":"(u v : Z) (Hv : (0 <= v)%Z)","proofString":"apply Zsame_sign_imp ; intros Hu.\napply Z_quot_pos with (2 := Hv).\nnow apply Zlt_le_weak.\nrewrite <- Zquot_opp_l.\napply Z_quot_pos with (2 := Hv).\nnow apply Zlt_le_weak."},{"statement":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < u)%Z) : (0 <= u ÷ v)%Z.","conclusion":"(0 <= u ÷ v)%Z","hypotheses":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < u)%Z)","proofString":"apply Z_quot_pos with (2 := Hv).\nnow apply Zlt_le_weak."},{"statement":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < u)%Z) : (0 <= u)%Z.","conclusion":"(0 <= u)%Z","hypotheses":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < u)%Z)","proofString":"now apply Zlt_le_weak."},{"statement":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < - u)%Z) : (0 <= - (u ÷ v))%Z.","conclusion":"(0 <= - (u ÷ v))%Z","hypotheses":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < - u)%Z)","proofString":"rewrite <- Zquot_opp_l.\napply Z_quot_pos with (2 := Hv).\nnow apply Zlt_le_weak."},{"statement":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < - u)%Z) : (0 <= - u ÷ v)%Z.","conclusion":"(0 <= - u ÷ v)%Z","hypotheses":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < - u)%Z)","proofString":"apply Z_quot_pos with (2 := Hv).\nnow apply Zlt_le_weak."},{"statement":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < - u)%Z) : (0 <= - u)%Z.","conclusion":"(0 <= - u)%Z","hypotheses":"(u v : Z) (Hv : (0 <= v)%Z) (Hu : (0 < - u)%Z)","proofString":"now apply Zlt_le_weak."},{"statement":"(x y : Z) : Zeq_bool_prop x y (Zeq_bool x y).","conclusion":"Zeq_bool_prop x y (Zeq_bool x y)","hypotheses":"(x y : Z)","proofString":"generalize (Zeq_is_eq_bool x y).\ncase (Zeq_bool x y) ; intros (H1, H2) ; constructor.\nnow apply H2.\nintros H.\nspecialize (H1 H).\ndiscriminate H1."},{"statement":"(x y : Z) : x = y <-> Zeq_bool x y = true -> Zeq_bool_prop x y (Zeq_bool x y).","conclusion":"x = y <-> Zeq_bool x y = true -> Zeq_bool_prop x y (Zeq_bool x y)","hypotheses":"(x y : Z)","proofString":"case (Zeq_bool x y) ; intros (H1, H2) ; constructor.\nnow apply H2.\nintros H.\nspecialize (H1 H).\ndiscriminate H1."},{"statement":"(x y : Z) (H1 : x = y -> true = true) (H2 : true = true -> x = y) : x = y.","conclusion":"x = y","hypotheses":"(x y : Z) (H1 : x = y -> true = true) (H2 : true = true -> x = y)","proofString":"now apply H2."},{"statement":"(x y : Z) (H1 : x = y -> false = true) (H2 : false = true -> x = y) : x <> y.","conclusion":"x <> y","hypotheses":"(x y : Z) (H1 : x = y -> false = true) (H2 : false = true -> x = y)","proofString":"intros H.\nspecialize (H1 H).\ndiscriminate H1."},{"statement":"(x y : Z) (H1 : x = y -> false = true) (H2 : false = true -> x = y) (H : x = y) : False.","conclusion":"False","hypotheses":"(x y : Z) (H1 : x = y -> false = true) (H2 : false = true -> x = y) (H : x = y)","proofString":"specialize (H1 H).\ndiscriminate H1."},{"statement":"(x y : Z) (H1 : false = true) (H2 : false = true -> x = y) (H : x = y) : False.","conclusion":"False","hypotheses":"(x y : Z) (H1 : false = true) (H2 : false = true -> x = y) (H : x = y)","proofString":"discriminate H1."},{"statement":"(x y : Z) : x = y -> Zeq_bool x y = true.","conclusion":"x = y -> Zeq_bool x y = true","hypotheses":"(x y : Z)","proofString":"apply -> Zeq_is_eq_bool."},{"statement":"(x y : Z) : x <> y -> Zeq_bool x y = false.","conclusion":"x <> y -> Zeq_bool x y = false","hypotheses":"(x y : Z)","proofString":"generalize (proj2 (Zeq_is_eq_bool x y)).\ncase Zeq_bool.\nintros He Hn.\nelim Hn.\nnow apply He.\nnow intros _ _."},{"statement":"(x y : Z) : (Zeq_bool x y = true -> x = y) -> x <> y -> Zeq_bool x y = false.","conclusion":"(Zeq_bool x y = true -> x = y) -> x <> y -> Zeq_bool x y = false","hypotheses":"(x y : Z)","proofString":"case Zeq_bool.\nintros He Hn.\nelim Hn.\nnow apply He.\nnow intros _ _."},{"statement":"(x y : Z) : (true = true -> x = y) -> x <> y -> true = false.","conclusion":"(true = true -> x = y) -> x <> y -> true = false","hypotheses":"(x y : Z)","proofString":"intros He Hn.\nelim Hn.\nnow apply He."},{"statement":"(x y : Z) (He : true = true -> x = y) (Hn : x <> y) : true = false.","conclusion":"true = false","hypotheses":"(x y : Z) (He : true = true -> x = y) (Hn : x <> y)","proofString":"elim Hn.\nnow apply He."},{"statement":"(x y : Z) (He : true = true -> x = y) (Hn : x <> y) : x = y.","conclusion":"x = y","hypotheses":"(x y : Z) (He : true = true -> x = y) (Hn : x <> y)","proofString":"now apply He."},{"statement":"(x y : Z) : (false = true -> x = y) -> x <> y -> false = false.","conclusion":"(false = true -> x = y) -> x <> y -> false = false","hypotheses":"(x y : Z)","proofString":"now intros _ _."},{"statement":"(x : Z) : Zeq_bool x x = true.","conclusion":"Zeq_bool x x = true","hypotheses":"(x : Z)","proofString":"now apply Zeq_bool_true."},{"statement":"(x y : Z) : Zeq_bool (- x) (- y) = Zeq_bool x y.","conclusion":"Zeq_bool (- x) (- y) = Zeq_bool x y","hypotheses":"(x y : Z)","proofString":"rewrite Zeq_bool_opp.\napply f_equal, Z.opp_involutive."},{"statement":"(x y : Z) : Zeq_bool x (- - y) = Zeq_bool x y.","conclusion":"Zeq_bool x (- - y) = Zeq_bool x y","hypotheses":"(x y : Z)","proofString":"apply f_equal, Z.opp_involutive."},{"statement":"(x y : Z) : Zle_bool_prop x y (x <=? y)%Z.","conclusion":"Zle_bool_prop x y (x <=? y)%Z","hypotheses":"(x y : Z)","proofString":"generalize (Zle_is_le_bool x y).\ncase Zle_bool ; intros (H1, H2) ; constructor.\nnow apply H2.\ndestruct (Zle_or_lt x y) as [H|H].\nnow specialize (H1 H).\nexact H."},{"statement":"(x y : Z) : (x <= y)%Z <-> (x <=? y)%Z = true -> Zle_bool_prop x y (x <=? y)%Z.","conclusion":"(x <= y)%Z <-> (x <=? y)%Z = true -> Zle_bool_prop x y (x <=? y)%Z","hypotheses":"(x y : Z)","proofString":"case Zle_bool ; intros (H1, H2) ; constructor.\nnow apply H2.\ndestruct (Zle_or_lt x y) as [H|H].\nnow specialize (H1 H).\nexact H."},{"statement":"(x y : Z) (H1 : (x <= y)%Z -> true = true) (H2 : true = true -> (x <= y)%Z) : (x <= y)%Z.","conclusion":"(x <= y)%Z","hypotheses":"(x y : Z) (H1 : (x <= y)%Z -> true = true) (H2 : true = true -> (x <= y)%Z)","proofString":"now apply H2."},{"statement":"(x y : Z) (H1 : (x <= y)%Z -> false = true) (H2 : false = true -> (x <= y)%Z) : (y < x)%Z.","conclusion":"(y < x)%Z","hypotheses":"(x y : Z) (H1 : (x <= y)%Z -> false = true) (H2 : false = true -> (x <= y)%Z)","proofString":"destruct (Zle_or_lt x y) as [H|H].\nnow specialize (H1 H).\nexact H."},{"statement":"(x y : Z) (H1 : (x <= y)%Z -> false = true) (H2 : false = true -> (x <= y)%Z) (H : (x <= y)%Z) : (y < x)%Z.","conclusion":"(y < x)%Z","hypotheses":"(x y : Z) (H1 : (x <= y)%Z -> false = true) (H2 : false = true -> (x <= y)%Z) (H : (x <= y)%Z)","proofString":"now specialize (H1 H)."},{"statement":"(x y : Z) (H1 : (x <= y)%Z -> false = true) (H2 : false = true -> (x <= y)%Z) (H : (y < x)%Z) : (y < x)%Z.","conclusion":"(y < x)%Z","hypotheses":"(x y : Z) (H1 : (x <= y)%Z -> false = true) (H2 : false = true -> (x <= y)%Z) (H : (y < x)%Z)","proofString":"exact H."},{"statement":"(x y : Z) : (x <= y)%Z -> (x <=? y)%Z = true.","conclusion":"(x <= y)%Z -> (x <=? y)%Z = true","hypotheses":"(x y : Z)","proofString":"apply (proj1 (Zle_is_le_bool x y))."},{"statement":"(x y : Z) (Hxy : (y < x)%Z) : (x <=? y)%Z = false.","conclusion":"(x <=? y)%Z = false","hypotheses":"(x y : Z) (Hxy : (y < x)%Z)","proofString":"generalize (Zle_cases x y).\ncase Zle_bool ; intros H.\nelim (Z.lt_irrefl x).\nnow apply Z.le_lt_trans with y.\napply refl_equal."},{"statement":"(x y : Z) (Hxy : (y < x)%Z) : (if (x <=? y)%Z then (x <= y)%Z else (x > y)%Z) -> (x <=? y)%Z = false.","conclusion":"(if (x <=? y)%Z then (x <= y)%Z else (x > y)%Z) -> (x <=? y)%Z = false","hypotheses":"(x y : Z) (Hxy : (y < x)%Z)","proofString":"case Zle_bool ; intros H.\nelim (Z.lt_irrefl x).\nnow apply Z.le_lt_trans with y.\napply refl_equal."},{"statement":"(x y : Z) (Hxy : (y < x)%Z) (H : (x <= y)%Z) : true = false.","conclusion":"true = false","hypotheses":"(x y : Z) (Hxy : (y < x)%Z) (H : (x <= y)%Z)","proofString":"elim (Z.lt_irrefl x).\nnow apply Z.le_lt_trans with y."},{"statement":"(x y : Z) (Hxy : (y < x)%Z) (H : (x <= y)%Z) : (x < x)%Z.","conclusion":"(x < x)%Z","hypotheses":"(x y : Z) (Hxy : (y < x)%Z) (H : (x <= y)%Z)","proofString":"now apply Z.le_lt_trans with y."},{"statement":"(x y : Z) (Hxy : (y < x)%Z) (H : (x > y)%Z) : false = false.","conclusion":"false = false","hypotheses":"(x y : Z) (Hxy : (y < x)%Z) (H : (x > y)%Z)","proofString":"apply refl_equal."},{"statement":"(x y : Z) : (- x <=? y)%Z = (- y <=? x)%Z.","conclusion":"(- x <=? y)%Z = (- y <=? x)%Z","hypotheses":"(x y : Z)","proofString":"case Zle_bool_spec ; intros Hxy ;  case Zle_bool_spec ; intros Hyx ; try easy ; lia."},{"statement":"(x y : Z) : (- x <=? - y)%Z = (y <=? x)%Z.","conclusion":"(- x <=? - y)%Z = (y <=? x)%Z","hypotheses":"(x y : Z)","proofString":"now rewrite Zle_bool_opp_l, Z.opp_involutive."},{"statement":"(x y : Z) : (x <=? - y)%Z = (y <=? - x)%Z.","conclusion":"(x <=? - y)%Z = (y <=? - x)%Z","hypotheses":"(x y : Z)","proofString":"rewrite <- (Z.opp_involutive x) at 1.\napply Zle_bool_opp."},{"statement":"(x y : Z) : (- - x <=? - y)%Z = (y <=? - x)%Z.","conclusion":"(- - x <=? - y)%Z = (y <=? - x)%Z","hypotheses":"(x y : Z)","proofString":"apply Zle_bool_opp."},{"statement":"(x y : Z) : Zlt_bool_prop x y (x <? y)%Z.","conclusion":"Zlt_bool_prop x y (x <? y)%Z","hypotheses":"(x y : Z)","proofString":"generalize (Zlt_is_lt_bool x y).\ncase Zlt_bool ; intros (H1, H2) ; constructor.\nnow apply H2.\ndestruct (Zle_or_lt y x) as [H|H].\nexact H.\nnow specialize (H1 H)."},{"statement":"(x y : Z) : (x < y)%Z <-> (x <? y)%Z = true -> Zlt_bool_prop x y (x <? y)%Z.","conclusion":"(x < y)%Z <-> (x <? y)%Z = true -> Zlt_bool_prop x y (x <? y)%Z","hypotheses":"(x y : Z)","proofString":"case Zlt_bool ; intros (H1, H2) ; constructor.\nnow apply H2.\ndestruct (Zle_or_lt y x) as [H|H].\nexact H.\nnow specialize (H1 H)."},{"statement":"(x y : Z) (H1 : (x < y)%Z -> true = true) (H2 : true = true -> (x < y)%Z) : (x < y)%Z.","conclusion":"(x < y)%Z","hypotheses":"(x y : Z) (H1 : (x < y)%Z -> true = true) (H2 : true = true -> (x < y)%Z)","proofString":"now apply H2."},{"statement":"(x y : Z) (H1 : (x < y)%Z -> false = true) (H2 : false = true -> (x < y)%Z) : (y <= x)%Z.","conclusion":"(y <= x)%Z","hypotheses":"(x y : Z) (H1 : (x < y)%Z -> false = true) (H2 : false = true -> (x < y)%Z)","proofString":"destruct (Zle_or_lt y x) as [H|H].\nexact H.\nnow specialize (H1 H)."},{"statement":"(x y : Z) (H1 : (x < y)%Z -> false = true) (H2 : false = true -> (x < y)%Z) (H : (y <= x)%Z) : (y <= x)%Z.","conclusion":"(y <= x)%Z","hypotheses":"(x y : Z) (H1 : (x < y)%Z -> false = true) (H2 : false = true -> (x < y)%Z) (H : (y <= x)%Z)","proofString":"exact H."},{"statement":"(x y : Z) (H1 : (x < y)%Z -> false = true) (H2 : false = true -> (x < y)%Z) (H : (x < y)%Z) : (y <= x)%Z.","conclusion":"(y <= x)%Z","hypotheses":"(x y : Z) (H1 : (x < y)%Z -> false = true) (H2 : false = true -> (x < y)%Z) (H : (x < y)%Z)","proofString":"now specialize (H1 H)."},{"statement":"(x y : Z) : (x < y)%Z -> (x <? y)%Z = true.","conclusion":"(x < y)%Z -> (x <? y)%Z = true","hypotheses":"(x y : Z)","proofString":"apply (proj1 (Zlt_is_lt_bool x y))."},{"statement":"(x y : Z) (Hxy : (y <= x)%Z) : (x <? y)%Z = false.","conclusion":"(x <? y)%Z = false","hypotheses":"(x y : Z) (Hxy : (y <= x)%Z)","proofString":"generalize (Zlt_cases x y).\ncase Zlt_bool ; intros H.\nelim (Z.lt_irrefl x).\nnow apply Z.lt_le_trans with y.\napply refl_equal."},{"statement":"(x y : Z) (Hxy : (y <= x)%Z) : (if (x <? y)%Z then (x < y)%Z else (x >= y)%Z) -> (x <? y)%Z = false.","conclusion":"(if (x <? y)%Z then (x < y)%Z else (x >= y)%Z) -> (x <? y)%Z = false","hypotheses":"(x y : Z) (Hxy : (y <= x)%Z)","proofString":"case Zlt_bool ; intros H.\nelim (Z.lt_irrefl x).\nnow apply Z.lt_le_trans with y.\napply refl_equal."},{"statement":"(x y : Z) (Hxy : (y <= x)%Z) (H : (x < y)%Z) : true = false.","conclusion":"true = false","hypotheses":"(x y : Z) (Hxy : (y <= x)%Z) (H : (x < y)%Z)","proofString":"elim (Z.lt_irrefl x).\nnow apply Z.lt_le_trans with y."},{"statement":"(x y : Z) (Hxy : (y <= x)%Z) (H : (x < y)%Z) : (x < x)%Z.","conclusion":"(x < x)%Z","hypotheses":"(x y : Z) (Hxy : (y <= x)%Z) (H : (x < y)%Z)","proofString":"now apply Z.lt_le_trans with y."},{"statement":"(x y : Z) (Hxy : (y <= x)%Z) (H : (x >= y)%Z) : false = false.","conclusion":"false = false","hypotheses":"(x y : Z) (Hxy : (y <= x)%Z) (H : (x >= y)%Z)","proofString":"apply refl_equal."},{"statement":"(x y : Z) : negb (x <=? y)%Z = (y <? x)%Z.","conclusion":"negb (x <=? y)%Z = (y <? x)%Z","hypotheses":"(x y : Z)","proofString":"case Zle_bool_spec ; intros H.\nnow rewrite Zlt_bool_false.\nnow rewrite Zlt_bool_true."},{"statement":"(x y : Z) (H : (x <= y)%Z) : negb true = (y <? x)%Z.","conclusion":"negb true = (y <? x)%Z","hypotheses":"(x y : Z) (H : (x <= y)%Z)","proofString":"now rewrite Zlt_bool_false."},{"statement":"(x y : Z) (H : (y < x)%Z) : negb false = (y <? x)%Z.","conclusion":"negb false = (y <? x)%Z","hypotheses":"(x y : Z) (H : (y < x)%Z)","proofString":"now rewrite Zlt_bool_true."},{"statement":"(x y : Z) : negb (x <? y)%Z = (y <=? x)%Z.","conclusion":"negb (x <? y)%Z = (y <=? x)%Z","hypotheses":"(x y : Z)","proofString":"case Zlt_bool_spec ; intros H.\nnow rewrite Zle_bool_false.\nnow rewrite Zle_bool_true."},{"statement":"(x y : Z) (H : (x < y)%Z) : negb true = (y <=? x)%Z.","conclusion":"negb true = (y <=? x)%Z","hypotheses":"(x y : Z) (H : (x < y)%Z)","proofString":"now rewrite Zle_bool_false."},{"statement":"(x y : Z) (H : (y <= x)%Z) : negb false = (y <=? x)%Z.","conclusion":"negb false = (y <=? x)%Z","hypotheses":"(x y : Z) (H : (y <= x)%Z)","proofString":"now rewrite Zle_bool_true."},{"statement":"(x y : Z) : (- x <? y)%Z = (- y <? x)%Z.","conclusion":"(- x <? y)%Z = (- y <? x)%Z","hypotheses":"(x y : Z)","proofString":"rewrite <- 2! negb_Zle_bool.\napply f_equal, Zle_bool_opp_r."},{"statement":"(x y : Z) : negb (y <=? - x)%Z = negb (x <=? - y)%Z.","conclusion":"negb (y <=? - x)%Z = negb (x <=? - y)%Z","hypotheses":"(x y : Z)","proofString":"apply f_equal, Zle_bool_opp_r."},{"statement":"(x y : Z) : (x <? - y)%Z = (y <? - x)%Z.","conclusion":"(x <? - y)%Z = (y <? - x)%Z","hypotheses":"(x y : Z)","proofString":"rewrite <- 2! negb_Zle_bool.\napply f_equal, Zle_bool_opp_l."},{"statement":"(x y : Z) : negb (- y <=? x)%Z = negb (- x <=? y)%Z.","conclusion":"negb (- y <=? x)%Z = negb (- x <=? y)%Z","hypotheses":"(x y : Z)","proofString":"apply f_equal, Zle_bool_opp_l."},{"statement":"(x y : Z) : (- x <? - y)%Z = (y <? x)%Z.","conclusion":"(- x <? - y)%Z = (y <? x)%Z","hypotheses":"(x y : Z)","proofString":"rewrite <- 2! negb_Zle_bool.\napply f_equal, Zle_bool_opp."},{"statement":"(x y : Z) : negb (- y <=? - x)%Z = negb (x <=? y)%Z.","conclusion":"negb (- y <=? - x)%Z = negb (x <=? y)%Z","hypotheses":"(x y : Z)","proofString":"apply f_equal, Zle_bool_opp."},{"statement":"(x y : Z) : Zcompare_prop x y (x ?= y)%Z.","conclusion":"Zcompare_prop x y (x ?= y)%Z","hypotheses":"(x y : Z)","proofString":"destruct (Z_dec x y) as [[H|H]|H].\ngeneralize (Zlt_compare _ _ H).\ncase (Z.compare x y) ; try easy.\nnow constructor.\ngeneralize (Zgt_compare _ _ H).\ncase (Z.compare x y) ; try easy.\nconstructor.\nnow apply Z.gt_lt.\ngeneralize (proj2 (Zcompare_Eq_iff_eq _ _) H).\ncase (Z.compare x y) ; try easy.\nnow constructor."},{"statement":"(x y : Z) (H : (x < y)%Z) : Zcompare_prop x y (x ?= y)%Z.","conclusion":"Zcompare_prop x y (x ?= y)%Z","hypotheses":"(x y : Z) (H : (x < y)%Z)","proofString":"generalize (Zlt_compare _ _ H).\ncase (Z.compare x y) ; try easy.\nnow constructor."},{"statement":"(x y : Z) (H : (x < y)%Z) : match (x ?= y)%Z with\n| Lt => True\n| _ => False\nend -> Zcompare_prop x y (x ?= y)%Z.","conclusion":"match (x ?= y)%Z with\n| Lt => True\n| _ => False\nend -> Zcompare_prop x y (x ?= y)%Z","hypotheses":"(x y : Z) (H : (x < y)%Z)","proofString":"case (Z.compare x y) ; try easy.\nnow constructor."},{"statement":"(x y : Z) (H : (x < y)%Z) : True -> Zcompare_prop x y Lt.","conclusion":"True -> Zcompare_prop x y Lt","hypotheses":"(x y : Z) (H : (x < y)%Z)","proofString":"now constructor."},{"statement":"(x y : Z) (H : (x > y)%Z) : Zcompare_prop x y (x ?= y)%Z.","conclusion":"Zcompare_prop x y (x ?= y)%Z","hypotheses":"(x y : Z) (H : (x > y)%Z)","proofString":"generalize (Zgt_compare _ _ H).\ncase (Z.compare x y) ; try easy.\nconstructor.\nnow apply Z.gt_lt."},{"statement":"(x y : Z) (H : (x > y)%Z) : match (x ?= y)%Z with\n| Gt => True\n| _ => False\nend -> Zcompare_prop x y (x ?= y)%Z.","conclusion":"match (x ?= y)%Z with\n| Gt => True\n| _ => False\nend -> Zcompare_prop x y (x ?= y)%Z","hypotheses":"(x y : Z) (H : (x > y)%Z)","proofString":"case (Z.compare x y) ; try easy.\nconstructor.\nnow apply Z.gt_lt."},{"statement":"(x y : Z) (H : (x > y)%Z) : True -> Zcompare_prop x y Gt.","conclusion":"True -> Zcompare_prop x y Gt","hypotheses":"(x y : Z) (H : (x > y)%Z)","proofString":"constructor.\nnow apply Z.gt_lt."},{"statement":"(x y : Z) (H : (x > y)%Z) (H0 : True) : (y < x)%Z.","conclusion":"(y < x)%Z","hypotheses":"(x y : Z) (H : (x > y)%Z) (H0 : True)","proofString":"now apply Z.gt_lt."},{"statement":"(x y : Z) (H : x = y) : Zcompare_prop x y (x ?= y)%Z.","conclusion":"Zcompare_prop x y (x ?= y)%Z","hypotheses":"(x y : Z) (H : x = y)","proofString":"generalize (proj2 (Zcompare_Eq_iff_eq _ _) H).\ncase (Z.compare x y) ; try easy.\nnow constructor."},{"statement":"(x y : Z) (H : x = y) : (x ?= y)%Z = Eq -> Zcompare_prop x y (x ?= y)%Z.","conclusion":"(x ?= y)%Z = Eq -> Zcompare_prop x y (x ?= y)%Z","hypotheses":"(x y : Z) (H : x = y)","proofString":"case (Z.compare x y) ; try easy.\nnow constructor."},{"statement":"(x y : Z) (H : x = y) : Eq = Eq -> Zcompare_prop x y Eq.","conclusion":"Eq = Eq -> Zcompare_prop x y Eq","hypotheses":"(x y : Z) (H : x = y)","proofString":"now constructor."},{"statement":"(x y : Z) : x = y -> (x ?= y)%Z = Eq.","conclusion":"x = y -> (x ?= y)%Z = Eq","hypotheses":"(x y : Z)","proofString":"apply <- Zcompare_Eq_iff_eq."},{"statement":"(x y : Z) : (y < x)%Z -> (x ?= y)%Z = Gt.","conclusion":"(y < x)%Z -> (x ?= y)%Z = Gt","hypotheses":"(x y : Z)","proofString":"apply Z.lt_gt."},{"statement":"(y : Z) : SpecFloat.cond_Zopp (negb true) y = (- SpecFloat.cond_Zopp true y)%Z.","conclusion":"SpecFloat.cond_Zopp (negb true) y = (- SpecFloat.cond_Zopp true y)%Z","hypotheses":"(y : Z)","proofString":"apply sym_eq, Z.opp_involutive."},{"statement":"(y : Z) : SpecFloat.cond_Zopp (negb false) y = (- SpecFloat.cond_Zopp false y)%Z.","conclusion":"SpecFloat.cond_Zopp (negb false) y = (- SpecFloat.cond_Zopp false y)%Z","hypotheses":"(y : Z)","proofString":"easy."},{"statement":"(m : Z) : Z.abs (SpecFloat.cond_Zopp true m) = Z.abs m.","conclusion":"Z.abs (SpecFloat.cond_Zopp true m) = Z.abs m","hypotheses":"(m : Z)","proofString":"apply Zabs_Zopp."},{"statement":"(m : Z) : Z.abs (SpecFloat.cond_Zopp false m) = Z.abs m.","conclusion":"Z.abs (SpecFloat.cond_Zopp false m) = Z.abs m","hypotheses":"(m : Z)","proofString":"apply refl_equal."},{"statement":"(m : Z) : SpecFloat.cond_Zopp (m <? 0)%Z m = Z.abs m.","conclusion":"SpecFloat.cond_Zopp (m <? 0)%Z m = Z.abs m","hypotheses":"(m : Z)","proofString":"apply sym_eq.\ncase Zlt_bool_spec ; intros Hm.\napply Zabs_non_eq.\nnow apply Zlt_le_weak.\nnow apply Z.abs_eq."},{"statement":"(m : Z) : Z.abs m = SpecFloat.cond_Zopp (m <? 0)%Z m.","conclusion":"Z.abs m = SpecFloat.cond_Zopp (m <? 0)%Z m","hypotheses":"(m : Z)","proofString":"case Zlt_bool_spec ; intros Hm.\napply Zabs_non_eq.\nnow apply Zlt_le_weak.\nnow apply Z.abs_eq."},{"statement":"(m : Z) (Hm : (m < 0)%Z) : Z.abs m = SpecFloat.cond_Zopp true m.","conclusion":"Z.abs m = SpecFloat.cond_Zopp true m","hypotheses":"(m : Z) (Hm : (m < 0)%Z)","proofString":"apply Zabs_non_eq.\nnow apply Zlt_le_weak."},{"statement":"(m : Z) (Hm : (m < 0)%Z) : (m <= 0)%Z.","conclusion":"(m <= 0)%Z","hypotheses":"(m : Z) (Hm : (m < 0)%Z)","proofString":"now apply Zlt_le_weak."},{"statement":"(m : Z) (Hm : (0 <= m)%Z) : Z.abs m = SpecFloat.cond_Zopp false m.","conclusion":"Z.abs m = SpecFloat.cond_Zopp false m","hypotheses":"(m : Z) (Hm : (0 <= m)%Z)","proofString":"now apply Z.abs_eq."},{"statement":"(m n : Z) : Zeq_bool (- m) n = Zeq_bool m (- n).","conclusion":"Zeq_bool (- m) n = Zeq_bool m (- n)","hypotheses":"(m n : Z)","proofString":"apply Zeq_bool_opp."},{"statement":"(m n : Z) : Zeq_bool m n = Zeq_bool m n.","conclusion":"Zeq_bool m n = Zeq_bool m n","hypotheses":"(m n : Z)","proofString":"easy."},{"statement":"(v : Z) (e : positive) : Zfast_pow_pos v e = Z.pow_pos v e.","conclusion":"Zfast_pow_pos v e = Z.pow_pos v e","hypotheses":"(v : Z) (e : positive)","proofString":"rewrite <- (Zmult_1_r (Zfast_pow_pos v e)).\nunfold Z.pow_pos.\ngeneralize 1%Z.\nrevert v.\ninduction e ; intros v f ; simpl.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\nring.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\napply eq_sym, Zmult_assoc.\napply eq_refl."},{"statement":"(v : Z) (e : positive) : (Zfast_pow_pos v e * 1)%Z = Z.pow_pos v e.","conclusion":"(Zfast_pow_pos v e * 1)%Z = Z.pow_pos v e","hypotheses":"(v : Z) (e : positive)","proofString":"unfold Z.pow_pos.\ngeneralize 1%Z.\nrevert v.\ninduction e ; intros v f ; simpl.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\nring.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\napply eq_sym, Zmult_assoc.\napply eq_refl."},{"statement":"(v : Z) (e : positive) : (Zfast_pow_pos v e * 1)%Z = Pos.iter (Z.mul v) 1%Z e.","conclusion":"(Zfast_pow_pos v e * 1)%Z = Pos.iter (Z.mul v) 1%Z e","hypotheses":"(v : Z) (e : positive)","proofString":"generalize 1%Z.\nrevert v.\ninduction e ; intros v f ; simpl.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\nring.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\napply eq_sym, Zmult_assoc.\napply eq_refl."},{"statement":"(v : Z) (e : positive) : forall z : Z, (Zfast_pow_pos v e * z)%Z = Pos.iter (Z.mul v) z e.","conclusion":"forall z : Z, (Zfast_pow_pos v e * z)%Z = Pos.iter (Z.mul v) z e","hypotheses":"(v : Z) (e : positive)","proofString":"revert v.\ninduction e ; intros v f ; simpl.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\nring.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\napply eq_sym, Zmult_assoc.\napply eq_refl."},{"statement":"(e : positive) : forall v z : Z, (Zfast_pow_pos v e * z)%Z = Pos.iter (Z.mul v) z e.","conclusion":"forall v z : Z, (Zfast_pow_pos v e * z)%Z = Pos.iter (Z.mul v) z e","hypotheses":"(e : positive)","proofString":"induction e ; intros v f ; simpl.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\nring.\nrewrite <- 2!IHe.\nrewrite Z.square_spec.\napply eq_sym, Zmult_assoc.\napply eq_refl."},{"statement":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z) : (v * Z.square (Zfast_pow_pos v e) * f)%Z =\n(v * Pos.iter (Z.mul v) (Pos.iter (Z.mul v) f e) e)%Z.","conclusion":"(v * Z.square (Zfast_pow_pos v e) * f)%Z =\n(v * Pos.iter (Z.mul v) (Pos.iter (Z.mul v) f e) e)%Z","hypotheses":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z)","proofString":"rewrite <- 2!IHe.\nrewrite Z.square_spec.\nring."},{"statement":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z) : (v * Z.square (Zfast_pow_pos v e) * f)%Z =\n(v * (Zfast_pow_pos v e * (Zfast_pow_pos v e * f)))%Z.","conclusion":"(v * Z.square (Zfast_pow_pos v e) * f)%Z =\n(v * (Zfast_pow_pos v e * (Zfast_pow_pos v e * f)))%Z","hypotheses":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z)","proofString":"rewrite Z.square_spec.\nring."},{"statement":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z) : (v * (Zfast_pow_pos v e * Zfast_pow_pos v e) * f)%Z =\n(v * (Zfast_pow_pos v e * (Zfast_pow_pos v e * f)))%Z.","conclusion":"(v * (Zfast_pow_pos v e * Zfast_pow_pos v e) * f)%Z =\n(v * (Zfast_pow_pos v e * (Zfast_pow_pos v e * f)))%Z","hypotheses":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z)","proofString":"ring."},{"statement":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z) : (Z.square (Zfast_pow_pos v e) * f)%Z =\nPos.iter (Z.mul v) (Pos.iter (Z.mul v) f e) e.","conclusion":"(Z.square (Zfast_pow_pos v e) * f)%Z =\nPos.iter (Z.mul v) (Pos.iter (Z.mul v) f e) e","hypotheses":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z)","proofString":"rewrite <- 2!IHe.\nrewrite Z.square_spec.\napply eq_sym, Zmult_assoc."},{"statement":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z) : (Z.square (Zfast_pow_pos v e) * f)%Z =\n(Zfast_pow_pos v e * (Zfast_pow_pos v e * f))%Z.","conclusion":"(Z.square (Zfast_pow_pos v e) * f)%Z =\n(Zfast_pow_pos v e * (Zfast_pow_pos v e * f))%Z","hypotheses":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z)","proofString":"rewrite Z.square_spec.\napply eq_sym, Zmult_assoc."},{"statement":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z) : (Zfast_pow_pos v e * Zfast_pow_pos v e * f)%Z =\n(Zfast_pow_pos v e * (Zfast_pow_pos v e * f))%Z.","conclusion":"(Zfast_pow_pos v e * Zfast_pow_pos v e * f)%Z =\n(Zfast_pow_pos v e * (Zfast_pow_pos v e * f))%Z","hypotheses":"(e : positive) (IHe : forall v0 z : Z, (Zfast_pow_pos v0 e * z)%Z = Pos.iter (Z.mul v0) z e) (v f : Z)","proofString":"apply eq_sym, Zmult_assoc."},{"statement":"(v f : Z) : (v * f)%Z = (v * f)%Z.","conclusion":"(v * f)%Z = (v * f)%Z","hypotheses":"(v f : Z)","proofString":"apply eq_refl."},{"statement":"(a b : Z) : Z.div_eucl a b = ((a / b)%Z, (a mod b)%Z).","conclusion":"Z.div_eucl a b = ((a / b)%Z, (a mod b)%Z)","hypotheses":"(a b : Z)","proofString":"unfold Z.div, Zmod.\nnow case Z.div_eucl."},{"statement":"(a b : Z) : Z.div_eucl a b =\n(let (q, _) := Z.div_eucl a b in q, let (_, r) := Z.div_eucl a b in r).","conclusion":"Z.div_eucl a b =\n(let (q, _) := Z.div_eucl a b in q, let (_, r) := Z.div_eucl a b in r)","hypotheses":"(a b : Z)","proofString":"now case Z.div_eucl."},{"statement":"(a b : positive) : Zpos_div_eucl_aux1 a b = Z.pos_div_eucl a (Z.pos b).","conclusion":"Zpos_div_eucl_aux1 a b = Z.pos_div_eucl a (Z.pos b)","hypotheses":"(a b : positive)","proofString":"revert a.\ninduction b ; intros a.\neasy.\nchange (Z.pos_div_eucl a (Zpos b~0)) with (Z.div_eucl (Zpos a) (Zpos b~0)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos b~0) with (2 * Zpos b)%Z.\nrewrite Z.rem_mul_r by easy.\nrewrite <- Zdiv_Zdiv by easy.\ndestruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy.\nchange (Z.pos_div_eucl a 1) with (Z.div_eucl (Zpos a) 1).\nrewrite Zdiv_eucl_unique.\nnow rewrite Zdiv_1_r, Zmod_1_r."},{"statement":"(b : positive) : forall a : positive, Zpos_div_eucl_aux1 a b = Z.pos_div_eucl a (Z.pos b).","conclusion":"forall a : positive, Zpos_div_eucl_aux1 a b = Z.pos_div_eucl a (Z.pos b)","hypotheses":"(b : positive)","proofString":"induction b ; intros a.\neasy.\nchange (Z.pos_div_eucl a (Zpos b~0)) with (Z.div_eucl (Zpos a) (Zpos b~0)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos b~0) with (2 * Zpos b)%Z.\nrewrite Z.rem_mul_r by easy.\nrewrite <- Zdiv_Zdiv by easy.\ndestruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy.\nchange (Z.pos_div_eucl a 1) with (Z.div_eucl (Zpos a) 1).\nrewrite Zdiv_eucl_unique.\nnow rewrite Zdiv_1_r, Zmod_1_r."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a b~1 = Z.pos_div_eucl a (Z.pos b~1).","conclusion":"Zpos_div_eucl_aux1 a b~1 = Z.pos_div_eucl a (Z.pos b~1)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"easy."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a b~0 = Z.pos_div_eucl a (Z.pos b~0).","conclusion":"Zpos_div_eucl_aux1 a b~0 = Z.pos_div_eucl a (Z.pos b~0)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"change (Z.pos_div_eucl a (Zpos b~0)) with (Z.div_eucl (Zpos a) (Zpos b~0)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos b~0) with (2 * Zpos b)%Z.\nrewrite Z.rem_mul_r by easy.\nrewrite <- Zdiv_Zdiv by easy.\ndestruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a b~0 = Z.div_eucl (Z.pos a) (Z.pos b~0).","conclusion":"Zpos_div_eucl_aux1 a b~0 = Z.div_eucl (Z.pos a) (Z.pos b~0)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"rewrite Zdiv_eucl_unique.\nchange (Zpos b~0) with (2 * Zpos b)%Z.\nrewrite Z.rem_mul_r by easy.\nrewrite <- Zdiv_Zdiv by easy.\ndestruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / Z.pos b~0)%Z, (Z.pos a mod Z.pos b~0)%Z).","conclusion":"Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / Z.pos b~0)%Z, (Z.pos a mod Z.pos b~0)%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"change (Zpos b~0) with (2 * Zpos b)%Z.\nrewrite Z.rem_mul_r by easy.\nrewrite <- Zdiv_Zdiv by easy.\ndestruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / (2 * Z.pos b))%Z, (Z.pos a mod (2 * Z.pos b))%Z).","conclusion":"Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / (2 * Z.pos b))%Z, (Z.pos a mod (2 * Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"rewrite Z.rem_mul_r by easy.\nrewrite <- Zdiv_Zdiv by easy.\ndestruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / (2 * Z.pos b))%Z,\n (Z.pos a mod 2 + 2 * ((Z.pos a / 2) mod Z.pos b))%Z).","conclusion":"Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / (2 * Z.pos b))%Z,\n (Z.pos a mod 2 + 2 * ((Z.pos a / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"rewrite <- Zdiv_Zdiv by easy.\ndestruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / 2 / Z.pos b)%Z,\n (Z.pos a mod 2 + 2 * ((Z.pos a / 2) mod Z.pos b))%Z).","conclusion":"Zpos_div_eucl_aux1 a b~0 =\n((Z.pos a / 2 / Z.pos b)%Z,\n (Z.pos a mod 2 + 2 * ((Z.pos a / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"destruct a as [a|a|].\nchange (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm.\nchange (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult.\neasy."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a~1 b~0 =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z).","conclusion":"Zpos_div_eucl_aux1 a~1 b~0 =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"change (Zpos_div_eucl_aux1 a~1 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r + 1)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : (let (q, r) := Zpos_div_eucl_aux1 a b in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Zpos_div_eucl_aux1 a b in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"rewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : (let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"clear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : (let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"change (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : (let (q, r) := Z.div_eucl (Z.pos a) (Z.pos b) in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Z.div_eucl (Z.pos a) (Z.pos b) in (q, (2 * r + 1)%Z)) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"rewrite Zdiv_eucl_unique.\nchange (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n((Z.pos a~1 / 2 / Z.pos b)%Z,\n (Z.pos a~1 mod 2 + 2 * ((Z.pos a~1 / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"change (Zpos a~1) with (1 + 2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n(((1 + 2 * Z.pos a) / 2 / Z.pos b)%Z,\n ((1 + 2 * Z.pos a) mod 2 + 2 * (((1 + 2 * Z.pos a) / 2) mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n(((1 + 2 * Z.pos a) / 2 / Z.pos b)%Z,\n ((1 + 2 * Z.pos a) mod 2 + 2 * (((1 + 2 * Z.pos a) / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"rewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n(((1 + Z.pos a * 2) / 2 / Z.pos b)%Z,\n ((1 + Z.pos a * 2) mod 2 + 2 * (((1 + Z.pos a * 2) / 2) mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n(((1 + Z.pos a * 2) / 2 / Z.pos b)%Z,\n ((1 + Z.pos a * 2) mod 2 + 2 * (((1 + Z.pos a * 2) / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"rewrite Z_div_plus_full by easy.\napply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n(((1 / 2 + Z.pos a) / Z.pos b)%Z,\n ((1 + Z.pos a * 2) mod 2 + 2 * ((1 / 2 + Z.pos a) mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b) + 1)%Z) =\n(((1 / 2 + Z.pos a) / Z.pos b)%Z,\n ((1 + Z.pos a * 2) mod 2 + 2 * ((1 / 2 + Z.pos a) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"apply f_equal.\nrewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : (2 * (Z.pos a mod Z.pos b) + 1)%Z =\n((1 + Z.pos a * 2) mod 2 + 2 * ((1 / 2 + Z.pos a) mod Z.pos b))%Z.","conclusion":"(2 * (Z.pos a mod Z.pos b) + 1)%Z =\n((1 + Z.pos a * 2) mod 2 + 2 * ((1 / 2 + Z.pos a) mod Z.pos b))%Z","hypotheses":"(b a : positive)","proofString":"rewrite Z_mod_plus_full.\napply Zplus_comm."},{"statement":"(b a : positive) : (2 * (Z.pos a mod Z.pos b) + 1)%Z =\n(1 mod 2 + 2 * ((1 / 2 + Z.pos a) mod Z.pos b))%Z.","conclusion":"(2 * (Z.pos a mod Z.pos b) + 1)%Z =\n(1 mod 2 + 2 * ((1 / 2 + Z.pos a) mod Z.pos b))%Z","hypotheses":"(b a : positive)","proofString":"apply Zplus_comm."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : Zpos_div_eucl_aux1 a~0 b~0 =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z).","conclusion":"Zpos_div_eucl_aux1 a~0 b~0 =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"change (Zpos_div_eucl_aux1 a~0 b~0) with (let (q, r) := Zpos_div_eucl_aux1 a b in (q, 2 * r)%Z).\nrewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : (let (q, r) := Zpos_div_eucl_aux1 a b in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Zpos_div_eucl_aux1 a b in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"rewrite IHb.\nclear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive) : (let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a0 : positive, Zpos_div_eucl_aux1 a0 b = Z.pos_div_eucl a0 (Z.pos b)) (a : positive)","proofString":"clear IHb.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b a : positive) : (let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Z.pos_div_eucl a (Z.pos b) in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"change (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b a : positive) : (let (q, r) := Z.div_eucl (Z.pos a) (Z.pos b) in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z).","conclusion":"(let (q, r) := Z.div_eucl (Z.pos a) (Z.pos b) in (q, (2 * r)%Z)) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"rewrite Zdiv_eucl_unique.\nchange (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((Z.pos a~0 / 2 / Z.pos b)%Z,\n (Z.pos a~0 mod 2 + 2 * ((Z.pos a~0 / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"change (Zpos a~0) with (2 * Zpos a)%Z.\nrewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((2 * Z.pos a / 2 / Z.pos b)%Z,\n ((2 * Z.pos a) mod 2 + 2 * ((2 * Z.pos a / 2) mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((2 * Z.pos a / 2 / Z.pos b)%Z,\n ((2 * Z.pos a) mod 2 + 2 * ((2 * Z.pos a / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"rewrite (Zmult_comm 2 (Zpos a)).\nrewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((Z.pos a * 2 / 2 / Z.pos b)%Z,\n ((Z.pos a * 2) mod 2 + 2 * ((Z.pos a * 2 / 2) mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((Z.pos a * 2 / 2 / Z.pos b)%Z,\n ((Z.pos a * 2) mod 2 + 2 * ((Z.pos a * 2 / 2) mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"rewrite Z_div_mult_full by easy.\napply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b a : positive) : ((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((Z.pos a / Z.pos b)%Z, ((Z.pos a * 2) mod 2 + 2 * (Z.pos a mod Z.pos b))%Z).","conclusion":"((Z.pos a / Z.pos b)%Z, (2 * (Z.pos a mod Z.pos b))%Z) =\n((Z.pos a / Z.pos b)%Z, ((Z.pos a * 2) mod 2 + 2 * (Z.pos a mod Z.pos b))%Z)","hypotheses":"(b a : positive)","proofString":"apply f_equal.\nnow rewrite Z_mod_mult."},{"statement":"(b a : positive) : (2 * (Z.pos a mod Z.pos b))%Z =\n((Z.pos a * 2) mod 2 + 2 * (Z.pos a mod Z.pos b))%Z.","conclusion":"(2 * (Z.pos a mod Z.pos b))%Z =\n((Z.pos a * 2) mod 2 + 2 * (Z.pos a mod Z.pos b))%Z","hypotheses":"(b a : positive)","proofString":"now rewrite Z_mod_mult."},{"statement":"(b : positive) (IHb : forall a : positive, Zpos_div_eucl_aux1 a b = Z.pos_div_eucl a (Z.pos b)) : Zpos_div_eucl_aux1 1 b~0 =\n((1 / 2 / Z.pos b)%Z, (1 mod 2 + 2 * ((1 / 2) mod Z.pos b))%Z).","conclusion":"Zpos_div_eucl_aux1 1 b~0 =\n((1 / 2 / Z.pos b)%Z, (1 mod 2 + 2 * ((1 / 2) mod Z.pos b))%Z)","hypotheses":"(b : positive) (IHb : forall a : positive, Zpos_div_eucl_aux1 a b = Z.pos_div_eucl a (Z.pos b))","proofString":"easy."},{"statement":"(a : positive) : Zpos_div_eucl_aux1 a 1 = Z.pos_div_eucl a 1.","conclusion":"Zpos_div_eucl_aux1 a 1 = Z.pos_div_eucl a 1","hypotheses":"(a : positive)","proofString":"change (Z.pos_div_eucl a 1) with (Z.div_eucl (Zpos a) 1).\nrewrite Zdiv_eucl_unique.\nnow rewrite Zdiv_1_r, Zmod_1_r."},{"statement":"(a : positive) : Zpos_div_eucl_aux1 a 1 = Z.div_eucl (Z.pos a) 1.","conclusion":"Zpos_div_eucl_aux1 a 1 = Z.div_eucl (Z.pos a) 1","hypotheses":"(a : positive)","proofString":"rewrite Zdiv_eucl_unique.\nnow rewrite Zdiv_1_r, Zmod_1_r."},{"statement":"(a : positive) : Zpos_div_eucl_aux1 a 1 = ((Z.pos a / 1)%Z, (Z.pos a mod 1)%Z).","conclusion":"Zpos_div_eucl_aux1 a 1 = ((Z.pos a / 1)%Z, (Z.pos a mod 1)%Z)","hypotheses":"(a : positive)","proofString":"now rewrite Zdiv_1_r, Zmod_1_r."},{"statement":"(a b : positive) : Zpos_div_eucl_aux a b = Z.pos_div_eucl a (Z.pos b).","conclusion":"Zpos_div_eucl_aux a b = Z.pos_div_eucl a (Z.pos b)","hypotheses":"(a b : positive)","proofString":"unfold Zpos_div_eucl_aux.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\ncase Pos.compare_spec ; intros H.\nnow rewrite H, Z_div_same, Z_mod_same.\nnow rewrite Zdiv_small, Zmod_small by (split ; easy).\nrewrite Zpos_div_eucl_aux1_correct.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\napply Zdiv_eucl_unique."},{"statement":"(a b : positive) : match (a ?= b)%positive with\n| Eq => (1%Z, 0%Z)\n| Lt => (0%Z, Z.pos a)\n| Gt => Zpos_div_eucl_aux1 a b\nend = Z.pos_div_eucl a (Z.pos b).","conclusion":"match (a ?= b)%positive with\n| Eq => (1%Z, 0%Z)\n| Lt => (0%Z, Z.pos a)\n| Gt => Zpos_div_eucl_aux1 a b\nend = Z.pos_div_eucl a (Z.pos b)","hypotheses":"(a b : positive)","proofString":"change (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\nrewrite Zdiv_eucl_unique.\ncase Pos.compare_spec ; intros H.\nnow rewrite H, Z_div_same, Z_mod_same.\nnow rewrite Zdiv_small, Zmod_small by (split ; easy).\nrewrite Zpos_div_eucl_aux1_correct.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\napply Zdiv_eucl_unique."},{"statement":"(a b : positive) : match (a ?= b)%positive with\n| Eq => (1%Z, 0%Z)\n| Lt => (0%Z, Z.pos a)\n| Gt => Zpos_div_eucl_aux1 a b\nend = Z.div_eucl (Z.pos a) (Z.pos b).","conclusion":"match (a ?= b)%positive with\n| Eq => (1%Z, 0%Z)\n| Lt => (0%Z, Z.pos a)\n| Gt => Zpos_div_eucl_aux1 a b\nend = Z.div_eucl (Z.pos a) (Z.pos b)","hypotheses":"(a b : positive)","proofString":"rewrite Zdiv_eucl_unique.\ncase Pos.compare_spec ; intros H.\nnow rewrite H, Z_div_same, Z_mod_same.\nnow rewrite Zdiv_small, Zmod_small by (split ; easy).\nrewrite Zpos_div_eucl_aux1_correct.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\napply Zdiv_eucl_unique."},{"statement":"(a b : positive) : match (a ?= b)%positive with\n| Eq => (1%Z, 0%Z)\n| Lt => (0%Z, Z.pos a)\n| Gt => Zpos_div_eucl_aux1 a b\nend = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z).","conclusion":"match (a ?= b)%positive with\n| Eq => (1%Z, 0%Z)\n| Lt => (0%Z, Z.pos a)\n| Gt => Zpos_div_eucl_aux1 a b\nend = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z)","hypotheses":"(a b : positive)","proofString":"case Pos.compare_spec ; intros H.\nnow rewrite H, Z_div_same, Z_mod_same.\nnow rewrite Zdiv_small, Zmod_small by (split ; easy).\nrewrite Zpos_div_eucl_aux1_correct.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\napply Zdiv_eucl_unique."},{"statement":"(a b : positive) (H : a = b) : (1%Z, 0%Z) = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z).","conclusion":"(1%Z, 0%Z) = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z)","hypotheses":"(a b : positive) (H : a = b)","proofString":"now rewrite H, Z_div_same, Z_mod_same."},{"statement":"(a b : positive) (H : (a < b)%positive) : (0%Z, Z.pos a) = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z).","conclusion":"(0%Z, Z.pos a) = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z)","hypotheses":"(a b : positive) (H : (a < b)%positive)","proofString":"now rewrite Zdiv_small, Zmod_small by (split ; easy)."},{"statement":"(a b : positive) (H : (b < a)%positive) : Zpos_div_eucl_aux1 a b = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z).","conclusion":"Zpos_div_eucl_aux1 a b = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z)","hypotheses":"(a b : positive) (H : (b < a)%positive)","proofString":"rewrite Zpos_div_eucl_aux1_correct.\nchange (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\napply Zdiv_eucl_unique."},{"statement":"(a b : positive) (H : (b < a)%positive) : Z.pos_div_eucl a (Z.pos b) = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z).","conclusion":"Z.pos_div_eucl a (Z.pos b) = ((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z)","hypotheses":"(a b : positive) (H : (b < a)%positive)","proofString":"change (Z.pos_div_eucl a (Zpos b)) with (Z.div_eucl (Zpos a) (Zpos b)).\napply Zdiv_eucl_unique."},{"statement":"(a b : positive) (H : (b < a)%positive) : Z.div_eucl (Z.pos a) (Z.pos b) =\n((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z).","conclusion":"Z.div_eucl (Z.pos a) (Z.pos b) =\n((Z.pos a / Z.pos b)%Z, (Z.pos a mod Z.pos b)%Z)","hypotheses":"(a b : positive) (H : (b < a)%positive)","proofString":"apply Zdiv_eucl_unique."},{"statement":"forall a b : Z,\nmatch a with\n| 0%Z => (0%Z, 0%Z)\n| Z.pos a' =>\n    match b with\n    | 0%Z => (0%Z, match (1 mod 0)%Z with\n                   | 0%Z => 0%Z\n                   | _ => a\n                   end)\n    | Z.pos b' => Zpos_div_eucl_aux a' b'\n    | Z.neg b' =>\n        let (q, r) := Zpos_div_eucl_aux a' b' in\n        match r with\n        | 0%Z => ((- q)%Z, 0%Z)\n        | _ => ((- (q + 1))%Z, (b + r)%Z)\n        end\n    end\n| Z.neg a' =>\n    match b with\n    | 0%Z => (0%Z, match (1 mod 0)%Z with\n                   | 0%Z => 0%Z\n                   | _ => a\n                   end)\n    | Z.pos b' =>\n        let (q, r) := Zpos_div_eucl_aux a' b' in\n        match r with\n        | 0%Z => ((- q)%Z, 0%Z)\n        | _ => ((- (q + 1))%Z, (b - r)%Z)\n        end\n    | Z.neg b' => let (q, r) := Zpos_div_eucl_aux a' b' in (q, (- r)%Z)\n    end\nend = Z.div_eucl a b.","conclusion":"forall a b : Z,\nmatch a with\n| 0%Z => (0%Z, 0%Z)\n| Z.pos a' =>\n    match b with\n    | 0%Z => (0%Z, match (1 mod 0)%Z with\n                   | 0%Z => 0%Z\n                   | _ => a\n                   end)\n    | Z.pos b' => Zpos_div_eucl_aux a' b'\n    | Z.neg b' =>\n        let (q, r) := Zpos_div_eucl_aux a' b' in\n        match r with\n        | 0%Z => ((- q)%Z, 0%Z)\n        | _ => ((- (q + 1))%Z, (b + r)%Z)\n        end\n    end\n| Z.neg a' =>\n    match b with\n    | 0%Z => (0%Z, match (1 mod 0)%Z with\n                   | 0%Z => 0%Z\n                   | _ => a\n                   end)\n    | Z.pos b' =>\n        let (q, r) := Zpos_div_eucl_aux a' b' in\n        match r with\n        | 0%Z => ((- q)%Z, 0%Z)\n        | _ => ((- (q + 1))%Z, (b - r)%Z)\n        end\n    | Z.neg b' => let (q, r) := Zpos_div_eucl_aux a' b' in (q, (- r)%Z)\n    end\nend = Z.div_eucl a b","hypotheses":"","proofString":"intros [|a|a] [|b|b] ; try rewrite Zpos_div_eucl_aux_correct ; easy."},{"statement":"(p : nat) : forall x : A, iter_nat (p + 0) x = iter_nat p (iter_nat 0 x).","conclusion":"forall x : A, iter_nat (p + 0) x = iter_nat p (iter_nat 0 x)","hypotheses":"(p : nat)","proofString":"now rewrite Nat.add_0_r."},{"statement":"(p q : nat) (IHq : forall x : A, iter_nat (p + q) x = iter_nat p (iter_nat q x)) : forall x : A, iter_nat (p + S q) x = iter_nat p (iter_nat (S q) x).","conclusion":"forall x : A, iter_nat (p + S q) x = iter_nat p (iter_nat (S q) x)","hypotheses":"(p q : nat) (IHq : forall x : A, iter_nat (p + q) x = iter_nat p (iter_nat q x))","proofString":"intros x.\nrewrite <- plus_n_Sm.\napply IHq."},{"statement":"(p q : nat) (IHq : forall x0 : A, iter_nat (p + q) x0 = iter_nat p (iter_nat q x0)) (x : A) : iter_nat (p + S q) x = iter_nat p (iter_nat (S q) x).","conclusion":"iter_nat (p + S q) x = iter_nat p (iter_nat (S q) x)","hypotheses":"(p q : nat) (IHq : forall x0 : A, iter_nat (p + q) x0 = iter_nat p (iter_nat q x0)) (x : A)","proofString":"rewrite <- plus_n_Sm.\napply IHq."},{"statement":"(p q : nat) (IHq : forall x0 : A, iter_nat (p + q) x0 = iter_nat p (iter_nat q x0)) (x : A) : iter_nat (S (p + q)) x = iter_nat p (iter_nat (S q) x).","conclusion":"iter_nat (S (p + q)) x = iter_nat p (iter_nat (S q) x)","hypotheses":"(p q : nat) (IHq : forall x0 : A, iter_nat (p + q) x0 = iter_nat p (iter_nat q x0)) (x : A)","proofString":"apply IHq."},{"statement":"forall x : A, iter_nat 1 x = f (iter_nat 0 x).","conclusion":"forall x : A, iter_nat 1 x = f (iter_nat 0 x)","hypotheses":"","proofString":"easy."},{"statement":"(p : nat) (IHp : forall x : A, iter_nat (S p) x = f (iter_nat p x)) : forall x : A, iter_nat (S (S p)) x = f (iter_nat (S p) x).","conclusion":"forall x : A, iter_nat (S (S p)) x = f (iter_nat (S p) x)","hypotheses":"(p : nat) (IHp : forall x : A, iter_nat (S p) x = f (iter_nat p x))","proofString":"simpl.\nintros x.\napply IHp."},{"statement":"(p : nat) (IHp : forall x : A, iter_nat (S p) x = f (iter_nat p x)) : forall x : A, iter_nat p (f (f x)) = f (iter_nat p (f x)).","conclusion":"forall x : A, iter_nat p (f (f x)) = f (iter_nat p (f x))","hypotheses":"(p : nat) (IHp : forall x : A, iter_nat (S p) x = f (iter_nat p x))","proofString":"intros x.\napply IHp."},{"statement":"(p : nat) (IHp : forall x0 : A, iter_nat (S p) x0 = f (iter_nat p x0)) (x : A) : iter_nat p (f (f x)) = f (iter_nat p (f x)).","conclusion":"iter_nat p (f (f x)) = f (iter_nat p (f x))","hypotheses":"(p : nat) (IHp : forall x0 : A, iter_nat (S p) x0 = f (iter_nat p x0)) (x : A)","proofString":"apply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p~1 x = iter_nat (Pos.to_nat p~1) x.","conclusion":"SpecFloat.iter_pos f p~1 x = iter_nat (Pos.to_nat p~1) x","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite Pos2Nat.inj_xI.\nsimpl.\nrewrite Nat.add_0_r.\nrewrite iter_nat_plus.\nrewrite (IHp (f x)).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p~1 x = iter_nat (S (2 * Pos.to_nat p)) x.","conclusion":"SpecFloat.iter_pos f p~1 x = iter_nat (S (2 * Pos.to_nat p)) x","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"simpl.\nrewrite Nat.add_0_r.\nrewrite iter_nat_plus.\nrewrite (IHp (f x)).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (SpecFloat.iter_pos f p (f x)) =\niter_nat (Pos.to_nat p + (Pos.to_nat p + 0)) (f x).","conclusion":"SpecFloat.iter_pos f p (SpecFloat.iter_pos f p (f x)) =\niter_nat (Pos.to_nat p + (Pos.to_nat p + 0)) (f x)","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite Nat.add_0_r.\nrewrite iter_nat_plus.\nrewrite (IHp (f x)).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (SpecFloat.iter_pos f p (f x)) =\niter_nat (Pos.to_nat p + Pos.to_nat p) (f x).","conclusion":"SpecFloat.iter_pos f p (SpecFloat.iter_pos f p (f x)) =\niter_nat (Pos.to_nat p + Pos.to_nat p) (f x)","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite iter_nat_plus.\nrewrite (IHp (f x)).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (SpecFloat.iter_pos f p (f x)) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) (f x)).","conclusion":"SpecFloat.iter_pos f p (SpecFloat.iter_pos f p (f x)) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) (f x))","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite (IHp (f x)).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (iter_nat (Pos.to_nat p) (f x)) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) (f x)).","conclusion":"SpecFloat.iter_pos f p (iter_nat (Pos.to_nat p) (f x)) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) (f x))","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"apply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p~0 x = iter_nat (Pos.to_nat p~0) x.","conclusion":"SpecFloat.iter_pos f p~0 x = iter_nat (Pos.to_nat p~0) x","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite Pos2Nat.inj_xO.\nsimpl.\nrewrite Nat.add_0_r.\nrewrite iter_nat_plus.\nrewrite (IHp x).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p~0 x = iter_nat (2 * Pos.to_nat p) x.","conclusion":"SpecFloat.iter_pos f p~0 x = iter_nat (2 * Pos.to_nat p) x","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"simpl.\nrewrite Nat.add_0_r.\nrewrite iter_nat_plus.\nrewrite (IHp x).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (SpecFloat.iter_pos f p x) =\niter_nat (Pos.to_nat p + (Pos.to_nat p + 0)) x.","conclusion":"SpecFloat.iter_pos f p (SpecFloat.iter_pos f p x) =\niter_nat (Pos.to_nat p + (Pos.to_nat p + 0)) x","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite Nat.add_0_r.\nrewrite iter_nat_plus.\nrewrite (IHp x).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (SpecFloat.iter_pos f p x) =\niter_nat (Pos.to_nat p + Pos.to_nat p) x.","conclusion":"SpecFloat.iter_pos f p (SpecFloat.iter_pos f p x) =\niter_nat (Pos.to_nat p + Pos.to_nat p) x","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite iter_nat_plus.\nrewrite (IHp x).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (SpecFloat.iter_pos f p x) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) x).","conclusion":"SpecFloat.iter_pos f p (SpecFloat.iter_pos f p x) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) x)","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"rewrite (IHp x).\napply IHp."},{"statement":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A) : SpecFloat.iter_pos f p (iter_nat (Pos.to_nat p) x) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) x).","conclusion":"SpecFloat.iter_pos f p (iter_nat (Pos.to_nat p) x) =\niter_nat (Pos.to_nat p) (iter_nat (Pos.to_nat p) x)","hypotheses":"(p : positive) (IHp : forall x0 : A, SpecFloat.iter_pos f p x0 = iter_nat (Pos.to_nat p) x0) (x : A)","proofString":"apply IHp."},{"statement":"(x : A) : SpecFloat.iter_pos f 1 x = iter_nat (Pos.to_nat 1) x.","conclusion":"SpecFloat.iter_pos f 1 x = iter_nat (Pos.to_nat 1) x","hypotheses":"(x : A)","proofString":"easy."}]}