{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/MenhirLib/Validator_safe.v","fileSamples":[{"statement":"(l1 l2 l3 : list symbol) (H1 : prefix l1 l2) (H2 : prefix l2 l3) : prefix l1 l3.","conclusion":"prefix l1 l3","hypotheses":"(l1 l2 l3 : list symbol) (H1 : prefix l1 l2) (H2 : prefix l2 l3)","proofString":"revert l3 H2.\ninduction H1; [now constructor|].\ninversion 1.\nsubst.\nconstructor.\neauto."},{"statement":"(l1 l2 : list symbol) (H1 : prefix l1 l2) : forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3.","conclusion":"forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3","hypotheses":"(l1 l2 : list symbol) (H1 : prefix l1 l2)","proofString":"induction H1; [now constructor|].\ninversion 1.\nsubst.\nconstructor.\neauto."},{"statement":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3) : forall l3 : list symbol, prefix (x :: l2) l3 -> prefix (x :: l1) l3.","conclusion":"forall l3 : list symbol, prefix (x :: l2) l3 -> prefix (x :: l1) l3","hypotheses":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3)","proofString":"inversion 1.\nsubst.\nconstructor.\neauto."},{"statement":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l5 : list symbol, prefix l2 l5 -> prefix l1 l5) (l3 : list symbol) (H2 : prefix (x :: l2) l3) (l0 l4 : list symbol) (x0 : symbol) (H4 : prefix l2 l4) (H : x0 = x) (H3 : l0 = l2) (H0 : x :: l4 = l3) : prefix (x :: l1) (x :: l4).","conclusion":"prefix (x :: l1) (x :: l4)","hypotheses":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l5 : list symbol, prefix l2 l5 -> prefix l1 l5) (l3 : list symbol) (H2 : prefix (x :: l2) l3) (l0 l4 : list symbol) (x0 : symbol) (H4 : prefix l2 l4) (H : x0 = x) (H3 : l0 = l2) (H0 : x :: l4 = l3)","proofString":"subst.\nconstructor.\neauto."},{"statement":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3) (l4 : list symbol) (H2 : prefix (x :: l2) (x :: l4)) (H4 : prefix l2 l4) : prefix (x :: l1) (x :: l4).","conclusion":"prefix (x :: l1) (x :: l4)","hypotheses":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3) (l4 : list symbol) (H2 : prefix (x :: l2) (x :: l4)) (H4 : prefix l2 l4)","proofString":"constructor.\neauto."},{"statement":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3) (l4 : list symbol) (H2 : prefix (x :: l2) (x :: l4)) (H4 : prefix l2 l4) : prefix l1 l4.","conclusion":"prefix l1 l4","hypotheses":"(l1 l2 : list symbol) (x : symbol) (H1 : prefix l1 l2) (IHprefix : forall l3 : list symbol, prefix l2 l3 -> prefix l1 l3) (l4 : list symbol) (H2 : prefix (x :: l2) (x :: l4)) (H4 : prefix l2 l4)","proofString":"eauto."},{"statement":"(l1 l2 l3 : list (state -> bool)) (H1 : prefix_pred l1 l2) (H2 : prefix_pred l2 l3) : prefix_pred l1 l3.","conclusion":"prefix_pred l1 l3","hypotheses":"(l1 l2 l3 : list (state -> bool)) (H1 : prefix_pred l1 l2) (H2 : prefix_pred l2 l3)","proofString":"revert l3 H2.\ninduction H1 as [|l1 l2 f1 f2 Hf2f1]; [now constructor|].\nintros l3.\ninversion 1 as [|??? f3 Hf3f2].\nsubst.\nconstructor; [|now eauto].\nintros x.\nspecialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (H1 : prefix_pred l1 l2) : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3.","conclusion":"forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3","hypotheses":"(l1 l2 : list (state -> bool)) (H1 : prefix_pred l1 l2)","proofString":"induction H1 as [|l1 l2 f1 f2 Hf2f1]; [now constructor|].\nintros l3.\ninversion 1 as [|??? f3 Hf3f2].\nsubst.\nconstructor; [|now eauto].\nintros x.\nspecialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) : forall l3 : list (state -> bool),\nprefix_pred (f2 :: l2) l3 -> prefix_pred (f1 :: l1) l3.","conclusion":"forall l3 : list (state -> bool),\nprefix_pred (f2 :: l2) l3 -> prefix_pred (f1 :: l1) l3","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3)","proofString":"intros l3.\ninversion 1 as [|??? f3 Hf3f2].\nsubst.\nconstructor; [|now eauto].\nintros x.\nspecialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l0 : list (state -> bool), prefix_pred l2 l0 -> prefix_pred l1 l0) (l3 : list (state -> bool)) : prefix_pred (f2 :: l2) l3 -> prefix_pred (f1 :: l1) l3.","conclusion":"prefix_pred (f2 :: l2) l3 -> prefix_pred (f1 :: l1) l3","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l0 : list (state -> bool), prefix_pred l2 l0 -> prefix_pred l1 l0) (l3 : list (state -> bool))","proofString":"inversion 1 as [|??? f3 Hf3f2].\nsubst.\nconstructor; [|now eauto].\nintros x.\nspecialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l5 : list (state -> bool), prefix_pred l2 l5 -> prefix_pred l1 l5) (l3 : list (state -> bool)) (H2 : prefix_pred (f2 :: l2) l3) (l0 l4 : list (state -> bool)) (f0 f3 : state -> bool) (Hf3f2 : forall x : state, implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4) (H0 : f0 = f2) (H3 : l0 = l2) (H4 : f3 :: l4 = l3) : prefix_pred (f1 :: l1) (f3 :: l4).","conclusion":"prefix_pred (f1 :: l1) (f3 :: l4)","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l5 : list (state -> bool), prefix_pred l2 l5 -> prefix_pred l1 l5) (l3 : list (state -> bool)) (H2 : prefix_pred (f2 :: l2) l3) (l0 l4 : list (state -> bool)) (f0 f3 : state -> bool) (Hf3f2 : forall x : state, implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4) (H0 : f0 = f2) (H3 : l0 = l2) (H4 : f3 :: l4 = l3)","proofString":"subst.\nconstructor; [|now eauto].\nintros x.\nspecialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : forall x : state, implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4) : prefix_pred (f1 :: l1) (f3 :: l4).","conclusion":"prefix_pred (f1 :: l1) (f3 :: l4)","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : forall x : state, implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4)","proofString":"constructor; [|now eauto].\nintros x.\nspecialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : forall x : state, implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4) : forall x : state, implb (f3 x) (f1 x) = true.","conclusion":"forall x : state, implb (f3 x) (f1 x) = true","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x : state, implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : forall x : state, implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4)","proofString":"intros x.\nspecialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x0 : state, implb (f2 x0) (f1 x0) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : forall x0 : state, implb (f3 x0) (f2 x0) = true) (H : prefix_pred l2 l4) (x : state) : implb (f3 x) (f1 x) = true.","conclusion":"implb (f3 x) (f1 x) = true","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x0 : state, implb (f2 x0) (f1 x0) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : forall x0 : state, implb (f3 x0) (f2 x0) = true) (H : prefix_pred l2 l4) (x : state)","proofString":"specialize (Hf3f2 x).\nspecialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x0 : state, implb (f2 x0) (f1 x0) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (x : state) (Hf3f2 : implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4) : implb (f3 x) (f1 x) = true.","conclusion":"implb (f3 x) (f1 x) = true","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (Hf2f1 : forall x0 : state, implb (f2 x0) (f1 x0) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (x : state) (Hf3f2 : implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4)","proofString":"specialize (Hf2f1 x).\nrepeat destruct (_ x); auto."},{"statement":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (x : state) (Hf2f1 : implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4) : implb (f3 x) (f1 x) = true.","conclusion":"implb (f3 x) (f1 x) = true","hypotheses":"(l1 l2 : list (state -> bool)) (f1 f2 : state -> bool) (x : state) (Hf2f1 : implb (f2 x) (f1 x) = true) (H1 : prefix_pred l1 l2) (IHprefix_pred : forall l3 : list (state -> bool), prefix_pred l2 l3 -> prefix_pred l1 l3) (l4 : list (state -> bool)) (f3 : state -> bool) (H2 : prefix_pred (f2 :: l2) (f3 :: l4)) (Hf3f2 : implb (f3 x) (f2 x) = true) (H : prefix_pred l2 l4)","proofString":"repeat destruct (_ x); auto."}]}