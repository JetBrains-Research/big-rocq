{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/promising2ToImm/src/simulation_steps/SimulationPlainStepAux.v","fileSamples":[{"statement":"(thread : thread_id) (lc : Local.t) (sc : TimeMap.t) (mem : Memory.t) (x : Language.state (thread_lts thread)) : rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}.","conclusion":"rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}","hypotheses":"(thread : thread_id) (lc : Local.t) (sc : TimeMap.t) (mem : Memory.t) (x : Language.state (thread_lts thread))","proofString":"econs 1."},{"statement":"(thread : thread_id) (lc : Local.t) (sc : TimeMap.t) (mem : Memory.t) (x y z : Language.state (thread_lts thread)) (H : Language.step (thread_lts thread) ProgramEvent.silent x y) (STEP : rtc (Language.step (thread_lts thread) ProgramEvent.silent) y z) (IHSTEP : rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := y;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := z;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}) : rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := z;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}.","conclusion":"rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := z;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}","hypotheses":"(thread : thread_id) (lc : Local.t) (sc : TimeMap.t) (mem : Memory.t) (x y z : Language.state (thread_lts thread)) (H : Language.step (thread_lts thread) ProgramEvent.silent x y) (STEP : rtc (Language.step (thread_lts thread) ProgramEvent.silent) y z) (IHSTEP : rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := y;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := z;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |})","proofString":"econs 2; eauto.\necons.\necons.\necons 2.\necons; [|econs 1]; eauto.\nsimpls."},{"statement":"(thread : thread_id) (lc : Local.t) (sc : TimeMap.t) (mem : Memory.t) (x y z : Language.state (thread_lts thread)) (H : Language.step (thread_lts thread) ProgramEvent.silent x y) (STEP : rtc (Language.step (thread_lts thread) ProgramEvent.silent) y z) (IHSTEP : rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := y;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := z;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}) : Thread.tau_step\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := y;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}.","conclusion":"Thread.tau_step\n  {|\n    Thread.state := x;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := y;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}","hypotheses":"(thread : thread_id) (lc : Local.t) (sc : TimeMap.t) (mem : Memory.t) (x y z : Language.state (thread_lts thread)) (H : Language.step (thread_lts thread) ProgramEvent.silent x y) (STEP : rtc (Language.step (thread_lts thread) ProgramEvent.silent) y z) (IHSTEP : rtc (Thread.tau_step (lang:=thread_lts thread))\n  {|\n    Thread.state := y;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |}\n  {|\n    Thread.state := z;\n    Thread.local := lc;\n    Thread.sc := sc;\n    Thread.memory := mem\n  |})","proofString":"econs.\necons.\necons 2.\necons; [|econs 1]; eauto.\nsimpls."},{"statement":"(thread : thread_id) (x y z : Thread.t (thread_lts thread)) (H : Thread.tau_step x y) (ESTEPS : rtc (Thread.tau_step (lang:=thread_lts thread)) y z) (IHESTEPS : instrs (Thread.state z) = instrs (Thread.state y)) : instrs (Thread.state z) = instrs (Thread.state x).","conclusion":"instrs (Thread.state z) = instrs (Thread.state x)","hypotheses":"(thread : thread_id) (x y z : Thread.t (thread_lts thread)) (H : Thread.tau_step x y) (ESTEPS : rtc (Thread.tau_step (lang:=thread_lts thread)) y z) (IHESTEPS : instrs (Thread.state z) = instrs (Thread.state y))","proofString":"destruct y; simpls.\nrewrite IHESTEPS.\nclear dependent z.\ninv H.\ninv TSTEP.\ninv STEP; inv STEP0.\nsimpls.\ninv STATE.\ndesc.\nby cdes ISTEP."}]}