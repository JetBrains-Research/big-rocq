{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/imm/src/imm/imm_s_hb_hb.v","fileSamples":[{"statement":"⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗W⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊).","conclusion":"⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗W⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊)","hypotheses":"","proofString":"hahn_frame.\nrewrite rtE at 1; relsf.\napply inclusion_union_l.\nrewrite rtE at 1; relsf.\nbasic_solver.\nunionR right.\narewrite_id ⦗W⦘; rels.\narewrite (rf ⨾ rmw ⊆ (sb ∩ same_loc)^? ⨾ rf ⨾ rmw) at 1 by basic_solver 12.\nrewrite ct_begin.\ngeneralize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)＊\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)＊\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"rewrite rtE at 1; relsf.\napply inclusion_union_l.\nrewrite rtE at 1; relsf.\nbasic_solver.\nunionR right.\narewrite_id ⦗W⦘; rels.\narewrite (rf ⨾ rmw ⊆ (sb ∩ same_loc)^? ⨾ rf ⨾ rmw) at 1 by basic_solver 12.\nrewrite ct_begin.\ngeneralize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ∪ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)⁺\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ∪ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)⁺\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"apply inclusion_union_l.\nrewrite rtE at 1; relsf.\nbasic_solver.\nunionR right.\narewrite_id ⦗W⦘; rels.\narewrite (rf ⨾ rmw ⊆ (sb ∩ same_loc)^? ⨾ rf ⨾ rmw) at 1 by basic_solver 12.\nrewrite ct_begin.\ngeneralize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"rewrite rtE at 1; relsf.\nbasic_solver."},{"statement":"(sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ sb ∩ same_loc ⨾ ⦗W⦘\n  ∪ (⦗fun _ : actid => True⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)⁺).","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ sb ∩ same_loc ⨾ ⦗W⦘\n  ∪ (⦗fun _ : actid => True⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)⁺)","hypotheses":"","proofString":"basic_solver."},{"statement":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)⁺\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)⁺\n⊆ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"unionR right.\narewrite_id ⦗W⦘; rels.\narewrite (rf ⨾ rmw ⊆ (sb ∩ same_loc)^? ⨾ rf ⨾ rmw) at 1 by basic_solver 12.\nrewrite ct_begin.\ngeneralize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)⁺ ⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)⁺ ⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"arewrite_id ⦗W⦘; rels.\narewrite (rf ⨾ rmw ⊆ (sb ∩ same_loc)^? ⨾ rf ⨾ rmw) at 1 by basic_solver 12.\nrewrite ct_begin.\ngeneralize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(sb ∩ same_loc)^? ⨾ (rf ⨾ rmw)⁺ ⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ (rf ⨾ rmw)⁺ ⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"arewrite (rf ⨾ rmw ⊆ (sb ∩ same_loc)^? ⨾ rf ⨾ rmw) at 1 by basic_solver 12.\nrewrite ct_begin.\ngeneralize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(sb ∩ same_loc)^? ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)⁺\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)⁺\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"rewrite ct_begin.\ngeneralize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(sb ∩ same_loc)^?\n⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw) ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^?\n⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw) ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"generalize (@sb_same_loc_trans G); ins; rewrite !seqA; relsf.\ngeneralize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(H : transitive (sb ∩ same_loc)) : (sb ∩ same_loc)^? ⨾ rf ⨾ rmw ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"(sb ∩ same_loc)^? ⨾ rf ⨾ rmw ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"(H : transitive (sb ∩ same_loc))","proofString":"generalize (ct_begin ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)).\nbasic_solver 40."},{"statement":"(H : transitive (sb ∩ same_loc)) : ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)⁺\n≡ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw) ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊ ->\n(sb ∩ same_loc)^? ⨾ rf ⨾ rmw ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)⁺\n≡ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw) ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊ ->\n(sb ∩ same_loc)^? ⨾ rf ⨾ rmw ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊\n⊆ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"(H : transitive (sb ∩ same_loc))","proofString":"basic_solver 40."},{"statement":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ s_rs ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ rs.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ s_rs ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ rs","hypotheses":"","proofString":"by rewrite s_rs_in_rs."},{"statement":"s_release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘.","conclusion":"s_release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘","hypotheses":"","proofString":"rewrite s_release_in_release.\nrewrite (rfi_union_rfe).\nbasic_solver 21."},{"statement":"release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘.","conclusion":"release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘","hypotheses":"","proofString":"rewrite (rfi_union_rfe).\nbasic_solver 21."},{"statement":"release ⨾ (rfi ∪ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘.","conclusion":"release ⨾ (rfi ∪ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘","hypotheses":"","proofString":"basic_solver 21."},{"statement":"(sb ∪ s_sw)⁺ ⊆ (sb ∪ sw)⁺.","conclusion":"(sb ∪ s_sw)⁺ ⊆ (sb ∪ sw)⁺","hypotheses":"","proofString":"by rewrite s_sw_in_sw."},{"statement":"(WF : Wf G) (COMP : complete G) : imm_hb.coherence G -> irreflexive (s_hb ⨾ eco^?).","conclusion":"imm_hb.coherence G -> irreflexive (s_hb ⨾ eco^?)","hypotheses":"(WF : Wf G) (COMP : complete G)","proofString":"unfolder; ins; desf.\neapply imm_hb.hb_irr; eauto.\neapply s_hb_in_hb; edone.\nunfold imm_hb.coherence in *; unfolder in *.\neapply H; eexists; split; eauto.\neapply s_hb_in_hb; edone."},{"statement":"(WF : Wf G) (COMP : complete G) (H : imm_hb.coherence G) (x : actid) (H0 : s_hb x x) : False.","conclusion":"False","hypotheses":"(WF : Wf G) (COMP : complete G) (H : imm_hb.coherence G) (x : actid) (H0 : s_hb x x)","proofString":"eapply imm_hb.hb_irr; eauto.\neapply s_hb_in_hb; edone."},{"statement":"(WF : Wf G) (COMP : complete G) (H : imm_hb.coherence G) (x z : actid) (H0 : s_hb x z) (H1 : eco z x) : False.","conclusion":"False","hypotheses":"(WF : Wf G) (COMP : complete G) (H : imm_hb.coherence G) (x z : actid) (H0 : s_hb x z) (H1 : eco z x)","proofString":"unfold imm_hb.coherence in *; unfolder in *.\neapply H; eexists; split; eauto.\neapply s_hb_in_hb; edone."},{"statement":"(WF : Wf G) (COMP : complete G) (H : forall x0 : actid, (exists z0 : actid, hb x0 z0 /\\ eco z0 x0) -> False) (x z : actid) (H0 : s_hb x z) (H1 : eco z x) : False.","conclusion":"False","hypotheses":"(WF : Wf G) (COMP : complete G) (H : forall x0 : actid, (exists z0 : actid, hb x0 z0 /\\ eco z0 x0) -> False) (x z : actid) (H0 : s_hb x z) (H1 : eco z x)","proofString":"eapply H; eexists; split; eauto.\neapply s_hb_in_hb; edone."},{"statement":"(WF : Wf G) (COMP : complete G) (H : forall x0 : actid, (exists z0 : actid, hb x0 z0 /\\ eco z0 x0) -> False) (x z : actid) (H0 : s_hb x z) (H1 : eco z x) : hb x z.","conclusion":"hb x z","hypotheses":"(WF : Wf G) (COMP : complete G) (H : forall x0 : actid, (exists z0 : actid, hb x0 z0 /\\ eco z0 x0) -> False) (x z : actid) (H0 : s_hb x z) (H1 : eco z x)","proofString":"eapply s_hb_in_hb; edone."}]}