{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/promising2ToImm/src/cert_graph/CertT.v","fileSamples":[{"statement":"covered certT ≡₁ C ∪₁ E ∩₁ NTid_ thread.","conclusion":"covered certT ≡₁ C ∪₁ E ∩₁ NTid_ thread","hypotheses":"","proofString":"unfold certT.\nsimplify_tls_events.\nbasic_solver 10."},{"statement":"covered\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ \nC ∪₁ E ∩₁ NTid_ thread.","conclusion":"covered\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ \nC ∪₁ E ∩₁ NTid_ thread","hypotheses":"","proofString":"simplify_tls_events.\nbasic_solver 10."},{"statement":"(C ∪₁ E ∩₁ NTid_ thread) \\₁ ∅ ≡₁ C ∪₁ E ∩₁ NTid_ thread.","conclusion":"(C ∪₁ E ∩₁ NTid_ thread) \\₁ ∅ ≡₁ C ∪₁ E ∩₁ NTid_ thread","hypotheses":"","proofString":"basic_solver 10."},{"statement":"action ↓₁ eq ta_reserve ∩₁ event ↓₁ (I ∪₁ S ∩₁ Tid_ thread)\n∩₁ action ↓₁ eq ta_issue ⊆₁ ∅.","conclusion":"action ↓₁ eq ta_reserve ∩₁ event ↓₁ (I ∪₁ S ∩₁ Tid_ thread)\n∩₁ action ↓₁ eq ta_issue ⊆₁ ∅","hypotheses":"","proofString":"iord_dom_solver."},{"statement":"(action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ NTid_ thread) \\₁\n action ↓₁ eq ta_reserve) ∩₁ action ↓₁ eq ta_issue ⊆₁ ∅.","conclusion":"(action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ NTid_ thread) \\₁\n action ↓₁ eq ta_reserve) ∩₁ action ↓₁ eq ta_issue ⊆₁ ∅","hypotheses":"","proofString":"iord_dom_solver."},{"statement":"issued certT ≡₁ I.","conclusion":"issued certT ≡₁ I","hypotheses":"","proofString":"unfold certT.\nsimplify_tls_events.\nbasic_solver 10."},{"statement":"issued\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ I.","conclusion":"issued\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ I","hypotheses":"","proofString":"simplify_tls_events.\nbasic_solver 10."},{"statement":"I \\₁ ∅ ≡₁ I.","conclusion":"I \\₁ ∅ ≡₁ I","hypotheses":"","proofString":"basic_solver 10."},{"statement":"reserved certT ≡₁ I ∪₁ S ∩₁ Tid_ thread.","conclusion":"reserved certT ≡₁ I ∪₁ S ∩₁ Tid_ thread","hypotheses":"","proofString":"unfold certT.\nsimplify_tls_events.\nrewrite set_minus_absorb_l; [basic_solver| ].\nunfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"reserved\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ \nI ∪₁ S ∩₁ Tid_ thread.","conclusion":"reserved\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ \nI ∪₁ S ∩₁ Tid_ thread","hypotheses":"","proofString":"simplify_tls_events.\nrewrite set_minus_absorb_l; [basic_solver| ].\nunfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"S \\₁ event ↑₁ (action ↓₁ eq ta_reserve) ∪₁ (I ∪₁ S ∩₁ Tid_ thread)\n≡₁ I ∪₁ S ∩₁ Tid_ thread.","conclusion":"S \\₁ event ↑₁ (action ↓₁ eq ta_reserve) ∪₁ (I ∪₁ S ∩₁ Tid_ thread)\n≡₁ I ∪₁ S ∩₁ Tid_ thread","hypotheses":"","proofString":"rewrite set_minus_absorb_l; [basic_solver| ].\nunfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"S ⊆₁ event ↑₁ (action ↓₁ eq ta_reserve).","conclusion":"S ⊆₁ event ↑₁ (action ↓₁ eq ta_reserve)","hypotheses":"","proofString":"unfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"event ↑₁ (T ∩₁ action ↓₁ eq ta_reserve) ⊆₁ event ↑₁ (action ↓₁ eq ta_reserve).","conclusion":"event ↑₁ (T ∩₁ action ↓₁ eq ta_reserve) ⊆₁ event ↑₁ (action ↓₁ eq ta_reserve)","hypotheses":"","proofString":"unfolder.\nins.\ndesc.\nvauto."},{"statement":"forall x : actid,\n(exists y : trav_label, (T y /\\ ta_reserve = action y) /\\ event y = x) ->\nexists y : trav_label, ta_reserve = action y /\\ event y = x.","conclusion":"forall x : actid,\n(exists y : trav_label, (T y /\\ ta_reserve = action y) /\\ event y = x) ->\nexists y : trav_label, ta_reserve = action y /\\ event y = x","hypotheses":"","proofString":"ins.\ndesc.\nvauto."},{"statement":"(x : actid) (H : exists y : trav_label, (T y /\\ ta_reserve = action y) /\\ event y = x) : exists y : trav_label, ta_reserve = action y /\\ event y = x.","conclusion":"exists y : trav_label, ta_reserve = action y /\\ event y = x","hypotheses":"(x : actid) (H : exists y : trav_label, (T y /\\ ta_reserve = action y) /\\ event y = x)","proofString":"desc.\nvauto."},{"statement":"(x : actid) (y : trav_label) (H : T y) (H1 : ta_reserve = action y) (H0 : event y = x) : exists y0 : trav_label, ta_reserve = action y0 /\\ event y0 = x.","conclusion":"exists y0 : trav_label, ta_reserve = action y0 /\\ event y0 = x","hypotheses":"(x : actid) (y : trav_label) (H : T y) (H1 : ta_reserve = action y) (H0 : event y = x)","proofString":"vauto."},{"statement":"(t : thread_id) : action ↓₁ eq (ta_propagate t) ⊆₁ set_compl (action ↓₁ eq ta_reserve).","conclusion":"action ↓₁ eq (ta_propagate t) ⊆₁ set_compl (action ↓₁ eq ta_reserve)","hypotheses":"(t : thread_id)","proofString":"unfolder.\nby intros ? <-."},{"statement":"(t : thread_id) : forall x : trav_label, ta_propagate t = action x -> ta_reserve <> action x.","conclusion":"forall x : trav_label, ta_propagate t = action x -> ta_reserve <> action x","hypotheses":"(t : thread_id)","proofString":"by intros ? <-."},{"statement":"(t : thread_id) : (action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ NTid_ thread) \\₁\n action ↓₁ eq ta_reserve) ∩₁ action ↓₁ eq (ta_propagate t)\n∪₁ action ↓₁ eq ta_reserve ∩₁ event ↓₁ (I ∪₁ S ∩₁ Tid_ thread)\n   ∩₁ action ↓₁ eq (ta_propagate t) ⊆₁ ∅.","conclusion":"(action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ NTid_ thread) \\₁\n action ↓₁ eq ta_reserve) ∩₁ action ↓₁ eq (ta_propagate t)\n∪₁ action ↓₁ eq ta_reserve ∩₁ event ↓₁ (I ∪₁ S ∩₁ Tid_ thread)\n   ∩₁ action ↓₁ eq (ta_propagate t) ⊆₁ ∅","hypotheses":"(t : thread_id)","proofString":"unfolder.\nins; des; vauto; congruence."},{"statement":"(t : thread_id) : forall x : trav_label,\n((ta_cover = action x /\\ E (event x) /\\ tid (event x) <> thread) /\\\n ta_reserve <> action x) /\\ ta_propagate t = action x \\/\n(ta_reserve = action x /\\\n (I (event x) \\/ S (event x) /\\ tid (event x) = thread)) /\\\nta_propagate t = action x -> False.","conclusion":"forall x : trav_label,\n((ta_cover = action x /\\ E (event x) /\\ tid (event x) <> thread) /\\\n ta_reserve <> action x) /\\ ta_propagate t = action x \\/\n(ta_reserve = action x /\\\n (I (event x) \\/ S (event x) /\\ tid (event x) = thread)) /\\\nta_propagate t = action x -> False","hypotheses":"(t : thread_id)","proofString":"ins; des; vauto; congruence."},{"statement":"certT ∩₁ action ↓₁ (⋃₁t ∈ threads_set G \\₁ eq tid_init, eq (ta_propagate t))\n≡₁ T ∩₁ action ↓₁ (⋃₁t ∈ threads_set G \\₁ eq tid_init, eq (ta_propagate t)).","conclusion":"certT ∩₁ action ↓₁ (⋃₁t ∈ threads_set G \\₁ eq tid_init, eq (ta_propagate t))\n≡₁ T ∩₁ action ↓₁ (⋃₁t ∈ threads_set G \\₁ eq tid_init, eq (ta_propagate t))","hypotheses":"","proofString":"rewrite set_map_bunion, <- !set_bunion_inter_compat_l.\napply set_equiv_bunion; [done| ].\nins.\napply T_propagations_certT_thread."},{"statement":"(⋃₁x ∈ threads_set G \\₁ eq tid_init, certT ∩₁ action ↓₁ eq (ta_propagate x))\n≡₁ (⋃₁x ∈ threads_set G \\₁ eq tid_init, T ∩₁ action ↓₁ eq (ta_propagate x)).","conclusion":"(⋃₁x ∈ threads_set G \\₁ eq tid_init, certT ∩₁ action ↓₁ eq (ta_propagate x))\n≡₁ (⋃₁x ∈ threads_set G \\₁ eq tid_init, T ∩₁ action ↓₁ eq (ta_propagate x))","hypotheses":"","proofString":"apply set_equiv_bunion; [done| ].\nins.\napply T_propagations_certT_thread."},{"statement":"forall x : thread_id,\n(threads_set G \\₁ eq tid_init) x ->\ncertT ∩₁ action ↓₁ eq (ta_propagate x) ≡₁ T ∩₁ action ↓₁ eq (ta_propagate x).","conclusion":"forall x : thread_id,\n(threads_set G \\₁ eq tid_init) x ->\ncertT ∩₁ action ↓₁ eq (ta_propagate x) ≡₁ T ∩₁ action ↓₁ eq (ta_propagate x)","hypotheses":"","proofString":"ins.\napply T_propagations_certT_thread."},{"statement":"(x : thread_id) (COND : (threads_set G \\₁ eq tid_init) x) : certT ∩₁ action ↓₁ eq (ta_propagate x) ≡₁ T ∩₁ action ↓₁ eq (ta_propagate x).","conclusion":"certT ∩₁ action ↓₁ eq (ta_propagate x) ≡₁ T ∩₁ action ↓₁ eq (ta_propagate x)","hypotheses":"(x : thread_id) (COND : (threads_set G \\₁ eq tid_init) x)","proofString":"apply T_propagations_certT_thread."},{"statement":"(t : thread_id) : event ↑₁ (certT ∩₁ action ↓₁ eq (ta_propagate t))\n≡₁ event ↑₁ (T ∩₁ action ↓₁ eq (ta_propagate t)).","conclusion":"event ↑₁ (certT ∩₁ action ↓₁ eq (ta_propagate t))\n≡₁ event ↑₁ (T ∩₁ action ↓₁ eq (ta_propagate t))","hypotheses":"(t : thread_id)","proofString":"by rewrite T_propagations_certT_thread."},{"statement":"event ↑₁ (certT ∩₁ action ↓₁ is_ta_propagate_to_G G)\n≡₁ event ↑₁ (T ∩₁ action ↓₁ is_ta_propagate_to_G G).","conclusion":"event ↑₁ (certT ∩₁ action ↓₁ is_ta_propagate_to_G G)\n≡₁ event ↑₁ (T ∩₁ action ↓₁ is_ta_propagate_to_G G)","hypotheses":"","proofString":"by rewrite T_propagations_certT."}]}