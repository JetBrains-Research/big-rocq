{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Core/FLX.v","fileSamples":[{"statement":"forall (x : R) (e : Z),\n(bpow (e - 1) <= Rabs x <= bpow e)%R ->\nFLX_format x -> FIX_format beta (e - prec) x.","conclusion":"forall (x : R) (e : Z),\n(bpow (e - 1) <= Rabs x <= bpow e)%R ->\nFLX_format x -> FIX_format beta (e - prec) x","hypotheses":"","proofString":"intros x e Hx [[xm xe] H1 H2].\nrewrite H1, (F2R_prec_normalize beta xm xe e prec).\nnow eexists.\nexact H2.\nnow rewrite <- H1."},{"statement":"forall x : R, FLX_format x -> generic_format beta FLX_exp x.","conclusion":"forall x : R, FLX_format x -> generic_format beta FLX_exp x","hypotheses":"","proofString":"intros x [[mx ex] H1 H2].\nsimpl in H2.\nrewrite H1.\napply generic_format_F2R.\nintros Zmx.\nunfold cexp, FLX_exp.\nrewrite mag_F2R with (1 := Zmx).\napply Zplus_le_reg_r with (prec - ex)%Z.\nring_simplify.\nnow apply mag_le_Zpower."},{"statement":"forall x : R, generic_format beta FLX_exp x <-> FLX_format x.","conclusion":"forall x : R, generic_format beta FLX_exp x <-> FLX_format x","hypotheses":"","proofString":"intros x.\nsplit.\napply FLX_format_generic.\napply generic_format_FLX."},{"statement":"(x : R) : generic_format beta FLX_exp x <-> FLX_format x.","conclusion":"generic_format beta FLX_exp x <-> FLX_format x","hypotheses":"(x : R)","proofString":"split.\napply FLX_format_generic.\napply generic_format_FLX."},{"statement":"(x : R) : generic_format beta FLX_exp x -> FLX_format x.","conclusion":"generic_format beta FLX_exp x -> FLX_format x","hypotheses":"(x : R)","proofString":"apply FLX_format_generic."},{"statement":"(x : R) : FLX_format x -> generic_format beta FLX_exp x.","conclusion":"FLX_format x -> generic_format beta FLX_exp x","hypotheses":"(x : R)","proofString":"apply generic_format_FLX."},{"statement":"(x : R) (e : Z) (Hx : (bpow (e - 1) <= Rabs x <= bpow e)%R) : (FLX_exp e <= FIX_exp (e - prec) e)%Z.","conclusion":"(FLX_exp e <= FIX_exp (e - prec) e)%Z","hypotheses":"(x : R) (e : Z) (Hx : (bpow (e - 1) <= Rabs x <= bpow e)%R)","proofString":"apply Z.le_refl."},{"statement":"forall x : R, generic_format beta FLX_exp x <-> FLXN_format x.","conclusion":"forall x : R, generic_format beta FLX_exp x <-> FLXN_format x","hypotheses":"","proofString":"split ; intros H.\nnow apply FLXN_format_generic.\nnow apply generic_format_FLXN."},{"statement":"(x : R) (H : generic_format beta FLX_exp x) : FLXN_format x.","conclusion":"FLXN_format x","hypotheses":"(x : R) (H : generic_format beta FLX_exp x)","proofString":"now apply FLXN_format_generic."},{"statement":"(x : R) (H : FLXN_format x) : generic_format beta FLX_exp x.","conclusion":"generic_format beta FLX_exp x","hypotheses":"(x : R) (H : FLXN_format x)","proofString":"now apply generic_format_FLXN."},{"statement":"forall n : Z, (n <= FLX_exp n)%Z -> Some n = None.","conclusion":"forall n : Z, (n <= FLX_exp n)%Z -> Some n = None","hypotheses":"","proofString":"intros n H2; contradict H2.\nunfold FLX_exp; unfold Prec_gt_0 in prec_gt_0_; lia."},{"statement":"(n : Z) : ~ (n <= FLX_exp n)%Z.","conclusion":"~ (n <= FLX_exp n)%Z","hypotheses":"(n : Z)","proofString":"unfold FLX_exp; unfold Prec_gt_0 in prec_gt_0_; lia."},{"statement":"1%R =\n(IZR (Ztrunc (1 * bpow (- FLX_exp (mag beta 1)))) *\n bpow (FLX_exp (mag beta 1)))%R.","conclusion":"1%R =\n(IZR (Ztrunc (1 * bpow (- FLX_exp (mag beta 1)))) *\n bpow (FLX_exp (mag beta 1)))%R","hypotheses":"","proofString":"rewrite Rmult_1_l, (mag_unique beta 1 1).\nunfold FLX_exp.\nrewrite <- IZR_Zpower; [|unfold Prec_gt_0 in prec_gt_0_; lia].\nrewrite Ztrunc_IZR, IZR_Zpower; [|unfold Prec_gt_0 in prec_gt_0_; lia].\nrewrite <- bpow_plus.\nnow replace (_ + _)%Z with Z0 by ring.\nrewrite Rabs_R1; simpl; split; [now right|].\nunfold Z.pow_pos; simpl; rewrite Zmult_1_r; apply IZR_lt.\nassert (H := Zle_bool_imp_le _ _ (radix_prop beta)); lia."},{"statement":"1%R = (IZR (Ztrunc (bpow (- FLX_exp 1))) * bpow (FLX_exp 1))%R.","conclusion":"1%R = (IZR (Ztrunc (bpow (- FLX_exp 1))) * bpow (FLX_exp 1))%R","hypotheses":"","proofString":"unfold FLX_exp.\nrewrite <- IZR_Zpower; [|unfold Prec_gt_0 in prec_gt_0_; lia].\nrewrite Ztrunc_IZR, IZR_Zpower; [|unfold Prec_gt_0 in prec_gt_0_; lia].\nrewrite <- bpow_plus.\nnow replace (_ + _)%Z with Z0 by ring."},{"statement":"1%R = (IZR (Ztrunc (bpow (- (1 - prec)))) * bpow (1 - prec))%R.","conclusion":"1%R = (IZR (Ztrunc (bpow (- (1 - prec)))) * bpow (1 - prec))%R","hypotheses":"","proofString":"rewrite <- IZR_Zpower; [|unfold Prec_gt_0 in prec_gt_0_; lia].\nrewrite Ztrunc_IZR, IZR_Zpower; [|unfold Prec_gt_0 in prec_gt_0_; lia].\nrewrite <- bpow_plus.\nnow replace (_ + _)%Z with Z0 by ring."},{"statement":"1%R = (IZR (Ztrunc (IZR (beta ^ (- (1 - prec))))) * bpow (1 - prec))%R.","conclusion":"1%R = (IZR (Ztrunc (IZR (beta ^ (- (1 - prec))))) * bpow (1 - prec))%R","hypotheses":"","proofString":"rewrite Ztrunc_IZR, IZR_Zpower; [|unfold Prec_gt_0 in prec_gt_0_; lia].\nrewrite <- bpow_plus.\nnow replace (_ + _)%Z with Z0 by ring."},{"statement":"1%R = (bpow (- (1 - prec)) * bpow (1 - prec))%R.","conclusion":"1%R = (bpow (- (1 - prec)) * bpow (1 - prec))%R","hypotheses":"","proofString":"rewrite <- bpow_plus.\nnow replace (_ + _)%Z with Z0 by ring."},{"statement":"1%R = bpow (- (1 - prec) + (1 - prec)).","conclusion":"1%R = bpow (- (1 - prec) + (1 - prec))","hypotheses":"","proofString":"now replace (_ + _)%Z with Z0 by ring."},{"statement":"(bpow (1 - 1) <= Rabs 1 < bpow 1)%R.","conclusion":"(bpow (1 - 1) <= Rabs 1 < bpow 1)%R","hypotheses":"","proofString":"rewrite Rabs_R1; simpl; split; [now right|].\nunfold Z.pow_pos; simpl; rewrite Zmult_1_r; apply IZR_lt.\nassert (H := Zle_bool_imp_le _ _ (radix_prop beta)); lia."},{"statement":"(1 < IZR (Z.pow_pos beta 1))%R.","conclusion":"(1 < IZR (Z.pow_pos beta 1))%R","hypotheses":"","proofString":"unfold Z.pow_pos; simpl; rewrite Zmult_1_r; apply IZR_lt.\nassert (H := Zle_bool_imp_le _ _ (radix_prop beta)); lia."},{"statement":"(1 < beta)%Z.","conclusion":"(1 < beta)%Z","hypotheses":"","proofString":"assert (H := Zle_bool_imp_le _ _ (radix_prop beta)); lia."},{"statement":"match negligible_exp FLX_exp with\n| Some n => bpow (FLX_exp n)\n| None => 0%R\nend = 0%R.","conclusion":"match negligible_exp FLX_exp with\n| Some n => bpow (FLX_exp n)\n| None => 0%R\nend = 0%R","hypotheses":"","proofString":"rewrite negligible_exp_FLX; easy."},{"statement":"bpow (mag beta 1 - prec) = bpow (- prec + 1).","conclusion":"bpow (mag beta 1 - prec) = bpow (- prec + 1)","hypotheses":"","proofString":"rewrite mag_1; f_equal; ring."},{"statement":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R) : round beta FLX_exp rnd x = 0%R -> x = 0%R.","conclusion":"round beta FLX_exp rnd x = 0%R -> x = 0%R","hypotheses":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R)","proofString":"apply eq_0_round_0_negligible_exp; try assumption.\napply FLX_exp_valid.\napply negligible_exp_FLX."},{"statement":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R) : Valid_exp FLX_exp.","conclusion":"Valid_exp FLX_exp","hypotheses":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R)","proofString":"apply FLX_exp_valid."},{"statement":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R) : negligible_exp FLX_exp = None.","conclusion":"negligible_exp FLX_exp = None","hypotheses":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R)","proofString":"apply negligible_exp_FLX."},{"statement":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R) (Hx : (0 < x)%R) : (0 <= x)%R.","conclusion":"(0 <= x)%R","hypotheses":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R) (Hx : (0 < x)%R)","proofString":"now apply Rlt_le."},{"statement":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R) (Hx : (0 < x)%R) (H : 0%R = round beta FLX_exp rnd x) : x <> 0%R.","conclusion":"x <> 0%R","hypotheses":"(rnd : R -> Z) (Hr : Valid_rnd rnd) (x : R) (Hx : (0 < x)%R) (H : 0%R = round beta FLX_exp rnd x)","proofString":"now apply Rgt_not_eq."},{"statement":"(x : R) (Hx : x = 0%R) : (ulp beta FLX_exp x <= Rabs x * bpow (1 - prec))%R.","conclusion":"(ulp beta FLX_exp x <= Rabs x * bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x = 0%R)","proofString":"rewrite Hx, ulp_FLX_0, Rabs_R0.\nright; ring."},{"statement":"(x : R) (Hx : x = 0%R) : (0 <= 0 * bpow (1 - prec))%R.","conclusion":"(0 <= 0 * bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x = 0%R)","proofString":"right; ring."},{"statement":"(x : R) (Hx : x <> 0%R) : (ulp beta FLX_exp x <= Rabs x * bpow (1 - prec))%R.","conclusion":"(ulp beta FLX_exp x <= Rabs x * bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"rewrite ulp_neq_0; try exact Hx.\nunfold cexp, FLX_exp.\nreplace (mag beta x - prec)%Z with ((mag beta x - 1) + (1-prec))%Z by ring.\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply bpow_mag_le."},{"statement":"(x : R) (Hx : x <> 0%R) : (bpow (cexp beta FLX_exp x) <= Rabs x * bpow (1 - prec))%R.","conclusion":"(bpow (cexp beta FLX_exp x) <= Rabs x * bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"unfold cexp, FLX_exp.\nreplace (mag beta x - prec)%Z with ((mag beta x - 1) + (1-prec))%Z by ring.\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply bpow_mag_le."},{"statement":"(x : R) (Hx : x <> 0%R) : (bpow (mag beta x - prec) <= Rabs x * bpow (1 - prec))%R.","conclusion":"(bpow (mag beta x - prec) <= Rabs x * bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"replace (mag beta x - prec)%Z with ((mag beta x - 1) + (1-prec))%Z by ring.\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply bpow_mag_le."},{"statement":"(x : R) (Hx : x <> 0%R) : (bpow (mag beta x - 1 + (1 - prec)) <= Rabs x * bpow (1 - prec))%R.","conclusion":"(bpow (mag beta x - 1 + (1 - prec)) <= Rabs x * bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"rewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply bpow_mag_le."},{"statement":"(x : R) (Hx : x <> 0%R) : (bpow (mag beta x - 1) * bpow (1 - prec) <= Rabs x * bpow (1 - prec))%R.","conclusion":"(bpow (mag beta x - 1) * bpow (1 - prec) <= Rabs x * bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply bpow_mag_le."},{"statement":"(x : R) (Hx : x <> 0%R) : (0 <= bpow (1 - prec))%R.","conclusion":"(0 <= bpow (1 - prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"apply bpow_ge_0."},{"statement":"(x : R) (Hx : x <> 0%R) : (bpow (mag beta x - 1) <= Rabs x)%R.","conclusion":"(bpow (mag beta x - 1) <= Rabs x)%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"now apply bpow_mag_le."},{"statement":"(x : R) (Hx : x = 0%R) : (Rabs x * bpow (- prec) <= ulp beta FLX_exp x)%R.","conclusion":"(Rabs x * bpow (- prec) <= ulp beta FLX_exp x)%R","hypotheses":"(x : R) (Hx : x = 0%R)","proofString":"rewrite Hx, ulp_FLX_0, Rabs_R0.\nright; ring."},{"statement":"(x : R) (Hx : x = 0%R) : (0 * bpow (- prec) <= 0)%R.","conclusion":"(0 * bpow (- prec) <= 0)%R","hypotheses":"(x : R) (Hx : x = 0%R)","proofString":"right; ring."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) <= ulp beta FLX_exp x)%R.","conclusion":"(Rabs x * bpow (- prec) <= ulp beta FLX_exp x)%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"rewrite ulp_neq_0; try exact Hx.\nunfold cexp, FLX_exp.\nunfold Zminus; rewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nleft; now apply bpow_mag_gt."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) <= bpow (cexp beta FLX_exp x))%R.","conclusion":"(Rabs x * bpow (- prec) <= bpow (cexp beta FLX_exp x))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"unfold cexp, FLX_exp.\nunfold Zminus; rewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nleft; now apply bpow_mag_gt."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) <= bpow (mag beta x - prec))%R.","conclusion":"(Rabs x * bpow (- prec) <= bpow (mag beta x - prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"unfold Zminus; rewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nleft; now apply bpow_mag_gt."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) <= bpow (mag beta x) * bpow (- prec))%R.","conclusion":"(Rabs x * bpow (- prec) <= bpow (mag beta x) * bpow (- prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\nleft; now apply bpow_mag_gt."},{"statement":"(x : R) (Hx : x <> 0%R) : (0 <= bpow (- prec))%R.","conclusion":"(0 <= bpow (- prec))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"apply bpow_ge_0."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x <= bpow (mag beta x))%R.","conclusion":"(Rabs x <= bpow (mag beta x))%R","hypotheses":"(x : R) (Hx : x <> 0%R)","proofString":"left; now apply bpow_mag_gt."},{"statement":"(x : R) (e : Z) : ulp beta FLX_exp (x * bpow e) = (ulp beta FLX_exp x * bpow e)%R.","conclusion":"ulp beta FLX_exp (x * bpow e) = (ulp beta FLX_exp x * bpow e)%R","hypotheses":"(x : R) (e : Z)","proofString":"destruct (Req_dec x 0) as [Hx|Hx].\nunfold ulp.\nnow rewrite !Req_bool_true, negligible_exp_FLX; rewrite ?Hx, ?Rmult_0_l.\nunfold ulp; rewrite Req_bool_false;  [|now intro H; apply Hx, (Rmult_eq_reg_r (bpow e));    [rewrite Rmult_0_l|apply Rgt_not_eq, Rlt_gt, bpow_gt_0]].\nrewrite (Req_bool_false _ _ Hx), <- bpow_plus; f_equal; unfold cexp, FLX_exp.\nnow rewrite mag_mult_bpow; [ring|]."},{"statement":"(x : R) (e : Z) (Hx : x = 0%R) : ulp beta FLX_exp (x * bpow e) = (ulp beta FLX_exp x * bpow e)%R.","conclusion":"ulp beta FLX_exp (x * bpow e) = (ulp beta FLX_exp x * bpow e)%R","hypotheses":"(x : R) (e : Z) (Hx : x = 0%R)","proofString":"unfold ulp.\nnow rewrite !Req_bool_true, negligible_exp_FLX; rewrite ?Hx, ?Rmult_0_l."},{"statement":"(x : R) (e : Z) (Hx : x = 0%R) : (if Req_bool (x * bpow e) 0\n then\n  match negligible_exp FLX_exp with\n  | Some n => bpow (FLX_exp n)\n  | None => 0%R\n  end\n else bpow (cexp beta FLX_exp (x * bpow e))) =\n((if Req_bool x 0\n  then\n   match negligible_exp FLX_exp with\n   | Some n => bpow (FLX_exp n)\n   | None => 0\n   end\n  else bpow (cexp beta FLX_exp x)) * bpow e)%R.","conclusion":"(if Req_bool (x * bpow e) 0\n then\n  match negligible_exp FLX_exp with\n  | Some n => bpow (FLX_exp n)\n  | None => 0%R\n  end\n else bpow (cexp beta FLX_exp (x * bpow e))) =\n((if Req_bool x 0\n  then\n   match negligible_exp FLX_exp with\n   | Some n => bpow (FLX_exp n)\n   | None => 0\n   end\n  else bpow (cexp beta FLX_exp x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Hx : x = 0%R)","proofString":"now rewrite !Req_bool_true, negligible_exp_FLX; rewrite ?Hx, ?Rmult_0_l."},{"statement":"(x : R) (e : Z) (Hx : x <> 0%R) : ulp beta FLX_exp (x * bpow e) = (ulp beta FLX_exp x * bpow e)%R.","conclusion":"ulp beta FLX_exp (x * bpow e) = (ulp beta FLX_exp x * bpow e)%R","hypotheses":"(x : R) (e : Z) (Hx : x <> 0%R)","proofString":"unfold ulp; rewrite Req_bool_false;  [|now intro H; apply Hx, (Rmult_eq_reg_r (bpow e));    [rewrite Rmult_0_l|apply Rgt_not_eq, Rlt_gt, bpow_gt_0]].\nrewrite (Req_bool_false _ _ Hx), <- bpow_plus; f_equal; unfold cexp, FLX_exp.\nnow rewrite mag_mult_bpow; [ring|]."},{"statement":"(x : R) (e : Z) (Hx : x <> 0%R) : bpow (cexp beta FLX_exp (x * bpow e)) =\n((if Req_bool x 0\n  then\n   match negligible_exp FLX_exp with\n   | Some n => bpow (FLX_exp n)\n   | None => 0\n   end\n  else bpow (cexp beta FLX_exp x)) * bpow e)%R.","conclusion":"bpow (cexp beta FLX_exp (x * bpow e)) =\n((if Req_bool x 0\n  then\n   match negligible_exp FLX_exp with\n   | Some n => bpow (FLX_exp n)\n   | None => 0\n   end\n  else bpow (cexp beta FLX_exp x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Hx : x <> 0%R)","proofString":"rewrite (Req_bool_false _ _ Hx), <- bpow_plus; f_equal; unfold cexp, FLX_exp.\nnow rewrite mag_mult_bpow; [ring|]."},{"statement":"(x : R) (e : Z) (Hx : x <> 0%R) : (mag beta (x * bpow e) - prec)%Z = (mag beta x - prec + e)%Z.","conclusion":"(mag beta (x * bpow e) - prec)%Z = (mag beta x - prec + e)%Z","hypotheses":"(x : R) (e : Z) (Hx : x <> 0%R)","proofString":"now rewrite mag_mult_bpow; [ring|]."},{"statement":"(x : R) (e : Z) : succ beta FLX_exp (x * bpow e) = (succ beta FLX_exp x * bpow e)%R.","conclusion":"succ beta FLX_exp (x * bpow e) = (succ beta FLX_exp x * bpow e)%R","hypotheses":"(x : R) (e : Z)","proofString":"destruct (Rle_or_lt 0 x) as [Px|Nx].\nrewrite succ_eq_pos; [|now apply Rmult_le_pos, bpow_ge_0].\nrewrite (succ_eq_pos _ _ _ Px).\nnow rewrite Rmult_plus_distr_r; f_equal; apply ulp_FLX_exact_shift.\nunfold succ.\nrewrite Rle_bool_false; [|assert (H := bpow_gt_0 beta e); nra].\nrewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Px : (0 <= x)%R) : succ beta FLX_exp (x * bpow e) = (succ beta FLX_exp x * bpow e)%R.","conclusion":"succ beta FLX_exp (x * bpow e) = (succ beta FLX_exp x * bpow e)%R","hypotheses":"(x : R) (e : Z) (Px : (0 <= x)%R)","proofString":"rewrite succ_eq_pos; [|now apply Rmult_le_pos, bpow_ge_0].\nrewrite (succ_eq_pos _ _ _ Px).\nnow rewrite Rmult_plus_distr_r; f_equal; apply ulp_FLX_exact_shift."},{"statement":"(x : R) (e : Z) (Px : (0 <= x)%R) : (x * bpow e + ulp beta FLX_exp (x * bpow e))%R =\n(succ beta FLX_exp x * bpow e)%R.","conclusion":"(x * bpow e + ulp beta FLX_exp (x * bpow e))%R =\n(succ beta FLX_exp x * bpow e)%R","hypotheses":"(x : R) (e : Z) (Px : (0 <= x)%R)","proofString":"rewrite (succ_eq_pos _ _ _ Px).\nnow rewrite Rmult_plus_distr_r; f_equal; apply ulp_FLX_exact_shift."},{"statement":"(x : R) (e : Z) (Px : (0 <= x)%R) : (x * bpow e + ulp beta FLX_exp (x * bpow e))%R =\n((x + ulp beta FLX_exp x) * bpow e)%R.","conclusion":"(x * bpow e + ulp beta FLX_exp (x * bpow e))%R =\n((x + ulp beta FLX_exp x) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Px : (0 <= x)%R)","proofString":"now rewrite Rmult_plus_distr_r; f_equal; apply ulp_FLX_exact_shift."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : succ beta FLX_exp (x * bpow e) = (succ beta FLX_exp x * bpow e)%R.","conclusion":"succ beta FLX_exp (x * bpow e) = (succ beta FLX_exp x * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"unfold succ.\nrewrite Rle_bool_false; [|assert (H := bpow_gt_0 beta e); nra].\nrewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (if Rle_bool 0 (x * bpow e)\n then (x * bpow e + ulp beta FLX_exp (x * bpow e))%R\n else (- pred_pos beta FLX_exp (- (x * bpow e)))%R) =\n((if Rle_bool 0 x\n  then x + ulp beta FLX_exp x\n  else - pred_pos beta FLX_exp (- x)) * bpow e)%R.","conclusion":"(if Rle_bool 0 (x * bpow e)\n then (x * bpow e + ulp beta FLX_exp (x * bpow e))%R\n else (- pred_pos beta FLX_exp (- (x * bpow e)))%R) =\n((if Rle_bool 0 x\n  then x + ulp beta FLX_exp x\n  else - pred_pos beta FLX_exp (- x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"rewrite Rle_bool_false; [|assert (H := bpow_gt_0 beta e); nra].\nrewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (- pred_pos beta FLX_exp (- (x * bpow e)))%R =\n((if Rle_bool 0 x\n  then x + ulp beta FLX_exp x\n  else - pred_pos beta FLX_exp (- x)) * bpow e)%R.","conclusion":"(- pred_pos beta FLX_exp (- (x * bpow e)))%R =\n((if Rle_bool 0 x\n  then x + ulp beta FLX_exp x\n  else - pred_pos beta FLX_exp (- x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"rewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (- pred_pos beta FLX_exp (- (x * bpow e)))%R =\n(- pred_pos beta FLX_exp (- x) * bpow e)%R.","conclusion":"(- pred_pos beta FLX_exp (- (x * bpow e)))%R =\n(- pred_pos beta FLX_exp (- x) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"rewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : pred_pos beta FLX_exp (- x * bpow e) =\n(pred_pos beta FLX_exp (- x) * bpow e)%R.","conclusion":"pred_pos beta FLX_exp (- x * bpow e) =\n(pred_pos beta FLX_exp (- x) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"unfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (if Req_bool (- x * bpow e) (bpow (mag beta (- x * bpow e) - 1))\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x * bpow e) - 1)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R.","conclusion":"(if Req_bool (- x * bpow e) (bpow (mag beta (- x * bpow e) - 1))\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x * bpow e) - 1)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"rewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (if Req_bool (- x * bpow e) (bpow (mag beta (- x) + e - 1))\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x) + e - 1)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R.","conclusion":"(if Req_bool (- x * bpow e) (bpow (mag beta (- x) + e - 1))\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x) + e - 1)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"replace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (if Req_bool (- x * bpow e) (bpow (mag beta (- x) - 1) * bpow e)\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x) - 1 + e)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R.","conclusion":"(if Req_bool (- x * bpow e) (bpow (mag beta (- x) - 1) * bpow e)\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x) - 1 + e)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"unfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (if\n  match Rcompare (- x) (bpow (mag beta (- x) - 1)) with\n  | Eq => true\n  | _ => false\n  end\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x) - 1 + e)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if\n   match Rcompare (- x) (bpow (mag beta (- x) - 1)) with\n   | Eq => true\n   | _ => false\n   end\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R.","conclusion":"(if\n  match Rcompare (- x) (bpow (mag beta (- x) - 1)) with\n  | Eq => true\n  | _ => false\n  end\n then (- x * bpow e - bpow (FLX_exp (mag beta (- x) - 1 + e)))%R\n else (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R) =\n((if\n   match Rcompare (- x) (bpow (mag beta (- x) - 1)) with\n   | Eq => true\n   | _ => false\n   end\n  then - x - bpow (FLX_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLX_exp (- x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"fold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nunfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLX_exact_shift; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (- x * bpow e - bpow (FLX_exp (mag beta (- x) - 1 + e)))%R =\n((- x - bpow (FLX_exp (mag beta (- x) - 1))) * bpow e)%R.","conclusion":"(- x * bpow e - bpow (FLX_exp (mag beta (- x) - 1 + e)))%R =\n((- x - bpow (FLX_exp (mag beta (- x) - 1))) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"unfold FLX_exp.\nreplace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (- x * bpow e - bpow (mag beta (- x) - 1 + e - prec))%R =\n((- x - bpow (mag beta (- x) - 1 - prec)) * bpow e)%R.","conclusion":"(- x * bpow e - bpow (mag beta (- x) - 1 + e - prec))%R =\n((- x - bpow (mag beta (- x) - 1 - prec)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"replace (_ - _)%Z with (mag beta (- x) - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (- x * bpow e - bpow (mag beta (- x) - 1 - prec + e))%R =\n((- x - bpow (mag beta (- x) - 1 - prec)) * bpow e)%R.","conclusion":"(- x * bpow e - bpow (mag beta (- x) - 1 - prec + e))%R =\n((- x - bpow (mag beta (- x) - 1 - prec)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"rewrite bpow_plus; ring."},{"statement":"(x : R) (e : Z) (Nx : (x < 0)%R) : (- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R =\n((- x - ulp beta FLX_exp (- x)) * bpow e)%R.","conclusion":"(- x * bpow e - ulp beta FLX_exp (- x * bpow e))%R =\n((- x - ulp beta FLX_exp (- x)) * bpow e)%R","hypotheses":"(x : R) (e : Z) (Nx : (x < 0)%R)","proofString":"rewrite ulp_FLX_exact_shift; ring."}]}