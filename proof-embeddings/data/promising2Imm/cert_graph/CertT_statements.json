{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/promising2ToImm/src/cert_graph/CertT.v","fileSamples":[{"statement":"covered certT ≡₁ C ∪₁ E ∩₁ NTid_ thread.","proofString":"unfold certT.\nsimplify_tls_events.\nbasic_solver 10."},{"statement":"covered\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ \nC ∪₁ E ∩₁ NTid_ thread.","proofString":"simplify_tls_events.\nbasic_solver 10."},{"statement":"(C ∪₁ E ∩₁ NTid_ thread) \\₁ ∅ ≡₁ C ∪₁ E ∩₁ NTid_ thread.","proofString":"basic_solver 10."},{"statement":"action ↓₁ eq ta_reserve ∩₁ event ↓₁ (I ∪₁ S ∩₁ Tid_ thread)\n∩₁ action ↓₁ eq ta_issue ⊆₁ ∅.","proofString":"iord_dom_solver."},{"statement":"(action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ NTid_ thread) \\₁\n action ↓₁ eq ta_reserve) ∩₁ action ↓₁ eq ta_issue ⊆₁ ∅.","proofString":"iord_dom_solver."},{"statement":"issued certT ≡₁ I.","proofString":"unfold certT.\nsimplify_tls_events.\nbasic_solver 10."},{"statement":"issued\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ I.","proofString":"simplify_tls_events.\nbasic_solver 10."},{"statement":"I \\₁ ∅ ≡₁ I.","proofString":"basic_solver 10."},{"statement":"reserved certT ≡₁ I ∪₁ S ∩₁ Tid_ thread.","proofString":"unfold certT.\nsimplify_tls_events.\nrewrite set_minus_absorb_l; [basic_solver| ].\nunfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"reserved\n  ((T ∪₁ eq ta_cover <*> (E ∩₁ NTid_ thread)) \\₁ action ↓₁ eq ta_reserve\n   ∪₁ eq ta_reserve <*> (I ∪₁ S ∩₁ Tid_ thread)) ≡₁ \nI ∪₁ S ∩₁ Tid_ thread.","proofString":"simplify_tls_events.\nrewrite set_minus_absorb_l; [basic_solver| ].\nunfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"S \\₁ event ↑₁ (action ↓₁ eq ta_reserve) ∪₁ (I ∪₁ S ∩₁ Tid_ thread)\n≡₁ I ∪₁ S ∩₁ Tid_ thread.","proofString":"rewrite set_minus_absorb_l; [basic_solver| ].\nunfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"S ⊆₁ event ↑₁ (action ↓₁ eq ta_reserve).","proofString":"unfold reserved.\nunfolder.\nins.\ndesc.\nvauto."},{"statement":"event ↑₁ (T ∩₁ action ↓₁ eq ta_reserve) ⊆₁ event ↑₁ (action ↓₁ eq ta_reserve).","proofString":"unfolder.\nins.\ndesc.\nvauto."},{"statement":"forall x : actid,\n(exists y : trav_label, (T y /\\ ta_reserve = action y) /\\ event y = x) ->\nexists y : trav_label, ta_reserve = action y /\\ event y = x.","proofString":"ins.\ndesc.\nvauto."},{"statement":"(x : actid) (H : exists y : trav_label, (T y /\\ ta_reserve = action y) /\\ event y = x) : exists y : trav_label, ta_reserve = action y /\\ event y = x.","proofString":"desc.\nvauto."},{"statement":"(x : actid) (y : trav_label) (H : T y) (H1 : ta_reserve = action y) (H0 : event y = x) : exists y0 : trav_label, ta_reserve = action y0 /\\ event y0 = x.","proofString":"vauto."},{"statement":"(t : thread_id) : action ↓₁ eq (ta_propagate t) ⊆₁ set_compl (action ↓₁ eq ta_reserve).","proofString":"unfolder.\nby intros ? <-."},{"statement":"(t : thread_id) : forall x : trav_label, ta_propagate t = action x -> ta_reserve <> action x.","proofString":"by intros ? <-."},{"statement":"(t : thread_id) : (action ↓₁ eq ta_cover ∩₁ event ↓₁ (E ∩₁ NTid_ thread) \\₁\n action ↓₁ eq ta_reserve) ∩₁ action ↓₁ eq (ta_propagate t)\n∪₁ action ↓₁ eq ta_reserve ∩₁ event ↓₁ (I ∪₁ S ∩₁ Tid_ thread)\n   ∩₁ action ↓₁ eq (ta_propagate t) ⊆₁ ∅.","proofString":"unfolder.\nins; des; vauto; congruence."},{"statement":"(t : thread_id) : forall x : trav_label,\n((ta_cover = action x /\\ E (event x) /\\ tid (event x) <> thread) /\\\n ta_reserve <> action x) /\\ ta_propagate t = action x \\/\n(ta_reserve = action x /\\\n (I (event x) \\/ S (event x) /\\ tid (event x) = thread)) /\\\nta_propagate t = action x -> False.","proofString":"ins; des; vauto; congruence."},{"statement":"certT ∩₁ action ↓₁ (⋃₁t ∈ threads_set G \\₁ eq tid_init, eq (ta_propagate t))\n≡₁ T ∩₁ action ↓₁ (⋃₁t ∈ threads_set G \\₁ eq tid_init, eq (ta_propagate t)).","proofString":"rewrite set_map_bunion, <- !set_bunion_inter_compat_l.\napply set_equiv_bunion; [done| ].\nins.\napply T_propagations_certT_thread."},{"statement":"(⋃₁x ∈ threads_set G \\₁ eq tid_init, certT ∩₁ action ↓₁ eq (ta_propagate x))\n≡₁ (⋃₁x ∈ threads_set G \\₁ eq tid_init, T ∩₁ action ↓₁ eq (ta_propagate x)).","proofString":"apply set_equiv_bunion; [done| ].\nins.\napply T_propagations_certT_thread."},{"statement":"forall x : thread_id,\n(threads_set G \\₁ eq tid_init) x ->\ncertT ∩₁ action ↓₁ eq (ta_propagate x) ≡₁ T ∩₁ action ↓₁ eq (ta_propagate x).","proofString":"ins.\napply T_propagations_certT_thread."},{"statement":"(x : thread_id) (COND : (threads_set G \\₁ eq tid_init) x) : certT ∩₁ action ↓₁ eq (ta_propagate x) ≡₁ T ∩₁ action ↓₁ eq (ta_propagate x).","proofString":"apply T_propagations_certT_thread."},{"statement":"(t : thread_id) : event ↑₁ (certT ∩₁ action ↓₁ eq (ta_propagate t))\n≡₁ event ↑₁ (T ∩₁ action ↓₁ eq (ta_propagate t)).","proofString":"by rewrite T_propagations_certT_thread."},{"statement":"event ↑₁ (certT ∩₁ action ↓₁ is_ta_propagate_to_G G)\n≡₁ event ↑₁ (T ∩₁ action ↓₁ is_ta_propagate_to_G G).","proofString":"by rewrite T_propagations_certT."}]}