{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/bigRocq/dataset/imm/src/traversal/TraversalConfig.v","fileSamples":[{"statement":"(T T' : trav_config) (ICOV : covered T ⊆₁ covered T') (IISS : issued T ⊆₁ issued T') : coverable T ⊆₁ coverable T'.","proofString":"by unfold coverable; rewrite ICOV, IISS."},{"statement":"(T T' : trav_config) (ICOV : covered T ⊆₁ covered T') (IISS : issued T ⊆₁ issued T') : issuable T ⊆₁ issuable T'.","proofString":"by unfold issuable; rewrite ICOV, IISS."},{"statement":"(tc1 tc2 : trav_config) (H : covered tc1 ≡₁ covered tc2) (H0 : issued tc1 ≡₁ issued tc2) : tc1 = tc2.","proofString":"destruct tc1, tc2.\nins.\napply set_extensionality in H, H0.\ncongruence."},{"statement":"(covered0 issued0 covered1 issued1 : actid -> Prop) (H : covered {| covered := covered0; issued := issued0 |}\n≡₁ covered {| covered := covered1; issued := issued1 |}) (H0 : issued {| covered := covered0; issued := issued0 |}\n≡₁ issued {| covered := covered1; issued := issued1 |}) : {| covered := covered0; issued := issued0 |} =\n{| covered := covered1; issued := issued1 |}.","proofString":"ins.\napply set_extensionality in H, H0.\ncongruence."},{"statement":"(covered0 issued0 covered1 issued1 : actid -> Prop) (H : covered0 ≡₁ covered1) (H0 : issued0 ≡₁ issued1) : {| covered := covered0; issued := issued0 |} =\n{| covered := covered1; issued := issued1 |}.","proofString":"apply set_extensionality in H, H0.\ncongruence."},{"statement":"(covered0 issued0 covered1 issued1 : actid -> Prop) (H : covered0 = covered1) (H0 : issued0 = issued1) : {| covered := covered0; issued := issued0 |} =\n{| covered := covered1; issued := issued1 |}.","proofString":"congruence."},{"statement":"issuable T ⊆₁ E.","proofString":"by apply issuableE."},{"statement":"issuable T ⊆₁ W.","proofString":"by apply issuableW."},{"statement":"coverable T ⊆₁ E.","proofString":"by apply coverableE."},{"statement":"W ∩₁ coverable T ⊆₁ issued T.","proofString":"by apply w_coverable_issued."},{"statement":"(x : actid) (H : is_init x) (H0 : E x) : issued T x.","proofString":"apply w_covered_issued.\nsplit.\nby apply (init_w WF).\ncdes TCCOH; unfolder in ICOV; basic_solver 21."},{"statement":"(x : actid) (H : is_init x) (H0 : E x) : (W ∩₁ covered T) x.","proofString":"split.\nby apply (init_w WF).\ncdes TCCOH; unfolder in ICOV; basic_solver 21."},{"statement":"(x : actid) (H : is_init x) (H0 : E x) : is_w lab x.","proofString":"by apply (init_w WF)."},{"statement":"(x : actid) (H : is_init x) (H0 : E x) : covered T x.","proofString":"cdes TCCOH; unfolder in ICOV; basic_solver 21."},{"statement":"(x : actid) (H : is_init x) (H0 : E x) : covered T x.","proofString":"cdes TCCOH; unfolder in ICOV; basic_solver 21."},{"statement":"(e : actid) (NEXT : next (covered T) e) (HH : is_init e) : False.","proofString":"apply NEXT.\napply init_covered.\nsplit; auto.\napply NEXT."},{"statement":"(e : actid) (NEXT : next (covered T) e) (HH : is_init e) : covered T e.","proofString":"apply init_covered.\nsplit; auto.\napply NEXT."},{"statement":"(e : actid) (NEXT : next (covered T) e) (HH : is_init e) : (Init ∩₁ E) e.","proofString":"split; auto.\napply NEXT."},{"statement":"(e : actid) (NEXT : next (covered T) e) (HH : is_init e) : E e.","proofString":"apply NEXT."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"unfold issuable.\nbasic_solver 20."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺\n     ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n        ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘)\n⊆₁ issued T.","proofString":"basic_solver 20."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply ar_ct_issuable_is_issued."},{"statement":"⦗covered T⦘ ⨾ sb ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ sb.","proofString":"basic_solver."},{"statement":"dom_rel (sb ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"seq_rewrite (dom_rel_helper dom_sb_coverable).\nbasic_solver."},{"statement":"dom_rel (⦗covered T⦘ ⨾ sb ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"basic_solver."},{"statement":"⦗covered T⦘ ⨾ sb ⨾ ⦗covered T⦘ ≡ ⦗covered T⦘ ⨾ ⦗covered T⦘ ⨾ sb ⨾ ⦗covered T⦘.","proofString":"basic_solver."},{"statement":"dom_rel\n  (rf\n   ⨾ ⦗E ∩₁ (fun e : actid => dom_rel (sb ⨾ ⦗eq e⦘) ⊆₁ covered T)\n      ∩₁ (W ∩₁ issued T\n          ∪₁ R ∩₁ (fun e : actid => dom_rel (rf ⨾ ⦗eq e⦘) ⊆₁ issued T)\n          ∪₁ F ∩₁ (fun e : actid => dom_rel (sc ⨾ ⦗eq e⦘) ⊆₁ covered T))⦘)\n⊆₁ issued T.","proofString":"rewrite (dom_r (wf_rfD WF)).\ntype_solver 40."},{"statement":"dom_rel\n  ((rf ⨾ ⦗R⦘)\n   ⨾ ⦗E ∩₁ (fun e : actid => dom_rel (sb ⨾ ⦗eq e⦘) ⊆₁ covered T)\n      ∩₁ (W ∩₁ issued T\n          ∪₁ R ∩₁ (fun e : actid => dom_rel (rf ⨾ ⦗eq e⦘) ⊆₁ issued T)\n          ∪₁ F ∩₁ (fun e : actid => dom_rel (sc ⨾ ⦗eq e⦘) ⊆₁ covered T))⦘)\n⊆₁ issued T.","proofString":"type_solver 40."},{"statement":"dom_rel (rf ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"apply dom_rf_coverable."},{"statement":"⦗issued T⦘ ⨾ rf ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ rf.","proofString":"basic_solver."},{"statement":"⦗issued T⦘ ⨾ rf ⨾ ⦗covered T⦘ ≡ ⦗issued T⦘ ⨾ ⦗issued T⦘ ⨾ rf ⨾ ⦗covered T⦘.","proofString":"basic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) : dom_rel (sc ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"rewrite (dom_r (@wf_scD G sc Wf_sc)).\nunfold coverable, dom_cond; type_solver 42."},{"statement":"(Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) : dom_rel ((sc ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"unfold coverable, dom_cond; type_solver 42."},{"statement":"dom_rel (sc ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"seq_rewrite (dom_rel_helper dom_sc_coverable).\nbasic_solver."},{"statement":"dom_rel (⦗covered T⦘ ⨾ sc ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"basic_solver."},{"statement":"⦗covered T⦘ ⨾ sc ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ sc.","proofString":"basic_solver."},{"statement":"sc ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ sc.","proofString":"by apply sc_coverable."},{"statement":"dom_rel ((sc ∪ rfe ∪ ar_int G) ⨾ ⦗coverable T⦘) ⊆₁ covered T ∪₁ issued T.","proofString":"rewrite !seq_union_l.\nrewrite (ar_int_in_sb WF).\narewrite (rfe ⊆ rf).\nrewrite sb_coverable, rf_coverable.\nrewrite sc_coverable.\nbasic_solver."},{"statement":"dom_rel (sc ⨾ ⦗coverable T⦘ ∪ rfe ⨾ ⦗coverable T⦘ ∪ ar_int G ⨾ ⦗coverable T⦘)\n⊆₁ covered T ∪₁ issued T.","proofString":"rewrite (ar_int_in_sb WF).\narewrite (rfe ⊆ rf).\nrewrite sb_coverable, rf_coverable.\nrewrite sc_coverable.\nbasic_solver."},{"statement":"dom_rel (sc ⨾ ⦗coverable T⦘ ∪ rfe ⨾ ⦗coverable T⦘ ∪ sb ⨾ ⦗coverable T⦘)\n⊆₁ covered T ∪₁ issued T.","proofString":"arewrite (rfe ⊆ rf).\nrewrite sb_coverable, rf_coverable.\nrewrite sc_coverable.\nbasic_solver."},{"statement":"dom_rel (sc ⨾ ⦗coverable T⦘ ∪ rf ⨾ ⦗coverable T⦘ ∪ sb ⨾ ⦗coverable T⦘)\n⊆₁ covered T ∪₁ issued T.","proofString":"rewrite sb_coverable, rf_coverable.\nrewrite sc_coverable.\nbasic_solver."},{"statement":"dom_rel (sc ⨾ ⦗coverable T⦘ ∪ ⦗issued T⦘ ⨾ rf ∪ ⦗covered T⦘ ⨾ sb)\n⊆₁ covered T ∪₁ issued T.","proofString":"rewrite sc_coverable.\nbasic_solver."},{"statement":"dom_rel (⦗covered T⦘ ⨾ sc ∪ ⦗issued T⦘ ⨾ rf ∪ ⦗covered T⦘ ⨾ sb)\n⊆₁ covered T ∪₁ issued T.","proofString":"basic_solver."},{"statement":"dom_rel (ar ⨾ ⦗coverable T⦘) ⊆₁ covered T ∪₁ issued T.","proofString":"apply ar_coverable_in_CI."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺\n     ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n        ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘)\n⊆₁ issued T.","proofString":"basic_solver 10."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel\n  (⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) ⨾ ⦗issued T⦘)\n⊆₁ issued T.","proofString":"rewrite !seq_union_l, !seq_union_r, dom_union; unionL.\nbasic_solver.\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"basic_solver."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_rt_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_ct_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"by apply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_rfrmw_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"by apply ar_ct_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"apply W_ar_coverable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"by apply W_ar_coverable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply ar_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗covered T⦘) ⊆₁ issued T.","proofString":"by apply W_ar_C_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"apply ar_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗issued T⦘) ∪₁ dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"unionL; [basic_solver|].\nby apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ sb ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"apply dom_W_sb_coverable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ rfe ⨾ ppo ⨾ ⦗W⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"rewrite <- id_inter.\nrewrite w_coverable_issued.\nsin_rewrite rfe_ppo_in_ar_ct; auto.\nby apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ rfe ⨾ ppo ⨾ ⦗W ∩₁ coverable T⦘) ⊆₁ issued T.","proofString":"rewrite w_coverable_issued.\nsin_rewrite rfe_ppo_in_ar_ct; auto.\nby apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ rfe ⨾ ppo ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"sin_rewrite rfe_ppo_in_ar_ct; auto.\nby apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ sb ⨾ ppo ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"rewrite (ppo_in_sb WF).\nsin_rewrite sb_sb.\nrewrite dom_W_sb_coverable_in_I; auto."},{"statement":"dom_rel (⦗W⦘ ⨾ sb ⨾ sb ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"sin_rewrite sb_sb.\nrewrite dom_W_sb_coverable_in_I; auto."},{"statement":"dom_rel (⦗W⦘ ⨾ sb ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"rewrite dom_W_sb_coverable_in_I; auto."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"by apply rf_ppo_loc_coverable_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"apply rf_ppo_loc_coverable_in_I."},{"statement":"dom_rel (rf ⨾ rmw ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"apply rfrmw_coverable_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T⦘)\n∪₁ dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗issuable T⦘) ⊆₁ \nissued T.","proofString":"unionL.\napply rf_ppo_loc_coverable_in_I.\nrewrite (dom_l (wf_rfD WF)), !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\nby apply ar_rf_ppo_loc_issuable_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"apply rf_ppo_loc_coverable_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite (dom_l (wf_rfD WF)), !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\nby apply ar_rf_ppo_loc_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ rf ⨾ ppo ∩ same_loc ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\nby apply ar_rf_ppo_loc_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_issuable_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T ∪₁ issuable T⦘) ⊆₁ issued T.","proofString":"by apply rf_ppo_loc_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ rf ⨾ ppo ∩ same_loc ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"arewrite (rf ⨾ (ppo ∩ same_loc) ⊆ ar ∪ rf ⨾ (ppo ∩ same_loc)).\nby apply ar_rf_ppo_loc_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_I_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply rf_ppo_loc_I_in_I."},{"statement":"dom_rel ((⦗fun _ : actid => True⦘ ∪ (rf ⨾ ppo ∩ same_loc)⁺) ⨾ ⦗issued T⦘)\n⊆₁ issued T.","proofString":"rewrite !seq_union_l, !seq_id_l.\nrewrite dom_union.\nunionL; [basic_solver|].\nrewrite (dom_l (wf_rfD WF)).\nrewrite !seqA.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel (⦗issued T⦘ ∪ (rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"rewrite dom_union.\nunionL; [basic_solver|].\nrewrite (dom_l (wf_rfD WF)).\nrewrite !seqA.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel ⦗issued T⦘ ∪₁ dom_rel ((rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘)\n⊆₁ issued T.","proofString":"unionL; [basic_solver|].\nrewrite (dom_l (wf_rfD WF)).\nrewrite !seqA.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel ((rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"rewrite (dom_l (wf_rfD WF)).\nrewrite !seqA.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel (((⦗W⦘ ⨾ rf) ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"rewrite !seqA.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel ((⦗W⦘ ⨾ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"rewrite inclusion_ct_seq_eqv_l.\nrewrite !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel ((⦗W⦘ ⨾ (rf ⨾ ppo ∩ same_loc)⁺) ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"rewrite !seqA.\narewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"arewrite (rf ⨾ ppo ∩ same_loc ⊆ ar ∪ rf ⨾ ppo ∩ same_loc).\napply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_I_in_I."},{"statement":"dom_rel ((rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply rf_ppo_loc_rt_I_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗covered T⦘)\n∪₁ dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"unionL.\nby apply rf_ppo_loc_C_in_I.\nby apply rf_ppo_loc_I_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗covered T⦘) ⊆₁ issued T.","proofString":"by apply rf_ppo_loc_C_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply rf_ppo_loc_I_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗covered T ∪₁ issued T⦘) ⊆₁ issued T.","proofString":"by apply rf_ppo_loc_CI_in_I."},{"statement":"dom_rel (ar ⨾ ⦗coverable T⦘) ∪₁ dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T⦘)\n⊆₁ covered T ∪₁ issued T.","proofString":"unionL.\nby apply ar_coverable_in_CI.\nrewrite rf_ppo_loc_coverable_in_I; eauto with hahn."},{"statement":"dom_rel (ar ⨾ ⦗coverable T⦘) ⊆₁ covered T ∪₁ issued T.","proofString":"by apply ar_coverable_in_CI."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T⦘) ⊆₁ covered T ∪₁ issued T.","proofString":"rewrite rf_ppo_loc_coverable_in_I; eauto with hahn."},{"statement":"dom_rel ((ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable T⦘) ⊆₁ covered T ∪₁ issued T.","proofString":"by apply ar_rf_ppo_loc_coverable_in_CI."},{"statement":"dom_rel ((ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable T⦘) ⊆₁ covered T ∪₁ issued T.","proofString":"apply ar_rf_ppo_loc_coverable_in_CI."},{"statement":"dom_rel ((ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗covered T⦘) ⊆₁ covered T ∪₁ issued T.","proofString":"by apply ar_rf_ppo_loc_C_in_CI."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗coverable T ∪₁ issuable T⦘) ⊆₁ issued T.","proofString":"apply W_ar_coverable_issuable_in_CI."},{"statement":"dom_rel (⦗W⦘ ⨾ (rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable T ∪₁ issuable T⦘)\n⊆₁ issued T.","proofString":"arewrite_id ⦗W⦘.\nrewrite seq_id_l.\napply rf_ppo_loc_coverable_issuable_in_I."},{"statement":"dom_rel\n  (⦗fun _ : actid => True⦘\n   ⨾ rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T ∪₁ issuable T⦘) ⊆₁ \nissued T.","proofString":"rewrite seq_id_l.\napply rf_ppo_loc_coverable_issuable_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T ∪₁ issuable T⦘) ⊆₁ issued T.","proofString":"apply rf_ppo_loc_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable T ∪₁ issuable T⦘)\n⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗covered T ∪₁ issued T⦘) ⊆₁ issued T.","proofString":"apply ar_CI_in_CI."},{"statement":"dom_rel (⦗W⦘ ⨾ (rf ⨾ ppo ∩ same_loc) ⨾ ⦗covered T ∪₁ issued T⦘) ⊆₁ issued T.","proofString":"arewrite_id ⦗W⦘.\nrewrite seq_id_l.\napply rf_ppo_loc_CI_in_I."},{"statement":"dom_rel\n  (⦗fun _ : actid => True⦘ ⨾ rf ⨾ ppo ∩ same_loc ⨾ ⦗covered T ∪₁ issued T⦘)\n⊆₁ issued T.","proofString":"rewrite seq_id_l.\napply rf_ppo_loc_CI_in_I."},{"statement":"dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗covered T ∪₁ issued T⦘) ⊆₁ issued T.","proofString":"apply rf_ppo_loc_CI_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗covered T ∪₁ issued T⦘)\n⊆₁ issued T.","proofString":"by apply ar_rf_ppo_loc_CI_in_I."},{"statement":"(x : actid) (AA : is_w lab x) (y : actid) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc) x y) (BB : (coverable T ∪₁ issuable T) y) : issued T x.","proofString":"eapply ar_rf_ppo_loc_coverable_issuable_in_I.\nbasic_solver 10."},{"statement":"(x : actid) (AA : is_w lab x) (y : actid) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc) x y) (BB : (coverable T ∪₁ issuable T) y) : dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable T ∪₁ issuable T⦘) x.","proofString":"basic_solver 10."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : (rf ⨾ ppo ∩ same_loc) y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : (coverable T ∪₁ issuable T) z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (coverable T ∪₁ issuable T) y.","proofString":"right.\napply issued_in_issuable.\napply rf_ppo_loc_coverable_issuable_in_I.\nexists z.\napply seqA.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : (rf ⨾ ppo ∩ same_loc) y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : (coverable T ∪₁ issuable T) z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : issuable T y.","proofString":"apply issued_in_issuable.\napply rf_ppo_loc_coverable_issuable_in_I.\nexists z.\napply seqA.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : (rf ⨾ ppo ∩ same_loc) y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : (coverable T ∪₁ issuable T) z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : issued T y.","proofString":"apply rf_ppo_loc_coverable_issuable_in_I.\nexists z.\napply seqA.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : (rf ⨾ ppo ∩ same_loc) y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : (coverable T ∪₁ issuable T) z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T ∪₁ issuable T⦘) y.","proofString":"exists z.\napply seqA.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : (rf ⨾ ppo ∩ same_loc) y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : (coverable T ∪₁ issuable T) z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (rf ⨾ ppo ∩ same_loc ⨾ ⦗coverable T ∪₁ issuable T⦘) y z.","proofString":"apply seqA.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : (rf ⨾ ppo ∩ same_loc) y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : (coverable T ∪₁ issuable T) z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : ((rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable T ∪₁ issuable T⦘) y z.","proofString":"basic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issuable T⦘) x.","proofString":"exists z.\napply seq_eqv_lr.\nsplits; auto.\napply ct_end.\nexists y.\nsplit; auto.\nby apply clos_trans_in_rt.\nby left."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issuable T⦘) x z.","proofString":"apply seq_eqv_lr.\nsplits; auto.\napply ct_end.\nexists y.\nsplit; auto.\nby apply clos_trans_in_rt.\nby left."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : is_w lab x /\\ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x z /\\ issuable T z.","proofString":"splits; auto.\napply ct_end.\nexists y.\nsplit; auto.\nby apply clos_trans_in_rt.\nby left."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x z.","proofString":"apply ct_end.\nexists y.\nsplit; auto.\nby apply clos_trans_in_rt.\nby left."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : ((ar ∪ rf ⨾ ppo ∩ same_loc)＊ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)) x z.","proofString":"exists y.\nsplit; auto.\nby apply clos_trans_in_rt.\nby left."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (ar ∪ rf ⨾ ppo ∩ same_loc)＊ x y /\\ (ar ∪ rf ⨾ ppo ∩ same_loc) y z.","proofString":"split; auto.\nby apply clos_trans_in_rt.\nby left."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (ar ∪ rf ⨾ ppo ∩ same_loc)＊ x y.","proofString":"by apply clos_trans_in_rt."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : issuable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (ar ∪ rf ⨾ ppo ∩ same_loc) y z.","proofString":"by left."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (coverable T ∪₁ issuable T) y.","proofString":"destruct QQ as [[QQ|QQ]|QQ].\nleft.\napply covered_in_coverable.\napply dom_sc_coverable.\nexists z.\nbasic_solver.\nright.\napply issued_in_issuable.\napply dom_rf_coverable.\nexists z.\ndo 2 red in QQ.\nbasic_solver.\nleft.\napply covered_in_coverable.\napply dom_sb_coverable.\nexists z.\napply seq_eqv_r.\nsplit; auto.\nby apply ar_int_in_sb."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : sc y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (coverable T ∪₁ issuable T) y.","proofString":"left.\napply covered_in_coverable.\napply dom_sc_coverable.\nexists z.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : sc y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : coverable T y.","proofString":"apply covered_in_coverable.\napply dom_sc_coverable.\nexists z.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : sc y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : covered T y.","proofString":"apply dom_sc_coverable.\nexists z.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : sc y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : dom_rel (sc ⨾ ⦗coverable T⦘) y.","proofString":"exists z.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : sc y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (sc ⨾ ⦗coverable T⦘) y z.","proofString":"basic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : rfe y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (coverable T ∪₁ issuable T) y.","proofString":"right.\napply issued_in_issuable.\napply dom_rf_coverable.\nexists z.\ndo 2 red in QQ.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : rfe y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : issuable T y.","proofString":"apply issued_in_issuable.\napply dom_rf_coverable.\nexists z.\ndo 2 red in QQ.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : rfe y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : issued T y.","proofString":"apply dom_rf_coverable.\nexists z.\ndo 2 red in QQ.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : rfe y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : dom_rel (rf ⨾ ⦗coverable T⦘) y.","proofString":"exists z.\ndo 2 red in QQ.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : rfe y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (rf ⨾ ⦗coverable T⦘) y z.","proofString":"do 2 red in QQ.\nbasic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : rf y z /\\ ~ sb y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (rf ⨾ ⦗coverable T⦘) y z.","proofString":"basic_solver."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar_int G y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (coverable T ∪₁ issuable T) y.","proofString":"left.\napply covered_in_coverable.\napply dom_sb_coverable.\nexists z.\napply seq_eqv_r.\nsplit; auto.\nby apply ar_int_in_sb."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar_int G y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : coverable T y.","proofString":"apply covered_in_coverable.\napply dom_sb_coverable.\nexists z.\napply seq_eqv_r.\nsplit; auto.\nby apply ar_int_in_sb."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar_int G y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : covered T y.","proofString":"apply dom_sb_coverable.\nexists z.\napply seq_eqv_r.\nsplit; auto.\nby apply ar_int_in_sb."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar_int G y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : dom_rel (sb ⨾ ⦗coverable T⦘) y.","proofString":"exists z.\napply seq_eqv_r.\nsplit; auto.\nby apply ar_int_in_sb."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar_int G y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : (sb ⨾ ⦗coverable T⦘) y z.","proofString":"apply seq_eqv_r.\nsplit; auto.\nby apply ar_int_in_sb."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar_int G y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : sb y z /\\ coverable T z.","proofString":"split; auto.\nby apply ar_int_in_sb."},{"statement":"(x : actid) (AA : is_w lab x) (y z : actid) (QQ : ar_int G y z) (HH : (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ x y) (BB : coverable T z) (IHHH : (coverable T ∪₁ issuable T) y -> issued T x) : sb y z.","proofString":"by apply ar_int_in_sb."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗coverable T ∪₁ issuable T⦘)\n⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗coverable T ∪₁ issued T⦘)\n⊆₁ issued T.","proofString":"rewrite issued_in_issuable at 1.\napply ar_rf_ppo_loc_ct_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗coverable T ∪₁ issuable T⦘)\n⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗covered T ∪₁ issued T⦘)\n⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_CI_in_I."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ (⦗fun _ : actid => True⦘ ∪ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"rewrite !seq_union_l, !seq_union_r, dom_union, seq_id_l.\nunionL.\ngeneralize w_coverable_issued.\nbasic_solver.\narewrite (coverable T ⊆₁ coverable T ∪₁ issuable T).\napply ar_rf_ppo_loc_ct_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗coverable T⦘)\n∪₁ dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗coverable T⦘) ⊆₁ \nissued T.","proofString":"unionL.\ngeneralize w_coverable_issued.\nbasic_solver.\narewrite (coverable T ⊆₁ coverable T ∪₁ issuable T).\napply ar_rf_ppo_loc_ct_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"generalize w_coverable_issued.\nbasic_solver."},{"statement":"W ∩₁ coverable T ⊆₁ issued T -> dom_rel (⦗W⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"basic_solver."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"arewrite (coverable T ⊆₁ coverable T ∪₁ issuable T).\napply ar_rf_ppo_loc_ct_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗coverable T ∪₁ issuable T⦘)\n⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_coverable_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_rt_coverable_in_I."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ (⦗fun _ : actid => True⦘ ∪ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺)\n     ⨾ ⦗covered T ∪₁ issued T⦘) ⊆₁ issued T.","proofString":"rewrite !seq_union_l, !seq_union_r, dom_union, seq_id_l.\nunionL.\ngeneralize w_covered_issued.\nbasic_solver.\napply ar_rf_ppo_loc_ct_CI_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗covered T ∪₁ issued T⦘)\n∪₁ dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗covered T ∪₁ issued T⦘)\n⊆₁ issued T.","proofString":"unionL.\ngeneralize w_covered_issued.\nbasic_solver.\napply ar_rf_ppo_loc_ct_CI_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗covered T ∪₁ issued T⦘) ⊆₁ issued T.","proofString":"generalize w_covered_issued.\nbasic_solver."},{"statement":"W ∩₁ covered T ⊆₁ issued T ->\ndom_rel (⦗W⦘ ⨾ ⦗covered T ∪₁ issued T⦘) ⊆₁ issued T.","proofString":"basic_solver."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗covered T ∪₁ issued T⦘)\n⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_ct_CI_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗covered T ∪₁ issued T⦘)\n⊆₁ issued T.","proofString":"apply ar_rf_ppo_loc_rt_CI_in_I."},{"statement":"(x : actid) (H : is_w lab x) (H1 : covered T x) : issued T x.","proofString":"apply w_covered_issued; basic_solver."},{"statement":"(x : actid) (H : is_w lab x) (y z : actid) (AA : sb y z) (H2 : ar＊ x y) (H1 : covered T z) (IHclos_refl_trans_n1 : covered T y -> issued T x) : issued T x.","proofString":"apply IHclos_refl_trans_n1.\neapply dom_sb_covered; basic_solver 10."},{"statement":"(x : actid) (H : is_w lab x) (y z : actid) (AA : sb y z) (H2 : ar＊ x y) (H1 : covered T z) (IHclos_refl_trans_n1 : covered T y -> issued T x) : covered T y.","proofString":"eapply dom_sb_covered; basic_solver 10."},{"statement":"(x : actid) (H : is_w lab x) (y z : actid) (AA : sc y z) (H2 : ar＊ x y) (H1 : covered T z) (IHclos_refl_trans_n1 : covered T y -> issued T x) : covered T y.","proofString":"eapply dom_sc_covered; basic_solver 10."},{"statement":"(x : actid) (H : is_w lab x) (y z : actid) (AA : rfe y z) (H2 : ar＊ x y) (H1 : covered T z) (IHclos_refl_trans_n1 : covered T y -> issued T x) : dom_rel (⦗W⦘ ⨾ ar＊ ⨾ ⦗issued T⦘) x.","proofString":"exists y.\nunfolder; splits; auto.\napply dom_rf_covered; auto.\neexists.\napply seq_eqv_r.\nby split; [apply AA|]."},{"statement":"(x : actid) (H : is_w lab x) (y z : actid) (AA : rfe y z) (H2 : ar＊ x y) (H1 : covered T z) (IHclos_refl_trans_n1 : covered T y -> issued T x) : (⦗W⦘ ⨾ ar＊ ⨾ ⦗issued T⦘) x y.","proofString":"unfolder; splits; auto.\napply dom_rf_covered; auto.\neexists.\napply seq_eqv_r.\nby split; [apply AA|]."},{"statement":"(x : actid) (H : is_w lab x) (y z : actid) (AA : rfe y z) (H2 : ar＊ x y) (H1 : covered T z) (IHclos_refl_trans_n1 : covered T y -> issued T x) : issued T y.","proofString":"apply dom_rf_covered; auto.\neexists.\napply seq_eqv_r.\nby split; [apply AA|]."},{"statement":"(x : actid) (H : is_w lab x) (y z : actid) (AA : rfe y z) (H2 : ar＊ x y) (H1 : covered T z) (IHclos_refl_trans_n1 : covered T y -> issued T x) : dom_rel (rf ⨾ ⦗covered T⦘) y.","proofString":"eexists.\napply seq_eqv_r.\nby split; [apply AA|]."},{"statement":"dom_rel (⦗W⦘ ⨾ ar＊ ⨾ ⦗covered T⦘) ⊆₁ issued T.","proofString":"by apply ar_rt_C_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar＊ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_rt_I_in_I."},{"statement":"sb ⨾ ⦗covered T⦘ ∪ sb ⨾ ⦗dom_rel (sb^? ⨾ ⦗issued T⦘)⦘\n⊆ ⦗covered T⦘ ⨾ sb ∪ ⦗dom_rel (sb^? ⨾ ⦗issued T⦘)⦘ ⨾ sb.","proofString":"apply union_mori.\nrewrite sb_covered; eauto.\nbasic_solver.\ngeneralize (@sb_trans G).\nbasic_solver 10."},{"statement":"sb ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sb.","proofString":"rewrite sb_covered; eauto.\nbasic_solver."},{"statement":"⦗covered T⦘ ⨾ sb ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sb.","proofString":"basic_solver."},{"statement":"sb ⨾ ⦗dom_rel (sb^? ⨾ ⦗issued T⦘)⦘ ⊆ ⦗dom_rel (sb^? ⨾ ⦗issued T⦘)⦘ ⨾ sb.","proofString":"generalize (@sb_trans G).\nbasic_solver 10."},{"statement":"transitive sb ->\nsb ⨾ ⦗dom_rel (sb^? ⨾ ⦗issued T⦘)⦘ ⊆ ⦗dom_rel (sb^? ⨾ ⦗issued T⦘)⦘ ⨾ sb.","proofString":"basic_solver 10."},{"statement":"dom_rel ((⦗W⦘ ⨾ rfe) ⨾ ppo ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"arewrite (rfe ⊆ ar).\nrewrite ppo_in_ar.\nsin_rewrite ar_ar_in_ar_ct.\nby apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ppo ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"rewrite ppo_in_ar.\nsin_rewrite ar_ar_in_ar_ct.\nby apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_ct_I_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"unfold issuable.\nbasic_solver 20."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺\n     ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n        ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘)\n⊆₁ issued T.","proofString":"basic_solver 20."},{"statement":"dom_rel ((detour ∪ ⦗W⦘ ⨾ rfe) ⨾ ppo ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite (dom_l (wf_detourD WF)).\narewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\nrewrite ppo_in_ar, !seqA.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ detour ∪ ⦗W⦘ ⨾ rfe) ⨾ ppo ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\nrewrite ppo_in_ar, !seqA.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ detour ∪ ⦗W⦘ ⨾ ar) ⨾ ppo ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (detour ⊆ ar).\nrelsf.\nrewrite ppo_in_ar, !seqA.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ ar ∪ ⦗W⦘ ⨾ ar) ⨾ ppo ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"relsf.\nrewrite ppo_in_ar, !seqA.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ ar) ⨾ ppo ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite ppo_in_ar, !seqA.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply dom_ar_ct_issuable."},{"statement":"dom_rel ((detour ∪ rfe) ⨾ ppo ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply dom_detour_rfe_ppo_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ detour ∪ rfe) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite (dom_l (wf_rfeD WF)).\narewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ detour ∪ ⦗W⦘ ⨾ rfe) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"arewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ detour ∪ ⦗W⦘ ⨾ ar) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"arewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ ar ∪ ⦗W⦘ ⨾ ar) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"relsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel ((⦗W⦘ ⨾ ar) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\nsin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar.","proofString":"arewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn."},{"statement":"bob ⊆ ar.","proofString":"unfold imm_s.ar, ar_int.\neauto with hahn."},{"statement":"bob\n⊆ sc ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","proofString":"eauto with hahn."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ar ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"sin_rewrite ar_ar_in_ar_ct.\napply dom_ar_ct_issuable."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply dom_ar_ct_issuable."},{"statement":"dom_rel ((detour ∪ rfe) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply dom_detour_rfe_acq_sb_issuable."},{"statement":"dom_rel\n  ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗Acq⦘ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"arewrite (rfi ⊆ rf).\nsin_rewrite (@rmwrf_rt_Acq_in_ar_rfrmw_rt G WF sc); auto.\nrewrite (dom_l (wf_detourD WF)).\nrewrite (dom_l (wf_rfeD WF)).\narewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel\n  ((detour ∪ rfe) ⨾ (rmw ⨾ rf)＊ ⨾ ⦗Acq⦘ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"sin_rewrite (@rmwrf_rt_Acq_in_ar_rfrmw_rt G WF sc); auto.\nrewrite (dom_l (wf_detourD WF)).\nrewrite (dom_l (wf_rfeD WF)).\narewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel ((detour ∪ rfe) ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"rewrite (dom_l (wf_detourD WF)).\nrewrite (dom_l (wf_rfeD WF)).\narewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel\n  ((⦗W⦘ ⨾ detour ∪ rfe) ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"rewrite (dom_l (wf_rfeD WF)).\narewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel\n  ((⦗W⦘ ⨾ detour ∪ ⦗W⦘ ⨾ rfe)\n   ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ \nissued T.","proofString":"arewrite (rfe ⊆ ar).\narewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel\n  ((⦗W⦘ ⨾ detour ∪ ⦗W⦘ ⨾ ar)\n   ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ \nissued T.","proofString":"arewrite (detour ⊆ ar).\nrelsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel\n  ((⦗W⦘ ⨾ ar ∪ ⦗W⦘ ⨾ ar) ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"relsf.\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel ((⦗W⦘ ⨾ ar) ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"arewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar).\narewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar.","proofString":"arewrite (⦗R ∩₁ Acq⦘ ⨾ sb ⊆ bob).\nunfold imm_s.ar, ar_int.\neauto with hahn."},{"statement":"bob ⊆ ar.","proofString":"unfold imm_s.ar, ar_int.\neauto with hahn."},{"statement":"bob\n⊆ sc ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","proofString":"eauto with hahn."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ar ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 3.\narewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ (ar ∪ rf ⨾ rmw) ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"arewrite (ar ⊆ ar ∪ rf ⨾ rmw) at 1.\nseq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel\n  (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ (ar ∪ rf ⨾ rmw) ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"seq_rewrite <- ct_end.\narewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite ((ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺).\nrewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct.\napply ar_rfrmw_ct_issuable_in_I."},{"statement":"(ar ∪ rf ⨾ rmw) ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺.","proofString":"rewrite ct_step with (r:= ar ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"(ar ∪ rf ⨾ rmw)⁺ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⊆ (ar ∪ rf ⨾ rmw)⁺.","proofString":"apply ct_ct."},{"statement":"dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply ar_rfrmw_ct_issuable_in_I."},{"statement":"dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"apply dom_detour_rmwrfi_rfe_acq_sb_issuable."},{"statement":"dom_rel ((detour ∪ rfe) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply dom_detour_rfe_acq_sb_issuable."},{"statement":"dom_rel (rfe ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply dom_rfe_acq_sb_issuable."},{"statement":"⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘.","proofString":"rewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver."},{"statement":"⦗W_ex_acq⦘ ⨾ ⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘.","proofString":"rewrite (W_ex_in_W WF) at 1.\nbasic_solver."},{"statement":"⦗W ∩₁ (fun a : actid => is_xacq lab a)⦘ ⨾ ⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘.","proofString":"basic_solver."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\napply ar_issuable_is_issued."},{"statement":"⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘.","proofString":"unfold issuable.\nbasic_solver 10."},{"statement":"⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘\n⊆ ⦗W⦘\n  ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n     ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘.","proofString":"basic_solver 10."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\napply ar_issuable_is_issued."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply ar_issuable_is_issued."},{"statement":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply dom_wex_sb_issuable."},{"statement":"(SBT : transitive sb) : (rf ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"eapply rt_ind_left with (P:= fun r => r ⨾ ⦗issued T⦘).\nby eauto with hahn.\nbasic_solver 12.\nintros k H; rewrite !seqA.\nsin_rewrite H.\nrewrite rfi_union_rfe at 1; relsf; unionL.\nrewrite <- seqA; seq_rewrite <- ct_begin; basic_solver 12.\nrewrite rtE at 2.\nrelsf; unionR left.\narewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆                  ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘).\napply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I.\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) : good_ctx (fun r : relation actid => r ⨾ ⦗issued T⦘).","proofString":"by eauto with hahn."},{"statement":"(SBT : transitive sb) : ⦗fun _ : actid => True⦘ ⨾ ⦗issued T⦘\n⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"basic_solver 12."},{"statement":"(SBT : transitive sb) : forall k : relation actid,\nk ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊ ->\n((rf ⨾ rmw) ⨾ k) ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"intros k H; rewrite !seqA.\nsin_rewrite H.\nrewrite rfi_union_rfe at 1; relsf; unionL.\nrewrite <- seqA; seq_rewrite <- ct_begin; basic_solver 12.\nrewrite rtE at 2.\nrelsf; unionR left.\narewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆                  ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘).\napply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I.\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rf ⨾ rmw ⨾ k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"sin_rewrite H.\nrewrite rfi_union_rfe at 1; relsf; unionL.\nrewrite <- seqA; seq_rewrite <- ct_begin; basic_solver 12.\nrewrite rtE at 2.\nrelsf; unionR left.\narewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆                  ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘).\napply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I.\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rf ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"rewrite rfi_union_rfe at 1; relsf; unionL.\nrewrite <- seqA; seq_rewrite <- ct_begin; basic_solver 12.\nrewrite rtE at 2.\nrelsf; unionR left.\narewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆                  ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘).\napply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I.\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rfi ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"rewrite <- seqA; seq_rewrite <- ct_begin; basic_solver 12."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"rewrite rtE at 2.\nrelsf; unionR left.\narewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆                  ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘).\napply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I.\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ (⦗fun _ : actid => True⦘ ∪ (rfi ⨾ rmw)⁺) ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"relsf; unionR left.\narewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆                  ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘).\napply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I.\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"arewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⊆                  ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘).\napply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I.\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘\n⊆ ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘.","proofString":"apply dom_rel_helper.\narewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : dom_rel (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"arewrite (rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊).\narewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rmw ⨾ (rfi ⨾ rmw)＊ ⊆ ar＊.","proofString":"arewrite (rfi ⊆ rf).\nrewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rmw ⨾ (rf ⨾ rmw)＊ ⊆ ar＊.","proofString":"rewrite (rmw_in_ppo WF) at 1.\nrewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ppo ⨾ (rf ⨾ rmw)＊ ⊆ ar＊.","proofString":"rewrite ppo_in_ar.\nrewrite rtE at 1.\nrewrite seq_union_r, seq_id_r.\napply inclusion_union_l.\nrewrite ct_step at 1.\napply inclusion_t_rt.\nrewrite rmw_in_ppo_loc; auto.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ar ⨾ (rf ⨾ ppo ∩ same_loc)⁺ ⊆ ar＊.","proofString":"rewrite ar_rf_ppo_loc_ct_in_ar_ct; auto.\napply inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ar⁺ ⊆ ar＊.","proofString":"apply inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : dom_rel (rfe ⨾ ar＊ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"rewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : dom_rel (⦗W⦘ ⨾ rfe ⨾ ar＊ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"arewrite (rfe ⊆ ar) at 1.\nseq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : dom_rel (⦗W⦘ ⨾ ar ⨾ ar＊ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"seq_rewrite <- ct_begin.\nby apply ar_ct_I_in_I."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply ar_ct_I_in_I."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ⦗issued T⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"arewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ⦗issued T⦘ ⨾ rf ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"arewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ⦗issued T⦘ ⨾ rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"arewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\nrewrite <- seqA.\napply ct_begin.\narewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺.","proofString":"rewrite <- seqA.\napply ct_begin."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : (rf ⨾ rmw) ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺.","proofString":"apply ct_begin."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ⦗issued T⦘ ⨾ (rf ⨾ rmw)⁺ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"arewrite_id ⦗issued T⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ⦗issued T⦘ ⨾ (rf ⨾ rmw)⁺ ⨾ ⦗fun _ : actid => True⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"rewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ⦗issued T⦘ ⨾ (rf ⨾ rmw)⁺ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"rewrite ct_rt.\nby rewrite inclusion_t_rt."},{"statement":"(SBT : transitive sb) (k : relation actid) (H : k ⨾ ⦗issued T⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊) : ⦗issued T⦘ ⨾ (rf ⨾ rmw)⁺ ⊆ ⦗issued T⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"by rewrite inclusion_t_rt."},{"statement":"dom_rel ((⦗W_ex_acq⦘ ⨾ rfi) ⨾ rmw ⨾ ⦗issuable T⦘ ∪ rfe ⨾ rmw ⨾ ⦗issuable T⦘)\n⊆₁ issued T.","proofString":"rewrite dom_union.\napply set_subset_union_l; split.\nrewrite seqA.\nrewrite (rfi_in_sbloc' WF).\nrewrite (rmw_in_sb WF).\narewrite (sb ∩ same_loc ⨾ sb ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver.\narewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10.\nrewrite (rmw_in_ppo WF).\nrewrite ppo_in_ar.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar).\nsin_rewrite ar_ar_in_ar_ct.\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel ((⦗W_ex_acq⦘ ⨾ rfi) ⨾ rmw ⨾ ⦗issuable T⦘)\n∪₁ dom_rel (rfe ⨾ rmw ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"apply set_subset_union_l; split.\nrewrite seqA.\nrewrite (rfi_in_sbloc' WF).\nrewrite (rmw_in_sb WF).\narewrite (sb ∩ same_loc ⨾ sb ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver.\narewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10.\nrewrite (rmw_in_ppo WF).\nrewrite ppo_in_ar.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar).\nsin_rewrite ar_ar_in_ar_ct.\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel ((⦗W_ex_acq⦘ ⨾ rfi) ⨾ rmw ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite seqA.\nrewrite (rfi_in_sbloc' WF).\nrewrite (rmw_in_sb WF).\narewrite (sb ∩ same_loc ⨾ sb ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver.\narewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel (⦗W_ex_acq⦘ ⨾ rfi ⨾ rmw ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite (rfi_in_sbloc' WF).\nrewrite (rmw_in_sb WF).\narewrite (sb ∩ same_loc ⨾ sb ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver.\narewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ∩ same_loc ⨾ rmw ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite (rmw_in_sb WF).\narewrite (sb ∩ same_loc ⨾ sb ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver.\narewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ∩ same_loc ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (sb ∩ same_loc ⨾ sb ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver.\narewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"sb ∩ same_loc ⨾ sb ⊆ sb.","proofString":"generalize (@sb_trans G).\nbasic_solver."},{"statement":"transitive sb -> sb ∩ same_loc ⨾ sb ⊆ sb.","proofString":"basic_solver."},{"statement":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘).\nunfold issuable.\nbasic_solver 10.\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"⦗issuable T⦘ ⊆ ⦗W⦘ ⨾ ⦗issuable T⦘.","proofString":"unfold issuable.\nbasic_solver 10."},{"statement":"⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘\n⊆ ⦗W⦘\n  ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n     ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘.","proofString":"basic_solver 10."},{"statement":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\narewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘.","proofString":"rewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver."},{"statement":"⦗W_ex_acq⦘ ⨾ ⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘.","proofString":"rewrite (W_ex_in_W WF) at 1.\nbasic_solver."},{"statement":"⦗W ∩₁ (fun a : actid => is_xacq lab a)⦘ ⨾ ⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘.","proofString":"basic_solver."},{"statement":"dom_rel (⦗W⦘ ⨾ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"arewrite (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar).\nrewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite ct_step with (r:=ar).\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"unfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ ar⁺\n     ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n        ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘)\n⊆₁ issued T.","proofString":"arewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺\n     ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n        ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘)\n⊆₁ issued T.","proofString":"basic_solver 10."},{"statement":"dom_rel (rfe ⨾ rmw ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite (rmw_in_ppo WF).\nrewrite ppo_in_ar.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar).\nsin_rewrite ar_ar_in_ar_ct.\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel (rfe ⨾ ppo ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"rewrite ppo_in_ar.\nrewrite (dom_l (wf_rfeD WF)), !seqA.\narewrite (rfe ⊆ ar).\nsin_rewrite ar_ar_in_ar_ct.\nunfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"unfold issuable.\narewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ ar⁺\n     ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n        ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘)\n⊆₁ issued T.","proofString":"arewrite (ar ⊆ ar ∪ rf ⨾ ppo ∩ same_loc) at 1.\nbasic_solver 10."},{"statement":"dom_rel\n  (⦗W⦘\n   ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺\n     ⨾ ⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n        ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘)\n⊆₁ issued T.","proofString":"basic_solver 10."},{"statement":"dom_rel ((⦗W_ex_acq⦘ ⨾ rfi ∪ rfe) ⨾ rmw ⨾ ⦗issuable T⦘) ⊆₁ issued T.","proofString":"by apply wex_rfi_rfe_rmw_issuable_is_issued."},{"statement":"⦗W_ex_acq⦘ ⨾ rf ⊆ ⦗W_ex_acq⦘ ⨾ rfi ∪ rfe.","proofString":"rewrite rfi_union_rfe.\nbasic_solver."},{"statement":"⦗W_ex_acq⦘ ⨾ (rfi ∪ rfe) ⊆ ⦗W_ex_acq⦘ ⨾ rfi ∪ rfe.","proofString":"basic_solver."},{"statement":"dom_rel ((⦗W_ex_acq⦘ ⨾ rfi ∪ rfe) ⨾ rmw ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"by apply wex_rfi_rfe_rmw_issued_is_issued."},{"statement":"dom_rel (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗issuable T⦘) ⊆₁ covered T.","proofString":"arewrite (⦗issuable T⦘ ⊆ ⦗dom_cond fwbob (covered T)⦘).\nunfold issuable.\nbasic_solver 10.\nrewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"⦗issuable T⦘ ⊆ ⦗dom_cond fwbob (covered T)⦘.","proofString":"unfold issuable.\nbasic_solver 10."},{"statement":"⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘\n⊆ ⦗dom_cond fwbob (covered T)⦘.","proofString":"basic_solver 10."},{"statement":"dom_rel (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗dom_cond fwbob (covered T)⦘)\n⊆₁ covered T.","proofString":"rewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"dom_rel (((⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc) ⨾ ⦗W⦘) ⨾ ⦗dom_cond fwbob (covered T)⦘)\n⊆₁ covered T.","proofString":"rewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"(⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc) ⨾ ⦗W⦘ ⊆ fwbob.","proofString":"unfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"(⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc) ⨾ ⦗W⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb.","proofString":"basic_solver 12."},{"statement":"issued T ⊆₁ E ∩₁ W ∩₁ issued T.","proofString":"generalize issuedW, issuedE.\nbasic_solver."},{"statement":"issued T ⊆₁ W -> issued T ⊆₁ E -> issued T ⊆₁ E ∩₁ W ∩₁ issued T.","proofString":"basic_solver."},{"statement":"⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗covered T ∪₁ issued T⦘\n⊆ ⦗covered T ∪₁ issued T⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘.","proofString":"arewrite (⦗W⦘ ⨾ ⦗covered T ∪₁ issued T⦘ ⊆ ⦗W⦘ ⨾ ⦗issued T⦘).\ngeneralize w_covered_issued.\nbasic_solver.\ngeneralize dom_W_Rel_sb_loc_I_in_C.\nbasic_solver 12."},{"statement":"⦗W⦘ ⨾ ⦗covered T ∪₁ issued T⦘ ⊆ ⦗W⦘ ⨾ ⦗issued T⦘.","proofString":"generalize w_covered_issued.\nbasic_solver."},{"statement":"W ∩₁ covered T ⊆₁ issued T ->\n⦗W⦘ ⨾ ⦗covered T ∪₁ issued T⦘ ⊆ ⦗W⦘ ⨾ ⦗issued T⦘.","proofString":"basic_solver."},{"statement":"⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗issued T⦘\n⊆ ⦗covered T ∪₁ issued T⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘.","proofString":"generalize dom_W_Rel_sb_loc_I_in_C.\nbasic_solver 12."},{"statement":"dom_rel (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗issued T⦘) ⊆₁ covered T ->\n⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗issued T⦘\n⊆ ⦗covered T ∪₁ issued T⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘.","proofString":"basic_solver 12."},{"statement":"(RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T ->\ndom_rel (sb ⨾ ⦗covered T⦘) ⊆₁ covered T ->\n(sb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗covered T ∪₁ issued T⦘\n⊆ ⦗covered T ∪₁ issued T⦘ ⨾ sb ⨾ ⦗W ∩₁ Rel⦘.","proofString":"basic_solver 12."},{"statement":"dom_rel (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗issued T⦘) ⊆₁ covered T ->\nW ∩₁ covered T ⊆₁ issued T ->\ndom_rel (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W ∩₁ issued T⦘) ⊆₁ issued T.","proofString":"basic_solver 21."},{"statement":"⦗covered T⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗issued T⦘\n⊆ ⦗covered T⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘.","proofString":"basic_solver."},{"statement":"dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗issuable T⦘) ⊆₁ covered T.","proofString":"arewrite (⦗issuable T⦘ ⊆ ⦗dom_cond fwbob (covered T)⦘).\nunfold issuable.\nbasic_solver 10.\nrewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"⦗issuable T⦘ ⊆ ⦗dom_cond fwbob (covered T)⦘.","proofString":"unfold issuable.\nbasic_solver 10."},{"statement":"⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘\n⊆ ⦗dom_cond fwbob (covered T)⦘.","proofString":"basic_solver 10."},{"statement":"dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗dom_cond fwbob (covered T)⦘) ⊆₁ covered T.","proofString":"rewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"dom_rel ((⦗F ∩₁ Acq/Rel⦘ ⨾ sb) ⨾ ⦗dom_cond fwbob (covered T)⦘) ⊆₁ covered T.","proofString":"rewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ fwbob.","proofString":"unfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"⦗F ∩₁ Acq/Rel⦘ ⨾ sb\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb.","proofString":"basic_solver 12."},{"statement":"⦗covered T⦘ ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗issued T⦘\n⊆ ⦗covered T⦘ ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb.","proofString":"basic_solver."},{"statement":"(e : actid) : coverable T e ->\ncoverable {| covered := covered T ∪₁ eq e; issued := issued T |} e.","proofString":"eapply traversal_mon; simpls.\neauto with hahn."},{"statement":"(e : actid) : covered T ⊆₁ covered T ∪₁ eq e.","proofString":"eauto with hahn."},{"statement":"(e : actid) : coverable {| covered := covered T ∪₁ eq e; issued := issued T |} e ->\ncoverable T e.","proofString":"unfold coverable; simpls.\nintros [[EE COVE] HH].\nsplit.\nclear HH.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto.\ndestruct HH as [[HH|HH]|[AA HH]]; [do 2 left| left;right|right]; auto.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(e : actid) : (E ∩₁ dom_cond sb (covered T ∪₁ eq e)\n ∩₁ (W ∩₁ issued T ∪₁ R ∩₁ dom_cond rf (issued T)\n     ∪₁ F ∩₁ dom_cond sc (covered T ∪₁ eq e))) e ->\n(E ∩₁ dom_cond sb (covered T)\n ∩₁ (W ∩₁ issued T ∪₁ R ∩₁ dom_cond rf (issued T)\n     ∪₁ F ∩₁ dom_cond sc (covered T))) e.","proofString":"intros [[EE COVE] HH].\nsplit.\nclear HH.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto.\ndestruct HH as [[HH|HH]|[AA HH]]; [do 2 left| left;right|right]; auto.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(e : actid) (EE : E e) (COVE : dom_cond sb (covered T ∪₁ eq e) e) (HH : (W ∩₁ issued T ∪₁ R ∩₁ dom_cond rf (issued T)\n ∪₁ F ∩₁ dom_cond sc (covered T ∪₁ eq e)) e) : (E ∩₁ dom_cond sb (covered T)\n ∩₁ (W ∩₁ issued T ∪₁ R ∩₁ dom_cond rf (issued T)\n     ∪₁ F ∩₁ dom_cond sc (covered T))) e.","proofString":"split.\nclear HH.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto.\ndestruct HH as [[HH|HH]|[AA HH]]; [do 2 left| left;right|right]; auto.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(e : actid) (EE : E e) (COVE : dom_cond sb (covered T ∪₁ eq e) e) (HH : (W ∩₁ issued T ∪₁ R ∩₁ dom_cond rf (issued T)\n ∪₁ F ∩₁ dom_cond sc (covered T ∪₁ eq e)) e) : (E ∩₁ dom_cond sb (covered T)) e.","proofString":"clear HH.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto."},{"statement":"(e : actid) (EE : E e) (COVE : dom_cond sb (covered T ∪₁ eq e) e) : (E ∩₁ dom_cond sb (covered T)) e.","proofString":"split; auto.\nunfolder in *.\nins.\ndesf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto."},{"statement":"(e : actid) (EE : E e) (COVE : dom_cond sb (covered T ∪₁ eq e) e) : dom_cond sb (covered T) e.","proofString":"unfolder in *.\nins.\ndesf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto."},{"statement":"(e : actid) (EE : E e) (COVE : forall x : actid,\n(exists y z : actid, sb x z /\\ z = y /\\ e = z) -> covered T x \\/ e = x) : forall x : actid,\n(exists y z : actid, sb x z /\\ z = y /\\ e = z) -> covered T x.","proofString":"ins.\ndesf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto."},{"statement":"(e : actid) (EE : E e) (COVE : forall x0 : actid,\n(exists y z : actid, sb x0 z /\\ z = y /\\ e = z) -> covered T x0 \\/ e = x0) (x : actid) (H : exists y z : actid, sb x z /\\ z = y /\\ e = z) : covered T x.","proofString":"desf.\nedestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto."},{"statement":"(y : actid) (COVE : forall x0 : actid,\n(exists y0 z : actid, sb x0 z /\\ z = y0 /\\ y = z) -> covered T x0 \\/ y = x0) (EE : E y) (x : actid) (H : sb x y) : covered T x.","proofString":"edestruct COVE.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sb_irr; eauto."},{"statement":"(y : actid) (COVE : forall x0 : actid,\n(exists y0 z : actid, sb x0 z /\\ z = y0 /\\ y = z) -> covered T x0 \\/ y = x0) (EE : E y) (x : actid) (H : sb x y) (H0 : y = x) : False.","proofString":"desf.\neapply sb_irr; eauto."},{"statement":"(x : actid) (H : sb x x) (EE : E x) (COVE : forall x0 : actid,\n(exists y z : actid, sb x0 z /\\ z = y /\\ x = z) -> covered T x0 \\/ x = x0) : False.","proofString":"eapply sb_irr; eauto."},{"statement":"(e : actid) (EE : E e) (COVE : dom_cond sb (covered T ∪₁ eq e) e) (HH : (W ∩₁ issued T ∪₁ R ∩₁ dom_cond rf (issued T)\n ∪₁ F ∩₁ dom_cond sc (covered T ∪₁ eq e)) e) : (W ∩₁ issued T ∪₁ R ∩₁ dom_cond rf (issued T) ∪₁ F ∩₁ dom_cond sc (covered T))\n  e.","proofString":"destruct HH as [[HH|HH]|[AA HH]]; [do 2 left| left;right|right]; auto.\nsplit; auto.\nunfolder in *.\nins.\ndesf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(e : actid) (EE : E e) (COVE : dom_cond sb (covered T ∪₁ eq e) e) (AA : is_f lab e) (HH : dom_cond sc (covered T ∪₁ eq e) e) : (F ∩₁ dom_cond sc (covered T)) e.","proofString":"split; auto.\nunfolder in *.\nins.\ndesf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(e : actid) (EE : E e) (COVE : dom_cond sb (covered T ∪₁ eq e) e) (AA : is_f lab e) (HH : dom_cond sc (covered T ∪₁ eq e) e) : dom_cond sc (covered T) e.","proofString":"unfolder in *.\nins.\ndesf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(e : actid) (EE : E e) (COVE : forall x : actid,\n(exists y z : actid, sb x z /\\ z = y /\\ e = z) -> covered T x \\/ e = x) (AA : is_f lab e) (HH : forall x : actid,\n(exists y z : actid, sc x z /\\ z = y /\\ e = z) -> covered T x \\/ e = x) : forall x : actid,\n(exists y z : actid, sc x z /\\ z = y /\\ e = z) -> covered T x.","proofString":"ins.\ndesf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(e : actid) (EE : E e) (COVE : forall x0 : actid,\n(exists y z : actid, sb x0 z /\\ z = y /\\ e = z) -> covered T x0 \\/ e = x0) (AA : is_f lab e) (HH : forall x0 : actid,\n(exists y z : actid, sc x0 z /\\ z = y /\\ e = z) -> covered T x0 \\/ e = x0) (x : actid) (H : exists y z : actid, sc x z /\\ z = y /\\ e = z) : covered T x.","proofString":"desf.\nedestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(y : actid) (HH : forall x0 : actid,\n(exists y0 z : actid, sc x0 z /\\ z = y0 /\\ y = z) -> covered T x0 \\/ y = x0) (AA : is_f lab y) (COVE : forall x0 : actid,\n(exists y0 z : actid, sb x0 z /\\ z = y0 /\\ y = z) -> covered T x0 \\/ y = x0) (EE : E y) (x : actid) (H : sc x y) : covered T x.","proofString":"edestruct HH.\neexists; eauto.\ndone.\nexfalso.\ndesf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(y : actid) (HH : forall x0 : actid,\n(exists y0 z : actid, sc x0 z /\\ z = y0 /\\ y = z) -> covered T x0 \\/ y = x0) (AA : is_f lab y) (COVE : forall x0 : actid,\n(exists y0 z : actid, sb x0 z /\\ z = y0 /\\ y = z) -> covered T x0 \\/ y = x0) (EE : E y) (x : actid) (H : sc x y) (H0 : y = x) : False.","proofString":"desf.\neapply sc_irr; eauto.\napply IMMCON."},{"statement":"(x : actid) (H : sc x x) (EE : E x) (COVE : forall x0 : actid,\n(exists y z : actid, sb x0 z /\\ z = y /\\ x = z) -> covered T x0 \\/ x = x0) (AA : is_f lab x) (HH : forall x0 : actid,\n(exists y z : actid, sc x0 z /\\ z = y /\\ x = z) -> covered T x0 \\/ x = x0) : False.","proofString":"eapply sc_irr; eauto.\napply IMMCON."},{"statement":"⦗covered T⦘ ⨾ release ⨾ ⦗issued T⦘ ⊆ ⦗covered T⦘ ⨾ release.","proofString":"basic_solver."},{"statement":"dom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ndom_rel (release ⨾ rf ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"generalize dom_rf_coverable.\nbasic_solver 21."},{"statement":"dom_rel (rf ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ndom_rel (release ⨾ rf ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"basic_solver 21."},{"statement":"⦗covered T⦘ ⨾ release ⨾ rf ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ release ⨾ rf.","proofString":"basic_solver."},{"statement":"release ⨾ rf ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ release ⨾ rf.","proofString":"by apply release_rf_coverable."},{"statement":"dom_rel (sb ⨾ ⦗W ∩₁ Rel⦘ ⨾ ⦗issuable T⦘) ⊆₁ covered T.","proofString":"arewrite (⦗issuable T⦘ ⊆ ⦗dom_cond fwbob (covered T)⦘).\nunfold issuable.\nbasic_solver 10.\nrewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"⦗issuable T⦘ ⊆ ⦗dom_cond fwbob (covered T)⦘.","proofString":"unfold issuable.\nbasic_solver 10."},{"statement":"⦗E ∩₁ W ∩₁ dom_cond fwbob (covered T)\n ∩₁ dom_cond (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺) (issued T)⦘\n⊆ ⦗dom_cond fwbob (covered T)⦘.","proofString":"basic_solver 10."},{"statement":"dom_rel (sb ⨾ ⦗W ∩₁ Rel⦘ ⨾ ⦗dom_cond fwbob (covered T)⦘) ⊆₁ covered T.","proofString":"rewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"dom_rel ((sb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗dom_cond fwbob (covered T)⦘) ⊆₁ covered T.","proofString":"rewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"sb ⨾ ⦗W ∩₁ Rel⦘ ⊆ fwbob.","proofString":"unfold imm_bob.fwbob.\nbasic_solver 12."},{"statement":"sb ⨾ ⦗W ∩₁ Rel⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb.","proofString":"basic_solver 12."},{"statement":"⦗covered T⦘ ⨾ sb ⨾ ⦗W ∩₁ Rel⦘ ⨾ ⦗issued T⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗W ∩₁ Rel⦘.","proofString":"basic_solver."},{"statement":"dom_rel ((release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘) ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"generalize dom_sb_coverable.\ngeneralize dom_release_rf_coverable.\ngeneralize covered_in_coverable.\nbasic_solver 21."},{"statement":"dom_rel (sb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘) ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"generalize dom_release_rf_coverable.\ngeneralize covered_in_coverable.\nbasic_solver 21."},{"statement":"dom_rel (release ⨾ rf ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (sb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘) ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"generalize covered_in_coverable.\nbasic_solver 21."},{"statement":"covered T ⊆₁ coverable T ->\ndom_rel (release ⨾ rf ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (sb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((release ⨾ rf ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘) ⨾ ⦗coverable T⦘) ⊆₁ covered T.","proofString":"basic_solver 21."},{"statement":"⦗covered T⦘ ⨾ sw ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ sw.","proofString":"basic_solver."},{"statement":"sw ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ sw.","proofString":"by apply sw_coverable."},{"statement":"(sb ∪ sw)⁺ ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"assert (A: (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺).\nrelsf.\nrewrite sb_coverable, sw_coverable.\nrewrite <- ct_step; basic_solver.\nunfold imm_s_hb.hb.\neapply ct_ind_left with (P:= fun r => r ⨾ ⦗coverable T⦘); eauto with hahn.\nintros k H; rewrite !seqA, H.\nrewrite covered_in_coverable at 1.\nsin_rewrite A.\narewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf."},{"statement":"(sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"relsf.\nrewrite sb_coverable, sw_coverable.\nrewrite <- ct_step; basic_solver."},{"statement":"sb ⨾ ⦗coverable T⦘ ∪ sw ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"rewrite sb_coverable, sw_coverable.\nrewrite <- ct_step; basic_solver."},{"statement":"⦗covered T⦘ ⨾ sb ∪ ⦗covered T⦘ ⨾ sw ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"rewrite <- ct_step; basic_solver."},{"statement":"(A : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) : (sb ∪ sw)⁺ ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"unfold imm_s_hb.hb.\neapply ct_ind_left with (P:= fun r => r ⨾ ⦗coverable T⦘); eauto with hahn.\nintros k H; rewrite !seqA, H.\nrewrite covered_in_coverable at 1.\nsin_rewrite A.\narewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf."},{"statement":"(A : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) : (sb ∪ sw)⁺ ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"eapply ct_ind_left with (P:= fun r => r ⨾ ⦗coverable T⦘); eauto with hahn.\nintros k H; rewrite !seqA, H.\nrewrite covered_in_coverable at 1.\nsin_rewrite A.\narewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf."},{"statement":"(A : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) : forall k : relation actid,\nk ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺ ->\n((sb ∪ sw) ⨾ k) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"intros k H; rewrite !seqA, H.\nrewrite covered_in_coverable at 1.\nsin_rewrite A.\narewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf."},{"statement":"(A : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) (k : relation actid) (H : k ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) : (sb ∪ sw) ⨾ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"rewrite covered_in_coverable at 1.\nsin_rewrite A.\narewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf."},{"statement":"(A : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) (k : relation actid) (H : k ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⨾ (sb ∪ sw)⁺ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"sin_rewrite A.\narewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf."},{"statement":"(A : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) (k : relation actid) (H : k ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) : (⦗covered T⦘ ⨾ (sb ∪ sw)⁺) ⨾ (sb ∪ sw)⁺ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"arewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf."},{"statement":"(A : (sb ∪ sw) ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) (k : relation actid) (H : k ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺) : ⦗covered T⦘ ⨾ (sb ∪ sw)＊ ⨾ (sb ∪ sw)⁺ ⊆ ⦗covered T⦘ ⨾ (sb ∪ sw)⁺.","proofString":"relsf."},{"statement":"hb ⨾ ⦗coverable T⦘ ⊆ ⦗covered T⦘ ⨾ hb.","proofString":"by apply hb_coverable."},{"statement":"(l : location) : dom_rel ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize dom_hb_coverable.\ngeneralize dom_sc_coverable.\ngeneralize dom_rf_coverable.\ngeneralize covered_in_coverable.\ngeneralize w_coverable_issued.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize dom_sc_coverable.\ngeneralize dom_rf_coverable.\ngeneralize covered_in_coverable.\ngeneralize w_coverable_issued.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (sc ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize dom_rf_coverable.\ngeneralize covered_in_coverable.\ngeneralize w_coverable_issued.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (rf ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (sc ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize covered_in_coverable.\ngeneralize w_coverable_issued.\nbasic_solver 21."},{"statement":"(l : location) : covered T ⊆₁ coverable T ->\ndom_rel (rf ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (sc ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize w_coverable_issued.\nbasic_solver 21."},{"statement":"(l : location) : W ∩₁ coverable T ⊆₁ issued T ->\ncovered T ⊆₁ coverable T ->\ndom_rel (rf ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (sc ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"basic_solver 21."},{"statement":"(l : location) : ⦗issued T⦘ ⨾ urr l ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ urr l.","proofString":"basic_solver."},{"statement":"(l : location) : urr l ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ urr l.","proofString":"by apply urr_coverable."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : dom_rel ((urr l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize (@dom_urr_coverable l).\ngeneralize covered_in_coverable.\ngeneralize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : dom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel ((urr l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize covered_in_coverable.\ngeneralize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : covered T ⊆₁ coverable T ->\ndom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel ((urr l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : dom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ncovered T ⊆₁ coverable T ->\ndom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel ((urr l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : dom_rel (rf ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ncovered T ⊆₁ coverable T ->\ndom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel ((urr l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"basic_solver 21."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : ⦗issued T⦘ ⨾ c_acq i l A ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ c_acq i l A.","proofString":"basic_solver."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : c_acq i l A ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ c_acq i l A.","proofString":"by apply c_acq_coverable."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : dom_rel ((urr l ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"generalize (@dom_urr_coverable l).\nbasic_solver 21."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : dom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel ((urr l ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"basic_solver 21."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : ⦗issued T⦘ ⨾ c_cur i l A ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ c_cur i l A.","proofString":"basic_solver."},{"statement":"(i : BinNums.positive) (l : location) (A : actid -> Prop) : c_cur i l A ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ c_cur i l A.","proofString":"by apply c_cur_coverable."},{"statement":"(i : BinNums.positive) (l l' : location) (A : actid -> Prop) : dom_rel\n  ((urr l ⨾ ⦗Rel⦘ ⨾ ⦗W_ l' ∪₁ F⦘ ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"generalize (@dom_urr_coverable l).\nbasic_solver 21."},{"statement":"(i : BinNums.positive) (l l' : location) (A : actid -> Prop) : dom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel\n  ((urr l ⨾ ⦗Rel⦘ ⨾ ⦗W_ l' ∪₁ F⦘ ⨾ ⦗Tid_ i ∪₁ Init⦘ ⨾ ⦗A⦘) ⨾ ⦗coverable T⦘)\n⊆₁ issued T.","proofString":"basic_solver 21."},{"statement":"(i : BinNums.positive) (l l' : location) (A : actid -> Prop) : ⦗issued T⦘ ⨾ c_rel i l l' A ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ c_rel i l l' A.","proofString":"basic_solver."},{"statement":"(i : BinNums.positive) (l l' : location) (A : actid -> Prop) : c_rel i l l' A ⨾ ⦗coverable T⦘ ⊆ ⦗issued T⦘ ⨾ c_rel i l l' A.","proofString":"by apply c_rel_coverable."},{"statement":"(l : location) (thread : BinNums.positive) : dom_rel (c_acq thread l (coverable T)) ⊆₁ issued T.","proofString":"rewrite (dom_r (wf_c_acqD G sc thread l (coverable T))).\narewrite (⦗(Tid_ thread ∪₁ Init) ∩₁ coverable T⦘ ⊆ ⦗coverable T⦘) by basic_solver.\nrewrite c_acq_coverable.\nbasic_solver."},{"statement":"(l : location) (thread : BinNums.positive) : dom_rel\n  (c_acq thread l (coverable T) ⨾ ⦗(Tid_ thread ∪₁ Init) ∩₁ coverable T⦘)\n⊆₁ issued T.","proofString":"arewrite (⦗(Tid_ thread ∪₁ Init) ∩₁ coverable T⦘ ⊆ ⦗coverable T⦘) by basic_solver.\nrewrite c_acq_coverable.\nbasic_solver."},{"statement":"(l : location) (thread : BinNums.positive) : dom_rel (c_acq thread l (coverable T) ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"rewrite c_acq_coverable.\nbasic_solver."},{"statement":"(l : location) (thread : BinNums.positive) : dom_rel (⦗issued T⦘ ⨾ c_acq thread l (coverable T)) ⊆₁ issued T.","proofString":"basic_solver."},{"statement":"(l : location) (thread : BinNums.positive) : t_acq thread l (coverable T) ⊆₁ issued T.","proofString":"by apply t_acq_coverable."},{"statement":"(l : location) (thread : BinNums.positive) : t_acq thread l (coverable T) ⊆₁ issued T.","proofString":"by apply t_acq_coverable."},{"statement":"(l : location) (thread : BinNums.positive) : t_cur thread l (coverable T) ⊆₁ issued T.","proofString":"by apply t_cur_coverable."},{"statement":"(l l' : location) (thread : BinNums.positive) : t_cur thread l (coverable T) ⊆₁ issued T.","proofString":"by apply t_cur_coverable."},{"statement":"(l l' : location) (thread : BinNums.positive) : t_rel thread l l' (coverable T) ⊆₁ issued T.","proofString":"by apply t_rel_coverable."},{"statement":"(l : location) : dom_rel (⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"generalize dom_hb_coverable.\ngeneralize w_coverable_issued.\ngeneralize covered_in_coverable.\ngeneralize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"generalize w_coverable_issued.\ngeneralize covered_in_coverable.\ngeneralize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(l : location) : W ∩₁ coverable T ⊆₁ issued T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"generalize covered_in_coverable.\ngeneralize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(l : location) : covered T ⊆₁ coverable T ->\nW ∩₁ coverable T ⊆₁ issued T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"generalize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ncovered T ⊆₁ coverable T ->\nW ∩₁ coverable T ⊆₁ issued T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"generalize dom_rf_coverable.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (rf ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ncovered T ⊆₁ coverable T ->\nW ∩₁ coverable T ⊆₁ issued T ->\ndom_rel (hb ⨾ ⦗coverable T⦘) ⊆₁ covered T ->\ndom_rel (⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗coverable T⦘) ⊆₁ issued T.","proofString":"basic_solver 21."},{"statement":"(l : location) : S_tm l (coverable T) ⊆₁ issued T.","proofString":"by apply S_tm_coverable."},{"statement":"(l : location) : dom_rel ((urr l ⨾ release) ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"generalize dom_release_issued.\ngeneralize (@dom_urr_coverable l).\ngeneralize covered_in_coverable.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ndom_rel ((urr l ⨾ release) ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"generalize (@dom_urr_coverable l).\ngeneralize covered_in_coverable.\nbasic_solver 21."},{"statement":"(l : location) : dom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ndom_rel ((urr l ⨾ release) ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"generalize covered_in_coverable.\nbasic_solver 21."},{"statement":"(l : location) : covered T ⊆₁ coverable T ->\ndom_rel (urr l ⨾ ⦗coverable T⦘) ⊆₁ issued T ->\ndom_rel (release ⨾ ⦗issued T⦘) ⊆₁ covered T ->\ndom_rel ((urr l ⨾ release) ⨾ ⦗issued T⦘) ⊆₁ issued T.","proofString":"basic_solver 21."},{"statement":"(thread : thread_id) (FINDOM : set_finite E) (n : nat) (HH : ~ E (ThreadEvent thread n)) : exists n0 : nat, ~ covered T (ThreadEvent thread n0).","proofString":"exists n.\nintros CC.\napply HH.\neapply coveredE; eauto."},{"statement":"(thread : thread_id) (FINDOM : set_finite E) (n : nat) (HH : ~ E (ThreadEvent thread n)) : ~ covered T (ThreadEvent thread n).","proofString":"intros CC.\napply HH.\neapply coveredE; eauto."},{"statement":"(thread : thread_id) (FINDOM : set_finite E) (n : nat) (HH : ~ E (ThreadEvent thread n)) (CC : covered T (ThreadEvent thread n)) : False.","proofString":"apply HH.\neapply coveredE; eauto."},{"statement":"(thread : thread_id) (FINDOM : set_finite E) (n : nat) (HH : ~ E (ThreadEvent thread n)) (CC : covered T (ThreadEvent thread n)) : E (ThreadEvent thread n).","proofString":"eapply coveredE; eauto."},{"statement":"sw ⨾ (⦗C⦘ ∪ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"rewrite seq_union_r.\nunionL.\nrewrite sw_covered; eauto.\nbasic_solver.\nassert (forall (s : actid -> Prop), s ∪₁ set_compl s ≡₁ fun _ => True) as AA.\nsplit; [basic_solver|].\nunfolder.\nins.\napply classic.\narewrite (sw ⊆ ⦗ C ∪₁ set_compl C ⦘ ⨾ sw) at 1.\nrewrite AA.\nby rewrite seq_id_l.\nrewrite id_union, !seq_union_l.\napply union_mori; [basic_solver|].\nrewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"sw ⨾ ⦗C⦘ ∪ sw ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"unionL.\nrewrite sw_covered; eauto.\nbasic_solver.\nassert (forall (s : actid -> Prop), s ∪₁ set_compl s ≡₁ fun _ => True) as AA.\nsplit; [basic_solver|].\nunfolder.\nins.\napply classic.\narewrite (sw ⊆ ⦗ C ∪₁ set_compl C ⦘ ⨾ sw) at 1.\nrewrite AA.\nby rewrite seq_id_l.\nrewrite id_union, !seq_union_l.\napply union_mori; [basic_solver|].\nrewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"sw ⨾ ⦗C⦘ ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"rewrite sw_covered; eauto.\nbasic_solver."},{"statement":"⦗C⦘ ⨾ sw ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"basic_solver."},{"statement":"sw ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"assert (forall (s : actid -> Prop), s ∪₁ set_compl s ≡₁ fun _ => True) as AA.\nsplit; [basic_solver|].\nunfolder.\nins.\napply classic.\narewrite (sw ⊆ ⦗ C ∪₁ set_compl C ⦘ ⨾ sw) at 1.\nrewrite AA.\nby rewrite seq_id_l.\nrewrite id_union, !seq_union_l.\napply union_mori; [basic_solver|].\nrewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True).","proofString":"split; [basic_solver|].\nunfolder.\nins.\napply classic."},{"statement":"(s : actid -> Prop) : (fun _ : actid => True) ⊆₁ s ∪₁ set_compl s.","proofString":"unfolder.\nins.\napply classic."},{"statement":"(s : actid -> Prop) : forall x : actid, True -> s x \\/ ~ s x.","proofString":"ins.\napply classic."},{"statement":"(s : actid -> Prop) (x : actid) (H : True) : s x \\/ ~ s x.","proofString":"apply classic."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : sw ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"arewrite (sw ⊆ ⦗ C ∪₁ set_compl C ⦘ ⨾ sw) at 1.\nrewrite AA.\nby rewrite seq_id_l.\nrewrite id_union, !seq_union_l.\napply union_mori; [basic_solver|].\nrewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : sw ⊆ ⦗C ∪₁ set_compl C⦘ ⨾ sw.","proofString":"rewrite AA.\nby rewrite seq_id_l."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : sw ⊆ ⦗fun _ : actid => True⦘ ⨾ sw.","proofString":"by rewrite seq_id_l."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗C ∪₁ set_compl C⦘ ⨾ sw ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"rewrite id_union, !seq_union_l.\napply union_mori; [basic_solver|].\nrewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗C⦘ ⨾ sw ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘\n∪ ⦗set_compl C⦘ ⨾ sw ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ ⦗C⦘ ⨾ sw ∪ sb.","proofString":"apply union_mori; [basic_solver|].\nrewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗set_compl C⦘ ⨾ sw ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"rewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗set_compl C⦘ ⨾ (sw ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"rewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗set_compl C⦘\n⨾ ((⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺\n    ∪ sb) ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"remember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) (ax : relation actid) (Heqax : ax = ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) : ⦗set_compl C⦘ ⨾ ((ax ∪ sb) ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"rewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) (ax : relation actid) (Heqax : ax = ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) : ⦗set_compl C⦘ ⨾ (ax ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘\n∪ ⦗set_compl C⦘ ⨾ (sb ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"unionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) (ax : relation actid) (Heqax : ax = ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) : ⦗set_compl C⦘ ⨾ (ax ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"subst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗set_compl C⦘\n⨾ ((⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺)\n   ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"rewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗set_compl C⦘\n⨾ ⦗Rel⦘\n  ⨾ (⦗F⦘ ⨾ sb)^?\n    ⨾ ⦗W⦘\n      ⨾ (sb ∩ same_loc)^?\n        ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"arewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗set_compl C⦘\n⨾ ⦗Rel⦘\n  ⨾ (⦗F⦘ ⨾ sb)^?\n    ⨾ ⦗W⦘\n      ⨾ (sb ∩ same_loc)^?\n        ⨾ ⦗W⦘\n          ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘\n⊆ sb.","proofString":"arewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release.","proofString":"unfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rf ⨾ rmw)＊.","proofString":"by rewrite <- inclusion_id_rt, seq_id_r."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗set_compl C⦘\n⨾ release ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘\n⊆ sb.","proofString":"enough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) (BB : dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) : ⦗set_compl C⦘\n⨾ release ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘\n⊆ sb.","proofString":"rewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) (BB : dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) : ⦗set_compl C⦘\n⨾ release\n  ⨾ ⦗I⦘ ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"seq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) (BB : dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) : ⦗set_compl C⦘\n⨾ (⦗C⦘ ⨾ release ⨾ ⦗I⦘)\n  ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆ sb.","proofString":"basic_solver."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I.","proofString":"rewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : dom_rel (((⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) ⨾ ⦗FR ∩₁ Acq⦘) ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘)\n⊆₁ I.","proofString":"rewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : dom_rel (((⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) ⨾ ⦗FR ∩₁ Acq⦘) ⨾ sb^? ⨾ ⦗I⦘) ⊆₁ I.","proofString":"rewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ sb^? ⨾ ⦗I⦘) ⊆₁ I.","proofString":"arewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\nseq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?.","proofString":"rewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗FR ∩₁ Acq⦘ ⨾ ⦗fun _ : actid => True⦘ ∪ ⦗FR ∩₁ Acq⦘ ⨾ sb\n⊆ ⦗fun _ : actid => True⦘ ∪ (rfe ∪ ar_int G).","proofString":"apply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗FR ∩₁ Acq⦘ ⨾ sb ⊆ rfe ∪ ar_int G.","proofString":"unionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗FR ∩₁ Acq⦘ ⨾ sb ⊆ ar_int G.","proofString":"rewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗F ∩₁ Acq⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb ⊆ ar_int G.","proofString":"rewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗F ∩₁ Acq⦘ ⨾ sb ∪ bob ⊆ ar_int G.","proofString":"arewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ bob ⊆ ar_int G.","proofString":"rewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : bob ∪ bob ⊆ ar_int G.","proofString":"rewrite bob_in_ar_int.\neauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : ar_int G ∪ ar_int G ⊆ ar_int G.","proofString":"eauto with hahn."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ (rfe ∪ ar_int G)^? ⨾ ⦗I⦘) ⊆₁ I.","proofString":"seq_rewrite ct_cr.\narewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗I⦘) ⊆₁ I.","proofString":"arewrite (rfe ∪ ar_int G ⊆ ar).\nby apply ar_ct_I_in_I."},{"statement":"(AA : forall s : actid -> Prop, s ∪₁ set_compl s ≡₁ (fun _ : actid => True)) : dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗I⦘) ⊆₁ I.","proofString":"by apply ar_ct_I_in_I."}]}