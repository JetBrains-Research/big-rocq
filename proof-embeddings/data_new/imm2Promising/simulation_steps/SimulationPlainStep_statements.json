{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/promising2ToImm/src/simulation_steps/SimulationPlainStep.v","fileSamples":[{"statement":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') : (plain_step MachineEvent.silent t)＊ PC PC'.","conclusion":"(plain_step MachineEvent.silent t)＊ PC PC'","hypotheses":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from')","proofString":"des; [eapply inclusion_r_rt | eapply inclusion_t_rt]; eauto.\ndone."},{"statement":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') : plain_step MachineEvent.silent t ⊆ plain_step MachineEvent.silent t.","conclusion":"plain_step MachineEvent.silent t ⊆ plain_step MachineEvent.silent t","hypotheses":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from')","proofString":"done."},{"statement":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') : simrel_thread G sc PC' T' f_to' f_from' t smode.","conclusion":"simrel_thread G sc PC' T' f_to' f_from' t smode","hypotheses":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from')","proofString":"rewrite EQUIV.\neauto."},{"statement":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') : simrel_thread G sc PC' T f_to' f_from' t smode.","conclusion":"simrel_thread G sc PC' T f_to' f_from' t smode","hypotheses":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from')","proofString":"eauto."},{"statement":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T' f_to' f_from'.","conclusion":"smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T' f_to' f_from'","hypotheses":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from')","proofString":"ins.\nrewrite EQUIV.\neauto."},{"statement":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') (H : smode = sim_normal) (H0 : simrel G sc PC T0 f_to f_from) : simrel G sc PC' T' f_to' f_from'.","conclusion":"simrel G sc PC' T' f_to' f_from'","hypotheses":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') (H : smode = sim_normal) (H0 : simrel G sc PC T0 f_to f_from)","proofString":"rewrite EQUIV.\neauto."},{"statement":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') (H : smode = sim_normal) (H0 : simrel G sc PC T0 f_to f_from) : simrel G sc PC' T f_to' f_from'.","conclusion":"simrel G sc PC' T f_to' f_from'","hypotheses":"(PC PC' : Configuration.t) (t : Ident.t) (f_to f_from f_to' f_from' : actid -> Time.t) (smode : sim_mode) (T0 T T' : trav_label -> Prop) (EQUIV : T' ≡₁ T) (STEP : plain_step MachineEvent.silent t PC PC' \\/\ntc (plain_step MachineEvent.silent t) PC PC') (ST : simrel_thread G sc PC' T f_to' f_from' t smode) (SR : smode = sim_normal ->\nsimrel G sc PC T0 f_to f_from -> simrel G sc PC' T f_to' f_from') (H : smode = sim_normal) (H0 : simrel G sc PC T0 f_to f_from)","proofString":"eauto."}]}