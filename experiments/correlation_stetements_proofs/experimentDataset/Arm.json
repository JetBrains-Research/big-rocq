[{"statement":"Lemma wf_obsE WF: obs ≡ ⦗E⦘ ⨾ obs ⨾ ⦗E⦘.","proof":"split; [|basic_solver].\nunfold obs.\nrewrite (wf_rfeE WF) at 1.\nrewrite (wf_coeE WF) at 1.\nrewrite (wf_freE WF) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma wf_dobE WF: dob ≡ ⦗E⦘ ⨾ dob ⨾ ⦗E⦘.","proof":"split; [|basic_solver].\nunfold dob.\nrewrite (wf_addrE WF) at 1 2 3.\nrewrite (wf_dataE WF) at 1 2.\nrewrite (wf_rfiE WF) at 1.\nrewrite (wf_ctrlE WF) at 1 2.\nrewrite (wf_coiE WF) at 1.\nrewrite wf_sbE at 1 2.\nbasic_solver 42.\n"},{"statement":"Lemma wf_aobE WF: aob ≡ ⦗E⦘ ⨾ aob ⨾ ⦗E⦘.","proof":"split; [|basic_solver].\nunfold aob.\nrewrite (wf_rmwE WF) at 1.\nrewrite (wf_rfiE WF) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma wf_bobE WF: bob ≡ ⦗E⦘ ⨾ bob ⨾ ⦗E⦘.","proof":"split; [|basic_solver].\nunfold bob.\nrewrite wf_sbE at 1 2 3 4 5 6 7.\nrewrite (wf_coiE WF) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma wf_obs'E WF: obs' ≡ ⦗E⦘ ⨾ obs' ⨾ ⦗E⦘.","proof":"split; [|basic_solver].\nunfold obs'.\nrewrite (wf_rfeE WF) at 1.\nrewrite (wf_coE WF) at 1.\nrewrite (wf_frE WF) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma wf_bob'E WF: bob' ≡ ⦗E⦘ ⨾ bob' ⨾ ⦗E⦘.","proof":"split; [|basic_solver].\nunfold bob'.\nrewrite (wf_bobE WF) at 1.\nrewrite (wf_coiE WF) at 1.\nrewrite wf_sbE at 1 2 3.\nbasic_solver 42.\n"},{"statement":"Lemma wf_obsD WF: obs ≡ ⦗RW⦘ ⨾ obs ⨾ ⦗RW⦘.","proof":"split; [|basic_solver].\nunfold obs.\nrewrite (wf_rfeD WF) at 1.\nrewrite (wf_coeD WF) at 1.\nrewrite (wf_freD WF) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma wf_obs'D WF: obs' ≡ ⦗RW⦘ ⨾ obs' ⨾ ⦗RW⦘.","proof":"split; [|basic_solver].\nunfold obs'.\nrewrite (wf_rfeD WF) at 1.\nrewrite (wf_coD WF) at 1.\nrewrite (wf_frD WF) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma wf_dobD WF: dob ≡ dob ⨾ ⦗RW⦘.","proof":"split; [|basic_solver].\nunfold dob.\nrewrite (dom_r (wf_addrD WF)) at 1.\nrewrite (dom_r (wf_dataD WF)) at 1.\nrewrite (dom_r (wf_rfiD WF)) at 1.\nrewrite (dom_r (wf_coiD WF)) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma wf_aobD WF: aob ≡ aob ⨾ ⦗RW⦘.","proof":"split; [|basic_solver].\nunfold aob.\nrewrite (dom_r (wf_rmwD WF)) at 1.\nbasic_solver 42.\n"},{"statement":"Lemma obs_in_eco : obs ⊆ eco.","proof":"unfold Arm.obs.\nrewrite rfe_in_eco, fre_in_eco, coe_in_eco.\neauto with hahn.\n"},{"statement":"Lemma eco_in_sb_obs_sb WF :  eco ⊆ sb^? ⨾ obs^? ⨾ obs^? ⨾ sb^?.","proof":"rewrite (eco_alt WF).\nrewrite cr_union_r, seq_union_l.\nrewrite coi_union_coe, fri_union_fre, rfi_union_rfe.\nrewrite coi_in_sb, fri_in_sb, rfi_in_sb.\narewrite (coe ⊆ obs).\narewrite (fre ⊆ obs).\narewrite (rfe ⊆ obs).\nrewrite !seq_union_l, !seq_union_r.\nbasic_solver 20.\n"},{"statement":"Lemma detour_in_obs : detour ⊆ obs⁺ .","proof":"unfold Execution.detour.\narewrite (coe ⊆ obs).\narewrite (rfe ⊆ obs).\nrewrite <- ct_ct.\nrewrite <- ct_step.\nbasic_solver 12.\n"},{"statement":"Lemma obs_coi WF SC_PER_LOC : obs ⨾ coi ⊆ obs.","proof":"unfold obs at 1.\nrewrite !seq_union_l.\nrewrite coe_coi; auto.\nrewrite fre_coi; auto.\nrewrite (dom_r (wf_rfeD WF)).\nrewrite (dom_l (wf_coiD WF)).\nunfold obs.\ntype_solver 10.\n"},{"statement":"Lemma obs_fri WF SC_PER_LOC : obs ⨾ fri ⊆ obs.","proof":"unfold obs at 1.\nrewrite !seq_union_l.\nrewrite (dom_r (wf_coeD WF)).\nrewrite (dom_r (wf_freD WF)).\nrewrite rfe_fri; auto.\nrewrite (dom_l (wf_friD WF)).\nunfold obs.\ntype_solver 10.\n"},{"statement":"Lemma bob_coi WF : bob ⨾ coi ⊆ bob.","proof":"unfold bob; relsf; rewrite ?seqA.\narewrite (coi ⊆ sb) at 1.\narewrite (coi ⊆ sb) at 1.\narewrite (coi ⊆ sb) at 1.\nrewrite (@sb_sb G).\narewrite_false (⦗A⦘ ⨾ coi).\n{\nrewrite (wf_coiD WF).\ntype_solver.\n}\nunionL; eauto with hahn.\n2: basic_solver.\narewrite (coi^? ⨾ coi ⊆ coi^?); eauto with hahn.\ngeneralize (coi_trans WF).\nbasic_solver 21.\n"},{"statement":"Lemma bob'_coi WF : bob' ⨾ coi ⊆ bob'.","proof":"unfold bob'.\nrewrite !seq_union_l, !seqA.\nrewrite (bob_coi WF).\narewrite (coi ⨾ coi ⊆ coi).\n{\napply transitiveI.\nby apply coi_trans.\n}\napply union_mori; [|done].\ndo 3 (arewrite (coi ⊆ sb) at 1).\nrewrite (@sb_sb G).\napply union_mori; [|done].\ntransitivity bob.\n2: by eauto with hahn.\nrewrite unionA.\napply inclusion_union_l; [done|].\nunfold bob.\neauto with hahn.\n"},{"statement":"Lemma bob_fri WF : bob ⨾ fri ⊆ bob ⨾ bob^?.","proof":"unfold bob at 1; relsf; rewrite ?seqA.\narewrite (fri ⊆ sb) at 1.\narewrite (fri ⊆ sb) at 1.\narewrite (fri ⊆ sb) at 1.\nrewrite (@sb_sb G).\nassert (bob ⊆ bob ⨾ bob^?) as AA by basic_solver.\nunionL.\n1-3: by rewrite <- AA; unfold bob; eauto with hahn.\n{\nrewrite (wf_coiD WF), (wf_friD WF).\ntype_solver.\n}\narewrite (⦗A⦘ ⊆ ⦗A⦘ ⨾ ⦗Q⦘) by mode_solver.\narewrite (fri ⊆ sb).\narewrite (⦗Q⦘ ⨾ sb ⊆ bob).\narewrite (⦗L⦘ ⨾ sb ⨾ ⦗A⦘ ⊆ bob).\nbasic_solver.\n"},{"statement":"Lemma bob'_fri WF : bob' ⨾ fri ⊆ bob' ⨾ bob^?.","proof":"unfold bob' at 1.\nrewrite !seq_union_l, !seqA.\nrewrite (bob_fri WF).\narewrite (fri ⊆ sb) at 1.\narewrite (fri ⊆ sb) at 1.\narewrite (fri ⊆ sb) at 1.\nrewrite (@sb_sb G).\nassert (bob ⊆ bob' ⨾ bob^?) as AA.\n{\nunfold bob'.\nbasic_solver 10.\n}\nunionL; eauto with hahn.\n4: {\nrewrite (wf_coiD WF), (wf_friD WF).\ntype_solver.\n}\n1-2: by rewrite <- AA; unfold bob; eauto with hahn.\ntransitivity bob'.\n2: basic_solver.\nunfold bob'.\neauto with hahn.\n"},{"statement":"Lemma dob_alt WF :\n dob ≡\n   addr\n ∪ (addr ∪ data) ⨾ rfi\n ∪ (ctrl ∪ data) ⨾ ⦗W⦘ ⨾ coi^?\n ∪ addr ⨾ sb ⨾ ⦗W⦘.","proof":"unfold dob.\nrewrite (dom_r (wf_dataD WF)) at 1 3.\nbasic_solver 42.\n"},{"statement":"Lemma dob_coi WF : dob ⨾ coi ⊆ dob.","proof":"rewrite dob_alt; ins.\ngeneralize (addr ∪ data), (ctrl ∪ data), (ctrl ∪ addr ⨾ sb).\nins.\nrelsf.\nunionL; rewrite ?seqA.\n{\nrewrite (dom_r (wf_coiD WF)) at 1.\nie_unfolder.\nbasic_solver 12.\n}\n{\narewrite (rfi ⊆ rf) at 1.\narewrite (coi ⊆ co) at 1.\nrewrite (rf_co WF).\nbasic_solver.\n}\n{\nrewrite crE; relsf.\ngeneralize (@sb_trans G).\ngeneralize (co_trans WF).\nie_unfolder.\nbasic_solver 13.\n}\nrewrite (dom_r (wf_coiD WF)) at 1.\ngeneralize (@sb_trans G).\nie_unfolder.\nbasic_solver 42.\n"},{"statement":"Lemma dob_fri WF : dob ⨾ fri ⊆ dob.","proof":"rewrite dob_alt; ins.\nset (ad := addr ∪ data); set (cd := ctrl ∪ data); set (ca := ctrl ∪ addr ⨾ sb).\nins; relsf.\nunionL; rewrite ?seqA.\n+ rewrite (dom_r (wf_friD WF)) at 1.\narewrite (fri ⊆ sb); basic_solver 12.\n+ ie_unfolder.\nrewrite (seq_ii (rf_fr WF)).\nunfold ad at 1; relsf; unionL.\n-- rewrite (dom_r (wf_coD WF)) at 1.\nbasic_solver 21.\n-- rewrite (dom_l (wf_coD WF)) at 1.\nunfold cd.\nbasic_solver 21.\n+ rewrite (dom_r (wf_coiD WF)) at 1.\nrewrite (dom_l (wf_friD WF)) at 1.\ntype_solver.\n+ rewrite (dom_l (wf_friD WF)) at 1.\ntype_solver.\n"},{"statement":"Lemma aob_fri WF : aob ⨾ fri ⊆ aob ⨾ bob^?.","proof":"unfold aob; relsf; rewrite ?seqA; unionL.\n{\nrewrite (dom_l (wf_friD WF)) at 1.\nrewrite (dom_r (wf_rmwD WF)) at 1.\ntype_solver.\n}\nunionR right.\nrewrite fri_in_sb.\nunfold bob.\nbasic_solver 20.\n"},{"statement":"Lemma deps_in_ctrl_or_dob WF:\n    deps ⊆ ctrl ∪ dob.","proof":"rewrite (dob_alt WF).\nunfold Execution.deps;rewrite (dom_r (wf_dataD WF)) at 1.\nbasic_solver 12.\n"},{"statement":"Lemma dob_in_sb WF: dob ⊆ sb.","proof":"unfold dob.\nrewrite (addr_in_sb WF).\nrewrite (data_in_sb WF).\nrewrite (ctrl_in_sb WF).\narewrite (coi ⊆ sb).\narewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver 21.\n"},{"statement":"Lemma aob_in_sb WF: aob ⊆ sb.","proof":"unfold aob.\nrewrite (rmw_in_sb WF).\narewrite (rfi ⊆ sb).\nbasic_solver 21.\n"},{"statement":"Lemma bob_in_sb WF: bob ⊆ sb.","proof":"unfold bob.\narewrite (coi ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver 21.\n"},{"statement":"Lemma bob'_in_sb WF: bob' ⊆ sb.","proof":"unfold bob'.\nrewrite coi_in_sb.\nrewrite (bob_in_sb WF).\nbasic_solver 21.\n"},{"statement":"Lemma external_alt_bob' WF CON : acyclic (obs ∪ dob ∪ aob ∪ bob').","proof":"assert (SC_PER_LOC : sc_per_loc G) by apply CON.\nunfold bob'; rewrite <- !unionA in *.\nassert (APO: acyclic sb).\n{\napply trans_irr_acyclic; eauto using sb_trans, sb_irr.\n}\nassert (X: acyclic (obs ∪ dob ∪ aob ∪ bob ∪ (⦗R⦘ ⨾ sb ⨾ ⦗F^ld⦘ ∪ sb ⨾ ⦗F^sy⦘))).\n{\napply acyclic_absorb; eauto.\nleft; relsf; rewrite !seqA.\ntransitivity (⦗R⦘ ⨾ sb ⨾ ⦗F^ld⦘⨾ sb ∪ sb ⨾ ⦗F^sy⦘ ⨾ sb).\n2: by transitivity bob; eauto with hahn; unionL; eauto with hahn.\nrewrite (dob_in_sb WF), (aob_in_sb WF), (bob_in_sb WF).\nunionL; eauto with hahn.\n1-2: rewrite (dom_l (wf_obsD WF)); type_solver.\nsplit; auto.\n{\napply CON.\n}\napply inclusion_acyclic with (r':=sb); basic_solver.\n}\nassert (X' : acyclic (obs ∪ dob ∪ aob ∪ bob ∪ ⦗R⦘ ⨾ sb ⨾ ⦗F^ld⦘ ∪ sb ⨾ ⦗F^sy⦘ ∪ ⦗F^ld ∪₁ F^sy⦘ ⨾ sb)).\n{\nrewrite <- unionA in X.\nrewrite unionC; apply acyclic_absorb; eauto.\nright; transitivity bob; relsf; rewrite ?seqA; unionL.\n{\nrewrite (dom_r (wf_obsD WF)); type_solver.\n}\n{\nrewrite (wf_dobD WF); type_solver.\n}\n{\nrewrite (wf_aobD WF); type_solver.\n}\n2-4: arewrite_id ⦗F^ld ∪₁ F^sy⦘; rels; eauto 6 with hahn.\nunfold bob; relsf; rewrite ?seqA.\narewrite_false (⦗L⦘ ⨾ coi^? ⨾ ⦗F^ld ∪₁ F^sy⦘).\nrewrite (dom_r (wf_coiD WF)); type_solver.\narewrite_false (⦗A⦘ ⨾ ⦗F^ld ∪₁ F^sy⦘).\n{\ntype_solver.\n}\narewrite_id ⦗F^ld ∪₁ F^sy⦘.\nrels.\nrewrite (@sb_sb G).\nbasic_solver 21.\n}\nrewrite unionC.\napply acyclic_absorb; eauto.\n2: {\nsplit; auto.\narewrite_id ⦗L⦘.\nrewrite seq_id_l.\nrewrite coi_in_sb.\napply sb_acyclic.\n}\nright.\nrewrite !unionA.\narewrite ((dob ∪ (aob ∪ (bob ∪ (⦗R⦘ ⨾ sb ⨾ ⦗F^ld⦘ ∪ (sb ⨾ ⦗F^sy⦘ ∪ ⦗F^ld ∪₁ F^sy⦘ ⨾ sb)))))              ⊆ sb) at 1.\n{\nrewrite (aob_in_sb WF) at 1.\nrewrite (bob_in_sb WF) at 1.\nrewrite (dob_in_sb WF) at 1.\nclear.\nbasic_solver.\n}\nrewrite seq_union_l.\nunionL.\n2: {\narewrite (sb ⨾ ⦗L⦘ ⨾ coi ⊆ bob).\n2: by eauto with hahn.\nunfold bob.\nbasic_solver 10.\n}\ntransitivity obs.\n2: by eauto with hahn.\narewrite_id ⦗L⦘.\nrewrite seq_id_l.\napply obs_coi; auto.\n"},{"statement":"Lemma external_alt_fri CON :\n    acyclic (fri ∪ obs ∪ dob ∪ aob ∪ bob').","proof":"cdes CON.\nassert (AC' : acyclic (obs ∪ dob ∪ aob ∪ bob')) by (by apply external_alt_bob').\nrewrite !(unionA fri).\nrewrite ct_step with (r := obs ∪ dob ∪ aob ∪ bob').\napply acyclic_absorb; ins.\n2: {\nunfold acyclic.\nrewrite ct_of_ct.\nsplit; auto.\napply acyclic_disj.\nrewrite (wf_friD WF).\ntype_solver 10.\n}\nright.\nrewrite ct_end at 1.\nrewrite !seqA.\nrewrite !seq_union_l.\nrewrite obs_fri; auto.\nrewrite dob_fri; auto.\nrewrite aob_fri; auto.\nrewrite bob'_fri; auto.\narewrite (obs ∪ dob ∪ aob ⨾ bob^? ∪ bob' ⨾ bob^? ⊆            (obs ∪ dob ∪ aob ∪ bob')⁺).\n2: by apply rt_ct.\nrewrite unionA.\nrewrite <- seq_union_l.\napply inclusion_union_l.\n{\nrewrite <- ct_step.\neauto with hahn.\n}\nrewrite ct_begin.\narewrite (aob ∪ bob' ⊆ obs ∪ dob ∪ aob ∪ bob').\nhahn_frame.\napply inclusion_r_rt.\nunfold bob'.\neauto with hahn.\n"},{"statement":"Lemma external_alt CON :\n    acyclic (obs' ∪ dob ∪ aob ∪ bob').","proof":"cdes CON.\nassert (RMW_COI : rmw ⨾ coi ⊆ fri).\n{\nrewrite rmw_in_fri; auto.\napply fri_coi; auto.\n}\nassert (AC' : acyclic (fri ∪ obs ∪ dob ∪ aob ∪ bob')) by (by apply external_alt_fri).\narewrite (obs' ⊆ coi ∪ fri ∪ obs).\n{\nunfold obs', obs.\nrewrite coi_union_coe, fri_union_fre.\nunionL; eauto with hahn.\n}\nrewrite !(unionA coi).\napply acyclic_absorb; ins.\n2: {\narewrite (coi ⊆ co).\nsplit; auto.\napply (co_acyclic WF).\n}\nright.\nrewrite !seq_union_l.\nrewrite fri_coi; auto.\nrewrite obs_coi; auto.\nrewrite dob_coi; auto.\nrewrite bob'_coi; auto.\narewrite (aob ⨾ coi ⊆ fri).\n{\nunfold aob at 1.\nrewrite seq_union_l.\nunionL; auto.\nrewrite (dom_l (wf_coiD WF)) at 1.\ntype_solver 42.\n}\ndo 4 (apply inclusion_union_l; [|by eauto with hahn]).\neauto with hahn.\n"}]