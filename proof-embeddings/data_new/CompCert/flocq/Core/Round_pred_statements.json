{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Core/Round_pred.v","fileSamples":[{"statement":"(rnd : R -> R -> Prop) (H1 : round_pred_total rnd) (H2 : round_pred_monotone rnd) (x : R) : {f : R | rnd x f}.","conclusion":"{f : R | rnd x f}","hypotheses":"(rnd : R -> R -> Prop) (H1 : round_pred_total rnd) (H2 : round_pred_monotone rnd) (x : R)","proofString":"specialize (H1 x).\nassert (H3 : bound (rnd x)).\ndestruct H1 as (f, H1).\nexists f.\nintros g Hg.\nnow apply H2 with (3 := Rle_refl x).\nexists (proj1_sig (completeness _ H3 H1)).\ndestruct completeness as (f1, (H4, H5)).\nsimpl.\ndestruct H1 as (f2, H1).\nassert (f1 = f2).\napply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4.\nnow rewrite H."},{"statement":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) : {f : R | rnd x f}.","conclusion":"{f : R | rnd x f}","hypotheses":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd)","proofString":"assert (H3 : bound (rnd x)).\ndestruct H1 as (f, H1).\nexists f.\nintros g Hg.\nnow apply H2 with (3 := Rle_refl x).\nexists (proj1_sig (completeness _ H3 H1)).\ndestruct completeness as (f1, (H4, H5)).\nsimpl.\ndestruct H1 as (f2, H1).\nassert (f1 = f2).\napply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4.\nnow rewrite H."},{"statement":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) : bound (rnd x).","conclusion":"bound (rnd x)","hypotheses":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd)","proofString":"destruct H1 as (f, H1).\nexists f.\nintros g Hg.\nnow apply H2 with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (x f : R) (H1 : rnd x f) (H2 : round_pred_monotone rnd) : bound (rnd x).","conclusion":"bound (rnd x)","hypotheses":"(rnd : R -> R -> Prop) (x f : R) (H1 : rnd x f) (H2 : round_pred_monotone rnd)","proofString":"exists f.\nintros g Hg.\nnow apply H2 with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (x f : R) (H1 : rnd x f) (H2 : round_pred_monotone rnd) : is_upper_bound (rnd x) f.","conclusion":"is_upper_bound (rnd x) f","hypotheses":"(rnd : R -> R -> Prop) (x f : R) (H1 : rnd x f) (H2 : round_pred_monotone rnd)","proofString":"intros g Hg.\nnow apply H2 with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (x f : R) (H1 : rnd x f) (H2 : round_pred_monotone rnd) (g : R) (Hg : rnd x g) : g <= f.","conclusion":"g <= f","hypotheses":"(rnd : R -> R -> Prop) (x f : R) (H1 : rnd x f) (H2 : round_pred_monotone rnd) (g : R) (Hg : rnd x g)","proofString":"now apply H2 with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) : {f : R | rnd x f}.","conclusion":"{f : R | rnd x f}","hypotheses":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x))","proofString":"exists (proj1_sig (completeness _ H3 H1)).\ndestruct completeness as (f1, (H4, H5)).\nsimpl.\ndestruct H1 as (f2, H1).\nassert (f1 = f2).\napply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4.\nnow rewrite H."},{"statement":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) : rnd x (proj1_sig (completeness (rnd x) H3 H1)).","conclusion":"rnd x (proj1_sig (completeness (rnd x) H3 H1))","hypotheses":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x))","proofString":"destruct completeness as (f1, (H4, H5)).\nsimpl.\ndestruct H1 as (f2, H1).\nassert (f1 = f2).\napply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4.\nnow rewrite H."},{"statement":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) : rnd x (proj1_sig (exist (fun m : R => is_lub (rnd x) m) f1 (conj H4 H5))).","conclusion":"rnd x (proj1_sig (exist (fun m : R => is_lub (rnd x) m) f1 (conj H4 H5)))","hypotheses":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b)","proofString":"simpl.\ndestruct H1 as (f2, H1).\nassert (f1 = f2).\napply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4.\nnow rewrite H."},{"statement":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) : rnd x f1.","conclusion":"rnd x f1","hypotheses":"(rnd : R -> R -> Prop) (x : R) (H1 : exists f : R, rnd x f) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b)","proofString":"destruct H1 as (f2, H1).\nassert (f1 = f2).\napply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4.\nnow rewrite H."},{"statement":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) : rnd x f1.","conclusion":"rnd x f1","hypotheses":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b)","proofString":"assert (f1 = f2).\napply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4.\nnow rewrite H."},{"statement":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b)","proofString":"apply Rle_antisym.\napply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x).\nnow apply H4."},{"statement":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) : f1 <= f2.","conclusion":"f1 <= f2","hypotheses":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b)","proofString":"apply H5.\nintros f3 H.\nnow apply H2 with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) : is_upper_bound (rnd x) f2.","conclusion":"is_upper_bound (rnd x) f2","hypotheses":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b)","proofString":"intros f3 H.\nnow apply H2 with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) (f3 : R) (H : rnd x f3) : f3 <= f2.","conclusion":"f3 <= f2","hypotheses":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) (f3 : R) (H : rnd x f3)","proofString":"now apply H2 with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) : f2 <= f1.","conclusion":"f2 <= f1","hypotheses":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b)","proofString":"now apply H4."},{"statement":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) (H : f1 = f2) : rnd x f1.","conclusion":"rnd x f1","hypotheses":"(rnd : R -> R -> Prop) (x f2 : R) (H1 : rnd x f2) (H2 : round_pred_monotone rnd) (H3 : bound (rnd x)) (f1 : R) (H4 : is_upper_bound (rnd x) f1) (H5 : forall b : R, is_upper_bound (rnd x) b -> f1 <= b) (H : f1 = f2)","proofString":"now rewrite H."},{"statement":"(rnd : R -> R -> Prop) (H : round_pred rnd) : {f : R -> R | forall x : R, rnd x (f x)}.","conclusion":"{f : R -> R | forall x : R, rnd x (f x)}","hypotheses":"(rnd : R -> R -> Prop) (H : round_pred rnd)","proofString":"exists (fun x => proj1_sig (round_val_of_pred rnd H x)).\nintros x.\nnow destruct round_val_of_pred as (f, H1)."},{"statement":"(rnd : R -> R -> Prop) (H : round_pred rnd) : forall x : R, rnd x (proj1_sig (round_val_of_pred rnd H x)).","conclusion":"forall x : R, rnd x (proj1_sig (round_val_of_pred rnd H x))","hypotheses":"(rnd : R -> R -> Prop) (H : round_pred rnd)","proofString":"intros x.\nnow destruct round_val_of_pred as (f, H1)."},{"statement":"(rnd : R -> R -> Prop) (H : round_pred rnd) (x : R) : rnd x (proj1_sig (round_val_of_pred rnd H x)).","conclusion":"rnd x (proj1_sig (round_val_of_pred rnd H x))","hypotheses":"(rnd : R -> R -> Prop) (H : round_pred rnd) (x : R)","proofString":"now destruct round_val_of_pred as (f, H1)."},{"statement":"(rnd : R -> R -> Prop) (Hr : round_pred_monotone rnd) (x f1 f2 : R) (H1 : rnd x f1) (H2 : rnd x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(rnd : R -> R -> Prop) (Hr : round_pred_monotone rnd) (x f1 f2 : R) (H1 : rnd x f1) (H2 : rnd x f2)","proofString":"apply Rle_antisym.\nnow apply Hr with (3 := Rle_refl x).\nnow apply Hr with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (Hr : round_pred_monotone rnd) (x f1 f2 : R) (H1 : rnd x f1) (H2 : rnd x f2) : f1 <= f2.","conclusion":"f1 <= f2","hypotheses":"(rnd : R -> R -> Prop) (Hr : round_pred_monotone rnd) (x f1 f2 : R) (H1 : rnd x f1) (H2 : rnd x f2)","proofString":"now apply Hr with (3 := Rle_refl x)."},{"statement":"(rnd : R -> R -> Prop) (Hr : round_pred_monotone rnd) (x f1 f2 : R) (H1 : rnd x f1) (H2 : rnd x f2) : f2 <= f1.","conclusion":"f2 <= f1","hypotheses":"(rnd : R -> R -> Prop) (Hr : round_pred_monotone rnd) (x f1 f2 : R) (H1 : rnd x f1) (H2 : rnd x f2)","proofString":"now apply Hr with (3 := Rle_refl x)."},{"statement":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : f <= x) (Hy1 : F g) (Hy2 : forall g0 : R, F g0 -> g0 <= y -> g0 <= g) (Hxy : x <= y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : f <= x) (Hy1 : F g) (Hy2 : forall g0 : R, F g0 -> g0 <= y -> g0 <= g) (Hxy : x <= y)","proofString":"apply Hy2.\napply Hx1.\nnow apply Rle_trans with (2 := Hxy)."},{"statement":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : f <= x) (Hy1 : F g) (Hy2 : forall g0 : R, F g0 -> g0 <= y -> g0 <= g) (Hxy : x <= y) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : f <= x) (Hy1 : F g) (Hy2 : forall g0 : R, F g0 -> g0 <= y -> g0 <= g) (Hxy : x <= y)","proofString":"apply Hx1."},{"statement":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : f <= x) (Hy1 : F g) (Hy2 : forall g0 : R, F g0 -> g0 <= y -> g0 <= g) (Hxy : x <= y) : f <= y.","conclusion":"f <= y","hypotheses":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : f <= x) (Hy1 : F g) (Hy2 : forall g0 : R, F g0 -> g0 <= y -> g0 <= g) (Hxy : x <= y)","proofString":"now apply Rle_trans with (2 := Hxy)."},{"statement":"(F : R -> Prop) : forall x f1 f2 : R, Rnd_DN_pt F x f1 -> Rnd_DN_pt F x f2 -> f1 = f2.","conclusion":"forall x f1 f2 : R, Rnd_DN_pt F x f1 -> Rnd_DN_pt F x f2 -> f1 = f2","hypotheses":"(F : R -> Prop)","proofString":"apply round_unique.\napply Rnd_DN_pt_monotone."},{"statement":"(F : R -> Prop) : round_pred_monotone (Rnd_DN_pt F).","conclusion":"round_pred_monotone (Rnd_DN_pt F)","hypotheses":"(F : R -> Prop)","proofString":"apply Rnd_DN_pt_monotone."},{"statement":"(F : R -> Prop) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_DN F rnd2) (x : R) : rnd1 x = rnd2 x.","conclusion":"rnd1 x = rnd2 x","hypotheses":"(F : R -> Prop) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_DN F rnd2) (x : R)","proofString":"now eapply Rnd_DN_pt_unique."},{"statement":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : forall g0 : R, F g0 -> x <= g0 -> f <= g0) (Hy1 : F g) (Hy2 : y <= g) (Hxy : x <= y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : forall g0 : R, F g0 -> x <= g0 -> f <= g0) (Hy1 : F g) (Hy2 : y <= g) (Hxy : x <= y)","proofString":"apply Hx2.\napply Hy1.\nnow apply Rle_trans with (1 := Hxy)."},{"statement":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : forall g0 : R, F g0 -> x <= g0 -> f <= g0) (Hy1 : F g) (Hy2 : y <= g) (Hxy : x <= y) : F g.","conclusion":"F g","hypotheses":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : forall g0 : R, F g0 -> x <= g0 -> f <= g0) (Hy1 : F g) (Hy2 : y <= g) (Hxy : x <= y)","proofString":"apply Hy1."},{"statement":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : forall g0 : R, F g0 -> x <= g0 -> f <= g0) (Hy1 : F g) (Hy2 : y <= g) (Hxy : x <= y) : x <= g.","conclusion":"x <= g","hypotheses":"(F : R -> Prop) (x y f g : R) (Hx1 : F f) (Hx2 : forall g0 : R, F g0 -> x <= g0 -> f <= g0) (Hy1 : F g) (Hy2 : y <= g) (Hxy : x <= y)","proofString":"now apply Rle_trans with (1 := Hxy)."},{"statement":"(F : R -> Prop) : forall x f1 f2 : R, Rnd_UP_pt F x f1 -> Rnd_UP_pt F x f2 -> f1 = f2.","conclusion":"forall x f1 f2 : R, Rnd_UP_pt F x f1 -> Rnd_UP_pt F x f2 -> f1 = f2","hypotheses":"(F : R -> Prop)","proofString":"apply round_unique.\napply Rnd_UP_pt_monotone."},{"statement":"(F : R -> Prop) : round_pred_monotone (Rnd_UP_pt F).","conclusion":"round_pred_monotone (Rnd_UP_pt F)","hypotheses":"(F : R -> Prop)","proofString":"apply Rnd_UP_pt_monotone."},{"statement":"(F : R -> Prop) (rnd1 rnd2 : R -> R) (H1 : Rnd_UP F rnd1) (H2 : Rnd_UP F rnd2) (x : R) : rnd1 x = rnd2 x.","conclusion":"rnd1 x = rnd2 x","hypotheses":"(F : R -> Prop) (rnd1 rnd2 : R -> R) (H1 : Rnd_UP F rnd1) (H2 : Rnd_UP F rnd2) (x : R)","proofString":"now eapply Rnd_UP_pt_unique."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) : Rnd_UP_pt F (- x) (- f).","conclusion":"Rnd_UP_pt F (- x) (- f)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f)","proofString":"repeat split.\napply HF.\napply H.\napply Ropp_le_contravar.\napply H.\nintros g Hg.\nrewrite <- (Ropp_involutive g).\nintros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) : F (- f).","conclusion":"F (- f)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f)","proofString":"apply HF.\napply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f)","proofString":"apply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) : - x <= - f.","conclusion":"- x <= - f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f)","proofString":"apply Ropp_le_contravar.\napply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f)","proofString":"apply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) : forall g : R, F g -> - x <= g -> - f <= g.","conclusion":"forall g : R, F g -> - x <= g -> - f <= g","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f)","proofString":"intros g Hg.\nrewrite <- (Ropp_involutive g).\nintros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) : - x <= g -> - f <= g.","conclusion":"- x <= g -> - f <= g","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g)","proofString":"rewrite <- (Ropp_involutive g).\nintros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) : - x <= - - g -> - f <= - - g.","conclusion":"- x <= - - g -> - f <= - - g","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g)","proofString":"intros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g) : - f <= - - g.","conclusion":"- f <= - - g","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g)","proofString":"apply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g) : - g <= f.","conclusion":"- g <= f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g)","proofString":"apply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g) : F (- g).","conclusion":"F (- g)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g)","proofString":"now apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g) : - g <= x.","conclusion":"- g <= x","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_DN_pt F x f) (g : R) (Hg : F g) (Hxg : - x <= - - g)","proofString":"now apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) : Rnd_DN_pt F (- x) (- f).","conclusion":"Rnd_DN_pt F (- x) (- f)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f)","proofString":"repeat split.\napply HF.\napply H.\napply Ropp_le_contravar.\napply H.\nintros g Hg.\nrewrite <- (Ropp_involutive g).\nintros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) : F (- f).","conclusion":"F (- f)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f)","proofString":"apply HF.\napply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f)","proofString":"apply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) : - f <= - x.","conclusion":"- f <= - x","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f)","proofString":"apply Ropp_le_contravar.\napply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) : x <= f.","conclusion":"x <= f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f)","proofString":"apply H."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) : forall g : R, F g -> g <= - x -> g <= - f.","conclusion":"forall g : R, F g -> g <= - x -> g <= - f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f)","proofString":"intros g Hg.\nrewrite <- (Ropp_involutive g).\nintros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) : g <= - x -> g <= - f.","conclusion":"g <= - x -> g <= - f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g)","proofString":"rewrite <- (Ropp_involutive g).\nintros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) : - - g <= - x -> - - g <= - f.","conclusion":"- - g <= - x -> - - g <= - f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g)","proofString":"intros Hxg.\napply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x) : - - g <= - f.","conclusion":"- - g <= - f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x)","proofString":"apply Ropp_le_contravar.\napply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x) : f <= - g.","conclusion":"f <= - g","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x)","proofString":"apply H.\nnow apply HF.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x) : F (- g).","conclusion":"F (- g)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x)","proofString":"now apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x) : x <= - g.","conclusion":"x <= - g","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H : Rnd_UP_pt F x f) (g : R) (Hg : F g) (Hxg : - - g <= - x)","proofString":"now apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R) : rnd1 (- x) = - rnd2 x.","conclusion":"rnd1 (- x) = - rnd2 x","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R)","proofString":"rewrite <- (Ropp_involutive (rnd1 (-x))).\napply f_equal.\napply (Rnd_UP_unique F (fun x => - rnd1 (-x))) ; trivial.\nintros y.\npattern y at 1 ; rewrite <- Ropp_involutive.\napply Rnd_UP_pt_opp.\napply HF.\napply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R) : - - rnd1 (- x) = - rnd2 x.","conclusion":"- - rnd1 (- x) = - rnd2 x","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R)","proofString":"apply f_equal.\napply (Rnd_UP_unique F (fun x => - rnd1 (-x))) ; trivial.\nintros y.\npattern y at 1 ; rewrite <- Ropp_involutive.\napply Rnd_UP_pt_opp.\napply HF.\napply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R) : - rnd1 (- x) = rnd2 x.","conclusion":"- rnd1 (- x) = rnd2 x","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R)","proofString":"apply (Rnd_UP_unique F (fun x => - rnd1 (-x))) ; trivial.\nintros y.\npattern y at 1 ; rewrite <- Ropp_involutive.\napply Rnd_UP_pt_opp.\napply HF.\napply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R) : Rnd_UP F (fun x0 : R => - rnd1 (- x0)).","conclusion":"Rnd_UP F (fun x0 : R => - rnd1 (- x0))","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x : R)","proofString":"intros y.\npattern y at 1 ; rewrite <- Ropp_involutive.\napply Rnd_UP_pt_opp.\napply HF.\napply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R) : Rnd_UP_pt F y (- rnd1 (- y)).","conclusion":"Rnd_UP_pt F y (- rnd1 (- y))","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R)","proofString":"pattern y at 1 ; rewrite <- Ropp_involutive.\napply Rnd_UP_pt_opp.\napply HF.\napply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R) : Rnd_UP_pt F (- - y) (- rnd1 (- y)).","conclusion":"Rnd_UP_pt F (- - y) (- rnd1 (- y))","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R)","proofString":"apply Rnd_UP_pt_opp.\napply HF.\napply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R) : forall x0 : R, F x0 -> F (- x0).","conclusion":"forall x0 : R, F x0 -> F (- x0)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R)","proofString":"apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R) : Rnd_DN_pt F (- y) (rnd1 (- y)).","conclusion":"Rnd_DN_pt F (- y) (rnd1 (- y))","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (rnd1 rnd2 : R -> R) (H1 : Rnd_DN F rnd1) (H2 : Rnd_UP F rnd2) (x y : R)","proofString":"apply H1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) : f <= d \\/ u <= f.","conclusion":"f <= d \\/ u <= f","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f)","proofString":"destruct (Rle_or_lt f x).\nleft.\nnow apply Hd.\nright.\nassert (H' := Rlt_le _ _ H).\nnow apply Hu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : f <= x) : f <= d \\/ u <= f.","conclusion":"f <= d \\/ u <= f","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : f <= x)","proofString":"left.\nnow apply Hd."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : f <= x) : f <= d.","conclusion":"f <= d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : f <= x)","proofString":"now apply Hd."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : x < f) : f <= d \\/ u <= f.","conclusion":"f <= d \\/ u <= f","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : x < f)","proofString":"right.\nassert (H' := Rlt_le _ _ H).\nnow apply Hu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : x < f) : u <= f.","conclusion":"u <= f","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : x < f)","proofString":"assert (H' := Rlt_le _ _ H).\nnow apply Hu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : x < f) (H' : x <= f) : u <= f.","conclusion":"u <= f","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (f : R) (Hf : F f) (H : x < f) (H' : x <= f)","proofString":"now apply Hu."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : Rnd_DN_pt F x x.","conclusion":"Rnd_DN_pt F x x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"repeat split.\nexact Hx.\napply Rle_refl.\nnow intros."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : F x.","conclusion":"F x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"exact Hx."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : x <= x.","conclusion":"x <= x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : forall g : R, F g -> g <= x -> g <= x.","conclusion":"forall g : R, F g -> g <= x -> g <= x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"now intros."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x) : f = x.","conclusion":"f = x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x)","proofString":"apply Rle_antisym.\nexact Hx1.\napply Hx2.\nexact Hx.\napply Rle_refl."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x)","proofString":"exact Hx1."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x) : x <= f.","conclusion":"x <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x)","proofString":"apply Hx2.\nexact Hx.\napply Rle_refl."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x) : F x.","conclusion":"F x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x)","proofString":"exact Hx."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x) : x <= x.","conclusion":"x <= x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : f <= x) (Hx2 : forall g : R, F g -> g <= x -> g <= f) (Hx : F x)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : Rnd_UP_pt F x x.","conclusion":"Rnd_UP_pt F x x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"repeat split.\nexact Hx.\napply Rle_refl.\nnow intros."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : F x.","conclusion":"F x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"exact Hx."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : x <= x.","conclusion":"x <= x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : forall g : R, F g -> x <= g -> x <= g.","conclusion":"forall g : R, F g -> x <= g -> x <= g","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"now intros."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x) : f = x.","conclusion":"f = x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x)","proofString":"apply Rle_antisym.\napply Hx2.\nexact Hx.\napply Rle_refl.\nexact Hx1."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x)","proofString":"apply Hx2.\nexact Hx.\napply Rle_refl."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x) : F x.","conclusion":"F x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x)","proofString":"exact Hx."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x) : x <= x.","conclusion":"x <= x","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x) : x <= f.","conclusion":"x <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hx1 : x <= f) (Hx2 : forall g : R, F g -> x <= g -> f <= g) (Hx : F x)","proofString":"exact Hx1."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) : f = fd \\/ f = fu.","conclusion":"f = fd \\/ f = fu","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu)","proofString":"destruct (Rle_or_lt x f) ; [right|left].\napply Rle_antisym with (1 := Hfu).\nnow apply Hu.\napply Rlt_le in H.\napply Rle_antisym with (2 := Hdf).\nnow apply Hd."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : x <= f) : f = fu.","conclusion":"f = fu","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : x <= f)","proofString":"apply Rle_antisym with (1 := Hfu).\nnow apply Hu."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : x <= f) : fu <= f.","conclusion":"fu <= f","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : x <= f)","proofString":"now apply Hu."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : f < x) : f = fd.","conclusion":"f = fd","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : f < x)","proofString":"apply Rlt_le in H.\napply Rle_antisym with (2 := Hdf).\nnow apply Hd."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : f <= x) : f = fd.","conclusion":"f = fd","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : f <= x)","proofString":"apply Rle_antisym with (2 := Hdf).\nnow apply Hd."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : f <= x) : f <= fd.","conclusion":"f <= fd","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : F f) (Hdf : fd <= f) (Hfu : f <= fu) (H : f <= x)","proofString":"now apply Hd."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) : Rabs (rnd x) <= Rabs x.","conclusion":"Rabs (rnd x) <= Rabs x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R)","proofString":"assert (F 0%R).\nreplace 0%R with (rnd 0%R).\neapply H.\napply Rle_refl.\ndestruct (H 0%R) as (H1, H2).\napply Rle_antisym.\napply H1.\napply Rle_refl.\napply H2.\napply Rle_refl.\ndestruct (Rle_or_lt 0 x).\nrewrite Rabs_pos_eq with (1 := H1).\nrewrite Rabs_pos_eq.\nnow apply (proj1 (H x)).\nnow apply (proj1 (H x)).\napply Rlt_le in H1.\nrewrite Rabs_left1 with (1 := H1).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\nnow apply (proj2 (H x)).\nnow apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R)","proofString":"replace 0%R with (rnd 0%R).\neapply H.\napply Rle_refl.\ndestruct (H 0%R) as (H1, H2).\napply Rle_antisym.\napply H1.\napply Rle_refl.\napply H2.\napply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) : F (rnd 0).","conclusion":"F (rnd 0)","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R)","proofString":"eapply H.\napply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) : 0 <= 0.","conclusion":"0 <= 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) : rnd 0 = 0.","conclusion":"rnd 0 = 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R)","proofString":"destruct (H 0%R) as (H1, H2).\napply Rle_antisym.\napply H1.\napply Rle_refl.\napply H2.\napply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0)) : rnd 0 = 0.","conclusion":"rnd 0 = 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0))","proofString":"apply Rle_antisym.\napply H1.\napply Rle_refl.\napply H2.\napply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0)) : rnd 0 <= 0.","conclusion":"rnd 0 <= 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0))","proofString":"apply H1.\napply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0)) : 0 <= 0.","conclusion":"0 <= 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0))","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0)) : 0 <= rnd 0.","conclusion":"0 <= rnd 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0))","proofString":"apply H2.\napply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0)) : 0 <= 0.","conclusion":"0 <= 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H1 : 0 <= 0 -> Rnd_DN_pt F 0 (rnd 0)) (H2 : 0 <= 0 -> Rnd_UP_pt F 0 (rnd 0))","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) : Rabs (rnd x) <= Rabs x.","conclusion":"Rabs (rnd x) <= Rabs x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0)","proofString":"destruct (Rle_or_lt 0 x).\nrewrite Rabs_pos_eq with (1 := H1).\nrewrite Rabs_pos_eq.\nnow apply (proj1 (H x)).\nnow apply (proj1 (H x)).\napply Rlt_le in H1.\nrewrite Rabs_left1 with (1 := H1).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\nnow apply (proj2 (H x)).\nnow apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x) : Rabs (rnd x) <= Rabs x.","conclusion":"Rabs (rnd x) <= Rabs x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x)","proofString":"rewrite Rabs_pos_eq with (1 := H1).\nrewrite Rabs_pos_eq.\nnow apply (proj1 (H x)).\nnow apply (proj1 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x) : Rabs (rnd x) <= x.","conclusion":"Rabs (rnd x) <= x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x)","proofString":"rewrite Rabs_pos_eq.\nnow apply (proj1 (H x)).\nnow apply (proj1 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x) : rnd x <= x.","conclusion":"rnd x <= x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x)","proofString":"now apply (proj1 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x) : 0 <= rnd x.","conclusion":"0 <= rnd x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : 0 <= x)","proofString":"now apply (proj1 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x < 0) : Rabs (rnd x) <= Rabs x.","conclusion":"Rabs (rnd x) <= Rabs x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x < 0)","proofString":"apply Rlt_le in H1.\nrewrite Rabs_left1 with (1 := H1).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\nnow apply (proj2 (H x)).\nnow apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0) : Rabs (rnd x) <= Rabs x.","conclusion":"Rabs (rnd x) <= Rabs x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0)","proofString":"rewrite Rabs_left1 with (1 := H1).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\nnow apply (proj2 (H x)).\nnow apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0) : Rabs (rnd x) <= - x.","conclusion":"Rabs (rnd x) <= - x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0)","proofString":"rewrite Rabs_left1.\napply Ropp_le_contravar.\nnow apply (proj2 (H x)).\nnow apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0) : - rnd x <= - x.","conclusion":"- rnd x <= - x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0)","proofString":"apply Ropp_le_contravar.\nnow apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0) : x <= rnd x.","conclusion":"x <= rnd x","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0)","proofString":"now apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0) : rnd x <= 0.","conclusion":"rnd x <= 0","hypotheses":"(F : R -> Prop) (rnd : R -> R) (H : Rnd_ZR F rnd) (x : R) (H0 : F 0) (H1 : x <= 0)","proofString":"now apply (proj2 (H x))."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y)","proofString":"destruct (Rle_or_lt 0 x) as [Hx|Hx].\napply Hy1.\nnow apply Rle_trans with x.\nnow apply Hx1.\napply Rle_trans with (2 := Hxy).\nnow apply Hx1.\napply Rlt_le in Hx.\ndestruct (Rle_or_lt 0 y) as [Hy|Hy].\napply Rle_trans with 0.\nnow apply Hx2.\nnow apply Hy1.\napply Rlt_le in Hy.\napply Hx2.\nexact Hx.\nnow apply Hy2.\napply Rle_trans with (1 := Hxy).\nnow apply Hy2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x)","proofString":"apply Hy1.\nnow apply Rle_trans with x.\nnow apply Hx1.\napply Rle_trans with (2 := Hxy).\nnow apply Hx1."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x) : 0 <= y.","conclusion":"0 <= y","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x)","proofString":"now apply Rle_trans with x."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x)","proofString":"now apply Hx1."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x) : f <= y.","conclusion":"f <= y","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x)","proofString":"apply Rle_trans with (2 := Hxy).\nnow apply Hx1."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : 0 <= x)","proofString":"now apply Hx1."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x < 0) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x < 0)","proofString":"apply Rlt_le in Hx.\ndestruct (Rle_or_lt 0 y) as [Hy|Hy].\napply Rle_trans with 0.\nnow apply Hx2.\nnow apply Hy1.\napply Rlt_le in Hy.\napply Hx2.\nexact Hx.\nnow apply Hy2.\napply Rle_trans with (1 := Hxy).\nnow apply Hy2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0)","proofString":"destruct (Rle_or_lt 0 y) as [Hy|Hy].\napply Rle_trans with 0.\nnow apply Hx2.\nnow apply Hy1.\napply Rlt_le in Hy.\napply Hx2.\nexact Hx.\nnow apply Hy2.\napply Rle_trans with (1 := Hxy).\nnow apply Hy2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : 0 <= y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : 0 <= y)","proofString":"apply Rle_trans with 0.\nnow apply Hx2.\nnow apply Hy1."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : 0 <= y) : f <= 0.","conclusion":"f <= 0","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : 0 <= y)","proofString":"now apply Hx2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : 0 <= y) : 0 <= g.","conclusion":"0 <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : 0 <= y)","proofString":"now apply Hy1."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y < 0) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y < 0)","proofString":"apply Rlt_le in Hy.\napply Hx2.\nexact Hx.\nnow apply Hy2.\napply Rle_trans with (1 := Hxy).\nnow apply Hy2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0)","proofString":"apply Hx2.\nexact Hx.\nnow apply Hy2.\napply Rle_trans with (1 := Hxy).\nnow apply Hy2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0) : x <= 0.","conclusion":"x <= 0","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0)","proofString":"exact Hx."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0) : F g.","conclusion":"F g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0)","proofString":"now apply Hy2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0) : x <= g.","conclusion":"x <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0)","proofString":"apply Rle_trans with (1 := Hxy).\nnow apply Hy2."},{"statement":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0) : y <= g.","conclusion":"y <= g","hypotheses":"(F : R -> Prop) (F0 : F 0) (x y f g : R) (Hx1 : 0 <= x -> Rnd_DN_pt F x f) (Hx2 : x <= 0 -> Rnd_UP_pt F x f) (Hy1 : 0 <= y -> Rnd_DN_pt F y g) (Hy2 : y <= 0 -> Rnd_UP_pt F y g) (Hxy : x <= y) (Hx : x <= 0) (Hy : y <= 0)","proofString":"now apply Hy2."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) : Rnd_DN_pt F x f \\/ Rnd_UP_pt F x f.","conclusion":"Rnd_DN_pt F x f \\/ Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x))","proofString":"destruct (Rle_or_lt x f) as [Hxf|Hxf].\nright.\nrepeat split ; try assumption.\nintros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_pos_eq in Hf2.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_0_minus.\nnow apply Rle_0_minus.\nleft.\nrepeat split ; try assumption.\nnow apply Rlt_le.\nintros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_left1 in Hf2.\ngeneralize (Ropp_le_cancel _ _ Hf2).\nintros H.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_minus.\napply Rlt_le.\nnow apply Rlt_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f) : Rnd_DN_pt F x f \\/ Rnd_UP_pt F x f.","conclusion":"Rnd_DN_pt F x f \\/ Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f)","proofString":"right.\nrepeat split ; try assumption.\nintros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_pos_eq in Hf2.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_0_minus.\nnow apply Rle_0_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f) : Rnd_UP_pt F x f.","conclusion":"Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f)","proofString":"repeat split ; try assumption.\nintros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_pos_eq in Hf2.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_0_minus.\nnow apply Rle_0_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f) : forall g : R, F g -> x <= g -> f <= g.","conclusion":"forall g : R, F g -> x <= g -> f <= g","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f)","proofString":"intros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_pos_eq in Hf2.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_0_minus.\nnow apply Rle_0_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g0 : R, F g0 -> Rabs (f - x) <= Rabs (g0 - x)) (Hxf : x <= f) (g : R) (Hg : F g) (Hxg : x <= g) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g0 : R, F g0 -> Rabs (f - x) <= Rabs (g0 - x)) (Hxf : x <= f) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"specialize (Hf2 g Hg).\nrewrite 2!Rabs_pos_eq in Hf2.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_0_minus.\nnow apply Rle_0_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g)","proofString":"rewrite 2!Rabs_pos_eq in Hf2.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_0_minus.\nnow apply Rle_0_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : f - x <= g - x) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : f - x <= g - x) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Rplus_le_reg_r with (-x)%R."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : f - x <= Rabs (g - x)) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g) : 0 <= g - x.","conclusion":"0 <= g - x","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : f - x <= Rabs (g - x)) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Rle_0_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g) : 0 <= f - x.","conclusion":"0 <= f - x","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : x <= f) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Rle_0_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) : Rnd_DN_pt F x f \\/ Rnd_UP_pt F x f.","conclusion":"Rnd_DN_pt F x f \\/ Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x)","proofString":"left.\nrepeat split ; try assumption.\nnow apply Rlt_le.\nintros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_left1 in Hf2.\ngeneralize (Ropp_le_cancel _ _ Hf2).\nintros H.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_minus.\napply Rlt_le.\nnow apply Rlt_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) : Rnd_DN_pt F x f.","conclusion":"Rnd_DN_pt F x f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x)","proofString":"repeat split ; try assumption.\nnow apply Rlt_le.\nintros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_left1 in Hf2.\ngeneralize (Ropp_le_cancel _ _ Hf2).\nintros H.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_minus.\napply Rlt_le.\nnow apply Rlt_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x)","proofString":"now apply Rlt_le."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) : forall g : R, F g -> g <= x -> g <= f.","conclusion":"forall g : R, F g -> g <= x -> g <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x)","proofString":"intros g Hg Hxg.\nspecialize (Hf2 g Hg).\nrewrite 2!Rabs_left1 in Hf2.\ngeneralize (Ropp_le_cancel _ _ Hf2).\nintros H.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_minus.\napply Rlt_le.\nnow apply Rlt_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g0 : R, F g0 -> Rabs (f - x) <= Rabs (g0 - x)) (Hxf : f < x) (g : R) (Hg : F g) (Hxg : g <= x) : g <= f.","conclusion":"g <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (Hf2 : forall g0 : R, F g0 -> Rabs (f - x) <= Rabs (g0 - x)) (Hxf : f < x) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"specialize (Hf2 g Hg).\nrewrite 2!Rabs_left1 in Hf2.\ngeneralize (Ropp_le_cancel _ _ Hf2).\nintros H.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_minus.\napply Rlt_le.\nnow apply Rlt_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) : g <= f.","conclusion":"g <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x)","proofString":"rewrite 2!Rabs_left1 in Hf2.\ngeneralize (Ropp_le_cancel _ _ Hf2).\nintros H.\nnow apply Rplus_le_reg_r with (-x)%R.\nnow apply Rle_minus.\napply Rlt_le.\nnow apply Rlt_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= - (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) : g <= f.","conclusion":"g <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= - (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x)","proofString":"generalize (Ropp_le_cancel _ _ Hf2).\nintros H.\nnow apply Rplus_le_reg_r with (-x)%R."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= - (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) : g - x <= f - x -> g <= f.","conclusion":"g - x <= f - x -> g <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= - (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x)","proofString":"intros H.\nnow apply Rplus_le_reg_r with (-x)%R."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= - (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) (H : g - x <= f - x) : g <= f.","conclusion":"g <= f","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= - (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) (H : g - x <= f - x)","proofString":"now apply Rplus_le_reg_r with (-x)%R."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) : g - x <= 0.","conclusion":"g - x <= 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : - (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Rle_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) : f - x <= 0.","conclusion":"f - x <= 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rlt_le.\nnow apply Rlt_minus."},{"statement":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x) : f - x < 0.","conclusion":"f - x < 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf1 : F f) (g : R) (Hf2 : Rabs (f - x) <= Rabs (g - x)) (Hxf : f < x) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Rlt_minus."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) : f = fd \\/ f = fu.","conclusion":"f = fd \\/ f = fu","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f)","proofString":"destruct (Rnd_N_pt_DN_or_UP F x f Hf) as [H|H].\nleft.\napply Rnd_DN_pt_unique with (1 := H) (2 := Hd).\nright.\napply Rnd_UP_pt_unique with (1 := H) (2 := Hu)."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_DN_pt F x f) : f = fd \\/ f = fu.","conclusion":"f = fd \\/ f = fu","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_DN_pt F x f)","proofString":"left.\napply Rnd_DN_pt_unique with (1 := H) (2 := Hd)."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_DN_pt F x f) : f = fd.","conclusion":"f = fd","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_DN_pt F x f)","proofString":"apply Rnd_DN_pt_unique with (1 := H) (2 := Hd)."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_UP_pt F x f) : f = fd \\/ f = fu.","conclusion":"f = fd \\/ f = fu","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_UP_pt F x f)","proofString":"right.\napply Rnd_UP_pt_unique with (1 := H) (2 := Hu)."},{"statement":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_UP_pt F x f) : f = fu.","conclusion":"f = fu","hypotheses":"(F : R -> Prop) (x fd fu f : R) (Hd : Rnd_DN_pt F x fd) (Hu : Rnd_UP_pt F x fu) (Hf : Rnd_N_pt F x f) (H : Rnd_UP_pt F x f)","proofString":"apply Rnd_UP_pt_unique with (1 := H) (2 := Hu)."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x)) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x))","proofString":"rewrite <- (Ropp_involutive f).\nrepeat split.\napply HF.\napply H1.\nintros g H3.\nrewrite Ropp_involutive.\nreplace (f - x)%R with (-(-f - -x))%R by ring.\nreplace (g - x)%R with (-(-g - -x))%R by ring.\nrewrite 2!Rabs_Ropp.\napply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x)) : Rnd_N_pt F x (- - f).","conclusion":"Rnd_N_pt F x (- - f)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x))","proofString":"repeat split.\napply HF.\napply H1.\nintros g H3.\nrewrite Ropp_involutive.\nreplace (f - x)%R with (-(-f - -x))%R by ring.\nreplace (g - x)%R with (-(-g - -x))%R by ring.\nrewrite 2!Rabs_Ropp.\napply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x)) : F (- - f).","conclusion":"F (- - f)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x))","proofString":"apply HF.\napply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x)) : F (- f).","conclusion":"F (- f)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x))","proofString":"apply H1."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x)) : forall g : R, F g -> Rabs (- - f - x) <= Rabs (g - x).","conclusion":"forall g : R, F g -> Rabs (- - f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g : R, F g -> Rabs (- f - - x) <= Rabs (g - - x))","proofString":"intros g H3.\nrewrite Ropp_involutive.\nreplace (f - x)%R with (-(-f - -x))%R by ring.\nreplace (g - x)%R with (-(-g - -x))%R by ring.\nrewrite 2!Rabs_Ropp.\napply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g) : Rabs (- - f - x) <= Rabs (g - x).","conclusion":"Rabs (- - f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g)","proofString":"rewrite Ropp_involutive.\nreplace (f - x)%R with (-(-f - -x))%R by ring.\nreplace (g - x)%R with (-(-g - -x))%R by ring.\nrewrite 2!Rabs_Ropp.\napply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g) : Rabs (f - x) <= Rabs (g - x).","conclusion":"Rabs (f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g)","proofString":"replace (f - x)%R with (-(-f - -x))%R by ring.\nreplace (g - x)%R with (-(-g - -x))%R by ring.\nrewrite 2!Rabs_Ropp.\napply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g) : Rabs (- (- f - - x)) <= Rabs (g - x).","conclusion":"Rabs (- (- f - - x)) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g)","proofString":"replace (g - x)%R with (-(-g - -x))%R by ring.\nrewrite 2!Rabs_Ropp.\napply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g) : Rabs (- (- f - - x)) <= Rabs (- (- g - - x)).","conclusion":"Rabs (- (- f - - x)) <= Rabs (- (- g - - x))","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g)","proofString":"rewrite 2!Rabs_Ropp.\napply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g) : Rabs (- f - - x) <= Rabs (- g - - x).","conclusion":"Rabs (- f - - x) <= Rabs (- g - - x)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g)","proofString":"apply H2.\nnow apply HF."},{"statement":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g) : F (- g).","conclusion":"F (- g)","hypotheses":"(F : R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (H1 : F (- f)) (H2 : forall g0 : R, F g0 -> Rabs (- f - - x) <= Rabs (g0 - - x)) (g : R) (H3 : F g)","proofString":"now apply HF."},{"statement":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) : Rnd_N_pt F x f1 -> Rnd_N_pt F x f2 -> f1 = f2.","conclusion":"Rnd_N_pt F x f1 -> Rnd_N_pt F x f2 -> f1 = f2","hypotheses":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x)","proofString":"assert (forall f1 f2, Rnd_N_pt F x f1 -> Rnd_N_pt F x f2 -> f1 < f2 -> False).\nclear f1 f2.\nintros f1 f2 Hf1 Hf2 H12.\ndestruct (Rnd_N_pt_DN_or_UP F x f1 Hf1) as [Hd1|Hu1] ;  destruct (Rnd_N_pt_DN_or_UP F x f2 Hf2) as [Hd2|Hu2].\napply Rlt_not_eq with (1 := H12).\nnow apply Rnd_DN_pt_unique with (1 := Hd1).\napply Hdu.\nrewrite Rnd_DN_pt_unique with (1 := Hd) (2 := Hd1).\nrewrite Rnd_UP_pt_unique with (1 := Hu) (2 := Hu2).\nrewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1.\napply Rlt_not_le with (1 := H12).\napply Rle_trans with x.\napply Hd2.\napply Hu1.\napply Rgt_not_eq with (1 := H12).\nnow apply Rnd_UP_pt_unique with (1 := Hu2).\nintros Hf1 Hf2.\nnow apply Rle_antisym ; apply Rnot_lt_le ; refine (H _ _ _ _)."},{"statement":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) : forall f0 f3 : R, Rnd_N_pt F x f0 -> Rnd_N_pt F x f3 -> f0 < f3 -> False.","conclusion":"forall f0 f3 : R, Rnd_N_pt F x f0 -> Rnd_N_pt F x f3 -> f0 < f3 -> False","hypotheses":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x)","proofString":"clear f1 f2.\nintros f1 f2 Hf1 Hf2 H12.\ndestruct (Rnd_N_pt_DN_or_UP F x f1 Hf1) as [Hd1|Hu1] ;  destruct (Rnd_N_pt_DN_or_UP F x f2 Hf2) as [Hd2|Hu2].\napply Rlt_not_eq with (1 := H12).\nnow apply Rnd_DN_pt_unique with (1 := Hd1).\napply Hdu.\nrewrite Rnd_DN_pt_unique with (1 := Hd) (2 := Hd1).\nrewrite Rnd_UP_pt_unique with (1 := Hu) (2 := Hu2).\nrewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1.\napply Rlt_not_le with (1 := H12).\napply Rle_trans with x.\napply Hd2.\napply Hu1.\napply Rgt_not_eq with (1 := H12).\nnow apply Rnd_UP_pt_unique with (1 := Hu2)."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) : forall f1 f2 : R, Rnd_N_pt F x f1 -> Rnd_N_pt F x f2 -> f1 < f2 -> False.","conclusion":"forall f1 f2 : R, Rnd_N_pt F x f1 -> Rnd_N_pt F x f2 -> f1 < f2 -> False","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x)","proofString":"intros f1 f2 Hf1 Hf2 H12.\ndestruct (Rnd_N_pt_DN_or_UP F x f1 Hf1) as [Hd1|Hu1] ;  destruct (Rnd_N_pt_DN_or_UP F x f2 Hf2) as [Hd2|Hu2].\napply Rlt_not_eq with (1 := H12).\nnow apply Rnd_DN_pt_unique with (1 := Hd1).\napply Hdu.\nrewrite Rnd_DN_pt_unique with (1 := Hd) (2 := Hd1).\nrewrite Rnd_UP_pt_unique with (1 := Hu) (2 := Hu2).\nrewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1.\napply Rlt_not_le with (1 := H12).\napply Rle_trans with x.\napply Hd2.\napply Hu1.\napply Rgt_not_eq with (1 := H12).\nnow apply Rnd_UP_pt_unique with (1 := Hu2)."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) : False.","conclusion":"False","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2)","proofString":"destruct (Rnd_N_pt_DN_or_UP F x f1 Hf1) as [Hd1|Hu1] ;  destruct (Rnd_N_pt_DN_or_UP F x f2 Hf2) as [Hd2|Hu2].\napply Rlt_not_eq with (1 := H12).\nnow apply Rnd_DN_pt_unique with (1 := Hd1).\napply Hdu.\nrewrite Rnd_DN_pt_unique with (1 := Hd) (2 := Hd1).\nrewrite Rnd_UP_pt_unique with (1 := Hu) (2 := Hu2).\nrewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1.\napply Rlt_not_le with (1 := H12).\napply Rle_trans with x.\napply Hd2.\napply Hu1.\napply Rgt_not_eq with (1 := H12).\nnow apply Rnd_UP_pt_unique with (1 := Hu2)."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hd2 : Rnd_DN_pt F x f2) : False.","conclusion":"False","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hd2 : Rnd_DN_pt F x f2)","proofString":"apply Rlt_not_eq with (1 := H12).\nnow apply Rnd_DN_pt_unique with (1 := Hd1)."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hd2 : Rnd_DN_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hd2 : Rnd_DN_pt F x f2)","proofString":"now apply Rnd_DN_pt_unique with (1 := Hd1)."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : False.","conclusion":"False","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Hdu.\nrewrite Rnd_DN_pt_unique with (1 := Hd) (2 := Hd1).\nrewrite Rnd_UP_pt_unique with (1 := Hu) (2 := Hu2).\nrewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : x - d = u - x.","conclusion":"x - d = u - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"rewrite Rnd_DN_pt_unique with (1 := Hd) (2 := Hd1).\nrewrite Rnd_UP_pt_unique with (1 := Hu) (2 := Hu2).\nrewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : x - f1 = u - x.","conclusion":"x - f1 = u - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"rewrite Rnd_UP_pt_unique with (1 := Hu) (2 := Hu2).\nrewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : x - f1 = f2 - x.","conclusion":"x - f1 = f2 - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"rewrite <- (Rabs_pos_eq (x - f1)).\nrewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2.\napply Rle_0_minus.\napply Hd1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : Rabs (x - f1) = f2 - x.","conclusion":"Rabs (x - f1) = f2 - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"rewrite <- (Rabs_pos_eq (f2 - x)).\nrewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1.\napply Rle_0_minus.\napply Hu2."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : Rabs (x - f1) = Rabs (f2 - x).","conclusion":"Rabs (x - f1) = Rabs (f2 - x)","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"rewrite Rabs_minus_sym.\napply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : Rabs (f1 - x) = Rabs (f2 - x).","conclusion":"Rabs (f1 - x) = Rabs (f2 - x)","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Rle_antisym.\napply Hf1.\napply Hf2.\napply Hf2.\napply Hf1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : Rabs (f1 - x) <= Rabs (f2 - x).","conclusion":"Rabs (f1 - x) <= Rabs (f2 - x)","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Hf1.\napply Hf2."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : F f2.","conclusion":"F f2","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Hf2."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : Rabs (f2 - x) <= Rabs (f1 - x).","conclusion":"Rabs (f2 - x) <= Rabs (f1 - x)","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Hf2.\napply Hf1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : F f1.","conclusion":"F f1","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Hf1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : 0 <= f2 - x.","conclusion":"0 <= f2 - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Rle_0_minus.\napply Hu2."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : x <= f2.","conclusion":"x <= f2","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Hu2."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : 0 <= x - f1.","conclusion":"0 <= x - f1","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Rle_0_minus.\napply Hd1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : f1 <= x.","conclusion":"f1 <= x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hd1 : Rnd_DN_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Hd1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2) : False.","conclusion":"False","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2)","proofString":"apply Rlt_not_le with (1 := H12).\napply Rle_trans with x.\napply Hd2.\napply Hu1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2) : f2 <= f1.","conclusion":"f2 <= f1","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2)","proofString":"apply Rle_trans with x.\napply Hd2.\napply Hu1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2) : f2 <= x.","conclusion":"f2 <= x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2)","proofString":"apply Hd2."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2) : x <= f1.","conclusion":"x <= f1","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hd2 : Rnd_DN_pt F x f2)","proofString":"apply Hu1."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : False.","conclusion":"False","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"apply Rgt_not_eq with (1 := H12).\nnow apply Rnd_UP_pt_unique with (1 := Hu2)."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hu2 : Rnd_UP_pt F x f2) : f2 = f1.","conclusion":"f2 = f1","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (f1 f2 : R) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) (H12 : f1 < f2) (Hu1 : Rnd_UP_pt F x f1) (Hu2 : Rnd_UP_pt F x f2)","proofString":"now apply Rnd_UP_pt_unique with (1 := Hu2)."},{"statement":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (H : forall f0 f3 : R, Rnd_N_pt F x f0 -> Rnd_N_pt F x f3 -> f0 < f3 -> False) : Rnd_N_pt F x f1 -> Rnd_N_pt F x f2 -> f1 = f2.","conclusion":"Rnd_N_pt F x f1 -> Rnd_N_pt F x f2 -> f1 = f2","hypotheses":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (H : forall f0 f3 : R, Rnd_N_pt F x f0 -> Rnd_N_pt F x f3 -> f0 < f3 -> False)","proofString":"intros Hf1 Hf2.\nnow apply Rle_antisym ; apply Rnot_lt_le ; refine (H _ _ _ _)."},{"statement":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (H : forall f0 f3 : R, Rnd_N_pt F x f0 -> Rnd_N_pt F x f3 -> f0 < f3 -> False) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (x d u f1 f2 : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hdu : x - d <> u - x) (H : forall f0 f3 : R, Rnd_N_pt F x f0 -> Rnd_N_pt F x f3 -> f0 < f3 -> False) (Hf1 : Rnd_N_pt F x f1) (Hf2 : Rnd_N_pt F x f2)","proofString":"now apply Rle_antisym ; apply Rnot_lt_le ; refine (H _ _ _ _)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : Rnd_N_pt F x x.","conclusion":"Rnd_N_pt F x x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"repeat split.\nexact Hx.\nintros g _.\nunfold Rminus at 1.\nrewrite Rplus_opp_r, Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : F x.","conclusion":"F x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"exact Hx."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : forall g : R, F g -> Rabs (x - x) <= Rabs (g - x).","conclusion":"forall g : R, F g -> Rabs (x - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"intros g _.\nunfold Rminus at 1.\nrewrite Rplus_opp_r, Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (g : R) : Rabs (x - x) <= Rabs (g - x).","conclusion":"Rabs (x - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (g : R)","proofString":"unfold Rminus at 1.\nrewrite Rplus_opp_r, Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (g : R) : Rabs (x + - x) <= Rabs (g - x).","conclusion":"Rabs (x + - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (g : R)","proofString":"rewrite Rplus_opp_r, Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (g : R) : 0 <= Rabs (g - x).","conclusion":"0 <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (g : R)","proofString":"apply Rabs_pos."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) : f = x.","conclusion":"f = x","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x)","proofString":"apply Rminus_diag_uniq.\ndestruct (Req_dec (f - x) 0) as [H|H].\nexact H.\nelim Rabs_no_R0 with (1 := H).\napply Rle_antisym.\nreplace 0 with (Rabs (x - x)).\nnow apply Hf.\nunfold Rminus.\nrewrite Rplus_opp_r.\napply Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) : f - x = 0.","conclusion":"f - x = 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x)","proofString":"destruct (Req_dec (f - x) 0) as [H|H].\nexact H.\nelim Rabs_no_R0 with (1 := H).\napply Rle_antisym.\nreplace 0 with (Rabs (x - x)).\nnow apply Hf.\nunfold Rminus.\nrewrite Rplus_opp_r.\napply Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x = 0) : f - x = 0.","conclusion":"f - x = 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x = 0)","proofString":"exact H."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : f - x = 0.","conclusion":"f - x = 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"elim Rabs_no_R0 with (1 := H).\napply Rle_antisym.\nreplace 0 with (Rabs (x - x)).\nnow apply Hf.\nunfold Rminus.\nrewrite Rplus_opp_r.\napply Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : Rabs (f - x) = 0.","conclusion":"Rabs (f - x) = 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"apply Rle_antisym.\nreplace 0 with (Rabs (x - x)).\nnow apply Hf.\nunfold Rminus.\nrewrite Rplus_opp_r.\napply Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : Rabs (f - x) <= 0.","conclusion":"Rabs (f - x) <= 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"replace 0 with (Rabs (x - x)).\nnow apply Hf.\nunfold Rminus.\nrewrite Rplus_opp_r.\napply Rabs_R0."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : Rabs (f - x) <= Rabs (x - x).","conclusion":"Rabs (f - x) <= Rabs (x - x)","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"now apply Hf."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : Rabs (x - x) = 0.","conclusion":"Rabs (x - x) = 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"unfold Rminus.\nrewrite Rplus_opp_r.\napply Rabs_R0."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : Rabs (x + - x) = 0.","conclusion":"Rabs (x + - x) = 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"rewrite Rplus_opp_r.\napply Rabs_R0."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : Rabs 0 = 0.","conclusion":"Rabs 0 = 0","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"apply Rabs_R0."},{"statement":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0) : 0 <= Rabs (f - x).","conclusion":"0 <= Rabs (f - x)","hypotheses":"(F : R -> Prop) (x f : R) (Hf : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)) (Hx : F x) (H : f - x <> 0)","proofString":"apply Rabs_pos."},{"statement":"(F : R -> Prop) (HF : F 0) : Rnd_N_pt F 0 0.","conclusion":"Rnd_N_pt F 0 0","hypotheses":"(F : R -> Prop) (HF : F 0)","proofString":"split.\nexact HF.\nintros g _.\nrewrite 2!Rminus_0_r, Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (HF : F 0) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF : F 0)","proofString":"exact HF."},{"statement":"(F : R -> Prop) (HF : F 0) : forall g : R, F g -> Rabs (0 - 0) <= Rabs (g - 0).","conclusion":"forall g : R, F g -> Rabs (0 - 0) <= Rabs (g - 0)","hypotheses":"(F : R -> Prop) (HF : F 0)","proofString":"intros g _.\nrewrite 2!Rminus_0_r, Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (HF : F 0) (g : R) : Rabs (0 - 0) <= Rabs (g - 0).","conclusion":"Rabs (0 - 0) <= Rabs (g - 0)","hypotheses":"(F : R -> Prop) (HF : F 0) (g : R)","proofString":"rewrite 2!Rminus_0_r, Rabs_R0.\napply Rabs_pos."},{"statement":"(F : R -> Prop) (HF : F 0) (g : R) : 0 <= Rabs g.","conclusion":"0 <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (g : R)","proofString":"apply Rabs_pos."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 < x) (Hxf : Rnd_N_pt F x f) : 0 <= f.","conclusion":"0 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 < x) (Hxf : Rnd_N_pt F x f)","proofString":"eapply Rnd_N_pt_monotone ; try eassumption.\nnow apply Rnd_N_pt_0."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 < x) (Hxf : Rnd_N_pt F x f) : Rnd_N_pt F 0 0.","conclusion":"Rnd_N_pt F 0 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 < x) (Hxf : Rnd_N_pt F x f)","proofString":"now apply Rnd_N_pt_0."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f) : 0 <= f.","conclusion":"0 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f)","proofString":"right.\napply sym_eq.\napply Rnd_N_pt_idempotent with F.\nnow rewrite Hx.\nexact HF."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f) : 0 = f.","conclusion":"0 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f)","proofString":"apply sym_eq.\napply Rnd_N_pt_idempotent with F.\nnow rewrite Hx.\nexact HF."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f) : f = 0.","conclusion":"f = 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f)","proofString":"apply Rnd_N_pt_idempotent with F.\nnow rewrite Hx.\nexact HF."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f) : Rnd_N_pt F 0 f.","conclusion":"Rnd_N_pt F 0 f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f)","proofString":"now rewrite Hx."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 = x) (Hxf : Rnd_N_pt F x f)","proofString":"exact HF."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0) (Hxf : Rnd_N_pt F x f) : f <= 0.","conclusion":"f <= 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0) (Hxf : Rnd_N_pt F x f)","proofString":"eapply Rnd_N_pt_monotone ; try eassumption.\nnow apply Rnd_N_pt_0."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0) (Hxf : Rnd_N_pt F x f) : Rnd_N_pt F 0 0.","conclusion":"Rnd_N_pt F 0 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0) (Hxf : Rnd_N_pt F x f)","proofString":"now apply Rnd_N_pt_0."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f) : f <= 0.","conclusion":"f <= 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f)","proofString":"right.\napply Rnd_N_pt_idempotent with F.\nnow rewrite <- Hx.\nexact HF."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f) : f = 0.","conclusion":"f = 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f)","proofString":"apply Rnd_N_pt_idempotent with F.\nnow rewrite <- Hx.\nexact HF."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f) : Rnd_N_pt F 0 f.","conclusion":"Rnd_N_pt F 0 f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f)","proofString":"now rewrite <- Hx."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x = 0) (Hxf : Rnd_N_pt F x f)","proofString":"exact HF."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) : Rnd_N_pt F (Rabs x) (Rabs f).","conclusion":"Rnd_N_pt F (Rabs x) (Rabs f)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f)","proofString":"unfold Rabs at 1.\ndestruct (Rcase_abs x) as [Hx|Hx].\nrewrite Rabs_left1.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive.\napply Rnd_N_pt_le_0 with (3 := Hxf).\nexact HF0.\nnow apply Rlt_le.\nrewrite Rabs_pos_eq.\nexact Hxf.\napply Rnd_N_pt_ge_0 with (3 := Hxf).\nexact HF0.\nnow apply Rge_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) : Rnd_N_pt F (if Rcase_abs x then - x else x) (Rabs f).","conclusion":"Rnd_N_pt F (if Rcase_abs x then - x else x) (Rabs f)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f)","proofString":"destruct (Rcase_abs x) as [Hx|Hx].\nrewrite Rabs_left1.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive.\napply Rnd_N_pt_le_0 with (3 := Hxf).\nexact HF0.\nnow apply Rlt_le.\nrewrite Rabs_pos_eq.\nexact Hxf.\napply Rnd_N_pt_ge_0 with (3 := Hxf).\nexact HF0.\nnow apply Rge_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0) : Rnd_N_pt F (- x) (Rabs f).","conclusion":"Rnd_N_pt F (- x) (Rabs f)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0)","proofString":"rewrite Rabs_left1.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive.\napply Rnd_N_pt_le_0 with (3 := Hxf).\nexact HF0.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0) : Rnd_N_pt F (- x) (- f).","conclusion":"Rnd_N_pt F (- x) (- f)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0)","proofString":"apply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0) : forall x0 : R, F x0 -> F (- x0).","conclusion":"forall x0 : R, F x0 -> F (- x0)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0)","proofString":"exact HF."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0) : Rnd_N_pt F (- - x) (- - f).","conclusion":"Rnd_N_pt F (- - x) (- - f)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0)","proofString":"now rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0) : f <= 0.","conclusion":"f <= 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0)","proofString":"apply Rnd_N_pt_le_0 with (3 := Hxf).\nexact HF0.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0)","proofString":"exact HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0) : x <= 0.","conclusion":"x <= 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x < 0)","proofString":"now apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0) : Rnd_N_pt F x (Rabs f).","conclusion":"Rnd_N_pt F x (Rabs f)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0)","proofString":"rewrite Rabs_pos_eq.\nexact Hxf.\napply Rnd_N_pt_ge_0 with (3 := Hxf).\nexact HF0.\nnow apply Rge_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0)","proofString":"exact Hxf."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0) : 0 <= f.","conclusion":"0 <= f","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0)","proofString":"apply Rnd_N_pt_ge_0 with (3 := Hxf).\nexact HF0.\nnow apply Rge_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0)","proofString":"exact HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0) : 0 <= x.","conclusion":"0 <= x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (HF : forall x0 : R, F x0 -> F (- x0)) (x f : R) (Hxf : Rnd_N_pt F x f) (Hx : x >= 0)","proofString":"now apply Rge_le."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x)","proofString":"split.\nexact Hf.\nintros g Hg.\ndestruct (Rnd_DN_UP_pt_split F x d u Hxd Hxu g Hg) as [Hgd|Hgu].\napply Rle_trans with (1 := Hd).\nrewrite Rabs_left1.\nrewrite Ropp_minus_distr.\napply Rplus_le_compat_l.\nnow apply Ropp_le_contravar.\napply Rle_minus.\napply Rle_trans with (1 := Hgd).\napply Hxd.\napply Rle_trans with (1 := Hu).\nrewrite Rabs_pos_eq.\nnow apply Rplus_le_compat_r.\napply Rle_0_minus.\napply Rle_trans with (2 := Hgu).\napply Hxu."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x)","proofString":"exact Hf."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) : forall g : R, F g -> Rabs (f - x) <= Rabs (g - x).","conclusion":"forall g : R, F g -> Rabs (f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x)","proofString":"intros g Hg.\ndestruct (Rnd_DN_UP_pt_split F x d u Hxd Hxu g Hg) as [Hgd|Hgu].\napply Rle_trans with (1 := Hd).\nrewrite Rabs_left1.\nrewrite Ropp_minus_distr.\napply Rplus_le_compat_l.\nnow apply Ropp_le_contravar.\napply Rle_minus.\napply Rle_trans with (1 := Hgd).\napply Hxd.\napply Rle_trans with (1 := Hu).\nrewrite Rabs_pos_eq.\nnow apply Rplus_le_compat_r.\napply Rle_0_minus.\napply Rle_trans with (2 := Hgu).\napply Hxu."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) : Rabs (f - x) <= Rabs (g - x).","conclusion":"Rabs (f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g)","proofString":"destruct (Rnd_DN_UP_pt_split F x d u Hxd Hxu g Hg) as [Hgd|Hgu].\napply Rle_trans with (1 := Hd).\nrewrite Rabs_left1.\nrewrite Ropp_minus_distr.\napply Rplus_le_compat_l.\nnow apply Ropp_le_contravar.\napply Rle_minus.\napply Rle_trans with (1 := Hgd).\napply Hxd.\napply Rle_trans with (1 := Hu).\nrewrite Rabs_pos_eq.\nnow apply Rplus_le_compat_r.\napply Rle_0_minus.\napply Rle_trans with (2 := Hgu).\napply Hxu."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : Rabs (f - x) <= Rabs (g - x).","conclusion":"Rabs (f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"apply Rle_trans with (1 := Hd).\nrewrite Rabs_left1.\nrewrite Ropp_minus_distr.\napply Rplus_le_compat_l.\nnow apply Ropp_le_contravar.\napply Rle_minus.\napply Rle_trans with (1 := Hgd).\napply Hxd."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : x - d <= Rabs (g - x).","conclusion":"x - d <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"rewrite Rabs_left1.\nrewrite Ropp_minus_distr.\napply Rplus_le_compat_l.\nnow apply Ropp_le_contravar.\napply Rle_minus.\napply Rle_trans with (1 := Hgd).\napply Hxd."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : x - d <= - (g - x).","conclusion":"x - d <= - (g - x)","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"rewrite Ropp_minus_distr.\napply Rplus_le_compat_l.\nnow apply Ropp_le_contravar."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : x - d <= x - g.","conclusion":"x - d <= x - g","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"apply Rplus_le_compat_l.\nnow apply Ropp_le_contravar."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : - d <= - g.","conclusion":"- d <= - g","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"now apply Ropp_le_contravar."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : g - x <= 0.","conclusion":"g - x <= 0","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"apply Rle_minus.\napply Rle_trans with (1 := Hgd).\napply Hxd."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : g <= x.","conclusion":"g <= x","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"apply Rle_trans with (1 := Hgd).\napply Hxd."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgd : g <= d)","proofString":"apply Hxd."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g) : Rabs (f - x) <= Rabs (g - x).","conclusion":"Rabs (f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g)","proofString":"apply Rle_trans with (1 := Hu).\nrewrite Rabs_pos_eq.\nnow apply Rplus_le_compat_r.\napply Rle_0_minus.\napply Rle_trans with (2 := Hgu).\napply Hxu."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g) : u - x <= Rabs (g - x).","conclusion":"u - x <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g)","proofString":"rewrite Rabs_pos_eq.\nnow apply Rplus_le_compat_r.\napply Rle_0_minus.\napply Rle_trans with (2 := Hgu).\napply Hxu."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g) : u - x <= g - x.","conclusion":"u - x <= g - x","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g)","proofString":"now apply Rplus_le_compat_r."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g) : 0 <= g - x.","conclusion":"0 <= g - x","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g)","proofString":"apply Rle_0_minus.\napply Rle_trans with (2 := Hgu).\napply Hxu."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g) : x <= g.","conclusion":"x <= g","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g)","proofString":"apply Rle_trans with (2 := Hgu).\napply Hxu."},{"statement":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (x d u f : R) (Hf : F f) (Hxd : Rnd_DN_pt F x d) (Hxu : Rnd_UP_pt F x u) (Hd : Rabs (f - x) <= x - d) (Hu : Rabs (f - x) <= u - x) (g : R) (Hg : F g) (Hgu : u <= g)","proofString":"apply Hxu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) : Rnd_N_pt F x d.","conclusion":"Rnd_N_pt F x d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x)","proofString":"assert (Hdx: (Rabs (d - x) = x - d)%R).\nrewrite Rabs_minus_sym.\napply Rabs_pos_eq.\napply Rle_0_minus.\napply Hd.\napply Rnd_N_pt_DN_UP with (2 := Hd) (3 := Hu).\napply Hd.\nrewrite Hdx.\napply Rle_refl.\nnow rewrite Hdx."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) : Rabs (d - x) = x - d.","conclusion":"Rabs (d - x) = x - d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x)","proofString":"rewrite Rabs_minus_sym.\napply Rabs_pos_eq.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) : Rabs (x - d) = x - d.","conclusion":"Rabs (x - d) = x - d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x)","proofString":"apply Rabs_pos_eq.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) : 0 <= x - d.","conclusion":"0 <= x - d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x)","proofString":"apply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d) : Rnd_N_pt F x d.","conclusion":"Rnd_N_pt F x d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d)","proofString":"apply Rnd_N_pt_DN_UP with (2 := Hd) (3 := Hu).\napply Hd.\nrewrite Hdx.\napply Rle_refl.\nnow rewrite Hdx."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d) : Rabs (d - x) <= x - d.","conclusion":"Rabs (d - x) <= x - d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d)","proofString":"rewrite Hdx.\napply Rle_refl."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d) : x - d <= x - d.","conclusion":"x - d <= x - d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d) : Rabs (d - x) <= u - x.","conclusion":"Rabs (d - x) <= u - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x - d <= u - x) (Hdx : Rabs (d - x) = x - d)","proofString":"now rewrite Hdx."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) : Rnd_N_pt F x u.","conclusion":"Rnd_N_pt F x u","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d)","proofString":"assert (Hux: (Rabs (u - x) = u - x)%R).\napply Rabs_pos_eq.\napply Rle_0_minus.\napply Hu.\napply Rnd_N_pt_DN_UP with (2 := Hd) (3 := Hu).\napply Hu.\nnow rewrite Hux.\nrewrite Hux.\napply Rle_refl."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) : Rabs (u - x) = u - x.","conclusion":"Rabs (u - x) = u - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d)","proofString":"apply Rabs_pos_eq.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) : 0 <= u - x.","conclusion":"0 <= u - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d)","proofString":"apply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x) : Rnd_N_pt F x u.","conclusion":"Rnd_N_pt F x u","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x)","proofString":"apply Rnd_N_pt_DN_UP with (2 := Hd) (3 := Hu).\napply Hu.\nnow rewrite Hux.\nrewrite Hux.\napply Rle_refl."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x) : F u.","conclusion":"F u","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x) : Rabs (u - x) <= x - d.","conclusion":"Rabs (u - x) <= x - d","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x)","proofString":"now rewrite Hux."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x) : Rabs (u - x) <= u - x.","conclusion":"Rabs (u - x) <= u - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x)","proofString":"rewrite Hux.\napply Rle_refl."},{"statement":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x) : u - x <= u - x.","conclusion":"u - x <= u - x","hypotheses":"(F : R -> Prop) (x d u : R) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : u - x <= x - d) (Hux : Rabs (u - x) = u - x)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f1)) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2)) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f1)) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2))","proofString":"destruct H1b as [H1b|H1b].\ndestruct H2b as [H2b|H2b].\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1a) as [H1c|H1c] ;  destruct (Rnd_N_pt_DN_or_UP _ _ _ H2a) as [H2c|H2c].\neapply Rnd_DN_pt_unique ; eassumption.\nnow apply (HP x f1 f2).\napply sym_eq.\nnow apply (HP x f2 f1 H2c H2a H1c H1a).\neapply Rnd_UP_pt_unique ; eassumption.\nnow apply H2b.\napply sym_eq.\nnow apply H1b."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2)) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2))","proofString":"destruct H2b as [H2b|H2b].\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1a) as [H1c|H1c] ;  destruct (Rnd_N_pt_DN_or_UP _ _ _ H2a) as [H2c|H2c].\neapply Rnd_DN_pt_unique ; eassumption.\nnow apply (HP x f1 f2).\napply sym_eq.\nnow apply (HP x f2 f1 H2c H2a H1c H1a).\neapply Rnd_UP_pt_unique ; eassumption.\nnow apply H2b."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2)","proofString":"destruct (Rnd_N_pt_DN_or_UP _ _ _ H1a) as [H1c|H1c] ;  destruct (Rnd_N_pt_DN_or_UP _ _ _ H2a) as [H2c|H2c].\neapply Rnd_DN_pt_unique ; eassumption.\nnow apply (HP x f1 f2).\napply sym_eq.\nnow apply (HP x f2 f1 H2c H2a H1c H1a).\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_DN_pt F x f1) (H2c : Rnd_DN_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_DN_pt F x f1) (H2c : Rnd_DN_pt F x f2)","proofString":"eapply Rnd_DN_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_DN_pt F x f1) (H2c : Rnd_UP_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_DN_pt F x f1) (H2c : Rnd_UP_pt F x f2)","proofString":"now apply (HP x f1 f2)."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_UP_pt F x f1) (H2c : Rnd_DN_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_UP_pt F x f1) (H2c : Rnd_DN_pt F x f2)","proofString":"apply sym_eq.\nnow apply (HP x f2 f1 H2c H2a H1c H1a)."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_UP_pt F x f1) (H2c : Rnd_DN_pt F x f2) : f2 = f1.","conclusion":"f2 = f1","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_UP_pt F x f1) (H2c : Rnd_DN_pt F x f2)","proofString":"now apply (HP x f2 f1 H2c H2a H1c H1a)."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_UP_pt F x f1) (H2c : Rnd_UP_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2) (H1c : Rnd_UP_pt F x f1) (H2c : Rnd_UP_pt F x f2)","proofString":"eapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : P x f1) (H2a : Rnd_N_pt F x f2) (H2b : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2)","proofString":"now apply H2b."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2)) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2))","proofString":"apply sym_eq.\nnow apply H1b."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2)) : f2 = f1.","conclusion":"f2 = f1","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x f1 f2 : R) (H1a : Rnd_N_pt F x f1) (H1b : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f1) (H2a : Rnd_N_pt F x f2) (H2b : P x f2 \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f2))","proofString":"now apply H1b."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F y g) (Hy : P y g \\/ (forall f2 : R, Rnd_N_pt F y f2 -> f2 = g)) (Hxy : x < y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F y g) (Hy : P y g \\/ (forall f2 : R, Rnd_N_pt F y f2 -> f2 = g)) (Hxy : x < y)","proofString":"now apply Rnd_N_pt_monotone with F x y."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F y g) (Hy : P y g \\/ (forall f2 : R, Rnd_N_pt F y f2 -> f2 = g)) (Hxy : x = y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F y g) (Hy : P y g \\/ (forall f2 : R, Rnd_N_pt F y f2 -> f2 = g)) (Hxy : x = y)","proofString":"apply Req_le.\nrewrite <- Hxy in Hg, Hy.\neapply Rnd_NG_pt_unique ; try split ; eassumption."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F y g) (Hy : P y g \\/ (forall f2 : R, Rnd_N_pt F y f2 -> f2 = g)) (Hxy : x = y) : f = g.","conclusion":"f = g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F y g) (Hy : P y g \\/ (forall f2 : R, Rnd_N_pt F y f2 -> f2 = g)) (Hxy : x = y)","proofString":"rewrite <- Hxy in Hg, Hy.\neapply Rnd_NG_pt_unique ; try split ; eassumption."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F x g) (Hy : P x g \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = g)) (Hxy : x = y) : f = g.","conclusion":"f = g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (x y f g : R) (Hf : Rnd_N_pt F x f) (Hx : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) (Hg : Rnd_N_pt F x g) (Hy : P x g \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = g)) (Hxy : x = y)","proofString":"eapply Rnd_NG_pt_unique ; try split ; eassumption."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x) : Rnd_NG_pt F P x x.","conclusion":"Rnd_NG_pt F P x x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x)","proofString":"split.\nnow apply Rnd_N_pt_refl.\nright.\nintros f2 Hf2.\nnow apply Rnd_N_pt_idempotent with F."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x) : Rnd_N_pt F x x.","conclusion":"Rnd_N_pt F x x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x)","proofString":"now apply Rnd_N_pt_refl."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x) : P x x \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = x).","conclusion":"P x x \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x)","proofString":"right.\nintros f2 Hf2.\nnow apply Rnd_N_pt_idempotent with F."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x) : forall f2 : R, Rnd_N_pt F x f2 -> f2 = x.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> f2 = x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x)","proofString":"intros f2 Hf2.\nnow apply Rnd_N_pt_idempotent with F."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x) (f2 : R) (Hf2 : Rnd_N_pt F x f2) : f2 = x.","conclusion":"f2 = x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (x : R) (Hx : F x) (f2 : R) (Hf2 : Rnd_N_pt F x f2)","proofString":"now apply Rnd_N_pt_idempotent with F."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f) \\/ (forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f)) : Rnd_NG_pt F P x f.","conclusion":"Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f) \\/ (forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f))","proofString":"split.\nnow apply Rnd_N_pt_opp_inv.\ndestruct H2 as [H2|H2].\nleft.\nrewrite <- (Ropp_involutive x), <- (Ropp_involutive f).\nnow apply HP.\nright.\nintros f2 Hxf2.\nrewrite <- (Ropp_involutive f).\nrewrite <- H2 with (-f2).\napply sym_eq.\napply Ropp_involutive.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f) \\/ (forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f)) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f) \\/ (forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f))","proofString":"now apply Rnd_N_pt_opp_inv."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f) \\/ (forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f)) : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f) \\/ (forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f))","proofString":"destruct H2 as [H2|H2].\nleft.\nrewrite <- (Ropp_involutive x), <- (Ropp_involutive f).\nnow apply HP.\nright.\nintros f2 Hxf2.\nrewrite <- (Ropp_involutive f).\nrewrite <- H2 with (-f2).\napply sym_eq.\napply Ropp_involutive.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f)) : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f))","proofString":"left.\nrewrite <- (Ropp_involutive x), <- (Ropp_involutive f).\nnow apply HP."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f)) : P x f.","conclusion":"P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f))","proofString":"rewrite <- (Ropp_involutive x), <- (Ropp_involutive f).\nnow apply HP."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f)) : P (- - x) (- - f).","conclusion":"P (- - x) (- - f)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : P (- x) (- f))","proofString":"now apply HP."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f) : P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"P x f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f)","proofString":"right.\nintros f2 Hxf2.\nrewrite <- (Ropp_involutive f).\nrewrite <- H2 with (-f2).\napply sym_eq.\napply Ropp_involutive.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f) : forall f2 : R, Rnd_N_pt F x f2 -> f2 = f.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> f2 = f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f2 : R, Rnd_N_pt F (- x) f2 -> f2 = - f)","proofString":"intros f2 Hxf2.\nrewrite <- (Ropp_involutive f).\nrewrite <- H2 with (-f2).\napply sym_eq.\napply Ropp_involutive.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"rewrite <- (Ropp_involutive f).\nrewrite <- H2 with (-f2).\napply sym_eq.\napply Ropp_involutive.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : f2 = - - f.","conclusion":"f2 = - - f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"rewrite <- H2 with (-f2).\napply sym_eq.\napply Ropp_involutive.\napply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : f2 = - - f2.","conclusion":"f2 = - - f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"apply sym_eq.\napply Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : - - f2 = f2.","conclusion":"- - f2 = f2","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"apply Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rnd_N_pt F (- x) (- f2).","conclusion":"Rnd_N_pt F (- x) (- f2)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"apply Rnd_N_pt_opp_inv.\nexact HF.\nnow rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : forall x0 : R, F x0 -> F (- x0).","conclusion":"forall x0 : R, F x0 -> F (- x0)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"exact HF."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rnd_N_pt F (- - x) (- - f2).","conclusion":"Rnd_N_pt F (- - x) (- - f2)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HF : forall x0 : R, F x0 -> F (- x0)) (HP : forall x0 f0 : R, P x0 f0 -> P (- x0) (- f0)) (x f : R) (H1 : Rnd_N_pt F (- x) (- f)) (H2 : forall f0 : R, Rnd_N_pt F (- x) f0 -> f0 = - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"now rewrite 2!Ropp_involutive."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (rnd1 rnd2 : R -> R) (H1 : Rnd_NG F P rnd1) (H2 : Rnd_NG F P rnd2) (x : R) : rnd1 x = rnd2 x.","conclusion":"rnd1 x = rnd2 x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (HP : Rnd_NG_pt_unique_prop F P) (rnd1 rnd2 : R -> R) (H1 : Rnd_NG F P rnd1) (H2 : Rnd_NG F P rnd2) (x : R)","proofString":"now apply Rnd_NG_pt_unique with F P x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) : Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R)","proofString":"destruct (Rle_or_lt 0 x) as [Hx|Hx].\nsplit ; intros (H1, H2).\nassert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4.\nleft.\nrewrite Rabs_pos_eq with (1 := Hf).\nrewrite Rabs_pos_eq with (1 := Hx).\napply H3.\nsplit.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_ge_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2.\nrewrite (H2 _ Hxf2).\napply Rle_refl.\nassert (Hx' := Rlt_le _ _ Hx).\nclear Hx.\nrename Hx' into Hx.\nsplit ; intros (H1, H2).\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption.\nsplit.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) : Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x)","proofString":"split ; intros (H1, H2).\nassert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4.\nleft.\nrewrite Rabs_pos_eq with (1 := Hf).\nrewrite Rabs_pos_eq with (1 := Hx).\napply H3.\nsplit.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_ge_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) : Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f)","proofString":"assert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4.\nleft.\nrewrite Rabs_pos_eq with (1 := Hf).\nrewrite Rabs_pos_eq with (1 := Hx).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) : Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f)","proofString":"split.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4.\nleft.\nrewrite Rabs_pos_eq with (1 := Hf).\nrewrite Rabs_pos_eq with (1 := Hx).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f)","proofString":"exact H1."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f)","proofString":"destruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4.\nleft.\nrewrite Rabs_pos_eq with (1 := Hf).\nrewrite Rabs_pos_eq with (1 := Hx).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f)","proofString":"right.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) : forall f2 : R, Rnd_N_pt F x f2 -> f2 = f.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f)","proofString":"intros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> Rabs f0 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> Rabs f0 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"specialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2)","proofString":"destruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\neapply Rnd_DN_pt_unique ; eassumption.\napply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"eapply Rnd_DN_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"apply Rle_antisym.\nrewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x.\napply Rle_trans with x.\napply H3.\napply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"rewrite Rabs_pos_eq with (1 := Hf) in H2.\nrewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"rewrite Rabs_pos_eq in H2.\nexact H2.\nnow apply Rnd_N_pt_ge_0 with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : f2 <= f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : f2 <= f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"exact H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : 0 <= f2.","conclusion":"0 <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"now apply Rnd_N_pt_ge_0 with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"apply Rle_trans with x.\napply H3.\napply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"apply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : x <= f2.","conclusion":"x <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_DN_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"apply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f) : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f)","proofString":"left.\nrewrite Rabs_pos_eq with (1 := Hf).\nrewrite Rabs_pos_eq with (1 := Hx).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f) : Rabs x <= Rabs f.","conclusion":"Rabs x <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f)","proofString":"rewrite Rabs_pos_eq with (1 := Hf).\nrewrite Rabs_pos_eq with (1 := Hx).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f) : Rabs x <= f.","conclusion":"Rabs x <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f)","proofString":"rewrite Rabs_pos_eq with (1 := Hx).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f) : x <= f.","conclusion":"x <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : 0 <= f) (H3 : Rnd_UP_pt F x f)","proofString":"apply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) : Rnd_NA_pt F x f.","conclusion":"Rnd_NA_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f))","proofString":"split.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_ge_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f))","proofString":"exact H1."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f))","proofString":"intros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_ge_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f)) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f)) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"destruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_ge_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"assert (Hf := Rnd_N_pt_ge_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_ge_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f)","proofString":"assert (Hf2 := Rnd_N_pt_ge_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2)","proofString":"rewrite 2!Rabs_pos_eq ; trivial.\nrewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2)","proofString":"rewrite 2!Rabs_pos_eq in H2 ; trivial.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2)","proofString":"destruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply Rle_trans with (2 := H2).\napply H3.\napply H3.\napply H1.\napply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_DN_pt F x f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_DN_pt F x f2)","proofString":"apply Rle_trans with (2 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_DN_pt F x f2) : f2 <= x.","conclusion":"f2 <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_DN_pt F x f2)","proofString":"apply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_UP_pt F x f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_UP_pt F x f2)","proofString":"apply H3.\napply H1.\napply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_UP_pt F x f2) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_UP_pt F x f2)","proofString":"apply H1."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_UP_pt F x f2) : x <= f.","conclusion":"x <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : x <= f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : 0 <= f) (Hf2 : 0 <= f2) (H3 : Rnd_UP_pt F x f2)","proofString":"apply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"rewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f <= Rabs f.","conclusion":"Rabs f <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : 0 <= x) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0) : Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0)","proofString":"assert (Hx' := Rlt_le _ _ Hx).\nclear Hx.\nrename Hx' into Hx.\nsplit ; intros (H1, H2).\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption.\nsplit.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0) (Hx' : x <= 0) : Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x < 0) (Hx' : x <= 0)","proofString":"clear Hx.\nrename Hx' into Hx.\nsplit ; intros (H1, H2).\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption.\nsplit.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx' : x <= 0) : Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx' : x <= 0)","proofString":"rename Hx' into Hx.\nsplit ; intros (H1, H2).\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption.\nsplit.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) : Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NA_pt F x f <-> Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0)","proofString":"split ; intros (H1, H2).\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption.\nsplit.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) : Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f)","proofString":"assert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nsplit.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) : Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0)","proofString":"split.\nexact H1.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0)","proofString":"exact H1."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0)","proofString":"destruct (Rnd_N_pt_DN_or_UP _ _ _ H1) as [H3|H3].\nleft.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3.\nright.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f) : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f)","proofString":"left.\nrewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f) : Rabs x <= Rabs f.","conclusion":"Rabs x <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f)","proofString":"rewrite Rabs_left1 with (1 := Hf).\nrewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f) : Rabs x <= - f.","conclusion":"Rabs x <= - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f)","proofString":"rewrite Rabs_left1 with (1 := Hx).\napply Ropp_le_contravar.\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f) : - x <= - f.","conclusion":"- x <= - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f)","proofString":"apply Ropp_le_contravar.\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_DN_pt F x f)","proofString":"apply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f).","conclusion":"Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f)","proofString":"right.\nintros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) : forall f2 : R, Rnd_N_pt F x f2 -> f2 = f.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f)","proofString":"intros f2 Hxf2.\nspecialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> Rabs f0 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> Rabs f0 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"specialize (H2 _ Hxf2).\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2)","proofString":"destruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H4|H4].\napply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x.\neapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"apply Rle_antisym.\napply Rle_trans with x.\napply H4.\napply H3.\nrewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f2 <= f.","conclusion":"f2 <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"apply Rle_trans with x.\napply H4.\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f2 <= x.","conclusion":"f2 <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"apply H4."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : x <= f.","conclusion":"x <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"apply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"rewrite Rabs_left1 with (1 := Hf) in H2.\nrewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= - f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= - f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"rewrite Rabs_left1 in H2.\nnow apply Ropp_le_cancel.\nnow apply Rnd_N_pt_le_0 with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : - f2 <= - f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : - f2 <= - f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"now apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= - f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2) : f2 <= 0.","conclusion":"f2 <= 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= - f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_DN_pt F x f2)","proofString":"now apply Rnd_N_pt_le_0 with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2) : f2 = f.","conclusion":"f2 = f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (f2 : R) (H2 : Rabs f2 <= Rabs f) (Hf : f <= 0) (H3 : Rnd_UP_pt F x f) (Hxf2 : Rnd_N_pt F x f2) (H4 : Rnd_UP_pt F x f2)","proofString":"eapply Rnd_UP_pt_unique ; eassumption."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) : Rnd_NA_pt F x f.","conclusion":"Rnd_NA_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f))","proofString":"split.\nexact H1.\nintros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f))","proofString":"exact H1."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f)) : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = f))","proofString":"intros f2 Hxf2.\ndestruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f)) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f \\/ (forall f0 : R, Rnd_N_pt F x f0 -> f0 = f)) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"destruct H2 as [H2|H2].\nassert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3.\nrewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"assert (Hf := Rnd_N_pt_le_0 F HF x f Hx H1).\nassert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0)","proofString":"assert (Hf2 := Rnd_N_pt_le_0 F HF x f2 Hx Hxf2).\nrewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0)","proofString":"rewrite 2!Rabs_left1 ; trivial.\nrewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) : - f2 <= - f.","conclusion":"- f2 <= - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : Rabs x <= Rabs f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0)","proofString":"rewrite 2!Rabs_left1 in H2 ; trivial.\napply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : - x <= - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) : - f2 <= - f.","conclusion":"- f2 <= - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : - x <= - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0)","proofString":"apply Ropp_le_contravar.\napply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : - x <= - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : - x <= - f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0)","proofString":"apply Ropp_le_cancel in H2.\ndestruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0)","proofString":"destruct (Rnd_N_pt_DN_or_UP _ _ _ Hxf2) as [H3|H3].\napply H3.\napply H1.\napply H2.\napply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_DN_pt F x f2) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_DN_pt F x f2)","proofString":"apply H3.\napply H1.\napply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_DN_pt F x f2) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_DN_pt F x f2)","proofString":"apply H1."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_DN_pt F x f2) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_DN_pt F x f2)","proofString":"apply H2."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_UP_pt F x f2) : f <= f2.","conclusion":"f <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_UP_pt F x f2)","proofString":"apply Rle_trans with (1 := H2).\napply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_UP_pt F x f2) : x <= f2.","conclusion":"x <= f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : f <= x) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) (Hf : f <= 0) (Hf2 : f2 <= 0) (H3 : Rnd_UP_pt F x f2)","proofString":"apply H3."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f2 <= Rabs f.","conclusion":"Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"rewrite (H2 _ Hxf2).\napply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2) : Rabs f <= Rabs f.","conclusion":"Rabs f <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Hx : x <= 0) (H1 : Rnd_N_pt F x f) (H2 : forall f0 : R, Rnd_N_pt F x f0 -> f0 = f) (f2 : R) (Hxf2 : Rnd_N_pt F x f2)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) : d = u.","conclusion":"d = u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u)","proofString":"apply Rle_antisym.\napply Rle_trans with x.\napply Hxd1.\napply Hxu1.\ndestruct (Rle_or_lt 0 x) as [Hx|Hx].\napply Hxu1.\napply Hxd1.\nrewrite Rabs_pos_eq with (1 := Hx) in Hd.\nrewrite Rabs_pos_eq in Hd.\nexact Hd.\nnow apply Hxd1.\napply Hxd1.\napply Hxu1.\nrewrite Rabs_left with (1 := Hx) in Hu.\nrewrite Rabs_left1 in Hu.\nnow apply Ropp_le_cancel.\napply Hxu1.\napply HF.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) : d <= u.","conclusion":"d <= u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u)","proofString":"apply Rle_trans with x.\napply Hxd1.\napply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u)","proofString":"apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u)","proofString":"apply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) : u <= d.","conclusion":"u <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u)","proofString":"destruct (Rle_or_lt 0 x) as [Hx|Hx].\napply Hxu1.\napply Hxd1.\nrewrite Rabs_pos_eq with (1 := Hx) in Hd.\nrewrite Rabs_pos_eq in Hd.\nexact Hd.\nnow apply Hxd1.\napply Hxd1.\napply Hxu1.\nrewrite Rabs_left with (1 := Hx) in Hu.\nrewrite Rabs_left1 in Hu.\nnow apply Ropp_le_cancel.\napply Hxu1.\napply HF.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x) : u <= d.","conclusion":"u <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x)","proofString":"apply Hxu1.\napply Hxd1.\nrewrite Rabs_pos_eq with (1 := Hx) in Hd.\nrewrite Rabs_pos_eq in Hd.\nexact Hd.\nnow apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x)","proofString":"apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x) : x <= d.","conclusion":"x <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq with (1 := Hx) in Hd.\nrewrite Rabs_pos_eq in Hd.\nexact Hd.\nnow apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x) : x <= d.","conclusion":"x <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq in Hd.\nexact Hd.\nnow apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : x <= d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x) : x <= d.","conclusion":"x <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : x <= d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x)","proofString":"exact Hd."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x) : 0 <= d.","conclusion":"0 <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : 0 <= x)","proofString":"now apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : x < 0) : u <= d.","conclusion":"u <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : x < 0)","proofString":"apply Hxd1.\napply Hxu1.\nrewrite Rabs_left with (1 := Hx) in Hu.\nrewrite Rabs_left1 in Hu.\nnow apply Ropp_le_cancel.\napply Hxu1.\napply HF.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : x < 0) : F u.","conclusion":"F u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : x < 0)","proofString":"apply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : x < 0) : u <= x.","conclusion":"u <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : Rabs x <= Rabs u) (Hx : x < 0)","proofString":"rewrite Rabs_left with (1 := Hx) in Hu.\nrewrite Rabs_left1 in Hu.\nnow apply Ropp_le_cancel.\napply Hxu1.\napply HF.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0) : u <= x.","conclusion":"u <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0)","proofString":"rewrite Rabs_left1 in Hu.\nnow apply Ropp_le_cancel.\napply Hxu1.\napply HF.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= - u) (Hx : x < 0) : u <= x.","conclusion":"u <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= - u) (Hx : x < 0)","proofString":"now apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0) : u <= 0.","conclusion":"u <= 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0)","proofString":"apply Hxu1.\napply HF.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0)","proofString":"apply HF."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0) : x <= 0.","conclusion":"x <= 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs x <= Rabs d) (Hu : - x <= Rabs u) (Hx : x < 0)","proofString":"now apply Rlt_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_NA_pt F x f1) (H2 : Rnd_NA_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_NA_pt F x f1) (H2 : Rnd_NA_pt F x f2)","proofString":"apply (Rnd_NG_pt_unique F _ (Rnd_NA_pt_unique_prop F HF) x).\nnow apply -> Rnd_NA_NG_pt.\nnow apply -> Rnd_NA_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_NA_pt F x f1) (H2 : Rnd_NA_pt F x f2) : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f1.","conclusion":"Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f1","hypotheses":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_NA_pt F x f1) (H2 : Rnd_NA_pt F x f2)","proofString":"now apply -> Rnd_NA_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_NA_pt F x f1) (H2 : Rnd_NA_pt F x f2) : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f2.","conclusion":"Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_NA_pt F x f1) (H2 : Rnd_NA_pt F x f2)","proofString":"now apply -> Rnd_NA_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) : Rnd_NA_pt F x f.","conclusion":"Rnd_NA_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f)","proofString":"split.\napply Rxf.\nintros g Rxg.\ndestruct (Rabs_eq_Rabs (f - x) (g - x)) as [H|H].\napply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf.\nreplace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H).\nassert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f)","proofString":"apply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f)","proofString":"intros g Rxg.\ndestruct (Rabs_eq_Rabs (f - x) (g - x)) as [H|H].\napply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf.\nreplace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H).\nassert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs g <= Rabs f.","conclusion":"Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"destruct (Rabs_eq_Rabs (f - x) (g - x)) as [H|H].\napply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf.\nreplace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H).\nassert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs (f - x) = Rabs (g - x).","conclusion":"Rabs (f - x) = Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs (f - x) <= Rabs (g - x).","conclusion":"Rabs (f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxf.\napply Rxg."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) : F g.","conclusion":"F g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxg."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs (g - x) <= Rabs (f - x).","conclusion":"Rabs (g - x) <= Rabs (f - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxg.\napply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x) : Rabs g <= Rabs f.","conclusion":"Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x)","proofString":"replace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H)."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x) : Rabs f <= Rabs f.","conclusion":"Rabs f <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x) : f = g.","conclusion":"f = g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x)","proofString":"apply Rplus_eq_reg_r with (1 := H)."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : Rabs g <= Rabs f.","conclusion":"Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"assert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : g = 2 * x - f.","conclusion":"g = 2 * x - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"replace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : g = x - (f - x).","conclusion":"g = x - (f - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"rewrite H.\nring."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : g = x - - (g - x).","conclusion":"g = x - - (g - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"ring."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) : Rabs g <= Rabs f.","conclusion":"Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f)","proofString":"destruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : Rabs g <= Rabs f.","conclusion":"Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"revert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : Rabs x <= Rabs f -> Rabs g <= Rabs f.","conclusion":"Rabs x <= Rabs f -> Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : x <= Rabs f -> Rabs g <= Rabs f.","conclusion":"x <= Rabs f -> Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"rewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : x <= f -> g <= f.","conclusion":"x <= f -> g <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"intros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f) : g <= f.","conclusion":"g <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f)","proofString":"rewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f) : 2 * x - f <= f.","conclusion":"2 * x - f <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f)","proofString":"apply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f) : 2 * x - f + f <= f + f.","conclusion":"2 * x - f + f <= f + f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f)","proofString":"ring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f) : 2 * x <= 2 * f.","conclusion":"2 * x <= 2 * f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f)","proofString":"apply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f) : 0 <= 2.","conclusion":"0 <= 2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : x <= f)","proofString":"now apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0) : Rabs g <= Rabs f.","conclusion":"Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs x <= Rabs f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0)","proofString":"revert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0) : Rabs x <= Rabs f -> Rabs g <= Rabs f.","conclusion":"Rabs x <= Rabs f -> Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0)","proofString":"apply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) : Rabs x <= Rabs f -> Rabs g <= Rabs f.","conclusion":"Rabs x <= Rabs f -> Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0)","proofString":"rewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) : - x <= Rabs f -> Rabs g <= Rabs f.","conclusion":"- x <= Rabs f -> Rabs g <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0)","proofString":"rewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) : - x <= - f -> - g <= - f.","conclusion":"- x <= - f -> - g <= - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0)","proofString":"intros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f) : - g <= - f.","conclusion":"- g <= - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f)","proofString":"rewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f) : - (2 * x - f) <= - f.","conclusion":"- (2 * x - f) <= - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f)","proofString":"apply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f) : f <= 2 * x - f.","conclusion":"f <= 2 * x - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f)","proofString":"apply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f) : f + f <= 2 * x - f + f.","conclusion":"f + f <= 2 * x - f + f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f)","proofString":"ring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f) : 2 * f <= 2 * x.","conclusion":"2 * f <= 2 * x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f)","proofString":"apply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f) : 0 <= 2.","conclusion":"0 <= 2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f)","proofString":"now apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f) : f <= x.","conclusion":"f <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - x <= - f)","proofString":"now apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (rnd1 rnd2 : R -> R) (H1 : Rnd_NA F rnd1) (H2 : Rnd_NA F rnd2) (x : R) : rnd1 x = rnd2 x.","conclusion":"rnd1 x = rnd2 x","hypotheses":"(F : R -> Prop) (HF : F 0) (rnd1 rnd2 : R -> R) (H1 : Rnd_NA F rnd1) (H2 : Rnd_NA F rnd2) (x : R)","proofString":"now apply Rnd_NA_pt_unique with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y)","proofString":"apply (Rnd_NG_pt_monotone F _ (Rnd_NA_pt_unique_prop F HF) x y).\nnow apply -> Rnd_NA_NG_pt.\nnow apply -> Rnd_NA_NG_pt.\nexact Hxy."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y) : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f.","conclusion":"Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y)","proofString":"now apply -> Rnd_NA_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y) : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) y g.","conclusion":"Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) y g","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y)","proofString":"now apply -> Rnd_NA_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y) : x <= y.","conclusion":"x <= y","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_NA_pt F x f) (Hyg : Rnd_NA_pt F y g) (Hxy : x <= y)","proofString":"exact Hxy."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : Rnd_NA_pt F x x.","conclusion":"Rnd_NA_pt F x x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"split.\nnow apply Rnd_N_pt_refl.\nintros f Hxf.\napply Req_le.\napply f_equal.\nnow apply Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : Rnd_N_pt F x x.","conclusion":"Rnd_N_pt F x x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"now apply Rnd_N_pt_refl."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs x.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> Rabs f2 <= Rabs x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"intros f Hxf.\napply Req_le.\napply f_equal.\nnow apply Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f) : Rabs f <= Rabs x.","conclusion":"Rabs f <= Rabs x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f)","proofString":"apply Req_le.\napply f_equal.\nnow apply Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f) : Rabs f = Rabs x.","conclusion":"Rabs f = Rabs x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f)","proofString":"apply f_equal.\nnow apply Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f) : f = x.","conclusion":"f = x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f)","proofString":"now apply Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x f : R) (Hf : Rnd_N_pt F x f) (Hx : F x) : f = x.","conclusion":"f = x","hypotheses":"(F : R -> Prop) (x f : R) (Hf : Rnd_N_pt F x f) (Hx : F x)","proofString":"now apply Rnd_N_pt_idempotent with F."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) : d = u.","conclusion":"d = u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x)","proofString":"apply Rle_antisym.\napply Rle_trans with x.\napply Hxd1.\napply Hxu1.\ndestruct (Rle_or_lt 0 x) as [Hx|Hx].\napply Hxd1.\napply Hxu1.\nrewrite Rabs_pos_eq with (1 := Hx) in Hu.\nrewrite Rabs_pos_eq in Hu.\nexact Hu.\napply Rle_trans with (1:=Hx).\napply Hxu1.\napply Hxu1.\napply Hxd1.\nrewrite Rabs_left with (1 := Hx) in Hd.\nrewrite Rabs_left1 in Hd.\nnow apply Ropp_le_cancel.\napply Rlt_le, Rle_lt_trans with (2:=Hx).\napply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) : d <= u.","conclusion":"d <= u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x)","proofString":"apply Rle_trans with x.\napply Hxd1.\napply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x)","proofString":"apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x)","proofString":"apply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) : u <= d.","conclusion":"u <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x)","proofString":"destruct (Rle_or_lt 0 x) as [Hx|Hx].\napply Hxd1.\napply Hxu1.\nrewrite Rabs_pos_eq with (1 := Hx) in Hu.\nrewrite Rabs_pos_eq in Hu.\nexact Hu.\napply Rle_trans with (1:=Hx).\napply Hxu1.\napply Hxu1.\napply Hxd1.\nrewrite Rabs_left with (1 := Hx) in Hd.\nrewrite Rabs_left1 in Hd.\nnow apply Ropp_le_cancel.\napply Rlt_le, Rle_lt_trans with (2:=Hx).\napply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : 0 <= x) : u <= d.","conclusion":"u <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : 0 <= x)","proofString":"apply Hxd1.\napply Hxu1.\nrewrite Rabs_pos_eq with (1 := Hx) in Hu.\nrewrite Rabs_pos_eq in Hu.\nexact Hu.\napply Rle_trans with (1:=Hx).\napply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : 0 <= x) : F u.","conclusion":"F u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : 0 <= x)","proofString":"apply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : 0 <= x) : u <= x.","conclusion":"u <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq with (1 := Hx) in Hu.\nrewrite Rabs_pos_eq in Hu.\nexact Hu.\napply Rle_trans with (1:=Hx).\napply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= x) (Hx : 0 <= x) : u <= x.","conclusion":"u <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= x) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq in Hu.\nexact Hu.\napply Rle_trans with (1:=Hx).\napply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : u <= x) (Hx : 0 <= x) : u <= x.","conclusion":"u <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : u <= x) (Hx : 0 <= x)","proofString":"exact Hu."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= x) (Hx : 0 <= x) : 0 <= u.","conclusion":"0 <= u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= x) (Hx : 0 <= x)","proofString":"apply Rle_trans with (1:=Hx).\napply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= x) (Hx : 0 <= x) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= x) (Hx : 0 <= x)","proofString":"apply Hxu1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : x < 0) : u <= d.","conclusion":"u <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : x < 0)","proofString":"apply Hxu1.\napply Hxd1.\nrewrite Rabs_left with (1 := Hx) in Hd.\nrewrite Rabs_left1 in Hd.\nnow apply Ropp_le_cancel.\napply Rlt_le, Rle_lt_trans with (2:=Hx).\napply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : x < 0) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : x < 0)","proofString":"apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : x < 0) : x <= d.","conclusion":"x <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= Rabs x) (Hu : Rabs u <= Rabs x) (Hx : x < 0)","proofString":"rewrite Rabs_left with (1 := Hx) in Hd.\nrewrite Rabs_left1 in Hd.\nnow apply Ropp_le_cancel.\napply Rlt_le, Rle_lt_trans with (2:=Hx).\napply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0) : x <= d.","conclusion":"x <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0)","proofString":"rewrite Rabs_left1 in Hd.\nnow apply Ropp_le_cancel.\napply Rlt_le, Rle_lt_trans with (2:=Hx).\napply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : - d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0) : x <= d.","conclusion":"x <= d","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : - d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0)","proofString":"now apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0) : d <= 0.","conclusion":"d <= 0","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0)","proofString":"apply Rlt_le, Rle_lt_trans with (2:=Hx).\napply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (HF : F 0) (x d u : R) (Hxd1 : Rnd_DN_pt F x d) (Hxd2 : Rnd_N_pt F x d) (Hxu1 : Rnd_UP_pt F x u) (Hxu2 : Rnd_N_pt F x u) (Hd : Rabs d <= - x) (Hu : Rabs u <= Rabs x) (Hx : x < 0)","proofString":"apply Hxd1."},{"statement":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_N0_pt F x f1) (H2 : Rnd_N0_pt F x f2) : f1 = f2.","conclusion":"f1 = f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_N0_pt F x f1) (H2 : Rnd_N0_pt F x f2)","proofString":"apply (Rnd_NG_pt_unique F _ (Rnd_N0_pt_unique_prop F HF) x).\nnow apply -> Rnd_N0_NG_pt.\nnow apply -> Rnd_N0_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_N0_pt F x f1) (H2 : Rnd_N0_pt F x f2) : Rnd_NG_pt F (fun x0 f : R => Rabs f <= Rabs x0) x f1.","conclusion":"Rnd_NG_pt F (fun x0 f : R => Rabs f <= Rabs x0) x f1","hypotheses":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_N0_pt F x f1) (H2 : Rnd_N0_pt F x f2)","proofString":"now apply -> Rnd_N0_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_N0_pt F x f1) (H2 : Rnd_N0_pt F x f2) : Rnd_NG_pt F (fun x0 f : R => Rabs f <= Rabs x0) x f2.","conclusion":"Rnd_NG_pt F (fun x0 f : R => Rabs f <= Rabs x0) x f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f1 f2 : R) (H1 : Rnd_N0_pt F x f1) (H2 : Rnd_N0_pt F x f2)","proofString":"now apply -> Rnd_N0_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) : Rnd_N0_pt F x f.","conclusion":"Rnd_N0_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x)","proofString":"split.\napply Rxf.\nintros g Rxg.\ndestruct (Rabs_eq_Rabs (f - x) (g - x)) as [H|H].\napply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf.\nreplace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H).\nassert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) : Rnd_N_pt F x f.","conclusion":"Rnd_N_pt F x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x)","proofString":"apply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) : forall f2 : R, Rnd_N_pt F x f2 -> Rabs f <= Rabs f2.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> Rabs f <= Rabs f2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x)","proofString":"intros g Rxg.\ndestruct (Rabs_eq_Rabs (f - x) (g - x)) as [H|H].\napply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf.\nreplace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H).\nassert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"destruct (Rabs_eq_Rabs (f - x) (g - x)) as [H|H].\napply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf.\nreplace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H).\nassert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs (f - x) = Rabs (g - x).","conclusion":"Rabs (f - x) = Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rle_antisym.\napply Rxf.\napply Rxg.\napply Rxg.\napply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs (f - x) <= Rabs (g - x).","conclusion":"Rabs (f - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxf.\napply Rxg."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) : F g.","conclusion":"F g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxg."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) : Rabs (g - x) <= Rabs (f - x).","conclusion":"Rabs (g - x) <= Rabs (f - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxg.\napply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) : F f.","conclusion":"F f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g)","proofString":"apply Rxf."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x) : Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x)","proofString":"replace g with f.\napply Rle_refl.\napply Rplus_eq_reg_r with (1 := H)."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x) : Rabs f <= Rabs f.","conclusion":"Rabs f <= Rabs f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x)","proofString":"apply Rle_refl."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x) : f = g.","conclusion":"f = g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = g - x)","proofString":"apply Rplus_eq_reg_r with (1 := H)."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"assert (g = 2 * x - f)%R.\nreplace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : g = 2 * x - f.","conclusion":"g = 2 * x - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"replace (2 * x - f)%R with (x - (f - x))%R by ring.\nrewrite H.\nring."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : g = x - (f - x).","conclusion":"g = x - (f - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"rewrite H.\nring."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) : g = x - - (g - x).","conclusion":"g = x - - (g - x)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x))","proofString":"ring."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) : Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f)","proofString":"destruct (Rle_lt_dec 0 x) as [Hx|Hx].\nrevert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le.\nrevert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"revert Hxf.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : Rabs f <= Rabs x -> Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs x -> Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq with (1 := Hx).\nrewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : Rabs f <= x -> Rabs f <= Rabs g.","conclusion":"Rabs f <= x -> Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"rewrite 2!Rabs_pos_eq ; try ( apply (Rnd_N_pt_ge_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) : f <= x -> f <= g.","conclusion":"f <= x -> f <= g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x)","proofString":"intros Hxf.\nrewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x)","proofString":"rewrite H0.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x) : f <= 2 * x - f.","conclusion":"f <= 2 * x - f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x)","proofString":"apply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x) : f + f <= 2 * x - f + f.","conclusion":"f + f <= 2 * x - f + f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x)","proofString":"ring_simplify.\napply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x) : 2 * f <= 2 * x.","conclusion":"2 * f <= 2 * x","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x)","proofString":"apply Rmult_le_compat_l with (2 := Hxf).\nnow apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x) : 0 <= 2.","conclusion":"0 <= 2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : 0 <= x) (Hxf : f <= x)","proofString":"now apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0) : Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (Hxf : Rabs f <= Rabs x) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0)","proofString":"revert Hxf.\napply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0) : Rabs f <= Rabs x -> Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs x -> Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x < 0)","proofString":"apply Rlt_le in Hx.\nrewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) : Rabs f <= Rabs x -> Rabs f <= Rabs g.","conclusion":"Rabs f <= Rabs x -> Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0)","proofString":"rewrite Rabs_left1 with (1 := Hx).\nrewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) : Rabs f <= - x -> Rabs f <= Rabs g.","conclusion":"Rabs f <= - x -> Rabs f <= Rabs g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0)","proofString":"rewrite 2!Rabs_left1 ; try ( apply (Rnd_N_pt_le_0 F HF x) ; assumption ).\nintros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) : - f <= - x -> - f <= - g.","conclusion":"- f <= - x -> - f <= - g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0)","proofString":"intros Hxf.\nrewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x) : - f <= - g.","conclusion":"- f <= - g","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x)","proofString":"rewrite H0.\napply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x) : - f <= - (2 * x - f).","conclusion":"- f <= - (2 * x - f)","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x)","proofString":"apply Ropp_le_contravar.\napply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x) : 2 * x - f <= f.","conclusion":"2 * x - f <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x)","proofString":"apply Rplus_le_reg_r with f.\nring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x) : 2 * x - f + f <= f + f.","conclusion":"2 * x - f + f <= f + f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x)","proofString":"ring_simplify.\napply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x) : 2 * x <= 2 * f.","conclusion":"2 * x <= 2 * f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x)","proofString":"apply Rmult_le_compat_l.\nnow apply IZR_le.\nnow apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x) : 0 <= 2.","conclusion":"0 <= 2","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x)","proofString":"now apply IZR_le."},{"statement":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x) : x <= f.","conclusion":"x <= f","hypotheses":"(F : R -> Prop) (HF : F 0) (x f : R) (Rxf : Rnd_N_pt F x f) (g : R) (Rxg : Rnd_N_pt F x g) (H : f - x = - (g - x)) (H0 : g = 2 * x - f) (Hx : x <= 0) (Hxf : - f <= - x)","proofString":"now apply Ropp_le_cancel."},{"statement":"(F : R -> Prop) (HF : F 0) (rnd1 rnd2 : R -> R) (H1 : Rnd_N0 F rnd1) (H2 : Rnd_N0 F rnd2) (x : R) : rnd1 x = rnd2 x.","conclusion":"rnd1 x = rnd2 x","hypotheses":"(F : R -> Prop) (HF : F 0) (rnd1 rnd2 : R -> R) (H1 : Rnd_N0 F rnd1) (H2 : Rnd_N0 F rnd2) (x : R)","proofString":"now apply Rnd_N0_pt_unique with F x."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y) : f <= g.","conclusion":"f <= g","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y)","proofString":"apply (Rnd_NG_pt_monotone F _ (Rnd_N0_pt_unique_prop F HF) x y).\nnow apply -> Rnd_N0_NG_pt.\nnow apply -> Rnd_N0_NG_pt.\nexact Hxy."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y) : Rnd_NG_pt F (fun x0 f0 : R => Rabs f0 <= Rabs x0) x f.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs f0 <= Rabs x0) x f","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y)","proofString":"now apply -> Rnd_N0_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y) : Rnd_NG_pt F (fun x0 f0 : R => Rabs f0 <= Rabs x0) y g.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs f0 <= Rabs x0) y g","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y)","proofString":"now apply -> Rnd_N0_NG_pt."},{"statement":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y) : x <= y.","conclusion":"x <= y","hypotheses":"(F : R -> Prop) (HF : F 0) (x y f g : R) (Hxf : Rnd_N0_pt F x f) (Hyg : Rnd_N0_pt F y g) (Hxy : x <= y)","proofString":"exact Hxy."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : Rnd_N0_pt F x x.","conclusion":"Rnd_N0_pt F x x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"split.\nnow apply Rnd_N_pt_refl.\nintros f Hxf.\napply Req_le.\napply f_equal.\nnow apply sym_eq, Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : Rnd_N_pt F x x.","conclusion":"Rnd_N_pt F x x","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"now apply Rnd_N_pt_refl."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) : forall f2 : R, Rnd_N_pt F x f2 -> Rabs x <= Rabs f2.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> Rabs x <= Rabs f2","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x)","proofString":"intros f Hxf.\napply Req_le.\napply f_equal.\nnow apply sym_eq, Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f) : Rabs x <= Rabs f.","conclusion":"Rabs x <= Rabs f","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f)","proofString":"apply Req_le.\napply f_equal.\nnow apply sym_eq, Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f) : Rabs x = Rabs f.","conclusion":"Rabs x = Rabs f","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f)","proofString":"apply f_equal.\nnow apply sym_eq, Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f) : x = f.","conclusion":"x = f","hypotheses":"(F : R -> Prop) (x : R) (Hx : F x) (f : R) (Hxf : Rnd_N_pt F x f)","proofString":"now apply sym_eq, Rnd_N_pt_idempotent with (1 := Hxf)."},{"statement":"(F : R -> Prop) (x f : R) (Hf : Rnd_N_pt F x f) (Hx : F x) : f = x.","conclusion":"f = x","hypotheses":"(F : R -> Prop) (x f : R) (Hf : Rnd_N_pt F x f) (Hx : F x)","proofString":"now apply Rnd_N_pt_idempotent with F."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hx : 0 <= x) : 0 <= f.","conclusion":"0 <= f","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hx : 0 <= x)","proofString":"now apply (HP 0 x)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f) : 0 < x.","conclusion":"0 < x","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f)","proofString":"apply Rnot_le_lt.\nintros Hx.\napply Rlt_not_le with (1 := Hf).\nnow apply (HP x 0)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f) : ~ x <= 0.","conclusion":"~ x <= 0","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f)","proofString":"intros Hx.\napply Rlt_not_le with (1 := Hf).\nnow apply (HP x 0)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f) (Hx : x <= 0) : False.","conclusion":"False","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f) (Hx : x <= 0)","proofString":"apply Rlt_not_le with (1 := Hf).\nnow apply (HP x 0)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f) (Hx : x <= 0) : f <= 0.","conclusion":"f <= 0","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : 0 < f) (Hx : x <= 0)","proofString":"now apply (HP x 0)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hx : x <= 0) : f <= 0.","conclusion":"f <= 0","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hx : x <= 0)","proofString":"now apply (HP x 0)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0) : x < 0.","conclusion":"x < 0","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0)","proofString":"apply Rnot_le_lt.\nintros Hx.\napply Rlt_not_le with (1 := Hf).\nnow apply (HP 0 x)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0) : ~ 0 <= x.","conclusion":"~ 0 <= x","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0)","proofString":"intros Hx.\napply Rlt_not_le with (1 := Hf).\nnow apply (HP 0 x)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0) (Hx : 0 <= x) : False.","conclusion":"False","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0) (Hx : 0 <= x)","proofString":"apply Rlt_not_le with (1 := Hf).\nnow apply (HP 0 x)."},{"statement":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0) (Hx : 0 <= x) : 0 <= f.","conclusion":"0 <= f","hypotheses":"(P : R -> R -> Prop) (HP : round_pred_monotone P) (HP0 : P 0 0) (x f : R) (Hxf : P x f) (Hf : f < 0) (Hx : 0 <= x)","proofString":"now apply (HP 0 x)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : Rnd_DN_pt F2 x f.","conclusion":"Rnd_DN_pt F2 x f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"split.\napply -> HF.\nexact H1.\nsplit.\nnow apply H3.\nnow apply Rle_trans with (1 := H2).\nsplit.\nexact H2.\nintros k Hk Hl.\ndestruct (Rlt_or_le k a) as [H|H].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nnow apply H3.\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nexact H.\nnow apply Rle_trans with (1 := Hl).\nexact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : F2 f.","conclusion":"F2 f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"apply -> HF.\nexact H1.\nsplit.\nnow apply H3.\nnow apply Rle_trans with (1 := H2)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : F1 f.","conclusion":"F1 f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"exact H1."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : a <= f <= b.","conclusion":"a <= f <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"split.\nnow apply H3.\nnow apply Rle_trans with (1 := H2)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : a <= f.","conclusion":"a <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"now apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : f <= b.","conclusion":"f <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"now apply Rle_trans with (1 := H2)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : f <= x /\\ (forall g : R, F2 g -> g <= x -> g <= f).","conclusion":"f <= x /\\ (forall g : R, F2 g -> g <= x -> g <= f)","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"split.\nexact H2.\nintros k Hk Hl.\ndestruct (Rlt_or_le k a) as [H|H].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nnow apply H3.\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nexact H.\nnow apply Rle_trans with (1 := Hl).\nexact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : f <= x.","conclusion":"f <= x","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"exact H2."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : forall g : R, F2 g -> g <= x -> g <= f.","conclusion":"forall g : R, F2 g -> g <= x -> g <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"intros k Hk Hl.\ndestruct (Rlt_or_le k a) as [H|H].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nnow apply H3.\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nexact H.\nnow apply Rle_trans with (1 := Hl).\nexact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) : k <= f.","conclusion":"k <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x)","proofString":"destruct (Rlt_or_le k a) as [H|H].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nnow apply H3.\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nexact H.\nnow apply Rle_trans with (1 := Hl).\nexact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : k < a) : k <= f.","conclusion":"k <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : k < a)","proofString":"apply Rlt_le.\napply Rlt_le_trans with (1 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : k < a) : k < f.","conclusion":"k < f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : k < a)","proofString":"apply Rlt_le_trans with (1 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : k < a) : a <= f.","conclusion":"a <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : k < a)","proofString":"now apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k) : k <= f.","conclusion":"k <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k)","proofString":"apply H3.\napply <- HF.\nexact Hk.\nsplit.\nexact H.\nnow apply Rle_trans with (1 := Hl).\nexact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k) : F1 k.","conclusion":"F1 k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k)","proofString":"apply <- HF.\nexact Hk.\nsplit.\nexact H.\nnow apply Rle_trans with (1 := Hl)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k) : F2 k.","conclusion":"F2 k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k)","proofString":"exact Hk."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k) : a <= k <= b.","conclusion":"a <= k <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k)","proofString":"split.\nexact H.\nnow apply Rle_trans with (1 := Hl)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k) : a <= k.","conclusion":"a <= k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k)","proofString":"exact H."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k) : k <= b.","conclusion":"k <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k)","proofString":"now apply Rle_trans with (1 := Hl)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k) : k <= x.","conclusion":"k <= x","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Ha : F1 a) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) (k : R) (Hk : F2 k) (Hl : k <= x) (H : a <= k)","proofString":"exact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : Rnd_UP_pt F2 x f.","conclusion":"Rnd_UP_pt F2 x f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"split.\napply -> HF.\nexact H1.\nsplit.\nnow apply Rle_trans with (2 := H2).\nnow apply H3.\nsplit.\nexact H2.\nintros k Hk Hl.\ndestruct (Rle_or_lt k b) as [H|H].\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nnow apply Rle_trans with (2 := Hl).\nexact H.\nexact Hl.\napply Rlt_le.\napply Rle_lt_trans with (2 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : F2 f.","conclusion":"F2 f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"apply -> HF.\nexact H1.\nsplit.\nnow apply Rle_trans with (2 := H2).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : F1 f.","conclusion":"F1 f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"exact H1."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : a <= f <= b.","conclusion":"a <= f <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"split.\nnow apply Rle_trans with (2 := H2).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : a <= f.","conclusion":"a <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"now apply Rle_trans with (2 := H2)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : f <= b.","conclusion":"f <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"now apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : x <= f /\\ (forall g : R, F2 g -> x <= g -> f <= g).","conclusion":"x <= f /\\ (forall g : R, F2 g -> x <= g -> f <= g)","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"split.\nexact H2.\nintros k Hk Hl.\ndestruct (Rle_or_lt k b) as [H|H].\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nnow apply Rle_trans with (2 := Hl).\nexact H.\nexact Hl.\napply Rlt_le.\napply Rle_lt_trans with (2 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : x <= f.","conclusion":"x <= f","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"exact H2."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) : forall g : R, F2 g -> x <= g -> f <= g.","conclusion":"forall g : R, F2 g -> x <= g -> f <= g","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g)","proofString":"intros k Hk Hl.\ndestruct (Rle_or_lt k b) as [H|H].\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nnow apply Rle_trans with (2 := Hl).\nexact H.\nexact Hl.\napply Rlt_le.\napply Rle_lt_trans with (2 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) : f <= k.","conclusion":"f <= k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k)","proofString":"destruct (Rle_or_lt k b) as [H|H].\napply H3.\napply <- HF.\nexact Hk.\nsplit.\nnow apply Rle_trans with (2 := Hl).\nexact H.\nexact Hl.\napply Rlt_le.\napply Rle_lt_trans with (2 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b) : f <= k.","conclusion":"f <= k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b)","proofString":"apply H3.\napply <- HF.\nexact Hk.\nsplit.\nnow apply Rle_trans with (2 := Hl).\nexact H.\nexact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b) : F1 k.","conclusion":"F1 k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b)","proofString":"apply <- HF.\nexact Hk.\nsplit.\nnow apply Rle_trans with (2 := Hl).\nexact H."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b) : F2 k.","conclusion":"F2 k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b)","proofString":"exact Hk."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b) : a <= k <= b.","conclusion":"a <= k <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b)","proofString":"split.\nnow apply Rle_trans with (2 := Hl).\nexact H."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b) : a <= k.","conclusion":"a <= k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b)","proofString":"now apply Rle_trans with (2 := Hl)."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b) : k <= b.","conclusion":"k <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b)","proofString":"exact H."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b) : x <= k.","conclusion":"x <= k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : k <= b)","proofString":"exact Hl."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : b < k) : f <= k.","conclusion":"f <= k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : b < k)","proofString":"apply Rlt_le.\napply Rle_lt_trans with (2 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : b < k) : f < k.","conclusion":"f < k","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : b < k)","proofString":"apply Rle_lt_trans with (2 := H).\nnow apply H3."},{"statement":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : b < k) : f <= b.","conclusion":"f <= b","hypotheses":"(F1 F2 : R -> Prop) (a b : R) (Hb : F1 b) (HF : forall x0 : R, a <= x0 <= b -> F1 x0 <-> F2 x0) (x f : R) (Hx : a <= x <= b) (H1 : F1 f) (H2 : x <= f) (H3 : forall g : R, F1 g -> x <= g -> f <= g) (k : R) (Hk : F2 k) (Hl : x <= k) (H : b < k)","proofString":"now apply H3."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) : satisfies_any F2.","conclusion":"satisfies_any F2","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1))","proofString":"split.\nnow apply -> Heq.\nintros x Hx.\napply -> Heq.\napply Hsym.\nnow apply <- Heq.\nintros x.\ndestruct (Hrnd x) as (f, (H1, (H2, H3))).\nexists f.\nsplit.\nnow apply -> Heq.\nsplit.\nexact H2.\nintros g Hg Hgx.\napply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) : F2 0.","conclusion":"F2 0","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1))","proofString":"now apply -> Heq."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) : forall x : R, F2 x -> F2 (- x).","conclusion":"forall x : R, F2 x -> F2 (- x)","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1))","proofString":"intros x Hx.\napply -> Heq.\napply Hsym.\nnow apply <- Heq."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R) (Hx : F2 x) : F2 (- x).","conclusion":"F2 (- x)","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R) (Hx : F2 x)","proofString":"apply -> Heq.\napply Hsym.\nnow apply <- Heq."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R) (Hx : F2 x) : F1 (- x).","conclusion":"F1 (- x)","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R) (Hx : F2 x)","proofString":"apply Hsym.\nnow apply <- Heq."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R) (Hx : F2 x) : F1 x.","conclusion":"F1 x","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R) (Hx : F2 x)","proofString":"now apply <- Heq."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) : round_pred_total (Rnd_DN_pt F2).","conclusion":"round_pred_total (Rnd_DN_pt F2)","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x : R, F1 x <-> F2 x) (Hzero : F1 0) (Hsym : forall x : R, F1 x -> F1 (- x)) (Hrnd : round_pred_total (Rnd_DN_pt F1))","proofString":"intros x.\ndestruct (Hrnd x) as (f, (H1, (H2, H3))).\nexists f.\nsplit.\nnow apply -> Heq.\nsplit.\nexact H2.\nintros g Hg Hgx.\napply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R) : exists f : R, Rnd_DN_pt F2 x f.","conclusion":"exists f : R, Rnd_DN_pt F2 x f","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x : R)","proofString":"destruct (Hrnd x) as (f, (H1, (H2, H3))).\nexists f.\nsplit.\nnow apply -> Heq.\nsplit.\nexact H2.\nintros g Hg Hgx.\napply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : exists f0 : R, Rnd_DN_pt F2 x f0.","conclusion":"exists f0 : R, Rnd_DN_pt F2 x f0","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"exists f.\nsplit.\nnow apply -> Heq.\nsplit.\nexact H2.\nintros g Hg Hgx.\napply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : Rnd_DN_pt F2 x f.","conclusion":"Rnd_DN_pt F2 x f","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"split.\nnow apply -> Heq.\nsplit.\nexact H2.\nintros g Hg Hgx.\napply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : F2 f.","conclusion":"F2 f","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"now apply -> Heq."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : f <= x /\\ (forall g : R, F2 g -> g <= x -> g <= f).","conclusion":"f <= x /\\ (forall g : R, F2 g -> g <= x -> g <= f)","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"split.\nexact H2.\nintros g Hg Hgx.\napply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : f <= x.","conclusion":"f <= x","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"exact H2."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f) : forall g : R, F2 g -> g <= x -> g <= f.","conclusion":"forall g : R, F2 g -> g <= x -> g <= f","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g : R, F1 g -> g <= x -> g <= f)","proofString":"intros g Hg Hgx.\napply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g0 : R, F1 g0 -> g0 <= x -> g0 <= f) (g : R) (Hg : F2 g) (Hgx : g <= x) : g <= f.","conclusion":"g <= f","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g0 : R, F1 g0 -> g0 <= x -> g0 <= f) (g : R) (Hg : F2 g) (Hgx : g <= x)","proofString":"apply H3.\nnow apply <- Heq.\nexact Hgx."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g0 : R, F1 g0 -> g0 <= x -> g0 <= f) (g : R) (Hg : F2 g) (Hgx : g <= x) : F1 g.","conclusion":"F1 g","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g0 : R, F1 g0 -> g0 <= x -> g0 <= f) (g : R) (Hg : F2 g) (Hgx : g <= x)","proofString":"now apply <- Heq."},{"statement":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g0 : R, F1 g0 -> g0 <= x -> g0 <= f) (g : R) (Hg : F2 g) (Hgx : g <= x) : g <= x.","conclusion":"g <= x","hypotheses":"(F1 F2 : R -> Prop) (Heq : forall x0 : R, F1 x0 <-> F2 x0) (Hzero : F1 0) (Hsym : forall x0 : R, F1 x0 -> F1 (- x0)) (Hrnd : round_pred_total (Rnd_DN_pt F1)) (x f : R) (H1 : F1 f) (H2 : f <= x) (H3 : forall g0 : R, F1 g0 -> g0 <= x -> g0 <= f) (g : R) (Hg : F2 g) (Hgx : g <= x)","proofString":"exact Hgx."},{"statement":"(F : R -> Prop) (Hrnd : round_pred_total (Rnd_DN_pt F)) : round_pred (Rnd_DN_pt F).","conclusion":"round_pred (Rnd_DN_pt F)","hypotheses":"(F : R -> Prop) (Hrnd : round_pred_total (Rnd_DN_pt F))","proofString":"split.\napply Hrnd.\napply Rnd_DN_pt_monotone."},{"statement":"(F : R -> Prop) (Hrnd : round_pred_total (Rnd_DN_pt F)) : round_pred_total (Rnd_DN_pt F).","conclusion":"round_pred_total (Rnd_DN_pt F)","hypotheses":"(F : R -> Prop) (Hrnd : round_pred_total (Rnd_DN_pt F))","proofString":"apply Hrnd."},{"statement":"(F : R -> Prop) (Hrnd : round_pred_total (Rnd_DN_pt F)) : round_pred_monotone (Rnd_DN_pt F).","conclusion":"round_pred_monotone (Rnd_DN_pt F)","hypotheses":"(F : R -> Prop) (Hrnd : round_pred_total (Rnd_DN_pt F))","proofString":"apply Rnd_DN_pt_monotone."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred (Rnd_UP_pt F).","conclusion":"round_pred (Rnd_UP_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"split.\nintros x.\ndestruct (proj1 (satisfies_any_imp_DN F Hany) (-x)) as (f, Hf).\nexists (-f).\nrewrite <- (Ropp_involutive x).\napply Rnd_UP_pt_opp.\napply Hany.\nexact Hf.\napply Rnd_UP_pt_monotone."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred_total (Rnd_UP_pt F).","conclusion":"round_pred_total (Rnd_UP_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"intros x.\ndestruct (proj1 (satisfies_any_imp_DN F Hany) (-x)) as (f, Hf).\nexists (-f).\nrewrite <- (Ropp_involutive x).\napply Rnd_UP_pt_opp.\napply Hany.\nexact Hf."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) : exists f : R, Rnd_UP_pt F x f.","conclusion":"exists f : R, Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R)","proofString":"destruct (proj1 (satisfies_any_imp_DN F Hany) (-x)) as (f, Hf).\nexists (-f).\nrewrite <- (Ropp_involutive x).\napply Rnd_UP_pt_opp.\napply Hany.\nexact Hf."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f) : exists f0 : R, Rnd_UP_pt F x f0.","conclusion":"exists f0 : R, Rnd_UP_pt F x f0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f)","proofString":"exists (-f).\nrewrite <- (Ropp_involutive x).\napply Rnd_UP_pt_opp.\napply Hany.\nexact Hf."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f) : Rnd_UP_pt F x (- f).","conclusion":"Rnd_UP_pt F x (- f)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f)","proofString":"rewrite <- (Ropp_involutive x).\napply Rnd_UP_pt_opp.\napply Hany.\nexact Hf."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f) : Rnd_UP_pt F (- - x) (- f).","conclusion":"Rnd_UP_pt F (- - x) (- f)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f)","proofString":"apply Rnd_UP_pt_opp.\napply Hany.\nexact Hf."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f) : forall x0 : R, F x0 -> F (- x0).","conclusion":"forall x0 : R, F x0 -> F (- x0)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f) : Rnd_DN_pt F (- x) f.","conclusion":"Rnd_DN_pt F (- x) f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F (- x) f)","proofString":"exact Hf."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred_monotone (Rnd_UP_pt F).","conclusion":"round_pred_monotone (Rnd_UP_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"apply Rnd_UP_pt_monotone."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred (Rnd_ZR_pt F).","conclusion":"round_pred (Rnd_ZR_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"split.\nintros x.\ndestruct (Rle_or_lt 0 x) as [Hx|Hx].\ndestruct (proj1 (satisfies_any_imp_DN F Hany) x) as (f, Hf).\nexists f.\nsplit.\nnow intros _.\nintros Hx'.\nassert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany.\ndestruct (proj1 (satisfies_any_imp_UP F Hany) x) as (f, Hf).\nexists f.\nsplit.\nintros Hx'.\nelim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x.\nnow intros _.\napply Rnd_ZR_pt_monotone.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred_total (Rnd_ZR_pt F).","conclusion":"round_pred_total (Rnd_ZR_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"intros x.\ndestruct (Rle_or_lt 0 x) as [Hx|Hx].\ndestruct (proj1 (satisfies_any_imp_DN F Hany) x) as (f, Hf).\nexists f.\nsplit.\nnow intros _.\nintros Hx'.\nassert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany.\ndestruct (proj1 (satisfies_any_imp_UP F Hany) x) as (f, Hf).\nexists f.\nsplit.\nintros Hx'.\nelim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x.\nnow intros _."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) : exists f : R, Rnd_ZR_pt F x f.","conclusion":"exists f : R, Rnd_ZR_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R)","proofString":"destruct (Rle_or_lt 0 x) as [Hx|Hx].\ndestruct (proj1 (satisfies_any_imp_DN F Hany) x) as (f, Hf).\nexists f.\nsplit.\nnow intros _.\nintros Hx'.\nassert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany.\ndestruct (proj1 (satisfies_any_imp_UP F Hany) x) as (f, Hf).\nexists f.\nsplit.\nintros Hx'.\nelim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x.\nnow intros _."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) : exists f : R, Rnd_ZR_pt F x f.","conclusion":"exists f : R, Rnd_ZR_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x)","proofString":"destruct (proj1 (satisfies_any_imp_DN F Hany) x) as (f, Hf).\nexists f.\nsplit.\nnow intros _.\nintros Hx'.\nassert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) : exists f0 : R, Rnd_ZR_pt F x f0.","conclusion":"exists f0 : R, Rnd_ZR_pt F x f0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f)","proofString":"exists f.\nsplit.\nnow intros _.\nintros Hx'.\nassert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) : Rnd_ZR_pt F x f.","conclusion":"Rnd_ZR_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f)","proofString":"split.\nnow intros _.\nintros Hx'.\nassert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) : 0 <= x -> Rnd_DN_pt F x f.","conclusion":"0 <= x -> Rnd_DN_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f)","proofString":"now intros _."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) : x <= 0 -> Rnd_UP_pt F x f.","conclusion":"x <= 0 -> Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f)","proofString":"intros Hx'.\nassert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) (Hx' : x <= 0) : Rnd_UP_pt F x f.","conclusion":"Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) (Hx' : x <= 0)","proofString":"assert (x = 0).\nnow apply Rle_antisym.\nrewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) (Hx' : x <= 0) : x = 0.","conclusion":"x = 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) (Hx' : x <= 0)","proofString":"now apply Rle_antisym."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) (Hx' : x <= 0) (H : x = 0) : Rnd_UP_pt F x f.","conclusion":"Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F x f) (Hx' : x <= 0) (H : x = 0)","proofString":"rewrite H in Hf |- *.\nclear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F 0 f) (Hx' : x <= 0) (H : x = 0) : Rnd_UP_pt F 0 f.","conclusion":"Rnd_UP_pt F 0 f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : 0 <= x) (f : R) (Hf : Rnd_DN_pt F 0 f) (Hx' : x <= 0) (H : x = 0)","proofString":"clear H Hx Hx'.\nrewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f) : Rnd_UP_pt F 0 f.","conclusion":"Rnd_UP_pt F 0 f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f)","proofString":"rewrite Rnd_DN_pt_idempotent with (1 := Hf).\napply Rnd_UP_pt_refl.\napply Hany.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f) : Rnd_UP_pt F 0 0.","conclusion":"Rnd_UP_pt F 0 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f)","proofString":"apply Rnd_UP_pt_refl.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x f : R) (Hf : Rnd_DN_pt F 0 f)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) : exists f : R, Rnd_ZR_pt F x f.","conclusion":"exists f : R, Rnd_ZR_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0)","proofString":"destruct (proj1 (satisfies_any_imp_UP F Hany) x) as (f, Hf).\nexists f.\nsplit.\nintros Hx'.\nelim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x.\nnow intros _."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) : exists f0 : R, Rnd_ZR_pt F x f0.","conclusion":"exists f0 : R, Rnd_ZR_pt F x f0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f)","proofString":"exists f.\nsplit.\nintros Hx'.\nelim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x.\nnow intros _."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) : Rnd_ZR_pt F x f.","conclusion":"Rnd_ZR_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f)","proofString":"split.\nintros Hx'.\nelim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x.\nnow intros _."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) : 0 <= x -> Rnd_DN_pt F x f.","conclusion":"0 <= x -> Rnd_DN_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f)","proofString":"intros Hx'.\nelim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) (Hx' : 0 <= x) : Rnd_DN_pt F x f.","conclusion":"Rnd_DN_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) (Hx' : 0 <= x)","proofString":"elim (Rlt_irrefl 0).\nnow apply Rle_lt_trans with x."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) (Hx' : 0 <= x) : 0 < 0.","conclusion":"0 < 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) (Hx' : 0 <= x)","proofString":"now apply Rle_lt_trans with x."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f) : x <= 0 -> Rnd_UP_pt F x f.","conclusion":"x <= 0 -> Rnd_UP_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x : R) (Hx : x < 0) (f : R) (Hf : Rnd_UP_pt F x f)","proofString":"now intros _."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred_monotone (Rnd_ZR_pt F).","conclusion":"round_pred_monotone (Rnd_ZR_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"apply Rnd_ZR_pt_monotone.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x : R) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x : R)","proofString":"destruct (proj1 (satisfies_any_imp_DN F Hany) x) as (d, Hd).\ndestruct (proj1 (satisfies_any_imp_UP F Hany) x) as (u, Hu).\ndestruct (total_order_T (Rabs (u - x)) (Rabs (d - x))) as [[H|H]|H].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal.\ndestruct (Req_dec x d) as [He|Hne].\nexists x.\nsplit.\napply Rnd_N_pt_refl.\nrewrite He.\napply Hd.\nright.\nintros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd.\nassert (Hf : ~F x).\nintros Hf.\napply Hne.\napply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd).\ndestruct (HP x _ _ Hf Hd Hu) as [H'|H'].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d)","proofString":"destruct (proj1 (satisfies_any_imp_UP F Hany) x) as (u, Hu).\ndestruct (total_order_T (Rabs (u - x)) (Rabs (d - x))) as [[H|H]|H].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal.\ndestruct (Req_dec x d) as [He|Hne].\nexists x.\nsplit.\napply Rnd_N_pt_refl.\nrewrite He.\napply Hd.\nright.\nintros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd.\nassert (Hf : ~F x).\nintros Hf.\napply Hne.\napply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd).\ndestruct (HP x _ _ Hf Hd Hu) as [H'|H'].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u)","proofString":"destruct (total_order_T (Rabs (u - x)) (Rabs (d - x))) as [[H|H]|H].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal.\ndestruct (Req_dec x d) as [He|Hne].\nexists x.\nsplit.\napply Rnd_N_pt_refl.\nrewrite He.\napply Hd.\nright.\nintros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd.\nassert (Hf : ~F x).\nintros Hf.\napply Hne.\napply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd).\ndestruct (HP x _ _ Hf Hd Hu) as [H'|H'].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x))","proofString":"exists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) : Rnd_NG_pt F P x u.","conclusion":"Rnd_NG_pt F P x u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x))","proofString":"split.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) : Rnd_N_pt F x u.","conclusion":"Rnd_N_pt F x u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x))","proofString":"split.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) : F u.","conclusion":"F u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x))","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) : forall g : R, F g -> Rabs (u - x) <= Rabs (g - x).","conclusion":"forall g : R, F g -> Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x))","proofString":"intros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g)","proofString":"destruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"rewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g) : u - x <= g - x.","conclusion":"u - x <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rplus_le_compat_r.\nnow apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g) : u <= g.","conclusion":"u <= g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= g - x.","conclusion":"0 <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Rle_0_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= u - x.","conclusion":"0 <= u - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g < x) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g < x)","proofString":"apply Rlt_le in Hxg.\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rlt_le.\napply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (u - x) < Rabs (g - x).","conclusion":"Rabs (u - x) < Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rlt_le_trans with (1 := H).\ndo 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"do 2 rewrite <- (Rabs_minus_sym x).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (x - d) <= Rabs (x - g).","conclusion":"Rabs (x - d) <= Rabs (x - g)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"rewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : x - d <= x - g.","conclusion":"x - d <= x - g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rplus_le_compat_l.\napply Ropp_le_contravar.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : - d <= - g.","conclusion":"- d <= - g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Ropp_le_contravar.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : g <= d.","conclusion":"g <= d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : 0 <= x - g.","conclusion":"0 <= x - g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Rle_0_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : 0 <= x - d.","conclusion":"0 <= x - d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rle_0_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) : P x u \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = u).","conclusion":"P x u \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = u)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x))","proofString":"right.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) : forall f2 : R, Rnd_N_pt F x f2 -> f2 = u.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> f2 = u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x))","proofString":"intros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) : f = u.","conclusion":"f = u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f)","proofString":"destruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu.\napply refl_equal."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d) : d = u.","conclusion":"d = u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d)","proofString":"elim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d) : Rabs (d - x) <= Rabs (u - x).","conclusion":"Rabs (d - x) <= Rabs (u - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d)","proofString":"rewrite <- K.\napply Hf.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d) : Rabs (f - x) <= Rabs (u - x).","conclusion":"Rabs (f - x) <= Rabs (u - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d)","proofString":"apply Hf.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d) : F u.","conclusion":"F u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u) : u = u.","conclusion":"u = u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) < Rabs (d - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u)","proofString":"apply refl_equal."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x))","proofString":"destruct (Req_dec x d) as [He|Hne].\nexists x.\nsplit.\napply Rnd_N_pt_refl.\nrewrite He.\napply Hd.\nright.\nintros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd.\nassert (Hf : ~F x).\nintros Hf.\napply Hne.\napply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd).\ndestruct (HP x _ _ Hf Hd Hu) as [H'|H'].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d)","proofString":"exists x.\nsplit.\napply Rnd_N_pt_refl.\nrewrite He.\napply Hd.\nright.\nintros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) : Rnd_NG_pt F P x x.","conclusion":"Rnd_NG_pt F P x x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d)","proofString":"split.\napply Rnd_N_pt_refl.\nrewrite He.\napply Hd.\nright.\nintros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) : Rnd_N_pt F x x.","conclusion":"Rnd_N_pt F x x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d)","proofString":"apply Rnd_N_pt_refl.\nrewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) : F x.","conclusion":"F x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d)","proofString":"rewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) : P x x \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = x).","conclusion":"P x x \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d)","proofString":"right.\nintros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) : forall f2 : R, Rnd_N_pt F x f2 -> f2 = x.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> f2 = x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d)","proofString":"intros.\napply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) (f2 : R) (H0 : Rnd_N_pt F x f2) : f2 = x.","conclusion":"f2 = x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) (f2 : R) (H0 : Rnd_N_pt F x f2)","proofString":"apply Rnd_N_pt_idempotent with (1 := H0).\nrewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) (f2 : R) (H0 : Rnd_N_pt F x f2) : F x.","conclusion":"F x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) (f2 : R) (H0 : Rnd_N_pt F x f2)","proofString":"rewrite He.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) (f2 : R) (H0 : Rnd_N_pt F x f2) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (He : x = d) (f2 : R) (H0 : Rnd_N_pt F x f2)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d)","proofString":"assert (Hf : ~F x).\nintros Hf.\napply Hne.\napply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd).\ndestruct (HP x _ _ Hf Hd Hu) as [H'|H'].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) : ~ F x.","conclusion":"~ F x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d)","proofString":"intros Hf.\napply Hne.\napply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd)."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : F x) : False.","conclusion":"False","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : F x)","proofString":"apply Hne.\napply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd)."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : F x) : x = d.","conclusion":"x = d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : F x)","proofString":"apply sym_eq.\nnow apply Rnd_DN_pt_idempotent with (1 := Hd)."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : F x) : d = x.","conclusion":"d = x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : F x)","proofString":"now apply Rnd_DN_pt_idempotent with (1 := Hd)."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x)","proofString":"destruct (HP x _ _ Hf Hd Hu) as [H'|H'].\nexists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left.\nexists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u)","proofString":"exists u.\nsplit.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) : Rnd_NG_pt F P x u.","conclusion":"Rnd_NG_pt F P x u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u)","proofString":"split.\nsplit.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) : Rnd_N_pt F x u.","conclusion":"Rnd_N_pt F x u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u)","proofString":"split.\napply Hu.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) : F u.","conclusion":"F u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) : forall g : R, F g -> Rabs (u - x) <= Rabs (g - x).","conclusion":"forall g : R, F g -> Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u)","proofString":"intros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g)","proofString":"destruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"rewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g) : u - x <= g - x.","conclusion":"u - x <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rplus_le_compat_r.\nnow apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g) : u <= g.","conclusion":"u <= g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= g - x.","conclusion":"0 <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Rle_0_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= u - x.","conclusion":"0 <= u - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g < x) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g < x)","proofString":"apply Rlt_le in Hxg.\nrewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"rewrite H.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"rewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : - (d - x) <= - (g - x).","conclusion":"- (d - x) <= - (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : g - x <= d - x.","conclusion":"g - x <= d - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rplus_le_compat_r.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : g <= d.","conclusion":"g <= d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : g - x <= 0.","conclusion":"g - x <= 0","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Rle_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : d - x <= 0.","conclusion":"d - x <= 0","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u) : P x u \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = u).","conclusion":"P x u \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = u)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x u)","proofString":"now left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d)","proofString":"exists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) : Rnd_NG_pt F P x d.","conclusion":"Rnd_NG_pt F P x d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d)","proofString":"split.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nnow left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) : Rnd_N_pt F x d.","conclusion":"Rnd_N_pt F x d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d)","proofString":"split.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) : forall g : R, F g -> Rabs (d - x) <= Rabs (g - x).","conclusion":"forall g : R, F g -> Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d)","proofString":"intros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g)","proofString":"destruct (Rle_or_lt x g) as [Hxg|Hxg].\nrewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"rewrite <- H.\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"rewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g) : u - x <= g - x.","conclusion":"u - x <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rplus_le_compat_r.\nnow apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g) : u <= g.","conclusion":"u <= g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= g - x.","conclusion":"0 <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Rle_0_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= u - x.","conclusion":"0 <= u - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g < x) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g < x)","proofString":"apply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"rewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x) : - (d - x) <= - (g - x).","conclusion":"- (d - x) <= - (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x) : g - x <= d - x.","conclusion":"g - x <= d - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rplus_le_compat_r.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x) : g <= d.","conclusion":"g <= d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x) : g - x <= 0.","conclusion":"g - x <= 0","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Rle_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x) : d - x <= 0.","conclusion":"d - x <= 0","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d) : P x d \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = d).","conclusion":"P x d \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = d)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (u - x) = Rabs (d - x)) (Hne : x <> d) (Hf : ~ F x) (H' : P x d)","proofString":"now left."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) : exists f : R, Rnd_NG_pt F P x f.","conclusion":"exists f : R, Rnd_NG_pt F P x f","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x))","proofString":"exists d.\nsplit.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) : Rnd_NG_pt F P x d.","conclusion":"Rnd_NG_pt F P x d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x))","proofString":"split.\nsplit.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd.\nright.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) : Rnd_N_pt F x d.","conclusion":"Rnd_N_pt F x d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x))","proofString":"split.\napply Hd.\nintros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x))","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) : forall g : R, F g -> Rabs (d - x) <= Rabs (g - x).","conclusion":"forall g : R, F g -> Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x))","proofString":"intros g Hg.\ndestruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g)","proofString":"destruct (Rle_or_lt x g) as [Hxg|Hxg].\napply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu.\napply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rlt_le.\napply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : Rabs (d - x) < Rabs (g - x).","conclusion":"Rabs (d - x) < Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rlt_le_trans with (1 := H).\nrewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : Rabs (u - x) <= Rabs (g - x).","conclusion":"Rabs (u - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"rewrite 2!Rabs_pos_eq.\napply Rplus_le_compat_r.\nnow apply Hu.\nnow apply Rle_0_minus.\napply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : u - x <= g - x.","conclusion":"u - x <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rplus_le_compat_r.\nnow apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : u <= g.","conclusion":"u <= g","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= g - x.","conclusion":"0 <= g - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"now apply Rle_0_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : 0 <= u - x.","conclusion":"0 <= u - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Rle_0_minus.\napply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : x <= g)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g < x) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g < x)","proofString":"apply Rlt_le in Hxg.\nrewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x) : Rabs (d - x) <= Rabs (g - x).","conclusion":"Rabs (d - x) <= Rabs (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"rewrite 2!Rabs_left1.\napply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd.\nnow apply Rle_minus.\napply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x) : - (d - x) <= - (g - x).","conclusion":"- (d - x) <= - (g - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Ropp_le_contravar.\napply Rplus_le_compat_r.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x) : g - x <= d - x.","conclusion":"g - x <= d - x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rplus_le_compat_r.\nnow apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x) : g <= d.","conclusion":"g <= d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x) : g - x <= 0.","conclusion":"g - x <= 0","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"now apply Rle_minus."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x) : d - x <= 0.","conclusion":"d - x <= 0","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Rle_minus.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (g : R) (Hg : F g) (Hxg : g <= x)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) : P x d \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = d).","conclusion":"P x d \\/ (forall f2 : R, Rnd_N_pt F x f2 -> f2 = d)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x))","proofString":"right.\nintros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) : forall f2 : R, Rnd_N_pt F x f2 -> f2 = d.","conclusion":"forall f2 : R, Rnd_N_pt F x f2 -> f2 = d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x))","proofString":"intros f Hf.\ndestruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) : f = d.","conclusion":"f = d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f)","proofString":"destruct (Rnd_N_pt_DN_or_UP_eq F x _ _ _ Hd Hu Hf) as [K|K] ; rewrite K.\napply refl_equal.\nelim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d) : d = d.","conclusion":"d = d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = d)","proofString":"apply refl_equal."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u) : u = d.","conclusion":"u = d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u)","proofString":"elim Rlt_not_le with (1 := H).\nrewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u) : Rabs (u - x) <= Rabs (d - x).","conclusion":"Rabs (u - x) <= Rabs (d - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u)","proofString":"rewrite <- K.\napply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u) : Rabs (f - x) <= Rabs (d - x).","conclusion":"Rabs (f - x) <= Rabs (d - x)","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u)","proofString":"apply Hf.\napply Hd."},{"statement":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u) : F d.","conclusion":"F d","hypotheses":"(F : R -> Prop) (P : R -> R -> Prop) (Hany : satisfies_any F) (HP : NG_existence_prop F P) (x d : R) (Hd : Rnd_DN_pt F x d) (u : R) (Hu : Rnd_UP_pt F x u) (H : Rabs (d - x) < Rabs (u - x)) (f : R) (Hf : Rnd_N_pt F x f) (K : f = u)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred (Rnd_NA_pt F).","conclusion":"round_pred (Rnd_NA_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"split.\nassert (H : round_pred_total (Rnd_NG_pt F (fun a b => (Rabs a <= Rabs b)%R))).\napply satisfies_any_imp_NG.\napply Hany.\nintros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nleft.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu.\nright.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd.\nintros x.\ndestruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_NA_NG_pt.\napply Hf.\napply Hany.\napply Rnd_NA_pt_monotone.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred_total (Rnd_NA_pt F).","conclusion":"round_pred_total (Rnd_NA_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"assert (H : round_pred_total (Rnd_NG_pt F (fun a b => (Rabs a <= Rabs b)%R))).\napply satisfies_any_imp_NG.\napply Hany.\nintros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nleft.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu.\nright.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd.\nintros x.\ndestruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_NA_NG_pt.\napply Hf.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b)).","conclusion":"round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"apply satisfies_any_imp_NG.\napply Hany.\nintros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nleft.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu.\nright.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : satisfies_any F.","conclusion":"satisfies_any F","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : NG_existence_prop F (fun a b : R => Rabs a <= Rabs b).","conclusion":"NG_existence_prop F (fun a b : R => Rabs a <= Rabs b)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"intros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nleft.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu.\nright.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) : Rabs x <= Rabs u \\/ Rabs x <= Rabs d.","conclusion":"Rabs x <= Rabs u \\/ Rabs x <= Rabs d","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u)","proofString":"destruct (Rle_lt_dec 0 x) as [Hx|Hx].\nleft.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu.\nright.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : Rabs x <= Rabs u \\/ Rabs x <= Rabs d.","conclusion":"Rabs x <= Rabs u \\/ Rabs x <= Rabs d","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"left.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : Rabs x <= Rabs u.","conclusion":"Rabs x <= Rabs u","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : x <= Rabs u.","conclusion":"x <= Rabs u","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq.\napply Hu.\napply Rle_trans with (1 := Hx).\napply Hu."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : 0 <= u.","conclusion":"0 <= u","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"apply Rle_trans with (1 := Hx).\napply Hu."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : Rabs x <= Rabs u \\/ Rabs x <= Rabs d.","conclusion":"Rabs x <= Rabs u \\/ Rabs x <= Rabs d","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"right.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : Rabs x <= Rabs d.","conclusion":"Rabs x <= Rabs d","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"rewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : - x <= Rabs d.","conclusion":"- x <= Rabs d","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"rewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hd.\napply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : - x <= - d.","conclusion":"- x <= - d","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"apply Ropp_le_contravar.\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : d <= 0.","conclusion":"d <= 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"apply Rlt_le in Hx.\napply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x <= 0) : d <= 0.","conclusion":"d <= 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x <= 0)","proofString":"apply Rle_trans with (2 := Hx).\napply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x <= 0) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x <= 0)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) : round_pred_total (Rnd_NA_pt F).","conclusion":"round_pred_total (Rnd_NA_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b)))","proofString":"intros x.\ndestruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_NA_NG_pt.\napply Hf.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x : R) : exists f : R, Rnd_NA_pt F x f.","conclusion":"exists f : R, Rnd_NA_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x : R)","proofString":"destruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_NA_NG_pt.\napply Hf.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f) : exists f0 : R, Rnd_NA_pt F x f0.","conclusion":"exists f0 : R, Rnd_NA_pt F x f0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f)","proofString":"exists f.\napply <- Rnd_NA_NG_pt.\napply Hf.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f) : Rnd_NA_pt F x f.","conclusion":"Rnd_NA_pt F x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f)","proofString":"apply <- Rnd_NA_NG_pt.\napply Hf.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f) : Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs x0 <= Rabs f0) x f","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f)","proofString":"apply Hf."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs a <= Rabs b) x f)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : round_pred_monotone (Rnd_NA_pt F).","conclusion":"round_pred_monotone (Rnd_NA_pt F)","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"apply Rnd_NA_pt_monotone.\napply Hany."},{"statement":"(F : R -> Prop) (Hany : satisfies_any F) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (Hany : satisfies_any F)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) : round_pred (Rnd_N0_pt F).","conclusion":"round_pred (Rnd_N0_pt F)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F)","proofString":"split.\nassert (H : round_pred_total (Rnd_NG_pt F (fun a b => (Rabs b <= Rabs a)%R))).\napply satisfies_any_imp_NG.\napply Hany.\nintros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nright.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy.\nleft.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le.\nintros x.\ndestruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_N0_NG_pt.\napply Hf.\napply HF0.\napply Rnd_N0_pt_monotone.\napply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) : round_pred_total (Rnd_N0_pt F).","conclusion":"round_pred_total (Rnd_N0_pt F)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F)","proofString":"assert (H : round_pred_total (Rnd_NG_pt F (fun a b => (Rabs b <= Rabs a)%R))).\napply satisfies_any_imp_NG.\napply Hany.\nintros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nright.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy.\nleft.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le.\nintros x.\ndestruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_N0_NG_pt.\napply Hf.\napply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a)).","conclusion":"round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F)","proofString":"apply satisfies_any_imp_NG.\napply Hany.\nintros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nright.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy.\nleft.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) : satisfies_any F.","conclusion":"satisfies_any F","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F)","proofString":"apply Hany."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) : NG_existence_prop F (fun a b : R => Rabs b <= Rabs a).","conclusion":"NG_existence_prop F (fun a b : R => Rabs b <= Rabs a)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F)","proofString":"intros x d u Hf Hd Hu.\ndestruct (Rle_lt_dec 0 x) as [Hx|Hx].\nright.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy.\nleft.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) : Rabs u <= Rabs x \\/ Rabs d <= Rabs x.","conclusion":"Rabs u <= Rabs x \\/ Rabs d <= Rabs x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u)","proofString":"destruct (Rle_lt_dec 0 x) as [Hx|Hx].\nright.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy.\nleft.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : Rabs u <= Rabs x \\/ Rabs d <= Rabs x.","conclusion":"Rabs u <= Rabs x \\/ Rabs d <= Rabs x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"right.\nrewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : Rabs d <= Rabs x.","conclusion":"Rabs d <= Rabs x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq with (1 := Hx).\nrewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : Rabs d <= x.","conclusion":"Rabs d <= x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"rewrite Rabs_pos_eq.\napply Hd.\napply Hd; try easy."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : d <= x.","conclusion":"d <= x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"apply Hd."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x) : 0 <= d.","conclusion":"0 <= d","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : 0 <= x)","proofString":"apply Hd; try easy."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : Rabs u <= Rabs x \\/ Rabs d <= Rabs x.","conclusion":"Rabs u <= Rabs x \\/ Rabs d <= Rabs x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"left.\nrewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : Rabs u <= Rabs x.","conclusion":"Rabs u <= Rabs x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"rewrite Rabs_left with (1 := Hx).\nrewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : Rabs u <= - x.","conclusion":"Rabs u <= - x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"rewrite Rabs_left1.\napply Ropp_le_contravar.\napply Hu.\napply Hu; try easy.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : - u <= - x.","conclusion":"- u <= - x","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"apply Ropp_le_contravar.\napply Hu."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : x <= u.","conclusion":"x <= u","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"apply Hu."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : u <= 0.","conclusion":"u <= 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"apply Hu; try easy.\nnow apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0) : x <= 0.","conclusion":"x <= 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (x d u : R) (Hf : ~ F x) (Hd : Rnd_DN_pt F x d) (Hu : Rnd_UP_pt F x u) (Hx : x < 0)","proofString":"now apply Rlt_le."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) : round_pred_total (Rnd_N0_pt F).","conclusion":"round_pred_total (Rnd_N0_pt F)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a)))","proofString":"intros x.\ndestruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_N0_NG_pt.\napply Hf.\napply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x : R) : exists f : R, Rnd_N0_pt F x f.","conclusion":"exists f : R, Rnd_N0_pt F x f","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x : R)","proofString":"destruct (H x) as (f, Hf).\nexists f.\napply <- Rnd_N0_NG_pt.\napply Hf.\napply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f) : exists f0 : R, Rnd_N0_pt F x f0.","conclusion":"exists f0 : R, Rnd_N0_pt F x f0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f)","proofString":"exists f.\napply <- Rnd_N0_NG_pt.\napply Hf.\napply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f) : Rnd_N0_pt F x f.","conclusion":"Rnd_N0_pt F x f","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f)","proofString":"apply <- Rnd_N0_NG_pt.\napply Hf.\napply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f) : Rnd_NG_pt F (fun x0 f0 : R => Rabs f0 <= Rabs x0) x f.","conclusion":"Rnd_NG_pt F (fun x0 f0 : R => Rabs f0 <= Rabs x0) x f","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f)","proofString":"apply Hf."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) (H : round_pred_total (Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a))) (x f : R) (Hf : Rnd_NG_pt F (fun a b : R => Rabs b <= Rabs a) x f)","proofString":"apply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) : round_pred_monotone (Rnd_N0_pt F).","conclusion":"round_pred_monotone (Rnd_N0_pt F)","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F)","proofString":"apply Rnd_N0_pt_monotone.\napply HF0."},{"statement":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F) : F 0.","conclusion":"F 0","hypotheses":"(F : R -> Prop) (HF0 : F 0) (Hany : satisfies_any F)","proofString":"apply HF0."}]}