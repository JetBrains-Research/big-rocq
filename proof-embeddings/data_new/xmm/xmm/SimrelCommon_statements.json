{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/xmm/src/xmm/SimrelCommon.v","fileSamples":[{"statement":"(INIT : (fun a : actid => is_init a) ⊆₁ E_t) : (fun a : actid => is_init a) ⊆₁ mapper ↑₁ (fun a : actid => is_init a).","conclusion":"(fun a : actid => is_init a) ⊆₁ mapper ↑₁ (fun a : actid => is_init a)","hypotheses":"(INIT : (fun a : actid => is_init a) ⊆₁ E_t)","proofString":"apply (fixset_set_fixpoint (sico_init SICO))."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ rf_t ⨾ ⦗E_t⦘) ⊆ (mapper ↑₁ E_t) × (mapper ↑₁ E_t).","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ rf_t ⨾ ⦗E_t⦘) ⊆ (mapper ↑₁ E_t) × (mapper ↑₁ E_t)","hypotheses":"","proofString":"basic_solver."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ co_t ⨾ ⦗E_t⦘) ⊆ (mapper ↑₁ E_t) × (mapper ↑₁ E_t).","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ co_t ⨾ ⦗E_t⦘) ⊆ (mapper ↑₁ E_t) × (mapper ↑₁ E_t)","hypotheses":"","proofString":"basic_solver."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ rmw_t ⨾ ⦗E_t⦘) ⊆ (mapper ↑₁ E_t) × (mapper ↑₁ E_t).","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ rmw_t ⨾ ⦗E_t⦘) ⊆ (mapper ↑₁ E_t) × (mapper ↑₁ E_t)","hypotheses":"","proofString":"basic_solver."},{"statement":"(e : actid) (INE : E_t e) : (lab_s ∘ mapper) e = lab_s (mapper e).","conclusion":"(lab_s ∘ mapper) e = lab_s (mapper e)","hypotheses":"(e : actid) (INE : E_t e)","proofString":"unfold compose.\nreflexivity."},{"statement":"(e : actid) (INE : E_t e) : lab_s (mapper e) = lab_s (mapper e).","conclusion":"lab_s (mapper e) = lab_s (mapper e)","hypotheses":"(e : actid) (INE : E_t e)","proofString":"reflexivity."},{"statement":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) : mapper ↑₁ E_t ∩₁ R_s ⊆₁ codom_rel (mapper ↑ rf_t).","conclusion":"mapper ↑₁ E_t ∩₁ R_s ⊆₁ codom_rel (mapper ↑ rf_t)","hypotheses":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t)","proofString":"rewrite <- set_collect_codom, <- RFC.\nunfolder.\nintros x ((x' & INE & XEQ) & ISR).\nexists x'.\nsplits; auto.\nsubst x.\nunfold is_r in *.\nrewrite sico_lab'; auto."},{"statement":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) : mapper ↑₁ E_t ∩₁ R_s ⊆₁ mapper ↑₁ (E_t ∩₁ R_t).","conclusion":"mapper ↑₁ E_t ∩₁ R_s ⊆₁ mapper ↑₁ (E_t ∩₁ R_t)","hypotheses":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t)","proofString":"unfolder.\nintros x ((x' & INE & XEQ) & ISR).\nexists x'.\nsplits; auto.\nsubst x.\nunfold is_r in *.\nrewrite sico_lab'; auto."},{"statement":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) : forall x : actid,\n(exists y : actid, E_t y /\\ mapper y = x) /\\ is_r lab_s x ->\nexists y : actid, (E_t y /\\ is_r lab_t y) /\\ mapper y = x.","conclusion":"forall x : actid,\n(exists y : actid, E_t y /\\ mapper y = x) /\\ is_r lab_s x ->\nexists y : actid, (E_t y /\\ is_r lab_t y) /\\ mapper y = x","hypotheses":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t)","proofString":"intros x ((x' & INE & XEQ) & ISR).\nexists x'.\nsplits; auto.\nsubst x.\nunfold is_r in *.\nrewrite sico_lab'; auto."},{"statement":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x x' : actid) (INE : E_t x') (XEQ : mapper x' = x) (ISR : is_r lab_s x) : exists y : actid, (E_t y /\\ is_r lab_t y) /\\ mapper y = x.","conclusion":"exists y : actid, (E_t y /\\ is_r lab_t y) /\\ mapper y = x","hypotheses":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x x' : actid) (INE : E_t x') (XEQ : mapper x' = x) (ISR : is_r lab_s x)","proofString":"exists x'.\nsplits; auto.\nsubst x.\nunfold is_r in *.\nrewrite sico_lab'; auto."},{"statement":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x x' : actid) (INE : E_t x') (XEQ : mapper x' = x) (ISR : is_r lab_s x) : (E_t x' /\\ is_r lab_t x') /\\ mapper x' = x.","conclusion":"(E_t x' /\\ is_r lab_t x') /\\ mapper x' = x","hypotheses":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x x' : actid) (INE : E_t x') (XEQ : mapper x' = x) (ISR : is_r lab_s x)","proofString":"splits; auto.\nsubst x.\nunfold is_r in *.\nrewrite sico_lab'; auto."},{"statement":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x x' : actid) (INE : E_t x') (XEQ : mapper x' = x) (ISR : is_r lab_s x) : is_r lab_t x'.","conclusion":"is_r lab_t x'","hypotheses":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x x' : actid) (INE : E_t x') (XEQ : mapper x' = x) (ISR : is_r lab_s x)","proofString":"subst x.\nunfold is_r in *.\nrewrite sico_lab'; auto."},{"statement":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x' : actid) (INE : E_t x') (ISR : is_r lab_s (mapper x')) : is_r lab_t x'.","conclusion":"is_r lab_t x'","hypotheses":"(RFC : E_t ∩₁ R_t ⊆₁ codom_rel rf_t) (x' : actid) (INE : E_t x') (ISR : is_r lab_s (mapper x'))","proofString":"unfold is_r in *.\nrewrite sico_lab'; auto."},{"statement":"(RFC : E_t\n∩₁ (fun a : actid =>\n    match lab_t a with\n    | Aload _ _ _ _ => true\n    | _ => false\n    end) ⊆₁ codom_rel rf_t) (x' : actid) (INE : E_t x') (ISR : match lab_s (mapper x') with\n| Aload _ _ _ _ => true\n| _ => false\nend) : match lab_t x' with\n| Aload _ _ _ _ => true\n| _ => false\nend.","conclusion":"match lab_t x' with\n| Aload _ _ _ _ => true\n| _ => false\nend","hypotheses":"(RFC : E_t\n∩₁ (fun a : actid =>\n    match lab_t a with\n    | Aload _ _ _ _ => true\n    | _ => false\n    end) ⊆₁ codom_rel rf_t) (x' : actid) (INE : E_t x') (ISR : match lab_s (mapper x') with\n| Aload _ _ _ _ => true\n| _ => false\nend)","proofString":"rewrite sico_lab'; auto."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ (⦗W_t⦘ ⨾ rf_t ⨾ ⦗R_t⦘) ⨾ ⦗E_t⦘) ⊆ W_s × R_s.","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ (⦗W_t⦘ ⨾ rf_t ⨾ ⦗R_t⦘) ⨾ ⦗E_t⦘) ⊆ W_s × R_s","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nunfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"forall x y : actid,\n(exists x' y' : actid,\n   ((E_t x' /\\ is_w lab_t x') /\\ rf_t x' y' /\\ is_r lab_t y' /\\ E_t y') /\\\n   mapper x' = x /\\ mapper y' = y) -> is_w lab_s x /\\ is_r lab_s y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   ((E_t x' /\\ is_w lab_t x') /\\ rf_t x' y' /\\ is_r lab_t y' /\\ E_t y') /\\\n   mapper x' = x /\\ mapper y' = y) -> is_w lab_s x /\\ is_r lab_s y","hypotheses":"","proofString":"ins.\ndesf.\nunfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x y : actid) (H : exists x' y' : actid,\n  ((E_t x' /\\ is_w lab_t x') /\\ rf_t x' y' /\\ is_r lab_t y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y) : is_w lab_s x /\\ is_r lab_s y.","conclusion":"is_w lab_s x /\\ is_r lab_s y","hypotheses":"(x y : actid) (H : exists x' y' : actid,\n  ((E_t x' /\\ is_w lab_t x') /\\ rf_t x' y' /\\ is_r lab_t y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y)","proofString":"desf.\nunfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H5 : is_w lab_t x') (H2 : rf_t x' y') (H3 : is_r lab_t y') (H4 : E_t y') : is_w lab_s (mapper x') /\\ is_r lab_s (mapper y').","conclusion":"is_w lab_s (mapper x') /\\ is_r lab_s (mapper y')","hypotheses":"(x' y' : actid) (H : E_t x') (H5 : is_w lab_t x') (H2 : rf_t x' y') (H3 : is_r lab_t y') (H4 : E_t y')","proofString":"unfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ (⦗W_t⦘ ⨾ co_t ⨾ ⦗W_t⦘) ⨾ ⦗E_t⦘) ⊆ W_s × W_s.","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ (⦗W_t⦘ ⨾ co_t ⨾ ⦗W_t⦘) ⨾ ⦗E_t⦘) ⊆ W_s × W_s","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nunfold is_w in *.\nrewrite <- !sico_lab'; auto."},{"statement":"forall x y : actid,\n(exists x' y' : actid,\n   ((E_t x' /\\ is_w lab_t x') /\\ co_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n   mapper x' = x /\\ mapper y' = y) -> is_w lab_s x /\\ is_w lab_s y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   ((E_t x' /\\ is_w lab_t x') /\\ co_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n   mapper x' = x /\\ mapper y' = y) -> is_w lab_s x /\\ is_w lab_s y","hypotheses":"","proofString":"ins.\ndesf.\nunfold is_w in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x y : actid) (H : exists x' y' : actid,\n  ((E_t x' /\\ is_w lab_t x') /\\ co_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y) : is_w lab_s x /\\ is_w lab_s y.","conclusion":"is_w lab_s x /\\ is_w lab_s y","hypotheses":"(x y : actid) (H : exists x' y' : actid,\n  ((E_t x' /\\ is_w lab_t x') /\\ co_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y)","proofString":"desf.\nunfold is_w in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H5 : is_w lab_t x') (H2 : co_t x' y') (H3 : is_w lab_t y') (H4 : E_t y') : is_w lab_s (mapper x') /\\ is_w lab_s (mapper y').","conclusion":"is_w lab_s (mapper x') /\\ is_w lab_s (mapper y')","hypotheses":"(x' y' : actid) (H : E_t x') (H5 : is_w lab_t x') (H2 : co_t x' y') (H3 : is_w lab_t y') (H4 : E_t y')","proofString":"unfold is_w in *.\nrewrite <- !sico_lab'; auto."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ (⦗R_t⦘ ⨾ rmw_t ⨾ ⦗W_t⦘) ⨾ ⦗E_t⦘) ⊆ R_s × W_s.","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ (⦗R_t⦘ ⨾ rmw_t ⨾ ⦗W_t⦘) ⨾ ⦗E_t⦘) ⊆ R_s × W_s","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nunfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"forall x y : actid,\n(exists x' y' : actid,\n   ((E_t x' /\\ is_r lab_t x') /\\ rmw_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n   mapper x' = x /\\ mapper y' = y) -> is_r lab_s x /\\ is_w lab_s y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   ((E_t x' /\\ is_r lab_t x') /\\ rmw_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n   mapper x' = x /\\ mapper y' = y) -> is_r lab_s x /\\ is_w lab_s y","hypotheses":"","proofString":"ins.\ndesf.\nunfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x y : actid) (H : exists x' y' : actid,\n  ((E_t x' /\\ is_r lab_t x') /\\ rmw_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y) : is_r lab_s x /\\ is_w lab_s y.","conclusion":"is_r lab_s x /\\ is_w lab_s y","hypotheses":"(x y : actid) (H : exists x' y' : actid,\n  ((E_t x' /\\ is_r lab_t x') /\\ rmw_t x' y' /\\ is_w lab_t y' /\\ E_t y') /\\\n  mapper x' = x /\\ mapper y' = y)","proofString":"desf.\nunfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H5 : is_r lab_t x') (H2 : rmw_t x' y') (H3 : is_w lab_t y') (H4 : E_t y') : is_r lab_s (mapper x') /\\ is_w lab_s (mapper y').","conclusion":"is_r lab_s (mapper x') /\\ is_w lab_s (mapper y')","hypotheses":"(x' y' : actid) (H : E_t x') (H5 : is_r lab_t x') (H2 : rmw_t x' y') (H3 : is_w lab_t y') (H4 : E_t y')","proofString":"unfold is_w, is_r in *.\nrewrite <- !sico_lab'; auto."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ same_loc_t ⨾ ⦗E_t⦘) ⊆ same_loc_s.","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ same_loc_t ⨾ ⦗E_t⦘) ⊆ same_loc_s","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_loc_s x y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_loc_s x y","hypotheses":"","proofString":"ins.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) : same_loc_s x y.","conclusion":"same_loc_s x y","hypotheses":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y)","proofString":"desf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : same_loc_t x' y') (H3 : E_t y') : same_loc_s (mapper x') (mapper y').","conclusion":"same_loc_s (mapper x') (mapper y')","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : same_loc_t x' y') (H3 : E_t y')","proofString":"unfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : match lab_t x' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (H3 : E_t y') : match lab_s (mapper x') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s (mapper x') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : match lab_t x' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (H3 : E_t y')","proofString":"rewrite <- !sico_lab'; auto."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ same_loc_t ⨾ ⦗E_t⦘) ⊆ same_loc_s.","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ same_loc_t ⨾ ⦗E_t⦘) ⊆ same_loc_s","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_loc_s x y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_loc_s x y","hypotheses":"","proofString":"ins.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) : same_loc_s x y.","conclusion":"same_loc_s x y","hypotheses":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y)","proofString":"desf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : same_loc_t x' y') (H3 : E_t y') : same_loc_s (mapper x') (mapper y').","conclusion":"same_loc_s (mapper x') (mapper y')","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : same_loc_t x' y') (H3 : E_t y')","proofString":"unfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : match lab_t x' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (H3 : E_t y') : match lab_s (mapper x') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s (mapper x') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : match lab_t x' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (H3 : E_t y')","proofString":"rewrite <- !sico_lab'; auto."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ same_loc_t ⨾ ⦗E_t⦘) ⊆ same_loc_s.","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ same_loc_t ⨾ ⦗E_t⦘) ⊆ same_loc_s","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_loc_s x y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_loc_s x y","hypotheses":"","proofString":"ins.\ndesf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) : same_loc_s x y.","conclusion":"same_loc_s x y","hypotheses":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ same_loc_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y)","proofString":"desf.\nunfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : same_loc_t x' y') (H3 : E_t y') : same_loc_s (mapper x') (mapper y').","conclusion":"same_loc_s (mapper x') (mapper y')","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : same_loc_t x' y') (H3 : E_t y')","proofString":"unfold same_loc, loc in *.\nrewrite <- !sico_lab'; auto."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : match lab_t x' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (H3 : E_t y') : match lab_s (mapper x') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend.","conclusion":"match lab_s (mapper x') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : match lab_t x' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ l _ | Astore _ _ l _ => Some l\n| Afence _ => None\nend) (H3 : E_t y')","proofString":"rewrite <- !sico_lab'; auto."},{"statement":"mapper ↑ (⦗E_t⦘ ⨾ rf_t ⨾ ⦗E_t⦘) ⊆ same_val_s.","conclusion":"mapper ↑ (⦗E_t⦘ ⨾ rf_t ⨾ ⦗E_t⦘) ⊆ same_val_s","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\nunfold same_val, val in *.\nrewrite <- !sico_lab'; auto.\nnow apply WF_T."},{"statement":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ rf_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_val_s x y.","conclusion":"forall x y : actid,\n(exists x' y' : actid,\n   (E_t x' /\\ rf_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) ->\nsame_val_s x y","hypotheses":"","proofString":"ins.\ndesf.\nunfold same_val, val in *.\nrewrite <- !sico_lab'; auto.\nnow apply WF_T."},{"statement":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ rf_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y) : same_val_s x y.","conclusion":"same_val_s x y","hypotheses":"(x y : actid) (H : exists x' y' : actid,\n  (E_t x' /\\ rf_t x' y' /\\ E_t y') /\\ mapper x' = x /\\ mapper y' = y)","proofString":"desf.\nunfold same_val, val in *.\nrewrite <- !sico_lab'; auto.\nnow apply WF_T."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : rf_t x' y') (H3 : E_t y') : same_val_s (mapper x') (mapper y').","conclusion":"same_val_s (mapper x') (mapper y')","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : rf_t x' y') (H3 : E_t y')","proofString":"unfold same_val, val in *.\nrewrite <- !sico_lab'; auto.\nnow apply WF_T."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : rf_t x' y') (H3 : E_t y') : match lab_s (mapper x') with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend.","conclusion":"match lab_s (mapper x') with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_s (mapper y') with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : rf_t x' y') (H3 : E_t y')","proofString":"rewrite <- !sico_lab'; auto.\nnow apply WF_T."},{"statement":"(x' y' : actid) (H : E_t x') (H2 : rf_t x' y') (H3 : E_t y') : match lab_t x' with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend.","conclusion":"match lab_t x' with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab_t y' with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend","hypotheses":"(x' y' : actid) (H : E_t x') (H2 : rf_t x' y') (H3 : E_t y')","proofString":"now apply WF_T."},{"statement":"functional (mapper ↑ (⦗E_t⦘ ⨾ rf_t ⨾ ⦗E_t⦘))⁻¹.","conclusion":"functional (mapper ↑ (⦗E_t⦘ ⨾ rf_t ⨾ ⦗E_t⦘))⁻¹","hypotheses":"","proofString":"rewrite <- collect_rel_transp, <- restr_relE,          <- restr_transp.\napply functional_collect_rel_inj; [apply SICO|].\nrewrite restr_transp, restr_relE, <- (wf_rfE WF_T).\napply WF_T."},{"statement":"functional (mapper ↑ restr_rel E_t rf_t⁻¹).","conclusion":"functional (mapper ↑ restr_rel E_t rf_t⁻¹)","hypotheses":"","proofString":"apply functional_collect_rel_inj; [apply SICO|].\nrewrite restr_transp, restr_relE, <- (wf_rfE WF_T).\napply WF_T."},{"statement":"functional (restr_rel E_t rf_t⁻¹).","conclusion":"functional (restr_rel E_t rf_t⁻¹)","hypotheses":"","proofString":"rewrite restr_transp, restr_relE, <- (wf_rfE WF_T).\napply WF_T."},{"statement":"functional rf_t⁻¹.","conclusion":"functional rf_t⁻¹","hypotheses":"","proofString":"apply WF_T."},{"statement":"irreflexive (mapper ↑ restr_rel E_t co_t).","conclusion":"irreflexive (mapper ↑ restr_rel E_t co_t)","hypotheses":"","proofString":"apply collect_rel_irr_inj; [apply SICO|].\nrewrite restr_relE, <- (wf_coE WF_T).\napply WF_T."},{"statement":"irreflexive (restr_rel E_t co_t).","conclusion":"irreflexive (restr_rel E_t co_t)","hypotheses":"","proofString":"rewrite restr_relE, <- (wf_coE WF_T).\napply WF_T."},{"statement":"irreflexive co_t.","conclusion":"irreflexive co_t","hypotheses":"","proofString":"apply WF_T."},{"statement":"transitive (mapper ↑ restr_rel E_t co_t).","conclusion":"transitive (mapper ↑ restr_rel E_t co_t)","hypotheses":"","proofString":"apply transitive_collect_rel_inj; [apply SICO|].\nrewrite restr_relE, <- (wf_coE WF_T).\napply WF_T."},{"statement":"transitive (restr_rel E_t co_t).","conclusion":"transitive (restr_rel E_t co_t)","hypotheses":"","proofString":"rewrite restr_relE, <- (wf_coE WF_T).\napply WF_T."},{"statement":"transitive co_t.","conclusion":"transitive co_t","hypotheses":"","proofString":"apply WF_T."},{"statement":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t) : eq_dom s (upd mapper e e') mapper.","conclusion":"eq_dom s (upd mapper e e') mapper","hypotheses":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t)","proofString":"rewrite SET.\nunfolder.\nintros.\nnow rewrite updo by congruence."},{"statement":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t) : eq_dom E_t (upd mapper e e') mapper.","conclusion":"eq_dom E_t (upd mapper e e') mapper","hypotheses":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t)","proofString":"unfolder.\nintros.\nnow rewrite updo by congruence."},{"statement":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t) : forall x : actid, E_t x -> upd mapper e e' x = mapper x.","conclusion":"forall x : actid, E_t x -> upd mapper e e' x = mapper x","hypotheses":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t)","proofString":"intros.\nnow rewrite updo by congruence."},{"statement":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t) (x : actid) (DX : E_t x) : upd mapper e e' x = mapper x.","conclusion":"upd mapper e e' x = mapper x","hypotheses":"(e e' : actid) (s : actid -> Prop) (NINE : ~ E_t e) (SET : s ⊆₁ E_t) (x : actid) (DX : E_t x)","proofString":"now rewrite updo by congruence."}]}