{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Prop/Sterbenz.v","fileSamples":[{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) : format (x + y).","proofString":"destruct (Req_dec (x + y) 0) as [Zxy|Zxy].\nrewrite Zxy.\napply generic_format_0.\ndestruct (Req_dec x R0) as [Zx|Zx].\nnow rewrite Zx, Rplus_0_l.\ndestruct (Req_dec y R0) as [Zy|Zy].\nnow rewrite Zy, Rplus_0_r.\ndestruct Hxy as [Hxy|Hxy].\nrevert Hxy.\ndestruct (mag beta x) as (ex, Ex).\nsimpl.\nspecialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt.\napply generic_format_abs_inv.\nrewrite Hxy.\napply generic_format_bpow.\napply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R = 0%R) : format (x + y).","proofString":"rewrite Zxy.\napply generic_format_0."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R = 0%R) : format 0.","proofString":"apply generic_format_0."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R <> 0%R) : format (x + y).","proofString":"destruct (Req_dec x R0) as [Zx|Zx].\nnow rewrite Zx, Rplus_0_l.\ndestruct (Req_dec y R0) as [Zy|Zy].\nnow rewrite Zy, Rplus_0_r.\ndestruct Hxy as [Hxy|Hxy].\nrevert Hxy.\ndestruct (mag beta x) as (ex, Ex).\nsimpl.\nspecialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt.\napply generic_format_abs_inv.\nrewrite Hxy.\napply generic_format_bpow.\napply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R <> 0%R) (Zx : x = R0) : format (x + y).","proofString":"now rewrite Zx, Rplus_0_l."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) : format (x + y).","proofString":"destruct (Req_dec y R0) as [Zy|Zy].\nnow rewrite Zy, Rplus_0_r.\ndestruct Hxy as [Hxy|Hxy].\nrevert Hxy.\ndestruct (mag beta x) as (ex, Ex).\nsimpl.\nspecialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt.\napply generic_format_abs_inv.\nrewrite Hxy.\napply generic_format_bpow.\napply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y = R0) : format (x + y).","proofString":"now rewrite Zy, Rplus_0_r."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : format (x + y).","proofString":"destruct Hxy as [Hxy|Hxy].\nrevert Hxy.\ndestruct (mag beta x) as (ex, Ex).\nsimpl.\nspecialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt.\napply generic_format_abs_inv.\nrewrite Hxy.\napply generic_format_bpow.\napply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) < bpow (Z.min (mag beta x) (mag beta y)))%R) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : format (x + y).","proofString":"revert Hxy.\ndestruct (mag beta x) as (ex, Ex).\nsimpl.\nspecialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : (Rabs (x + y) < bpow (Z.min (mag beta x) (mag beta y)))%R -> format (x + y).","proofString":"destruct (mag beta x) as (ex, Ex).\nsimpl.\nspecialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs (x + y) < bpow (Z.min (Build_mag_prop beta x ex Ex) (mag beta y)))%R ->\nformat (x + y).","proofString":"simpl.\nspecialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs (x + y) < bpow (Z.min ex (mag beta y)))%R -> format (x + y).","proofString":"specialize (Ex Zx).\ndestruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs (x + y) < bpow (Z.min ex (mag beta y)))%R -> format (x + y).","proofString":"destruct (mag beta y) as (ey, Ey).\nsimpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (ey : Z) (Ey : y <> 0%R -> (bpow (ey - 1) <= Rabs y < bpow ey)%R) : (Rabs (x + y) < bpow (Z.min ex (Build_mag_prop beta y ey Ey)))%R ->\nformat (x + y).","proofString":"simpl.\nspecialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (ey : Z) (Ey : y <> 0%R -> (bpow (ey - 1) <= Rabs y < bpow ey)%R) : (Rabs (x + y) < bpow (Z.min ex ey))%R -> format (x + y).","proofString":"specialize (Ey Zy).\nintros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (ey : Z) (Ey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) : (Rabs (x + y) < bpow (Z.min ex ey))%R -> format (x + y).","proofString":"intros Hxy.\nset (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (ey : Z) (Ey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hxy : (Rabs (x + y) < bpow (Z.min ex ey))%R) : format (x + y).","proofString":"set (fx := Float beta (Ztrunc (scaled_mantissa beta fexp x)) (fexp ex)).\nassert (Hx: x = F2R fx).\nrewrite Fx at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ex).\nset (fy := Float beta (Ztrunc (scaled_mantissa beta fexp y)) (fexp ey)).\nassert (Hy: y = F2R fy).\nrewrite Fy at 1.\nunfold cexp.\nnow rewrite mag_unique with (1 := Ey).\nrewrite Hx, Hy.\nrewrite <- F2R_plus.\napply generic_format_F2R.\nintros _.\ncase_eq (Fplus fx fy).\nintros mxy exy Pxy; simpl.\nrewrite <- Pxy, F2R_plus, <- Hx, <- Hy.\nunfold cexp.\nreplace exy with (fexp (Z.min ex ey)).\napply monotone_exp.\nnow apply mag_le_bpow.\nreplace exy with (Fexp (Fplus fx fy)) by exact (f_equal Fexp Pxy).\nrewrite Fexp_Fplus.\nsimpl.\nclear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (ey : Z) (Ey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hxy : (Rabs (x + y) < bpow (Z.min ex ey))%R) (fx : float beta) (Hx : x = F2R fx) (fy : float beta) (Hy : y = F2R fy) (mxy exy : Z) (Pxy : Fplus fx fy = {| Fnum := mxy; Fexp := exy |}) : (fexp (mag beta (x + y)) <= fexp (Z.min ex ey))%Z.","proofString":"apply monotone_exp.\nnow apply mag_le_bpow."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (ey : Z) (Ey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hxy : (Rabs (x + y) < bpow (Z.min ex ey))%R) (fx : float beta) (Hx : x = F2R fx) (fy : float beta) (Hy : y = F2R fy) (mxy exy : Z) (Pxy : Fplus fx fy = {| Fnum := mxy; Fexp := exy |}) : (mag beta (x + y) <= Z.min ex ey)%Z.","proofString":"now apply mag_le_bpow."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) (ex : Z) (Ex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (ey : Z) (Ey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hxy : (Rabs (x + y) < bpow (Z.min ex ey))%R) (fx : float beta) (Hx : x = F2R fx) (fy : float beta) (Hy : y = F2R fy) (mxy exy : Z) (Pxy : Fplus fx fy = {| Fnum := mxy; Fexp := exy |}) : fexp (Z.min ex ey) = Z.min (fexp ex) (fexp ey).","proofString":"clear -monotone_exp.\napply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(ex ey : Z) : fexp (Z.min ex ey) = Z.min (fexp ex) (fexp ey).","proofString":"apply sym_eq.\ndestruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(ex ey : Z) : Z.min (fexp ex) (fexp ey) = fexp (Z.min ex ey).","proofString":"destruct (Zmin_spec ex ey) as [(H1,H2)|(H1,H2)] ; rewrite H2.\napply Z.min_l.\nnow apply monotone_exp.\napply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(ex ey : Z) (H1 : (ex <= ey)%Z) (H2 : Z.min ex ey = ex) : Z.min (fexp ex) (fexp ey) = fexp ex.","proofString":"apply Z.min_l.\nnow apply monotone_exp."},{"statement":"(ex ey : Z) (H1 : (ex <= ey)%Z) (H2 : Z.min ex ey = ex) : (fexp ex <= fexp ey)%Z.","proofString":"now apply monotone_exp."},{"statement":"(ex ey : Z) (H1 : (ex > ey)%Z) (H2 : Z.min ex ey = ey) : Z.min (fexp ex) (fexp ey) = fexp ey.","proofString":"apply Z.min_r.\napply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(ex ey : Z) (H1 : (ex > ey)%Z) (H2 : Z.min ex ey = ey) : (fexp ey <= fexp ex)%Z.","proofString":"apply monotone_exp.\napply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(ex ey : Z) (H1 : (ex > ey)%Z) (H2 : Z.min ex ey = ey) : (ey <= ex)%Z.","proofString":"apply Zlt_le_weak.\nnow apply Z.gt_lt."},{"statement":"(ex ey : Z) (H1 : (ex > ey)%Z) (H2 : Z.min ex ey = ey) : (ey < ex)%Z.","proofString":"now apply Z.gt_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : Rabs (x + y) = bpow (Z.min (mag beta x) (mag beta y))) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : format (x + y).","proofString":"apply generic_format_abs_inv.\nrewrite Hxy.\napply generic_format_bpow.\napply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : Rabs (x + y) = bpow (Z.min (mag beta x) (mag beta y))) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : format (Rabs (x + y)).","proofString":"rewrite Hxy.\napply generic_format_bpow.\napply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : Rabs (x + y) = bpow (Z.min (mag beta x) (mag beta y))) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : format (bpow (Z.min (mag beta x) (mag beta y))).","proofString":"apply generic_format_bpow.\napply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : Rabs (x + y) = bpow (Z.min (mag beta x) (mag beta y))) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : (fexp (Z.min (mag beta x) (mag beta y) + 1) <=\n Z.min (mag beta x) (mag beta y))%Z.","proofString":"apply valid_exp.\ncase (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : Rabs (x + y) = bpow (Z.min (mag beta x) (mag beta y))) (Zxy : (x + y)%R <> 0%R) (Zx : x <> R0) (Zy : y <> R0) : (fexp (Z.min (mag beta x) (mag beta y)) < Z.min (mag beta x) (mag beta y))%Z.","proofString":"case (Zmin_spec (mag beta x) (mag beta y)); intros (H1,H2);   rewrite H2; now apply mag_generic_gt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) : format (x + y).","proofString":"destruct (Req_dec x R0) as [Zx|Zx].\nnow rewrite Zx, Rplus_0_l.\ndestruct (Req_dec y R0) as [Zy|Zy].\nnow rewrite Zy, Rplus_0_r.\napply generic_format_plus ; try assumption.\napply Rle_trans with (1 := Hxy).\nunfold Rmin.\ndestruct (Rle_dec (Rabs x) (Rabs y)) as [Hxy'|Hxy'].\nrewrite Z.min_l.\ndestruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx.\nnow apply mag_le_abs.\nrewrite Z.min_r.\ndestruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy.\napply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x = R0) : format (x + y).","proofString":"now rewrite Zx, Rplus_0_l."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) : format (x + y).","proofString":"destruct (Req_dec y R0) as [Zy|Zy].\nnow rewrite Zy, Rplus_0_r.\napply generic_format_plus ; try assumption.\napply Rle_trans with (1 := Hxy).\nunfold Rmin.\ndestruct (Rle_dec (Rabs x) (Rabs y)) as [Hxy'|Hxy'].\nrewrite Z.min_l.\ndestruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx.\nnow apply mag_le_abs.\nrewrite Z.min_r.\ndestruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy.\napply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y = R0) : format (x + y).","proofString":"now rewrite Zy, Rplus_0_r."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) : format (x + y).","proofString":"apply generic_format_plus ; try assumption.\napply Rle_trans with (1 := Hxy).\nunfold Rmin.\ndestruct (Rle_dec (Rabs x) (Rabs y)) as [Hxy'|Hxy'].\nrewrite Z.min_l.\ndestruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx.\nnow apply mag_le_abs.\nrewrite Z.min_r.\ndestruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy.\napply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) : (Rabs (x + y) <= bpow (Z.min (mag beta x) (mag beta y)))%R.","proofString":"apply Rle_trans with (1 := Hxy).\nunfold Rmin.\ndestruct (Rle_dec (Rabs x) (Rabs y)) as [Hxy'|Hxy'].\nrewrite Z.min_l.\ndestruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx.\nnow apply mag_le_abs.\nrewrite Z.min_r.\ndestruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy.\napply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) : (Rmin (Rabs x) (Rabs y) <= bpow (Z.min (mag beta x) (mag beta y)))%R.","proofString":"unfold Rmin.\ndestruct (Rle_dec (Rabs x) (Rabs y)) as [Hxy'|Hxy'].\nrewrite Z.min_l.\ndestruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx.\nnow apply mag_le_abs.\nrewrite Z.min_r.\ndestruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy.\napply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) : ((if Rle_dec (Rabs x) (Rabs y) then Rabs x else Rabs y) <=\n bpow (Z.min (mag beta x) (mag beta y)))%R.","proofString":"destruct (Rle_dec (Rabs x) (Rabs y)) as [Hxy'|Hxy'].\nrewrite Z.min_l.\ndestruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx.\nnow apply mag_le_abs.\nrewrite Z.min_r.\ndestruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy.\napply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : (Rabs x <= Rabs y)%R) : (Rabs x <= bpow (Z.min (mag beta x) (mag beta y)))%R.","proofString":"rewrite Z.min_l.\ndestruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx.\nnow apply mag_le_abs."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : (Rabs x <= Rabs y)%R) : (Rabs x <= bpow (mag beta x))%R.","proofString":"destruct (mag beta x) as (ex, Hx).\napply Rlt_le; now apply Hx."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : (Rabs x <= Rabs y)%R) (ex : Z) (Hx : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x <= bpow (Build_mag_prop beta x ex Hx))%R.","proofString":"apply Rlt_le; now apply Hx."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : (Rabs x <= Rabs y)%R) : (mag beta x <= mag beta y)%Z.","proofString":"now apply mag_le_abs."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : ~ (Rabs x <= Rabs y)%R) : (Rabs y <= bpow (Z.min (mag beta x) (mag beta y)))%R.","proofString":"rewrite Z.min_r.\ndestruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy.\napply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : ~ (Rabs x <= Rabs y)%R) : (Rabs y <= bpow (mag beta y))%R.","proofString":"destruct (mag beta y) as (ex, Hy).\napply Rlt_le; now apply Hy."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : ~ (Rabs x <= Rabs y)%R) (ex : Z) (Hy : y <> 0%R -> (bpow (ex - 1) <= Rabs y < bpow ex)%R) : (Rabs y <= bpow (Build_mag_prop beta y ex Hy))%R.","proofString":"apply Rlt_le; now apply Hy."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : ~ (Rabs x <= Rabs y)%R) : (mag beta y <= mag beta x)%Z.","proofString":"apply mag_le_abs.\nexact Zy.\napply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : ~ (Rabs x <= Rabs y)%R) : y <> 0%R.","proofString":"exact Zy."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : ~ (Rabs x <= Rabs y)%R) : (Rabs y <= Rabs x)%R.","proofString":"apply Rlt_le.\nnow apply Rnot_le_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Hxy : (Rabs (x + y) <= Rmin (Rabs x) (Rabs y))%R) (Zx : x <> R0) (Zy : y <> R0) (Hxy' : ~ (Rabs x <= Rabs y)%R) : (Rabs y < Rabs x)%R.","proofString":"now apply Rnot_le_lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : format (x - y).","proofString":"unfold Rminus.\napply generic_format_plus_weak.\nexact Hx.\nnow apply generic_format_opp.\nrewrite Rabs_pos_eq.\nrewrite Rabs_Ropp.\nrewrite Rmin_comm.\nassert (Hy0: (0 <= y)%R).\napply Rplus_le_reg_r with y.\napply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring.\nrewrite Rabs_pos_eq with (1 := Hy0).\nrewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y.\nnow apply Rle_0_minus."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : format (x + - y).","proofString":"apply generic_format_plus_weak.\nexact Hx.\nnow apply generic_format_opp.\nrewrite Rabs_pos_eq.\nrewrite Rabs_Ropp.\nrewrite Rmin_comm.\nassert (Hy0: (0 <= y)%R).\napply Rplus_le_reg_r with y.\napply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring.\nrewrite Rabs_pos_eq with (1 := Hy0).\nrewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y.\nnow apply Rle_0_minus."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : format x.","proofString":"exact Hx."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : format (- y).","proofString":"now apply generic_format_opp."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (Rabs (x + - y) <= Rmin (Rabs x) (Rabs (- y)))%R.","proofString":"rewrite Rabs_pos_eq.\nrewrite Rabs_Ropp.\nrewrite Rmin_comm.\nassert (Hy0: (0 <= y)%R).\napply Rplus_le_reg_r with y.\napply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring.\nrewrite Rabs_pos_eq with (1 := Hy0).\nrewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y.\nnow apply Rle_0_minus."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (x + - y <= Rmin (Rabs x) (Rabs (- y)))%R.","proofString":"rewrite Rabs_Ropp.\nrewrite Rmin_comm.\nassert (Hy0: (0 <= y)%R).\napply Rplus_le_reg_r with y.\napply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring.\nrewrite Rabs_pos_eq with (1 := Hy0).\nrewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (x + - y <= Rmin (Rabs x) (Rabs y))%R.","proofString":"rewrite Rmin_comm.\nassert (Hy0: (0 <= y)%R).\napply Rplus_le_reg_r with y.\napply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring.\nrewrite Rabs_pos_eq with (1 := Hy0).\nrewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (x + - y <= Rmin (Rabs y) (Rabs x))%R.","proofString":"assert (Hy0: (0 <= y)%R).\napply Rplus_le_reg_r with y.\napply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring.\nrewrite Rabs_pos_eq with (1 := Hy0).\nrewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (0 <= y)%R.","proofString":"apply Rplus_le_reg_r with y.\napply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (0 + y <= y + y)%R.","proofString":"apply Rle_trans with x.\nnow rewrite Rplus_0_l.\nnow replace (y + y)%R with (2 * y)%R by ring."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (0 + y <= x)%R.","proofString":"now rewrite Rplus_0_l."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (x <= y + y)%R.","proofString":"now replace (y + y)%R with (2 * y)%R by ring."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) : (x + - y <= Rmin (Rabs y) (Rabs x))%R.","proofString":"rewrite Rabs_pos_eq with (1 := Hy0).\nrewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) : (x + - y <= Rmin y (Rabs x))%R.","proofString":"rewrite Rabs_pos_eq.\nunfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx.\nnow apply Rle_trans with y."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) : (x + - y <= Rmin y x)%R.","proofString":"unfold Rmin.\ndestruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) : (x + - y <= (if Rle_dec y x then y else x))%R.","proofString":"destruct (Rle_dec y x) as [Hyx|Hyx].\napply Rplus_le_reg_r with y.\nnow ring_simplify.\nnow elim Hyx."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) (Hyx : (y <= x)%R) : (x + - y <= y)%R.","proofString":"apply Rplus_le_reg_r with y.\nnow ring_simplify."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) (Hyx : (y <= x)%R) : (x + - y + y <= y + y)%R.","proofString":"now ring_simplify."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) (Hyx : ~ (y <= x)%R) : (x + - y <= x)%R.","proofString":"now elim Hyx."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hy0 : (0 <= y)%R) : (0 <= x)%R.","proofString":"now apply Rle_trans with y."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y <= x)%R) (Hxy2 : (x <= 2 * y)%R) : (0 <= x + - y)%R.","proofString":"now apply Rle_0_minus."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) : format (x - y).","proofString":"destruct (Rle_or_lt x y) as [Hxy|Hxy].\nrewrite <- Ropp_minus_distr.\napply generic_format_opp.\napply sterbenz_aux ; try easy.\nsplit.\nexact Hxy.\napply Rcompare_not_Lt_inv.\nrewrite <- Rcompare_half_r.\nnow apply Rcompare_not_Lt.\napply sterbenz_aux ; try easy.\nsplit.\nnow apply Rlt_le.\nexact Hxy2."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : format (x - y).","proofString":"rewrite <- Ropp_minus_distr.\napply generic_format_opp.\napply sterbenz_aux ; try easy.\nsplit.\nexact Hxy.\napply Rcompare_not_Lt_inv.\nrewrite <- Rcompare_half_r.\nnow apply Rcompare_not_Lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : format (- (y - x)).","proofString":"apply generic_format_opp.\napply sterbenz_aux ; try easy.\nsplit.\nexact Hxy.\napply Rcompare_not_Lt_inv.\nrewrite <- Rcompare_half_r.\nnow apply Rcompare_not_Lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : format (y - x).","proofString":"apply sterbenz_aux ; try easy.\nsplit.\nexact Hxy.\napply Rcompare_not_Lt_inv.\nrewrite <- Rcompare_half_r.\nnow apply Rcompare_not_Lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : (x <= y <= 2 * x)%R.","proofString":"split.\nexact Hxy.\napply Rcompare_not_Lt_inv.\nrewrite <- Rcompare_half_r.\nnow apply Rcompare_not_Lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : (x <= y)%R.","proofString":"exact Hxy."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : (y <= 2 * x)%R.","proofString":"apply Rcompare_not_Lt_inv.\nrewrite <- Rcompare_half_r.\nnow apply Rcompare_not_Lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : Rcompare (2 * x) y <> Lt.","proofString":"rewrite <- Rcompare_half_r.\nnow apply Rcompare_not_Lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (x <= y)%R) : Rcompare x (y / 2) <> Lt.","proofString":"now apply Rcompare_not_Lt."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (y < x)%R) : format (x - y).","proofString":"apply sterbenz_aux ; try easy.\nsplit.\nnow apply Rlt_le.\nexact Hxy2."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (y < x)%R) : (y <= x <= 2 * y)%R.","proofString":"split.\nnow apply Rlt_le.\nexact Hxy2."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (y < x)%R) : (y <= x)%R.","proofString":"now apply Rlt_le."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy1 : (y / 2 <= x)%R) (Hxy2 : (x <= 2 * y)%R) (Hxy : (y < x)%R) : (x <= 2 * y)%R.","proofString":"exact Hxy2."}]}