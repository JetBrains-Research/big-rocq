{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Prop/Div_sqrt_error.v","fileSamples":[{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) : generic_format beta fexp (x + y).","proofString":"case (Req_dec (x+y) 0); intros H.\nrewrite H; apply generic_format_0.\nrewrite Hx, Hy, <- F2R_plus.\napply generic_format_F2R.\nintros _.\nchange (F2R _) with (F2R (Fplus fx fy)).\napply Z.le_trans with (Z.min (Fexp fx) (Fexp fy)).\nrewrite F2R_plus, <- Hx, <- Hy.\nunfold cexp.\napply Z.le_trans with (1:=Hfexp _).\napply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case.\nrewrite <- Fexp_Fplus.\napply Z.le_refl."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R = 0%R) : generic_format beta fexp (x + y).","proofString":"rewrite H; apply generic_format_0."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : generic_format beta fexp (x + y).","proofString":"rewrite Hx, Hy, <- F2R_plus.\napply generic_format_F2R.\nintros _.\nchange (F2R _) with (F2R (Fplus fx fy)).\napply Z.le_trans with (Z.min (Fexp fx) (Fexp fy)).\nrewrite F2R_plus, <- Hx, <- Hy.\nunfold cexp.\napply Z.le_trans with (1:=Hfexp _).\napply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case.\nrewrite <- Fexp_Fplus.\napply Z.le_refl."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : generic_format beta fexp (F2R (Fplus fx fy)).","proofString":"apply generic_format_F2R.\nintros _.\nchange (F2R _) with (F2R (Fplus fx fy)).\napply Z.le_trans with (Z.min (Fexp fx) (Fexp fy)).\nrewrite F2R_plus, <- Hx, <- Hy.\nunfold cexp.\napply Z.le_trans with (1:=Hfexp _).\napply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case.\nrewrite <- Fexp_Fplus.\napply Z.le_refl."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (cexp beta fexp (F2R (Fplus fx fy)) <= (let (_, Fexp) := Fplus fx fy in Fexp))%Z.","proofString":"apply Z.le_trans with (Z.min (Fexp fx) (Fexp fy)).\nrewrite F2R_plus, <- Hx, <- Hy.\nunfold cexp.\napply Z.le_trans with (1:=Hfexp _).\napply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case.\nrewrite <- Fexp_Fplus.\napply Z.le_refl."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (cexp beta fexp (F2R (Fplus fx fy)) <= Z.min (Fexp fx) (Fexp fy))%Z.","proofString":"rewrite F2R_plus, <- Hx, <- Hy.\nunfold cexp.\napply Z.le_trans with (1:=Hfexp _).\napply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (cexp beta fexp (x + y) <= Z.min (Fexp fx) (Fexp fy))%Z.","proofString":"unfold cexp.\napply Z.le_trans with (1:=Hfexp _).\napply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (fexp (mag beta (x + y)) <= Z.min (Fexp fx) (Fexp fy))%Z.","proofString":"apply Z.le_trans with (1:=Hfexp _).\napply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (mag beta (x + y) - prec <= Z.min (Fexp fx) (Fexp fy))%Z.","proofString":"apply Zplus_le_reg_l with prec; ring_simplify.\napply mag_le_bpow with (1 := H).\nnow apply Z.min_case."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (mag beta (x + y) <= prec + Z.min (Fexp fx) (Fexp fy))%Z.","proofString":"apply mag_le_bpow with (1 := H).\nnow apply Z.min_case."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (Rabs (x + y) < bpow (prec + Z.min (Fexp fx) (Fexp fy)))%R.","proofString":"now apply Z.min_case."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (Z.min (Fexp fx) (Fexp fy) <= (let (_, Fexp) := Fplus fx fy in Fexp))%Z.","proofString":"rewrite <- Fexp_Fplus.\napply Z.le_refl."},{"statement":"(fexp : Z -> Z) (Hfexp : forall e : Z, (fexp e <= e - prec)%Z) (x y : R) (fx fy : float beta) (Hx : x = F2R fx) (Hy : y = F2R fy) (H1 : (Rabs (x + y) < bpow (prec + Fexp fx))%R) (H2 : (Rabs (x + y) < bpow (prec + Fexp fy))%R) (H : (x + y)%R <> 0%R) : (Fexp (Fplus fx fy) <= (let (_, Fexp) := Fplus fx fy in Fexp))%Z.","proofString":"apply Z.le_refl."},{"statement":"(x : R) (Fx : format x) (Px : (0 < x)%R) (e : Z) (mu : R) : (bpow (-2 * e) * bpow (2 * e))%R = 1%R.","proofString":"now rewrite <- bpow_plus; case e; simpl; [reflexivity| |]; intro p;    rewrite Z.pos_sub_diag."},{"statement":"(x : R) (Fx : format x) (Px : (0 < x)%R) (e : Z) (mu : R) (Hbe : (bpow (-2 * e) * bpow (2 * e))%R = 1%R) (Fmu : format mu) : (0 < bpow (2 * e))%R.","proofString":"apply bpow_gt_0."},{"statement":"(x : R) (Fx : format x) (Px : (0 < x)%R) (e : Z) (mu : R) (Hbe : (bpow (-2 * e) * bpow (2 * e))%R = 1%R) (Fmu : format mu) (e2 : Z) : (bpow (mag beta x - 1) <= x)%R.","proofString":"set (l := mag _ _); rewrite <- (Rabs_pos_eq _ (Rlt_le _ _ Px)).\nunfold l; apply bpow_mag_le.\nintro Hx; revert Px; rewrite Hx; apply Rlt_irrefl."},{"statement":"(x : R) (Fx : format x) (Px : (0 < x)%R) (e : Z) (mu : R) (Hbe : (bpow (-2 * e) * bpow (2 * e))%R = 1%R) (Fmu : format mu) (e2 : Z) (l : mag_prop beta x) : x <> 0%R.","proofString":"intro Hx; revert Px; rewrite Hx; apply Rlt_irrefl."},{"statement":"(x : R) (Fx : format x) (Px : (0 < x)%R) (e : Z) (mu : R) (Hbe : (bpow (-2 * e) * bpow (2 * e))%R = 1%R) (Fmu : format mu) : (x < bpow (mag beta x))%R.","proofString":"rewrite <- (Rabs_pos_eq _ (Rlt_le _ _ Px)) at 1; apply bpow_mag_gt."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) : x = 1%R \\/ x = (1 + 2 * u_ro)%R \\/ (1 + 4 * u_ro <= x)%R.","proofString":"assert (Pu_ro : (0 <= u_ro)%R); [apply Rmult_le_pos; [lra|apply bpow_ge_0]|].\ndestruct (Rle_or_lt x 1) as [HxLe1|HxGt1]; [now left; apply Rle_antisym|right].\nassert (F1 : format 1); [now apply generic_format_FLX_1|].\nassert (H2eps : (2 * u_ro = bpow (-prec + 1))%R).\nunfold u_ro; rewrite bpow_plus; field.\nassert (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R).\nrewrite H2eps, <- succ_FLX_1.\nnow apply succ_le_lt; [now apply FLX_exp_valid| | |].\ndestruct (Rle_or_lt x (1 + 2 * u_ro)) as [HxLe1p2eps|HxGt1p2eps];  [now left; apply Rle_antisym|right].\nassert (Hulp1p2eps : (ulp beta (FLX_exp prec) (1 + 2 * u_ro) = 2 * u_ro)%R).\ndestruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop.\nassert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) : x = 1%R \\/ x = (1 + 2 * u_ro)%R \\/ (1 + 4 * u_ro <= x)%R.","proofString":"destruct (Rle_or_lt x 1) as [HxLe1|HxGt1]; [now left; apply Rle_antisym|right].\nassert (F1 : format 1); [now apply generic_format_FLX_1|].\nassert (H2eps : (2 * u_ro = bpow (-prec + 1))%R).\nunfold u_ro; rewrite bpow_plus; field.\nassert (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R).\nrewrite H2eps, <- succ_FLX_1.\nnow apply succ_le_lt; [now apply FLX_exp_valid| | |].\ndestruct (Rle_or_lt x (1 + 2 * u_ro)) as [HxLe1p2eps|HxGt1p2eps];  [now left; apply Rle_antisym|right].\nassert (Hulp1p2eps : (ulp beta (FLX_exp prec) (1 + 2 * u_ro) = 2 * u_ro)%R).\ndestruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop.\nassert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) : x = (1 + 2 * u_ro)%R \\/ (1 + 4 * u_ro <= x)%R.","proofString":"assert (F1 : format 1); [now apply generic_format_FLX_1|].\nassert (H2eps : (2 * u_ro = bpow (-prec + 1))%R).\nunfold u_ro; rewrite bpow_plus; field.\nassert (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R).\nrewrite H2eps, <- succ_FLX_1.\nnow apply succ_le_lt; [now apply FLX_exp_valid| | |].\ndestruct (Rle_or_lt x (1 + 2 * u_ro)) as [HxLe1p2eps|HxGt1p2eps];  [now left; apply Rle_antisym|right].\nassert (Hulp1p2eps : (ulp beta (FLX_exp prec) (1 + 2 * u_ro) = 2 * u_ro)%R).\ndestruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop.\nassert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) : x = (1 + 2 * u_ro)%R \\/ (1 + 4 * u_ro <= x)%R.","proofString":"assert (H2eps : (2 * u_ro = bpow (-prec + 1))%R).\nunfold u_ro; rewrite bpow_plus; field.\nassert (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R).\nrewrite H2eps, <- succ_FLX_1.\nnow apply succ_le_lt; [now apply FLX_exp_valid| | |].\ndestruct (Rle_or_lt x (1 + 2 * u_ro)) as [HxLe1p2eps|HxGt1p2eps];  [now left; apply Rle_antisym|right].\nassert (Hulp1p2eps : (ulp beta (FLX_exp prec) (1 + 2 * u_ro) = 2 * u_ro)%R).\ndestruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop.\nassert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) : (2 * u_ro)%R = bpow (- prec + 1).","proofString":"unfold u_ro; rewrite bpow_plus; field."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) : x = (1 + 2 * u_ro)%R \\/ (1 + 4 * u_ro <= x)%R.","proofString":"assert (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R).\nrewrite H2eps, <- succ_FLX_1.\nnow apply succ_le_lt; [now apply FLX_exp_valid| | |].\ndestruct (Rle_or_lt x (1 + 2 * u_ro)) as [HxLe1p2eps|HxGt1p2eps];  [now left; apply Rle_antisym|right].\nassert (Hulp1p2eps : (ulp beta (FLX_exp prec) (1 + 2 * u_ro) = 2 * u_ro)%R).\ndestruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop.\nassert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) : (1 + 2 * u_ro <= x)%R.","proofString":"rewrite H2eps, <- succ_FLX_1.\nnow apply succ_le_lt; [now apply FLX_exp_valid| | |]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) : (succ beta (FLX_exp prec) 1 <= x)%R.","proofString":"now apply succ_le_lt; [now apply FLX_exp_valid| | |]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) : x = (1 + 2 * u_ro)%R \\/ (1 + 4 * u_ro <= x)%R.","proofString":"destruct (Rle_or_lt x (1 + 2 * u_ro)) as [HxLe1p2eps|HxGt1p2eps];  [now left; apply Rle_antisym|right].\nassert (Hulp1p2eps : (ulp beta (FLX_exp prec) (1 + 2 * u_ro) = 2 * u_ro)%R).\ndestruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop.\nassert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) : (1 + 4 * u_ro <= x)%R.","proofString":"assert (Hulp1p2eps : (ulp beta (FLX_exp prec) (1 + 2 * u_ro) = 2 * u_ro)%R).\ndestruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop.\nassert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R.","proofString":"destruct (ulp_succ_pos _ _ _ F1 Rlt_0_1) as [Hsucc|Hsucc].\nnow rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1.\nexfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hsucc : ulp beta (FLX_exp prec) (succ beta (FLX_exp prec) 1) =\nulp beta (FLX_exp prec) 1) : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R.","proofString":"now rewrite H2eps, <- succ_FLX_1, <- ulp_FLX_1."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hsucc : succ beta (FLX_exp prec) 1 = bpow (mag beta 1)) : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R.","proofString":"exfalso; revert Hsucc; apply Rlt_not_eq.\nrewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) : (succ beta (FLX_exp prec) 1 < bpow (mag beta 1))%R.","proofString":"rewrite succ_FLX_1, mag_1, bpow_1, <- H2eps; simpl.\napply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) : (1 + 2 * u_ro < IZR beta)%R.","proofString":"apply (Rlt_le_trans _ 2); [apply Rplus_lt_compat_l|].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia.\napply IZR_le, Zle_bool_imp_le, radix_prop."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) : (2 * u_ro < R1)%R.","proofString":"unfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l; [|lra].\nchange R1 with (bpow 0); apply bpow_lt; lia."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) : (bpow (- prec + 1) < R1)%R.","proofString":"change R1 with (bpow 0); apply bpow_lt; lia."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) : (2 <= IZR beta)%R.","proofString":"apply IZR_le, Zle_bool_imp_le, radix_prop."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hulp1p2eps : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R) : (1 + 4 * u_ro <= x)%R.","proofString":"assert (Hsucc1p2eps :          (succ beta (FLX_exp prec) (1 + 2 * u_ro) = 1 + 4 * u_ro)%R).\nunfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra.\nrewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hulp1p2eps : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R) : succ beta (FLX_exp prec) (1 + 2 * u_ro) = (1 + 4 * u_ro)%R.","proofString":"unfold succ; rewrite Rle_bool_true; [rewrite Hulp1p2eps; ring|].\napply Rplus_le_le_0_compat; lra."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hulp1p2eps : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R) : (0 <= 1 + 2 * u_ro)%R.","proofString":"apply Rplus_le_le_0_compat; lra."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hulp1p2eps : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R) (Hsucc1p2eps : succ beta (FLX_exp prec) (1 + 2 * u_ro) = (1 + 4 * u_ro)%R) : (1 + 4 * u_ro <= x)%R.","proofString":"rewrite <- Hsucc1p2eps.\napply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hulp1p2eps : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R) (Hsucc1p2eps : succ beta (FLX_exp prec) (1 + 2 * u_ro) = (1 + 4 * u_ro)%R) : (succ beta (FLX_exp prec) (1 + 2 * u_ro) <= x)%R.","proofString":"apply succ_le_lt; [now apply FLX_exp_valid| |exact Fx|now simpl].\nrewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hulp1p2eps : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R) (Hsucc1p2eps : succ beta (FLX_exp prec) (1 + 2 * u_ro) = (1 + 4 * u_ro)%R) : format (1 + 2 * u_ro).","proofString":"rewrite H2eps, <- succ_FLX_1.\nnow apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(x : R) (Fx : format x) (HxGe1 : (1 <= x)%R) (Pu_ro : (0 <= u_ro)%R) (HxGt1 : (1 < x)%R) (F1 : format 1) (H2eps : (2 * u_ro)%R = bpow (- prec + 1)) (HmuGe1p2eps : (1 + 2 * u_ro <= x)%R) (HxGt1p2eps : (1 + 2 * u_ro < x)%R) (Hulp1p2eps : ulp beta (FLX_exp prec) (1 + 2 * u_ro) = (2 * u_ro)%R) (Hsucc1p2eps : succ beta (FLX_exp prec) (1 + 2 * u_ro) = (1 + 4 * u_ro)%R) : format (succ beta (FLX_exp prec) 1).","proofString":"now apply generic_format_succ; [apply FLX_exp_valid|]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro / sqrt (1 + 4 * u_ro) <= 1 - 1 / sqrt (1 + 2 * u_ro))%R.","proofString":"unfold Rdiv; apply (Rplus_le_reg_r (/ sqrt (1 + 2 * u_ro))); ring_simplify.\napply (Rmult_le_reg_r (sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro))).\napply Rmult_lt_0_compat; apply sqrt_lt_R0; lra.\nfield_simplify; [|split; apply Rgt_not_eq, Rlt_gt, sqrt_lt_R0; lra].\ntry unfold Rdiv; rewrite ?Rinv_1, ?Rmult_1_r.\napply Rsqr_incr_0_var; [|now apply Rmult_le_pos; apply sqrt_pos].\nrewrite <-sqrt_mult; [|lra|lra].\nrewrite Rsqr_sqrt; [|apply Rmult_le_pos; lra].\nunfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro * / sqrt (1 + 4 * u_ro) + / sqrt (1 + 2 * u_ro) <= 1)%R.","proofString":"apply (Rmult_le_reg_r (sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro))).\napply Rmult_lt_0_compat; apply sqrt_lt_R0; lra.\nfield_simplify; [|split; apply Rgt_not_eq, Rlt_gt, sqrt_lt_R0; lra].\ntry unfold Rdiv; rewrite ?Rinv_1, ?Rmult_1_r.\napply Rsqr_incr_0_var; [|now apply Rmult_le_pos; apply sqrt_pos].\nrewrite <-sqrt_mult; [|lra|lra].\nrewrite Rsqr_sqrt; [|apply Rmult_le_pos; lra].\nunfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (0 < sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro))%R.","proofString":"apply Rmult_lt_0_compat; apply sqrt_lt_R0; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : ((u_ro * / sqrt (1 + 4 * u_ro) + / sqrt (1 + 2 * u_ro)) *\n (sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro)) <=\n 1 * (sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro)))%R.","proofString":"field_simplify; [|split; apply Rgt_not_eq, Rlt_gt, sqrt_lt_R0; lra].\ntry unfold Rdiv; rewrite ?Rinv_1, ?Rmult_1_r.\napply Rsqr_incr_0_var; [|now apply Rmult_le_pos; apply sqrt_pos].\nrewrite <-sqrt_mult; [|lra|lra].\nrewrite Rsqr_sqrt; [|apply Rmult_le_pos; lra].\nunfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro * sqrt (1 + 2 * u_ro) + sqrt (1 + 4 * u_ro) <=\n sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro))%R.","proofString":"try unfold Rdiv; rewrite ?Rinv_1, ?Rmult_1_r.\napply Rsqr_incr_0_var; [|now apply Rmult_le_pos; apply sqrt_pos].\nrewrite <-sqrt_mult; [|lra|lra].\nrewrite Rsqr_sqrt; [|apply Rmult_le_pos; lra].\nunfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro * sqrt (1 + 2 * u_ro) + sqrt (1 + 4 * u_ro) <=\n sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro))%R.","proofString":"apply Rsqr_incr_0_var; [|now apply Rmult_le_pos; apply sqrt_pos].\nrewrite <-sqrt_mult; [|lra|lra].\nrewrite Rsqr_sqrt; [|apply Rmult_le_pos; lra].\nunfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : ((u_ro * sqrt (1 + 2 * u_ro) + sqrt (1 + 4 * u_ro))² <=\n (sqrt (1 + 4 * u_ro) * sqrt (1 + 2 * u_ro))²)%R.","proofString":"rewrite <-sqrt_mult; [|lra|lra].\nrewrite Rsqr_sqrt; [|apply Rmult_le_pos; lra].\nunfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : ((u_ro * sqrt (1 + 2 * u_ro) + sqrt (1 + 4 * u_ro))² <=\n (sqrt ((1 + 4 * u_ro) * (1 + 2 * u_ro)))²)%R.","proofString":"rewrite Rsqr_sqrt; [|apply Rmult_le_pos; lra].\nunfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : ((u_ro * sqrt (1 + 2 * u_ro) + sqrt (1 + 4 * u_ro))² <=\n (1 + 4 * u_ro) * (1 + 2 * u_ro))%R.","proofString":"unfold Rsqr; ring_simplify; unfold pow; rewrite !Rmult_1_r.\nrewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro * u_ro * (sqrt (1 + 2 * u_ro) * sqrt (1 + 2 * u_ro)) +\n 2 * u_ro * sqrt (1 + 2 * u_ro) * sqrt (1 + 4 * u_ro) +\n sqrt (1 + 4 * u_ro) * sqrt (1 + 4 * u_ro) <=\n 8 * (u_ro * u_ro) + 6 * u_ro + 1)%R.","proofString":"rewrite !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro * u_ro * (1 + 2 * u_ro) +\n 2 * u_ro * sqrt (1 + 2 * u_ro) * sqrt (1 + 4 * u_ro) + \n (1 + 4 * u_ro) <= 8 * (u_ro * u_ro) + 6 * u_ro + 1)%R.","proofString":"apply (Rplus_le_reg_r (-u_ro * u_ro - 1 -4 * u_ro - 2 * u_ro ^ 3)).\nring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro * u_ro * (1 + 2 * u_ro) +\n 2 * u_ro * sqrt (1 + 2 * u_ro) * sqrt (1 + 4 * u_ro) + \n (1 + 4 * u_ro) + (- u_ro * u_ro - 1 - 4 * u_ro - 2 * u_ro ^ 3) <=\n 8 * (u_ro * u_ro) + 6 * u_ro + 1 +\n (- u_ro * u_ro - 1 - 4 * u_ro - 2 * u_ro ^ 3))%R.","proofString":"ring_simplify; apply Rsqr_incr_0_var.\nunfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra].\nassert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : ((2 * u_ro * sqrt (1 + 2 * u_ro) * sqrt (1 + 4 * u_ro))² <=\n (-2 * u_ro ^ 3 + 7 * u_ro ^ 2 + 2 * u_ro)²)%R.","proofString":"unfold Rsqr; ring_simplify.\nunfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (4 * u_ro ^ 2 * sqrt (1 + 2 * u_ro) ^ 2 * sqrt (1 + 4 * u_ro) ^ 2 <=\n 4 * u_ro ^ 6 - 28 * u_ro ^ 5 + 41 * u_ro ^ 4 + 28 * u_ro ^ 3 + 4 * u_ro ^ 2)%R.","proofString":"unfold pow; rewrite !Rmult_1_r, !sqrt_def; [|lra|lra].\napply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (4 * (u_ro * u_ro) * (1 + 2 * u_ro) * (1 + 4 * u_ro) <=\n 4 * (u_ro * (u_ro * (u_ro * (u_ro * (u_ro * u_ro))))) -\n 28 * (u_ro * (u_ro * (u_ro * (u_ro * u_ro)))) +\n 41 * (u_ro * (u_ro * (u_ro * u_ro))) + 28 * (u_ro * (u_ro * u_ro)) +\n 4 * (u_ro * u_ro))%R.","proofString":"apply (Rplus_le_reg_r (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2)).\nring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (4 * (u_ro * u_ro) * (1 + 2 * u_ro) * (1 + 4 * u_ro) +\n (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2) <=\n 4 * (u_ro * (u_ro * (u_ro * (u_ro * (u_ro * u_ro))))) -\n 28 * (u_ro * (u_ro * (u_ro * (u_ro * u_ro)))) +\n 41 * (u_ro * (u_ro * (u_ro * u_ro))) + 28 * (u_ro * (u_ro * u_ro)) +\n 4 * (u_ro * u_ro) + (-32 * u_ro ^ 4 - 24 * u_ro ^ 3 - 4 * u_ro ^ 2))%R.","proofString":"ring_simplify.\nreplace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (0 <= 4 * u_ro ^ 6 - 28 * u_ro ^ 5 + 9 * u_ro ^ 4 + 4 * u_ro ^ 3)%R.","proofString":"replace (_ + _)%R    with (((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R by ring.\napply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (0 <= ((4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4) * u_ro ^ 3)%R.","proofString":"apply Rmult_le_pos; [|now apply pow_le].\nassert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (0 <= (4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4)%R.","proofString":"assert (Heps_le_half : (u_ro <= 1 / 2)%R).\nunfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia.\napply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro <= 1 / 2)%R.","proofString":"unfold u_ro, Rdiv; rewrite Rmult_comm; apply Rmult_le_compat_r; [lra|].\nchange 1%R with (bpow 0); apply bpow_le; lia."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (bpow (- prec + 1) <= 1)%R.","proofString":"change 1%R with (bpow 0); apply bpow_le; lia."},{"statement":"(Pu_ro : (0 <= u_ro)%R) (Heps_le_half : (u_ro <= 1 / 2)%R) : (0 <= (4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4)%R.","proofString":"apply (Rle_trans _ (-8 * u_ro + 4)); [lra|].\napply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) (Heps_le_half : (u_ro <= 1 / 2)%R) : (-8 * u_ro + 4 <= (4 * u_ro ^ 2 - 28 * u_ro + 9) * u_ro + 4)%R.","proofString":"apply Rplus_le_compat_r, Rmult_le_compat_r; [apply Pu_ro|].\nnow assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) (Heps_le_half : (u_ro <= 1 / 2)%R) : (-8 <= 4 * u_ro ^ 2 - 28 * u_ro + 9)%R.","proofString":"now assert (H : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (0 <= -2 * u_ro ^ 3 + 7 * u_ro ^ 2 + 2 * u_ro)%R.","proofString":"assert (H : (u_ro ^ 3 <= u_ro ^ 2)%R).\nunfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1.\nnow assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro ^ 3 <= u_ro ^ 2)%R.","proofString":"unfold pow; rewrite <-!Rmult_assoc, Rmult_1_r.\napply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro * u_ro * u_ro <= u_ro * u_ro * 1)%R.","proofString":"apply Rmult_le_compat_l; [now apply Rmult_le_pos; apply Pu_ro|].\nnow apply Rlt_le, u_ro_lt_1."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (u_ro <= 1)%R.","proofString":"now apply Rlt_le, u_ro_lt_1."},{"statement":"(Pu_ro : (0 <= u_ro)%R) (H : (u_ro ^ 3 <= u_ro ^ 2)%R) : (0 <= -2 * u_ro ^ 3 + 7 * u_ro ^ 2 + 2 * u_ro)%R.","proofString":"now assert (H' : (0 <= u_ro ^ 2)%R); [apply pow2_ge_0|lra]."},{"statement":"(0 <= / 1 - / sqrt (1 + 2 * u_ro))%R.","proofString":"apply Rle_0_minus, Rinv_le; [lra|].\nrewrite <- sqrt_1 at 1; apply sqrt_le_1_alt.\nassert (H := u_ro_pos beta prec); lra."},{"statement":"(1 <= sqrt (1 + 2 * u_ro))%R.","proofString":"rewrite <- sqrt_1 at 1; apply sqrt_le_1_alt.\nassert (H := u_ro_pos beta prec); lra."},{"statement":"(1 <= 1 + 2 * u_ro)%R.","proofString":"assert (H := u_ro_pos beta prec); lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R.","proofString":"apply (Rmult_le_reg_r (sqrt (1 + 2 * u_ro) * (1 + u_ro))).\napply Rmult_lt_0_compat; [apply sqrt_lt_R0|]; lra.\nfield_simplify; [|lra|intro H; apply sqrt_eq_0 in H; lra].\ntry unfold Rdiv; unfold Rminus; rewrite ?Rinv_1, ?Rmult_1_r, !Rplus_assoc.\nrewrite <-(Rplus_0_r (sqrt _ * _)) at 2; apply Rplus_le_compat_l.\napply (Rplus_le_reg_r (1 + u_ro)); ring_simplify.\nrewrite <-(sqrt_square (_ + 1)); [|lra]; apply sqrt_le_1_alt.\nassert (H : (0 <= u_ro * u_ro)%R); [apply Rmult_le_pos|]; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (0 < sqrt (1 + 2 * u_ro) * (1 + u_ro))%R.","proofString":"apply Rmult_lt_0_compat; [apply sqrt_lt_R0|]; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : ((1 - 1 / sqrt (1 + 2 * u_ro)) * (sqrt (1 + 2 * u_ro) * (1 + u_ro)) <=\n u_ro / (1 + u_ro) * (sqrt (1 + 2 * u_ro) * (1 + u_ro)))%R.","proofString":"field_simplify; [|lra|intro H; apply sqrt_eq_0 in H; lra].\ntry unfold Rdiv; unfold Rminus; rewrite ?Rinv_1, ?Rmult_1_r, !Rplus_assoc.\nrewrite <-(Rplus_0_r (sqrt _ * _)) at 2; apply Rplus_le_compat_l.\napply (Rplus_le_reg_r (1 + u_ro)); ring_simplify.\nrewrite <-(sqrt_square (_ + 1)); [|lra]; apply sqrt_le_1_alt.\nassert (H : (0 <= u_ro * u_ro)%R); [apply Rmult_le_pos|]; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (sqrt (1 + 2 * u_ro) * u_ro + sqrt (1 + 2 * u_ro) - u_ro - 1 <=\n sqrt (1 + 2 * u_ro) * u_ro)%R.","proofString":"try unfold Rdiv; unfold Rminus; rewrite ?Rinv_1, ?Rmult_1_r, !Rplus_assoc.\nrewrite <-(Rplus_0_r (sqrt _ * _)) at 2; apply Rplus_le_compat_l.\napply (Rplus_le_reg_r (1 + u_ro)); ring_simplify.\nrewrite <-(sqrt_square (_ + 1)); [|lra]; apply sqrt_le_1_alt.\nassert (H : (0 <= u_ro * u_ro)%R); [apply Rmult_le_pos|]; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (sqrt (1 + 2 * u_ro) * u_ro + (sqrt (1 + 2 * u_ro) + (- u_ro + - (1))) <=\n sqrt (1 + 2 * u_ro) * u_ro)%R.","proofString":"rewrite <-(Rplus_0_r (sqrt _ * _)) at 2; apply Rplus_le_compat_l.\napply (Rplus_le_reg_r (1 + u_ro)); ring_simplify.\nrewrite <-(sqrt_square (_ + 1)); [|lra]; apply sqrt_le_1_alt.\nassert (H : (0 <= u_ro * u_ro)%R); [apply Rmult_le_pos|]; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (sqrt (1 + 2 * u_ro) + (- u_ro + - (1)) <= 0)%R.","proofString":"apply (Rplus_le_reg_r (1 + u_ro)); ring_simplify.\nrewrite <-(sqrt_square (_ + 1)); [|lra]; apply sqrt_le_1_alt.\nassert (H : (0 <= u_ro * u_ro)%R); [apply Rmult_le_pos|]; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (sqrt (1 + 2 * u_ro) <= u_ro + 1)%R.","proofString":"rewrite <-(sqrt_square (_ + 1)); [|lra]; apply sqrt_le_1_alt.\nassert (H : (0 <= u_ro * u_ro)%R); [apply Rmult_le_pos|]; lra."},{"statement":"(Pu_ro : (0 <= u_ro)%R) : (1 + 2 * u_ro <= (u_ro + 1) * (u_ro + 1))%R.","proofString":"assert (H : (0 <= u_ro * u_ro)%R); [apply Rmult_le_pos|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (sqrt x) - sqrt x) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (sqrt x))%R.","proofString":"assert (Peps' : (0 < u_ro)%R).\nunfold u_ro; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0].\nassert (Pb := om1ds1p2u_ro_pos).\nassert (Pb' := s1p2u_rom1_pos).\ndestruct (Rle_or_lt x 0) as [Nx|Px].\nrewrite (sqrt_neg _ Nx), round_0, Rabs_R0, Rmult_0_r; [|apply valid_rnd_N].\nnow unfold Rminus; rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0; right.\ndestruct (sqrt_error_N_FLX_aux1 _ Fx Px)  as (mu, (e, (Fmu, (Hmu, (HmuGe1, HmuLtsqradix))))).\npose (t := sqrt x).\nset (rt := round _ _ _ _).\nassert (Ht : (t = sqrt mu * bpow e)%R).\nunfold t; rewrite Hmu, sqrt_mult_alt; [|now apply (Rle_trans _ _ _ Rle_0_1)].\nnow rewrite sqrt_bpow.\ndestruct (sqrt_error_N_FLX_aux2 _ Fmu HmuGe1) as [Hmu'|[Hmu'|Hmu']].\nunfold rt; fold t; rewrite Ht, Hmu', sqrt_1, Rmult_1_l.\nrewrite round_generic; [|now apply valid_rnd_N|].\nrewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos].\napply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia.\nassert (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R); [rewrite Hmu'; split|].\nrewrite <- sqrt_1 at 1; apply sqrt_le_1_alt; lra.\nrewrite <- sqrt_square; [|lra]; apply sqrt_lt_1_alt; split; [lra|].\nring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra.\nassert (Fbpowe : generic_format beta (FLX_exp prec) (bpow e)).\napply generic_format_bpow; unfold FLX_exp; lia.\nassert (Hrt : rt = bpow e :> R).\nunfold rt; fold t; rewrite Ht; simpl; apply Rle_antisym.\napply round_N_le_midp; [now apply FLX_exp_valid|exact Fbpowe|].\napply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field.\napply round_ge_generic;      [now apply FLX_exp_valid|now apply valid_rnd_N|exact Fbpowe|].\nrewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|].\nfold t; rewrite Hrt, Ht, Hmu', <-(Rabs_pos_eq _ Pb), <-Rabs_mult.\nrewrite Rabs_minus_sym; right; f_equal; field; lra.\nassert (Hsqrtmu : (1 + u_ro < sqrt mu)%R).\napply (Rlt_le_trans _ (sqrt (1 + 4 * u_ro))); [|now apply sqrt_le_1_alt].\nassert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra].\nassert (Hulpt : (ulp beta (FLX_exp prec) t = 2 * u_ro * bpow e)%R).\nunfold ulp; rewrite Req_bool_false; [|apply Rgt_not_eq, Rlt_gt].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l, <-bpow_plus; [|lra].\nf_equal; unfold cexp, FLX_exp.\nassert (Hmagt : (mag beta t = 1 + e :> Z)%Z).\napply mag_unique.\nunfold t; rewrite (Rabs_pos_eq _ (Rlt_le _ _ (sqrt_lt_R0 _ Px))).\nfold t; split.\nrewrite Ht; replace (_ - _)%Z with e by ring.\nrewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt.\nrewrite bpow_plus, bpow_1, Ht; simpl.\napply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia.\nrewrite Hmagt; ring.\nrewrite Ht; apply Rmult_lt_0_compat; [|now apply bpow_gt_0].\nnow apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt].\nassert (Pt : (0 < t)%R).\nrewrite Ht; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0].\nassert (H : (Rabs ((rt - sqrt x) / sqrt x)             <= 1 - 1 / sqrt (1 + 2 * u_ro))%R).\nunfold Rdiv; rewrite Rabs_mult, (Rabs_pos_eq (/ _));    [|now left; apply Rinv_0_lt_compat].\napply (Rle_trans _ ((u_ro * bpow e) / t)).\nunfold Rdiv; apply Rmult_le_compat_r; [now left; apply Rinv_0_lt_compat|].\napply (Rle_trans _ _ _ (error_le_half_ulp _ _ _ _)).\nfold t; rewrite Hulpt; right; field.\napply (Rle_trans _ (u_ro / sqrt (1 + 4 * u_ro))).\napply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0].\napply sqrt_error_N_FLX_aux3.\nrevert H; unfold Rdiv; rewrite Rabs_mult, Rabs_Rinv; [|fold t; lra]; intro H.\napply (Rmult_le_reg_r (/ Rabs (sqrt x)));  [apply Rinv_0_lt_compat, Rabs_pos_lt; fold t; lra|].\napply (Rle_trans _ _ _ H); right; field; split; [apply Rabs_no_R0;fold t|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) : (0 < u_ro)%R.","proofString":"unfold u_ro; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (sqrt x) - sqrt x) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (sqrt x))%R.","proofString":"assert (Pb := om1ds1p2u_ro_pos).\nassert (Pb' := s1p2u_rom1_pos).\ndestruct (Rle_or_lt x 0) as [Nx|Px].\nrewrite (sqrt_neg _ Nx), round_0, Rabs_R0, Rmult_0_r; [|apply valid_rnd_N].\nnow unfold Rminus; rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0; right.\ndestruct (sqrt_error_N_FLX_aux1 _ Fx Px)  as (mu, (e, (Fmu, (Hmu, (HmuGe1, HmuLtsqradix))))).\npose (t := sqrt x).\nset (rt := round _ _ _ _).\nassert (Ht : (t = sqrt mu * bpow e)%R).\nunfold t; rewrite Hmu, sqrt_mult_alt; [|now apply (Rle_trans _ _ _ Rle_0_1)].\nnow rewrite sqrt_bpow.\ndestruct (sqrt_error_N_FLX_aux2 _ Fmu HmuGe1) as [Hmu'|[Hmu'|Hmu']].\nunfold rt; fold t; rewrite Ht, Hmu', sqrt_1, Rmult_1_l.\nrewrite round_generic; [|now apply valid_rnd_N|].\nrewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos].\napply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia.\nassert (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R); [rewrite Hmu'; split|].\nrewrite <- sqrt_1 at 1; apply sqrt_le_1_alt; lra.\nrewrite <- sqrt_square; [|lra]; apply sqrt_lt_1_alt; split; [lra|].\nring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra.\nassert (Fbpowe : generic_format beta (FLX_exp prec) (bpow e)).\napply generic_format_bpow; unfold FLX_exp; lia.\nassert (Hrt : rt = bpow e :> R).\nunfold rt; fold t; rewrite Ht; simpl; apply Rle_antisym.\napply round_N_le_midp; [now apply FLX_exp_valid|exact Fbpowe|].\napply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field.\napply round_ge_generic;      [now apply FLX_exp_valid|now apply valid_rnd_N|exact Fbpowe|].\nrewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|].\nfold t; rewrite Hrt, Ht, Hmu', <-(Rabs_pos_eq _ Pb), <-Rabs_mult.\nrewrite Rabs_minus_sym; right; f_equal; field; lra.\nassert (Hsqrtmu : (1 + u_ro < sqrt mu)%R).\napply (Rlt_le_trans _ (sqrt (1 + 4 * u_ro))); [|now apply sqrt_le_1_alt].\nassert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra].\nassert (Hulpt : (ulp beta (FLX_exp prec) t = 2 * u_ro * bpow e)%R).\nunfold ulp; rewrite Req_bool_false; [|apply Rgt_not_eq, Rlt_gt].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l, <-bpow_plus; [|lra].\nf_equal; unfold cexp, FLX_exp.\nassert (Hmagt : (mag beta t = 1 + e :> Z)%Z).\napply mag_unique.\nunfold t; rewrite (Rabs_pos_eq _ (Rlt_le _ _ (sqrt_lt_R0 _ Px))).\nfold t; split.\nrewrite Ht; replace (_ - _)%Z with e by ring.\nrewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt.\nrewrite bpow_plus, bpow_1, Ht; simpl.\napply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia.\nrewrite Hmagt; ring.\nrewrite Ht; apply Rmult_lt_0_compat; [|now apply bpow_gt_0].\nnow apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt].\nassert (Pt : (0 < t)%R).\nrewrite Ht; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0].\nassert (H : (Rabs ((rt - sqrt x) / sqrt x)             <= 1 - 1 / sqrt (1 + 2 * u_ro))%R).\nunfold Rdiv; rewrite Rabs_mult, (Rabs_pos_eq (/ _));    [|now left; apply Rinv_0_lt_compat].\napply (Rle_trans _ ((u_ro * bpow e) / t)).\nunfold Rdiv; apply Rmult_le_compat_r; [now left; apply Rinv_0_lt_compat|].\napply (Rle_trans _ _ _ (error_le_half_ulp _ _ _ _)).\nfold t; rewrite Hulpt; right; field.\napply (Rle_trans _ (u_ro / sqrt (1 + 4 * u_ro))).\napply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0].\napply sqrt_error_N_FLX_aux3.\nrevert H; unfold Rdiv; rewrite Rabs_mult, Rabs_Rinv; [|fold t; lra]; intro H.\napply (Rmult_le_reg_r (/ Rabs (sqrt x)));  [apply Rinv_0_lt_compat, Rabs_pos_lt; fold t; lra|].\napply (Rle_trans _ _ _ H); right; field; split; [apply Rabs_no_R0;fold t|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (sqrt x) - sqrt x) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (sqrt x))%R.","proofString":"assert (Pb' := s1p2u_rom1_pos).\ndestruct (Rle_or_lt x 0) as [Nx|Px].\nrewrite (sqrt_neg _ Nx), round_0, Rabs_R0, Rmult_0_r; [|apply valid_rnd_N].\nnow unfold Rminus; rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0; right.\ndestruct (sqrt_error_N_FLX_aux1 _ Fx Px)  as (mu, (e, (Fmu, (Hmu, (HmuGe1, HmuLtsqradix))))).\npose (t := sqrt x).\nset (rt := round _ _ _ _).\nassert (Ht : (t = sqrt mu * bpow e)%R).\nunfold t; rewrite Hmu, sqrt_mult_alt; [|now apply (Rle_trans _ _ _ Rle_0_1)].\nnow rewrite sqrt_bpow.\ndestruct (sqrt_error_N_FLX_aux2 _ Fmu HmuGe1) as [Hmu'|[Hmu'|Hmu']].\nunfold rt; fold t; rewrite Ht, Hmu', sqrt_1, Rmult_1_l.\nrewrite round_generic; [|now apply valid_rnd_N|].\nrewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos].\napply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia.\nassert (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R); [rewrite Hmu'; split|].\nrewrite <- sqrt_1 at 1; apply sqrt_le_1_alt; lra.\nrewrite <- sqrt_square; [|lra]; apply sqrt_lt_1_alt; split; [lra|].\nring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra.\nassert (Fbpowe : generic_format beta (FLX_exp prec) (bpow e)).\napply generic_format_bpow; unfold FLX_exp; lia.\nassert (Hrt : rt = bpow e :> R).\nunfold rt; fold t; rewrite Ht; simpl; apply Rle_antisym.\napply round_N_le_midp; [now apply FLX_exp_valid|exact Fbpowe|].\napply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field.\napply round_ge_generic;      [now apply FLX_exp_valid|now apply valid_rnd_N|exact Fbpowe|].\nrewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|].\nfold t; rewrite Hrt, Ht, Hmu', <-(Rabs_pos_eq _ Pb), <-Rabs_mult.\nrewrite Rabs_minus_sym; right; f_equal; field; lra.\nassert (Hsqrtmu : (1 + u_ro < sqrt mu)%R).\napply (Rlt_le_trans _ (sqrt (1 + 4 * u_ro))); [|now apply sqrt_le_1_alt].\nassert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra].\nassert (Hulpt : (ulp beta (FLX_exp prec) t = 2 * u_ro * bpow e)%R).\nunfold ulp; rewrite Req_bool_false; [|apply Rgt_not_eq, Rlt_gt].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l, <-bpow_plus; [|lra].\nf_equal; unfold cexp, FLX_exp.\nassert (Hmagt : (mag beta t = 1 + e :> Z)%Z).\napply mag_unique.\nunfold t; rewrite (Rabs_pos_eq _ (Rlt_le _ _ (sqrt_lt_R0 _ Px))).\nfold t; split.\nrewrite Ht; replace (_ - _)%Z with e by ring.\nrewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt.\nrewrite bpow_plus, bpow_1, Ht; simpl.\napply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia.\nrewrite Hmagt; ring.\nrewrite Ht; apply Rmult_lt_0_compat; [|now apply bpow_gt_0].\nnow apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt].\nassert (Pt : (0 < t)%R).\nrewrite Ht; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0].\nassert (H : (Rabs ((rt - sqrt x) / sqrt x)             <= 1 - 1 / sqrt (1 + 2 * u_ro))%R).\nunfold Rdiv; rewrite Rabs_mult, (Rabs_pos_eq (/ _));    [|now left; apply Rinv_0_lt_compat].\napply (Rle_trans _ ((u_ro * bpow e) / t)).\nunfold Rdiv; apply Rmult_le_compat_r; [now left; apply Rinv_0_lt_compat|].\napply (Rle_trans _ _ _ (error_le_half_ulp _ _ _ _)).\nfold t; rewrite Hulpt; right; field.\napply (Rle_trans _ (u_ro / sqrt (1 + 4 * u_ro))).\napply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0].\napply sqrt_error_N_FLX_aux3.\nrevert H; unfold Rdiv; rewrite Rabs_mult, Rabs_Rinv; [|fold t; lra]; intro H.\napply (Rmult_le_reg_r (/ Rabs (sqrt x)));  [apply Rinv_0_lt_compat, Rabs_pos_lt; fold t; lra|].\napply (Rle_trans _ _ _ H); right; field; split; [apply Rabs_no_R0;fold t|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (sqrt x) - sqrt x) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (sqrt x))%R.","proofString":"destruct (Rle_or_lt x 0) as [Nx|Px].\nrewrite (sqrt_neg _ Nx), round_0, Rabs_R0, Rmult_0_r; [|apply valid_rnd_N].\nnow unfold Rminus; rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0; right.\ndestruct (sqrt_error_N_FLX_aux1 _ Fx Px)  as (mu, (e, (Fmu, (Hmu, (HmuGe1, HmuLtsqradix))))).\npose (t := sqrt x).\nset (rt := round _ _ _ _).\nassert (Ht : (t = sqrt mu * bpow e)%R).\nunfold t; rewrite Hmu, sqrt_mult_alt; [|now apply (Rle_trans _ _ _ Rle_0_1)].\nnow rewrite sqrt_bpow.\ndestruct (sqrt_error_N_FLX_aux2 _ Fmu HmuGe1) as [Hmu'|[Hmu'|Hmu']].\nunfold rt; fold t; rewrite Ht, Hmu', sqrt_1, Rmult_1_l.\nrewrite round_generic; [|now apply valid_rnd_N|].\nrewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos].\napply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia.\nassert (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R); [rewrite Hmu'; split|].\nrewrite <- sqrt_1 at 1; apply sqrt_le_1_alt; lra.\nrewrite <- sqrt_square; [|lra]; apply sqrt_lt_1_alt; split; [lra|].\nring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra.\nassert (Fbpowe : generic_format beta (FLX_exp prec) (bpow e)).\napply generic_format_bpow; unfold FLX_exp; lia.\nassert (Hrt : rt = bpow e :> R).\nunfold rt; fold t; rewrite Ht; simpl; apply Rle_antisym.\napply round_N_le_midp; [now apply FLX_exp_valid|exact Fbpowe|].\napply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field.\napply round_ge_generic;      [now apply FLX_exp_valid|now apply valid_rnd_N|exact Fbpowe|].\nrewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|].\nfold t; rewrite Hrt, Ht, Hmu', <-(Rabs_pos_eq _ Pb), <-Rabs_mult.\nrewrite Rabs_minus_sym; right; f_equal; field; lra.\nassert (Hsqrtmu : (1 + u_ro < sqrt mu)%R).\napply (Rlt_le_trans _ (sqrt (1 + 4 * u_ro))); [|now apply sqrt_le_1_alt].\nassert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra].\nassert (Hulpt : (ulp beta (FLX_exp prec) t = 2 * u_ro * bpow e)%R).\nunfold ulp; rewrite Req_bool_false; [|apply Rgt_not_eq, Rlt_gt].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l, <-bpow_plus; [|lra].\nf_equal; unfold cexp, FLX_exp.\nassert (Hmagt : (mag beta t = 1 + e :> Z)%Z).\napply mag_unique.\nunfold t; rewrite (Rabs_pos_eq _ (Rlt_le _ _ (sqrt_lt_R0 _ Px))).\nfold t; split.\nrewrite Ht; replace (_ - _)%Z with e by ring.\nrewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt.\nrewrite bpow_plus, bpow_1, Ht; simpl.\napply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia.\nrewrite Hmagt; ring.\nrewrite Ht; apply Rmult_lt_0_compat; [|now apply bpow_gt_0].\nnow apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt].\nassert (Pt : (0 < t)%R).\nrewrite Ht; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0].\nassert (H : (Rabs ((rt - sqrt x) / sqrt x)             <= 1 - 1 / sqrt (1 + 2 * u_ro))%R).\nunfold Rdiv; rewrite Rabs_mult, (Rabs_pos_eq (/ _));    [|now left; apply Rinv_0_lt_compat].\napply (Rle_trans _ ((u_ro * bpow e) / t)).\nunfold Rdiv; apply Rmult_le_compat_r; [now left; apply Rinv_0_lt_compat|].\napply (Rle_trans _ _ _ (error_le_half_ulp _ _ _ _)).\nfold t; rewrite Hulpt; right; field.\napply (Rle_trans _ (u_ro / sqrt (1 + 4 * u_ro))).\napply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0].\napply sqrt_error_N_FLX_aux3.\nrevert H; unfold Rdiv; rewrite Rabs_mult, Rabs_Rinv; [|fold t; lra]; intro H.\napply (Rmult_le_reg_r (/ Rabs (sqrt x)));  [apply Rinv_0_lt_compat, Rabs_pos_lt; fold t; lra|].\napply (Rle_trans _ _ _ H); right; field; split; [apply Rabs_no_R0;fold t|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nx : (x <= 0)%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (sqrt x) - sqrt x) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (sqrt x))%R.","proofString":"rewrite (sqrt_neg _ Nx), round_0, Rabs_R0, Rmult_0_r; [|apply valid_rnd_N].\nnow unfold Rminus; rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0; right."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nx : (x <= 0)%R) : (Rabs (0 - 0) <= 0)%R.","proofString":"now unfold Rminus; rewrite Rplus_0_l, Rabs_Ropp, Rabs_R0; right."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (sqrt x) - sqrt x) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (sqrt x))%R.","proofString":"destruct (sqrt_error_N_FLX_aux1 _ Fx Px)  as (mu, (e, (Fmu, (Hmu, (HmuGe1, HmuLtsqradix))))).\npose (t := sqrt x).\nset (rt := round _ _ _ _).\nassert (Ht : (t = sqrt mu * bpow e)%R).\nunfold t; rewrite Hmu, sqrt_mult_alt; [|now apply (Rle_trans _ _ _ Rle_0_1)].\nnow rewrite sqrt_bpow.\ndestruct (sqrt_error_N_FLX_aux2 _ Fmu HmuGe1) as [Hmu'|[Hmu'|Hmu']].\nunfold rt; fold t; rewrite Ht, Hmu', sqrt_1, Rmult_1_l.\nrewrite round_generic; [|now apply valid_rnd_N|].\nrewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos].\napply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia.\nassert (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R); [rewrite Hmu'; split|].\nrewrite <- sqrt_1 at 1; apply sqrt_le_1_alt; lra.\nrewrite <- sqrt_square; [|lra]; apply sqrt_lt_1_alt; split; [lra|].\nring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra.\nassert (Fbpowe : generic_format beta (FLX_exp prec) (bpow e)).\napply generic_format_bpow; unfold FLX_exp; lia.\nassert (Hrt : rt = bpow e :> R).\nunfold rt; fold t; rewrite Ht; simpl; apply Rle_antisym.\napply round_N_le_midp; [now apply FLX_exp_valid|exact Fbpowe|].\napply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field.\napply round_ge_generic;      [now apply FLX_exp_valid|now apply valid_rnd_N|exact Fbpowe|].\nrewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|].\nfold t; rewrite Hrt, Ht, Hmu', <-(Rabs_pos_eq _ Pb), <-Rabs_mult.\nrewrite Rabs_minus_sym; right; f_equal; field; lra.\nassert (Hsqrtmu : (1 + u_ro < sqrt mu)%R).\napply (Rlt_le_trans _ (sqrt (1 + 4 * u_ro))); [|now apply sqrt_le_1_alt].\nassert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra].\nassert (Hulpt : (ulp beta (FLX_exp prec) t = 2 * u_ro * bpow e)%R).\nunfold ulp; rewrite Req_bool_false; [|apply Rgt_not_eq, Rlt_gt].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l, <-bpow_plus; [|lra].\nf_equal; unfold cexp, FLX_exp.\nassert (Hmagt : (mag beta t = 1 + e :> Z)%Z).\napply mag_unique.\nunfold t; rewrite (Rabs_pos_eq _ (Rlt_le _ _ (sqrt_lt_R0 _ Px))).\nfold t; split.\nrewrite Ht; replace (_ - _)%Z with e by ring.\nrewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt.\nrewrite bpow_plus, bpow_1, Ht; simpl.\napply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia.\nrewrite Hmagt; ring.\nrewrite Ht; apply Rmult_lt_0_compat; [|now apply bpow_gt_0].\nnow apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt].\nassert (Pt : (0 < t)%R).\nrewrite Ht; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0].\nassert (H : (Rabs ((rt - sqrt x) / sqrt x)             <= 1 - 1 / sqrt (1 + 2 * u_ro))%R).\nunfold Rdiv; rewrite Rabs_mult, (Rabs_pos_eq (/ _));    [|now left; apply Rinv_0_lt_compat].\napply (Rle_trans _ ((u_ro * bpow e) / t)).\nunfold Rdiv; apply Rmult_le_compat_r; [now left; apply Rinv_0_lt_compat|].\napply (Rle_trans _ _ _ (error_le_half_ulp _ _ _ _)).\nfold t; rewrite Hulpt; right; field.\napply (Rle_trans _ (u_ro / sqrt (1 + 4 * u_ro))).\napply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0].\napply sqrt_error_N_FLX_aux3.\nrevert H; unfold Rdiv; rewrite Rabs_mult, Rabs_Rinv; [|fold t; lra]; intro H.\napply (Rmult_le_reg_r (/ Rabs (sqrt x)));  [apply Rinv_0_lt_compat, Rabs_pos_lt; fold t; lra|].\napply (Rle_trans _ _ _ H); right; field; split; [apply Rabs_no_R0;fold t|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (sqrt x) - sqrt x) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (sqrt x))%R.","proofString":"pose (t := sqrt x).\nset (rt := round _ _ _ _).\nassert (Ht : (t = sqrt mu * bpow e)%R).\nunfold t; rewrite Hmu, sqrt_mult_alt; [|now apply (Rle_trans _ _ _ Rle_0_1)].\nnow rewrite sqrt_bpow.\ndestruct (sqrt_error_N_FLX_aux2 _ Fmu HmuGe1) as [Hmu'|[Hmu'|Hmu']].\nunfold rt; fold t; rewrite Ht, Hmu', sqrt_1, Rmult_1_l.\nrewrite round_generic; [|now apply valid_rnd_N|].\nrewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos].\napply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia.\nassert (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R); [rewrite Hmu'; split|].\nrewrite <- sqrt_1 at 1; apply sqrt_le_1_alt; lra.\nrewrite <- sqrt_square; [|lra]; apply sqrt_lt_1_alt; split; [lra|].\nring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra.\nassert (Fbpowe : generic_format beta (FLX_exp prec) (bpow e)).\napply generic_format_bpow; unfold FLX_exp; lia.\nassert (Hrt : rt = bpow e :> R).\nunfold rt; fold t; rewrite Ht; simpl; apply Rle_antisym.\napply round_N_le_midp; [now apply FLX_exp_valid|exact Fbpowe|].\napply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field.\napply round_ge_generic;      [now apply FLX_exp_valid|now apply valid_rnd_N|exact Fbpowe|].\nrewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|].\nfold t; rewrite Hrt, Ht, Hmu', <-(Rabs_pos_eq _ Pb), <-Rabs_mult.\nrewrite Rabs_minus_sym; right; f_equal; field; lra.\nassert (Hsqrtmu : (1 + u_ro < sqrt mu)%R).\napply (Rlt_le_trans _ (sqrt (1 + 4 * u_ro))); [|now apply sqrt_le_1_alt].\nassert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra].\nassert (Hulpt : (ulp beta (FLX_exp prec) t = 2 * u_ro * bpow e)%R).\nunfold ulp; rewrite Req_bool_false; [|apply Rgt_not_eq, Rlt_gt].\nunfold u_ro; rewrite <-Rmult_assoc, Rinv_r, Rmult_1_l, <-bpow_plus; [|lra].\nf_equal; unfold cexp, FLX_exp.\nassert (Hmagt : (mag beta t = 1 + e :> Z)%Z).\napply mag_unique.\nunfold t; rewrite (Rabs_pos_eq _ (Rlt_le _ _ (sqrt_lt_R0 _ Px))).\nfold t; split.\nrewrite Ht; replace (_ - _)%Z with e by ring.\nrewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt.\nrewrite bpow_plus, bpow_1, Ht; simpl.\napply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia.\nrewrite Hmagt; ring.\nrewrite Ht; apply Rmult_lt_0_compat; [|now apply bpow_gt_0].\nnow apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt].\nassert (Pt : (0 < t)%R).\nrewrite Ht; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0].\nassert (H : (Rabs ((rt - sqrt x) / sqrt x)             <= 1 - 1 / sqrt (1 + 2 * u_ro))%R).\nunfold Rdiv; rewrite Rabs_mult, (Rabs_pos_eq (/ _));    [|now left; apply Rinv_0_lt_compat].\napply (Rle_trans _ ((u_ro * bpow e) / t)).\nunfold Rdiv; apply Rmult_le_compat_r; [now left; apply Rinv_0_lt_compat|].\napply (Rle_trans _ _ _ (error_le_half_ulp _ _ _ _)).\nfold t; rewrite Hulpt; right; field.\napply (Rle_trans _ (u_ro / sqrt (1 + 4 * u_ro))).\napply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0].\napply sqrt_error_N_FLX_aux3.\nrevert H; unfold Rdiv; rewrite Rabs_mult, Rabs_Rinv; [|fold t; lra]; intro H.\napply (Rmult_le_reg_r (/ Rabs (sqrt x)));  [apply Rinv_0_lt_compat, Rabs_pos_lt; fold t; lra|].\napply (Rle_trans _ _ _ H); right; field; split; [apply Rabs_no_R0;fold t|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) : (sqrt mu * sqrt (bpow (2 * e)))%R = (sqrt mu * bpow e)%R.","proofString":"now rewrite sqrt_bpow."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = 1%R) : (Rabs (round beta (FLX_exp prec) (Znearest choice) (bpow e) - bpow e) <=\n (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (bpow e))%R.","proofString":"rewrite round_generic; [|now apply valid_rnd_N|].\nrewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos].\napply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = 1%R) : (Rabs (bpow e - bpow e) <= (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (bpow e))%R.","proofString":"rewrite Rminus_diag_eq, Rabs_R0; [|now simpl].\nnow apply Rmult_le_pos; [|apply Rabs_pos]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = 1%R) : (0 <= (1 - 1 / sqrt (1 + 2 * u_ro)) * Rabs (bpow e))%R.","proofString":"now apply Rmult_le_pos; [|apply Rabs_pos]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = 1%R) : format (bpow e).","proofString":"apply generic_format_bpow'; [now apply FLX_exp_valid|].\nunfold FLX_exp; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = 1%R) : (FLX_exp prec e <= e)%Z.","proofString":"unfold FLX_exp; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) : (1 <= sqrt (1 + 2 * u_ro))%R.","proofString":"rewrite <- sqrt_1 at 1; apply sqrt_le_1_alt; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) : (sqrt (1 + 2 * u_ro) < 1 + u_ro)%R.","proofString":"rewrite <- sqrt_square; [|lra]; apply sqrt_lt_1_alt; split; [lra|].\nring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) : (1 + 2 * u_ro < (1 + u_ro) * (1 + u_ro))%R.","proofString":"ring_simplify; assert (0 < u_ro ^ 2)%R; [apply pow_lt|]; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) : format (bpow e).","proofString":"apply generic_format_bpow; unfold FLX_exp; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : (round beta (FLX_exp prec) (Znearest choice) (sqrt mu * bpow e) <= bpow e)%R.","proofString":"apply round_N_le_midp; [now apply FLX_exp_valid|exact Fbpowe|].\napply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : (sqrt mu * bpow e < (bpow e + succ beta (FLX_exp prec) (bpow e)) / 2)%R.","proofString":"apply (Rlt_le_trans _ ((1 + u_ro) * bpow e)).\nnow apply Rmult_lt_compat_r; [apply bpow_gt_0|].\nunfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : (sqrt mu * bpow e < (1 + u_ro) * bpow e)%R.","proofString":"now apply Rmult_lt_compat_r; [apply bpow_gt_0|]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : ((1 + u_ro) * bpow e <= (bpow e + succ beta (FLX_exp prec) (bpow e)) / 2)%R.","proofString":"unfold succ; rewrite Rle_bool_true; [|now apply bpow_ge_0].\nrewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : ((1 + u_ro) * bpow e <=\n (bpow e + (bpow e + ulp beta (FLX_exp prec) (bpow e))) / 2)%R.","proofString":"rewrite ulp_bpow; unfold FLX_exp.\nunfold Z.sub, u_ro; rewrite !bpow_plus; right; field."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : ((1 + u_ro) * bpow e <= (bpow e + (bpow e + bpow (e + 1 - prec))) / 2)%R.","proofString":"unfold Z.sub, u_ro; rewrite !bpow_plus; right; field."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : (bpow e <= round beta (FLX_exp prec) (Znearest choice) (sqrt mu * bpow e))%R.","proofString":"apply round_ge_generic;      [now apply FLX_exp_valid|now apply valid_rnd_N|exact Fbpowe|].\nrewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : (bpow e <= sqrt mu * bpow e)%R.","proofString":"rewrite <- (Rmult_1_l (bpow _)) at 1.\nnow apply Rmult_le_compat_r; [apply bpow_ge_0|]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) : (1 * bpow e <= sqrt mu * bpow e)%R.","proofString":"now apply Rmult_le_compat_r; [apply bpow_ge_0|]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : mu = (1 + 2 * u_ro)%R) (Hsqrtmu : (1 <= sqrt mu < 1 + u_ro)%R) (Fbpowe : format (bpow e)) (Hrt : rt = bpow e) : (Rabs (bpow e - sqrt (1 + 2 * u_ro) * bpow e) <=\n Rabs ((1 - 1 / sqrt (1 + 2 * u_ro)) * (sqrt (1 + 2 * u_ro) * bpow e)))%R.","proofString":"rewrite Rabs_minus_sym; right; f_equal; field; lra."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) : (1 + u_ro < sqrt mu)%R.","proofString":"apply (Rlt_le_trans _ (sqrt (1 + 4 * u_ro))); [|now apply sqrt_le_1_alt].\nassert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) : (1 + u_ro < sqrt (1 + 4 * u_ro))%R.","proofString":"assert (P1peps : (0 <= 1 + u_ro)%R)    by now apply Rplus_le_le_0_compat; [lra|apply Peps].\nrewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (P1peps : (0 <= 1 + u_ro)%R) : (1 + u_ro < sqrt (1 + 4 * u_ro))%R.","proofString":"rewrite <- (sqrt_square (1 + u_ro)); [|lra].\napply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (P1peps : (0 <= 1 + u_ro)%R) : (sqrt ((1 + u_ro) * (1 + u_ro)) < sqrt (1 + 4 * u_ro))%R.","proofString":"apply sqrt_lt_1_alt; split; [now apply Rmult_le_pos|].\napply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (P1peps : (0 <= 1 + u_ro)%R) : ((1 + u_ro) * (1 + u_ro) < 1 + 4 * u_ro)%R.","proofString":"apply (Rplus_lt_reg_r (-1 - 2 * u_ro)); ring_simplify; simpl.\nrewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (P1peps : (0 <= 1 + u_ro)%R) : (u_ro * (u_ro * 1) < 2 * u_ro)%R.","proofString":"rewrite Rmult_1_r; apply Rmult_lt_compat_r; [apply Peps'|].\nnow apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (P1peps : (0 <= 1 + u_ro)%R) : (u_ro < 2)%R.","proofString":"now apply (Rlt_le_trans _ 1); [apply u_ro_lt_1|lra]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (bpow (1 + e - 1) <= t)%R.","proofString":"rewrite Ht; replace (_ - _)%Z with e by ring.\nrewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (bpow e <= sqrt mu * bpow e)%R.","proofString":"rewrite <- (Rmult_1_l (bpow _)) at 1; apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow rewrite <- sqrt_1; apply sqrt_le_1_alt."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (0 <= bpow e)%R.","proofString":"apply bpow_ge_0."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (1 <= sqrt mu)%R.","proofString":"now rewrite <- sqrt_1; apply sqrt_le_1_alt."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (t < bpow (1 + e))%R.","proofString":"rewrite bpow_plus, bpow_1, Ht; simpl.\napply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (sqrt mu * bpow e < IZR beta * bpow e)%R.","proofString":"apply Rmult_lt_compat_r; [now apply bpow_gt_0|].\nrewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (sqrt mu < IZR beta)%R.","proofString":"rewrite <- sqrt_square.\napply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR.\napply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (sqrt mu < sqrt (IZR beta * IZR beta))%R.","proofString":"apply sqrt_lt_1_alt; split; [lra|].\napply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (mu < IZR beta * IZR beta)%R.","proofString":"apply (Rlt_le_trans _ _ _ HmuLtsqradix); right.\nnow unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : bpow 2 = (IZR beta * IZR beta)%R.","proofString":"now unfold bpow, Z.pow_pos; simpl; rewrite Zmult_1_r, mult_IZR."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (0 <= IZR beta)%R.","proofString":"apply IZR_le, (Z.le_trans _ 2), Zle_bool_imp_le, radix_prop; lia."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (0 < t)%R.","proofString":"rewrite Ht; apply Rmult_lt_0_compat; [|now apply bpow_gt_0].\nnow apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) : (0 < sqrt mu)%R.","proofString":"now apply (Rlt_le_trans _ 1); [lra|rewrite <- sqrt_1; apply sqrt_le_1_alt]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) : (0 < t)%R.","proofString":"rewrite Ht; apply Rmult_lt_0_compat; [lra|apply bpow_gt_0]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (u_ro * bpow e / t <= 1 - 1 * / sqrt (1 + 2 * u_ro))%R.","proofString":"apply (Rle_trans _ (u_ro / sqrt (1 + 4 * u_ro))).\napply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0].\napply sqrt_error_N_FLX_aux3."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (u_ro * bpow e / t <= u_ro / sqrt (1 + 4 * u_ro))%R.","proofString":"apply (Rle_trans _ (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))).\nunfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt].\nright; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (u_ro * bpow e / t <= u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e))%R.","proofString":"unfold Rdiv; apply Rmult_le_compat_l;        [now apply Rmult_le_pos; [apply Peps|apply bpow_ge_0]|].\napply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (/ t <= / (sqrt (1 + 4 * u_ro) * bpow e))%R.","proofString":"apply Rinv_le.\napply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0].\nnow rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (0 < sqrt (1 + 4 * u_ro) * bpow e)%R.","proofString":"apply Rmult_lt_0_compat; [apply sqrt_lt_R0; lra|apply bpow_gt_0]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (sqrt (1 + 4 * u_ro) * bpow e <= t)%R.","proofString":"now rewrite Ht; apply Rmult_le_compat_r;        [apply bpow_ge_0|apply sqrt_le_1_alt]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (u_ro * bpow e / (sqrt (1 + 4 * u_ro) * bpow e) <= u_ro / sqrt (1 + 4 * u_ro))%R.","proofString":"right; field; split; apply Rgt_not_eq, Rlt_gt;      [apply sqrt_lt_R0; lra|apply bpow_gt_0]."},{"statement":"(x : R) (Fx : format x) (Peps : (0 <= u_ro)%R) (Peps' : (0 < u_ro)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Pb' : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Px : (0 < x)%R) (mu : R) (e : Z) (Fmu : format mu) (Hmu : x = (mu * bpow (2 * e))%R) (HmuGe1 : (1 <= mu)%R) (HmuLtsqradix : (mu < bpow 2)%R) (t : R) (rt : R) (Ht : t = (sqrt mu * bpow e)%R) (Hmu' : (1 + 4 * u_ro <= mu)%R) (Hsqrtmu : (1 + u_ro < sqrt mu)%R) (Hulpt : ulp beta (FLX_exp prec) t = (2 * u_ro * bpow e)%R) (Pt : (0 < t)%R) : (u_ro / sqrt (1 + 4 * u_ro) <= 1 - 1 * / sqrt (1 + 2 * u_ro))%R.","proofString":"apply sqrt_error_N_FLX_aux3."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"assert (H := Rabs_le_inv _ _ Bd).\nassert (H' := om1ds1p2u_ro_le_u_rod1pu_ro).\nassert (H'' := u_rod1pu_ro_le_u_ro beta prec).\nassert (H''' := u_ro_lt_1 beta prec prec_gt_0_).\nassert (Hpos := s1p2u_rom1_pos).\ndestruct (Req_dec rx 0) as [Zfx|Nzfx].\nexists 0%R; split; [now rewrite Rabs_R0|].\nrewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra.\ndestruct (Req_dec x 0) as [Zx|Nzx].\nnow exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l.\nset (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"assert (H' := om1ds1p2u_ro_le_u_rod1pu_ro).\nassert (H'' := u_rod1pu_ro_le_u_ro beta prec).\nassert (H''' := u_ro_lt_1 beta prec prec_gt_0_).\nassert (Hpos := s1p2u_rom1_pos).\ndestruct (Req_dec rx 0) as [Zfx|Nzfx].\nexists 0%R; split; [now rewrite Rabs_R0|].\nrewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra.\ndestruct (Req_dec x 0) as [Zx|Nzx].\nnow exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l.\nset (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"assert (H'' := u_rod1pu_ro_le_u_ro beta prec).\nassert (H''' := u_ro_lt_1 beta prec prec_gt_0_).\nassert (Hpos := s1p2u_rom1_pos).\ndestruct (Req_dec rx 0) as [Zfx|Nzfx].\nexists 0%R; split; [now rewrite Rabs_R0|].\nrewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra.\ndestruct (Req_dec x 0) as [Zx|Nzx].\nnow exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l.\nset (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"assert (H''' := u_ro_lt_1 beta prec prec_gt_0_).\nassert (Hpos := s1p2u_rom1_pos).\ndestruct (Req_dec rx 0) as [Zfx|Nzfx].\nexists 0%R; split; [now rewrite Rabs_R0|].\nrewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra.\ndestruct (Req_dec x 0) as [Zx|Nzx].\nnow exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l.\nset (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"assert (Hpos := s1p2u_rom1_pos).\ndestruct (Req_dec rx 0) as [Zfx|Nzfx].\nexists 0%R; split; [now rewrite Rabs_R0|].\nrewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra.\ndestruct (Req_dec x 0) as [Zx|Nzx].\nnow exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l.\nset (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"destruct (Req_dec rx 0) as [Zfx|Nzfx].\nexists 0%R; split; [now rewrite Rabs_R0|].\nrewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra.\ndestruct (Req_dec x 0) as [Zx|Nzx].\nnow exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l.\nset (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Zfx : rx = 0%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"exists 0%R; split; [now rewrite Rabs_R0|].\nrewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Zfx : rx = 0%R) : x = (rx * (1 + 0))%R.","proofString":"rewrite Rplus_0_r, Rmult_1_r, Zfx; rewrite Zfx in Hd.\ndestruct (Rmult_integral _ _ (sym_eq Hd)); lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : 0%R = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Zfx : rx = 0%R) : x = 0%R.","proofString":"destruct (Rmult_integral _ _ (sym_eq Hd)); lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"destruct (Req_dec x 0) as [Zx|Nzx].\nnow exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l.\nset (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Zx : x = 0%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"now exfalso; revert Hd; rewrite Zx; rewrite Rmult_0_l."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) : exists eps : R,\n  (Rabs eps <= sqrt (1 + 2 * u_ro) - 1)%R /\\ x = (rx * (1 + eps))%R.","proofString":"set (d' := ((x - rx) / rx)%R).\nassert (Hd' : (Rabs d' <= sqrt (1 + 2 * u_ro) - 1)%R).\nunfold d'; rewrite Hd.\nreplace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra.\nnow exists d'; split; [exact Hd'|]; unfold d'; field."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) (d' : R) : (Rabs ((x - x * (1 + d)) / (x * (1 + d))) <= sqrt (1 + 2 * u_ro) - 1)%R.","proofString":"replace (_ / _)%R with (- d / (1 + d))%R; [|now field; split; lra].\nunfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) (d' : R) : (Rabs (- d / (1 + d)) <= sqrt (1 + 2 * u_ro) - 1)%R.","proofString":"unfold Rdiv; rewrite Rabs_mult, Rabs_Ropp.\nrewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) (d' : R) : (Rabs d * Rabs (/ (1 + d)) <= sqrt (1 + 2 * u_ro) - 1)%R.","proofString":"rewrite (Rabs_pos_eq (/ _)); [|apply Rlt_le, Rinv_0_lt_compat; lra].\napply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) (d' : R) : (Rabs d * / (1 + d) <= sqrt (1 + 2 * u_ro) - 1)%R.","proofString":"apply (Rmult_le_reg_r (1 + d)); [lra|].\nrewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) (d' : R) : (Rabs d * / (1 + d) * (1 + d) <= (sqrt (1 + 2 * u_ro) - 1) * (1 + d))%R.","proofString":"rewrite Rmult_assoc, Rinv_l, Rmult_1_r; [|lra].\napply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) (d' : R) : (Rabs d <= (sqrt (1 + 2 * u_ro) - 1) * (1 + d))%R.","proofString":"apply (Rle_trans _ _ _ Bd).\napply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra."},{"statement":"(x rx d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : rx = (x * (1 + d))%R) (H : (- (1 - 1 / sqrt (1 + 2 * u_ro)) <= d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (H' : (1 - 1 / sqrt (1 + 2 * u_ro) <= u_ro / (1 + u_ro))%R) (H'' : (u_ro / (1 + u_ro) <= u_ro)%R) (H''' : (u_ro < 1)%R) (Hpos : (0 <= sqrt (1 + 2 * u_ro) - 1)%R) (Nzfx : rx <> 0%R) (Nzx : x <> 0%R) (d' : R) : (1 - 1 / sqrt (1 + 2 * u_ro) <= (sqrt (1 + 2 * u_ro) - 1) * (1 + d))%R.","proofString":"apply (Rle_trans _ ((sqrt (1 + 2 * u_ro) - 1) * (1/sqrt (1 + 2 * u_ro))));    [right; field|apply Rmult_le_compat_l]; lra."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) : exists eps : R,\n  (Rabs eps <= 1 - 1 / sqrt (1 + 2 * u_ro))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n  (sqrt x * (1 + eps))%R.","proofString":"assert (Heps := u_ro_pos).\nassert (Pb := om1ds1p2u_ro_pos).\ndestruct (Rle_or_lt x 0) as [Nx|Px].\nexists 0%R; split; [now rewrite Rabs_R0|].\nnow rewrite (sqrt_neg x Nx), round_0, Rmult_0_l; [|apply valid_rnd_N].\nassert (Fx' := generic_format_FLX_FLT _ _ _ _ Fx).\ndestruct (sqrt_error_N_FLX_ex _ Fx') as (d, (Bd, Hd)).\nexists d; split; [exact Bd|]; rewrite <-Hd; apply round_FLT_FLX.\napply (Rle_trans _ (bpow (emin / 2)%Z)).\napply bpow_le, Z.div_le_lower_bound; lia.\napply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) : exists eps : R,\n  (Rabs eps <= 1 - 1 / sqrt (1 + 2 * u_ro))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n  (sqrt x * (1 + eps))%R.","proofString":"assert (Pb := om1ds1p2u_ro_pos).\ndestruct (Rle_or_lt x 0) as [Nx|Px].\nexists 0%R; split; [now rewrite Rabs_R0|].\nnow rewrite (sqrt_neg x Nx), round_0, Rmult_0_l; [|apply valid_rnd_N].\nassert (Fx' := generic_format_FLX_FLT _ _ _ _ Fx).\ndestruct (sqrt_error_N_FLX_ex _ Fx') as (d, (Bd, Hd)).\nexists d; split; [exact Bd|]; rewrite <-Hd; apply round_FLT_FLX.\napply (Rle_trans _ (bpow (emin / 2)%Z)).\napply bpow_le, Z.div_le_lower_bound; lia.\napply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) : exists eps : R,\n  (Rabs eps <= 1 - 1 / sqrt (1 + 2 * u_ro))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n  (sqrt x * (1 + eps))%R.","proofString":"destruct (Rle_or_lt x 0) as [Nx|Px].\nexists 0%R; split; [now rewrite Rabs_R0|].\nnow rewrite (sqrt_neg x Nx), round_0, Rmult_0_l; [|apply valid_rnd_N].\nassert (Fx' := generic_format_FLX_FLT _ _ _ _ Fx).\ndestruct (sqrt_error_N_FLX_ex _ Fx') as (d, (Bd, Hd)).\nexists d; split; [exact Bd|]; rewrite <-Hd; apply round_FLT_FLX.\napply (Rle_trans _ (bpow (emin / 2)%Z)).\napply bpow_le, Z.div_le_lower_bound; lia.\napply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Nx : (x <= 0)%R) : exists eps : R,\n  (Rabs eps <= 1 - 1 / sqrt (1 + 2 * u_ro))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n  (sqrt x * (1 + eps))%R.","proofString":"exists 0%R; split; [now rewrite Rabs_R0|].\nnow rewrite (sqrt_neg x Nx), round_0, Rmult_0_l; [|apply valid_rnd_N]."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Nx : (x <= 0)%R) : round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n(sqrt x * (1 + 0))%R.","proofString":"now rewrite (sqrt_neg x Nx), round_0, Rmult_0_l; [|apply valid_rnd_N]."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) : exists eps : R,\n  (Rabs eps <= 1 - 1 / sqrt (1 + 2 * u_ro))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n  (sqrt x * (1 + eps))%R.","proofString":"assert (Fx' := generic_format_FLX_FLT _ _ _ _ Fx).\ndestruct (sqrt_error_N_FLX_ex _ Fx') as (d, (Bd, Hd)).\nexists d; split; [exact Bd|]; rewrite <-Hd; apply round_FLT_FLX.\napply (Rle_trans _ (bpow (emin / 2)%Z)).\napply bpow_le, Z.div_le_lower_bound; lia.\napply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) : exists eps : R,\n  (Rabs eps <= 1 - 1 / sqrt (1 + 2 * u_ro))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n  (sqrt x * (1 + eps))%R.","proofString":"destruct (sqrt_error_N_FLX_ex _ Fx') as (d, (Bd, Hd)).\nexists d; split; [exact Bd|]; rewrite <-Hd; apply round_FLT_FLX.\napply (Rle_trans _ (bpow (emin / 2)%Z)).\napply bpow_le, Z.div_le_lower_bound; lia.\napply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) (d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (sqrt x) = (sqrt x * (1 + d))%R) : exists eps : R,\n  (Rabs eps <= 1 - 1 / sqrt (1 + 2 * u_ro))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (sqrt x) =\n  (sqrt x * (1 + eps))%R.","proofString":"exists d; split; [exact Bd|]; rewrite <-Hd; apply round_FLT_FLX.\napply (Rle_trans _ (bpow (emin / 2)%Z)).\napply bpow_le, Z.div_le_lower_bound; lia.\napply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) (d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (sqrt x) = (sqrt x * (1 + d))%R) : (bpow (emin + prec - 1) <= Rabs (sqrt x))%R.","proofString":"apply (Rle_trans _ (bpow (emin / 2)%Z)).\napply bpow_le, Z.div_le_lower_bound; lia.\napply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) (d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (sqrt x) = (sqrt x * (1 + d))%R) : (bpow (emin + prec - 1) <= bpow (emin / 2))%R.","proofString":"apply bpow_le, Z.div_le_lower_bound; lia."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) (d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (sqrt x) = (sqrt x * (1 + d))%R) : (bpow (emin / 2) <= Rabs (sqrt x))%R.","proofString":"apply (Rle_trans _ _ _ (sqrt_bpow_ge _ _)).\nrewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) (d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (sqrt x) = (sqrt x * (1 + d))%R) : (sqrt (bpow emin) <= Rabs (sqrt x))%R.","proofString":"rewrite Rabs_pos_eq; [|now apply sqrt_pos]; apply sqrt_le_1_alt.\nrevert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) (d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (sqrt x) = (sqrt x * (1 + d))%R) : (bpow emin <= x)%R.","proofString":"revert Fx; apply generic_format_ge_bpow; [|exact Px].\nintro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(x : R) (Heps : forall (beta0 : radix) (prec0 : Z), (0 <= Relative.u_ro beta0 prec0)%R) (Pb : (0 <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Px : (0 < x)%R) (Fx' : format x) (d : R) (Bd : (Rabs d <= 1 - 1 / sqrt (1 + 2 * u_ro))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (sqrt x) = (sqrt x * (1 + d))%R) : forall e : Z, (emin <= FLT_exp emin prec e)%Z.","proofString":"intro e; unfold FLT_exp; apply Z.le_max_r."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (0 <= x)%R) : format (x - IZR (rnd (x / y)%R) * y).","proofString":"apply format_REM_aux; try easy.\nintros K.\napply Hrnd.\nrewrite Rabs_pos_eq.\napply K.\napply Rlt_le, K."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (0 <= x)%R) : (0 < x / y < / 2)%R -> rnd (x / y)%R = 0%Z.","proofString":"intros K.\napply Hrnd.\nrewrite Rabs_pos_eq.\napply K.\napply Rlt_le, K."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (0 <= x)%R) (K : (0 < x / y < / 2)%R) : rnd (x / y)%R = 0%Z.","proofString":"apply Hrnd.\nrewrite Rabs_pos_eq.\napply K.\napply Rlt_le, K."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (0 <= x)%R) (K : (0 < x / y < / 2)%R) : (Rabs (x / y) < / 2)%R.","proofString":"rewrite Rabs_pos_eq.\napply K.\napply Rlt_le, K."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (0 <= x)%R) (K : (0 < x / y < / 2)%R) : (x / y < / 2)%R.","proofString":"apply K."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (0 <= x)%R) (K : (0 < x / y < / 2)%R) : (0 <= x / y)%R.","proofString":"apply Rlt_le, K."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : format (- x).","proofString":"now apply generic_format_opp."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : (0 <= - x)%R.","proofString":"apply Ropp_le_cancel; rewrite Ropp_0, Ropp_involutive; now left."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : (0 < - x / y < / 2)%R -> Zrnd_opp rnd (- x / y) = 0%Z.","proofString":"replace (- x / y)%R with (- (x/y))%R by (unfold Rdiv; ring).\nintros K.\nunfold Zrnd_opp.\nrewrite Ropp_involutive, Hrnd.\neasy.\nrewrite Rabs_left.\napply K.\napply Ropp_lt_cancel.\nnow rewrite Ropp_0."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : (0 < - (x / y) < / 2)%R -> Zrnd_opp rnd (- (x / y)) = 0%Z.","proofString":"intros K.\nunfold Zrnd_opp.\nrewrite Ropp_involutive, Hrnd.\neasy.\nrewrite Rabs_left.\napply K.\napply Ropp_lt_cancel.\nnow rewrite Ropp_0."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) (K : (0 < - (x / y) < / 2)%R) : Zrnd_opp rnd (- (x / y)) = 0%Z.","proofString":"unfold Zrnd_opp.\nrewrite Ropp_involutive, Hrnd.\neasy.\nrewrite Rabs_left.\napply K.\napply Ropp_lt_cancel.\nnow rewrite Ropp_0."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) (K : (0 < - (x / y) < / 2)%R) : (- rnd (- - (x / y))%R)%Z = 0%Z.","proofString":"rewrite Ropp_involutive, Hrnd.\neasy.\nrewrite Rabs_left.\napply K.\napply Ropp_lt_cancel.\nnow rewrite Ropp_0."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) (K : (0 < - (x / y) < / 2)%R) : (- 0)%Z = 0%Z.","proofString":"easy."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) (K : (0 < - (x / y) < / 2)%R) : (Rabs (x / y) < / 2)%R.","proofString":"rewrite Rabs_left.\napply K.\napply Ropp_lt_cancel.\nnow rewrite Ropp_0."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) (K : (0 < - (x / y) < / 2)%R) : (- (x / y) < / 2)%R.","proofString":"apply K."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) (K : (0 < - (x / y) < / 2)%R) : (x / y < 0)%R.","proofString":"apply Ropp_lt_cancel.\nnow rewrite Ropp_0."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) (K : (0 < - (x / y) < / 2)%R) : (- 0 < - (x / y))%R.","proofString":"now rewrite Ropp_0."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : (- (- x - IZR (Zrnd_opp rnd (- x / y)) * y))%R =\n(x - IZR (rnd (x / y)) * y)%R.","proofString":"unfold Zrnd_opp.\nreplace (- (- x / y))%R with (x / y)%R by (unfold Rdiv; ring).\nrewrite opp_IZR.\nring."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : (- (- x - IZR (- rnd (- (- x / y))) * y))%R = (x - IZR (rnd (x / y)) * y)%R.","proofString":"replace (- (- x / y))%R with (x / y)%R by (unfold Rdiv; ring).\nrewrite opp_IZR.\nring."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : (- (- x - IZR (- rnd (x / y)) * y))%R = (x - IZR (rnd (x / y)) * y)%R.","proofString":"rewrite opp_IZR.\nring."},{"statement":"(rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) (Hx : (x < 0)%R) : (- (- x - - IZR (rnd (x / y)) * y))%R = (x - IZR (rnd (x / y)) * y)%R.","proofString":"ring."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 <= y)%R) : format (x - IZR (rnd (x / y)%R) * y).","proofString":"destruct Hy as [Hy|Hy].\nnow apply H.\nnow rewrite <- Hy, Rmult_0_r, Rminus_0_r."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (0 < y)%R) : format (x - IZR (rnd (x / y)%R) * y).","proofString":"now apply H."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : 0%R = y) : format (x - IZR (rnd (x / y)%R) * y).","proofString":"now rewrite <- Hy, Rmult_0_r, Rminus_0_r."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (Rabs (x / - y) < / 2)%R -> Zrnd_opp rnd (x / - y) = 0%Z.","proofString":"replace (x / - y)%R with (- (x/y))%R.\nintros K.\nunfold Zrnd_opp.\nrewrite Ropp_involutive, Hrnd.\neasy.\nnow rewrite <- Rabs_Ropp.\nfield; now apply Rlt_not_eq."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (Rabs (- (x / y)) < / 2)%R -> Zrnd_opp rnd (- (x / y)) = 0%Z.","proofString":"intros K.\nunfold Zrnd_opp.\nrewrite Ropp_involutive, Hrnd.\neasy.\nnow rewrite <- Rabs_Ropp."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) (K : (Rabs (- (x / y)) < / 2)%R) : Zrnd_opp rnd (- (x / y)) = 0%Z.","proofString":"unfold Zrnd_opp.\nrewrite Ropp_involutive, Hrnd.\neasy.\nnow rewrite <- Rabs_Ropp."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) (K : (Rabs (- (x / y)) < / 2)%R) : (- rnd (- - (x / y))%R)%Z = 0%Z.","proofString":"rewrite Ropp_involutive, Hrnd.\neasy.\nnow rewrite <- Rabs_Ropp."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) (K : (Rabs (- (x / y)) < / 2)%R) : (- 0)%Z = 0%Z.","proofString":"easy."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) (K : (Rabs (- (x / y)) < / 2)%R) : (Rabs (x / y) < / 2)%R.","proofString":"now rewrite <- Rabs_Ropp."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (- (x / y))%R = (x / - y)%R.","proofString":"field; now apply Rlt_not_eq."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : format (- y).","proofString":"now apply generic_format_opp."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (0 < - y)%R.","proofString":"apply Ropp_lt_cancel; now rewrite Ropp_0, Ropp_involutive."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (IZR (Zrnd_opp rnd (x / - y)) * - y)%R = (IZR (rnd (x / y)) * y)%R.","proofString":"unfold Zrnd_opp.\nreplace (- (x / - y))%R with (x/y)%R.\nrewrite opp_IZR.\nring.\nfield; now apply Rlt_not_eq."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (IZR (- rnd (- (x / - y))) * - y)%R = (IZR (rnd (x / y)) * y)%R.","proofString":"replace (- (x / - y))%R with (x/y)%R.\nrewrite opp_IZR.\nring.\nfield; now apply Rlt_not_eq."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (IZR (- rnd (x / y)) * - y)%R = (IZR (rnd (x / y)) * y)%R.","proofString":"rewrite opp_IZR.\nring."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (- IZR (rnd (x / y)) * - y)%R = (IZR (rnd (x / y)) * y)%R.","proofString":"ring."},{"statement":"(H : forall rnd0 : R -> Z,\nValid_rnd rnd0 ->\nforall x0 y0 : R,\n((Rabs (x0 / y0) < / 2)%R -> rnd0 (x0 / y0)%R = 0%Z) ->\nformat x0 ->\nformat y0 -> (0 < y0)%R -> format (x0 - IZR (rnd0 (x0 / y0)%R) * y0)) (rnd : R -> Z) (valid_rnd : Valid_rnd rnd) (x y : R) (Hrnd : (Rabs (x / y) < / 2)%R -> rnd (x / y)%R = 0%Z) (Fx : format x) (Fy : format y) (Hy : (y < 0)%R) : (x / y)%R = (- (x / - y))%R.","proofString":"field; now apply Rlt_not_eq."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) : (Rabs (x / y) < / 2)%R -> Ztrunc (x / y) = 0%Z.","proofString":"intros K.\napply Z.abs_0_iff.\nrewrite <- Ztrunc_abs.\nrewrite Ztrunc_floor by apply Rabs_pos.\napply Zle_antisym.\nreplace 0%Z with (Zfloor (/2)).\napply Zfloor_le.\nnow apply Rlt_le.\napply Zfloor_imp.\nsimpl ; lra.\napply Zfloor_lub.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : Ztrunc (x / y) = 0%Z.","proofString":"apply Z.abs_0_iff.\nrewrite <- Ztrunc_abs.\nrewrite Ztrunc_floor by apply Rabs_pos.\napply Zle_antisym.\nreplace 0%Z with (Zfloor (/2)).\napply Zfloor_le.\nnow apply Rlt_le.\napply Zfloor_imp.\nsimpl ; lra.\napply Zfloor_lub.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : Z.abs (Ztrunc (x / y)) = 0%Z.","proofString":"rewrite <- Ztrunc_abs.\nrewrite Ztrunc_floor by apply Rabs_pos.\napply Zle_antisym.\nreplace 0%Z with (Zfloor (/2)).\napply Zfloor_le.\nnow apply Rlt_le.\napply Zfloor_imp.\nsimpl ; lra.\napply Zfloor_lub.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : Ztrunc (Rabs (x / y)) = 0%Z.","proofString":"rewrite Ztrunc_floor by apply Rabs_pos.\napply Zle_antisym.\nreplace 0%Z with (Zfloor (/2)).\napply Zfloor_le.\nnow apply Rlt_le.\napply Zfloor_imp.\nsimpl ; lra.\napply Zfloor_lub.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : Zfloor (Rabs (x / y)) = 0%Z.","proofString":"apply Zle_antisym.\nreplace 0%Z with (Zfloor (/2)).\napply Zfloor_le.\nnow apply Rlt_le.\napply Zfloor_imp.\nsimpl ; lra.\napply Zfloor_lub.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : (Zfloor (Rabs (x / y)) <= 0)%Z.","proofString":"replace 0%Z with (Zfloor (/2)).\napply Zfloor_le.\nnow apply Rlt_le.\napply Zfloor_imp.\nsimpl ; lra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : (Zfloor (Rabs (x / y)) <= Zfloor (/ 2))%Z.","proofString":"apply Zfloor_le.\nnow apply Rlt_le."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : (Rabs (x / y) <= / 2)%R.","proofString":"now apply Rlt_le."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : Zfloor (/ 2) = 0%Z.","proofString":"apply Zfloor_imp.\nsimpl ; lra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : (0 <= / 2 < IZR (0 + 1))%R.","proofString":"simpl ; lra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : (0 <= Zfloor (Rabs (x / y)))%Z.","proofString":"apply Zfloor_lub.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : (0 <= Rabs (x / y))%R.","proofString":"apply Rabs_pos."},{"statement":"(choice : Z -> bool) (x y : R) (Fx : format x) (Fy : format y) : (Rabs (x / y) < / 2)%R -> Znearest choice (x / y) = 0%Z.","proofString":"intros K.\napply Znearest_imp.\nnow rewrite Rminus_0_r."},{"statement":"(choice : Z -> bool) (x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : Znearest choice (x / y) = 0%Z.","proofString":"apply Znearest_imp.\nnow rewrite Rminus_0_r."},{"statement":"(choice : Z -> bool) (x y : R) (Fx : format x) (Fy : format y) (K : (Rabs (x / y) < / 2)%R) : (Rabs (x / y - 0) < / 2)%R.","proofString":"now rewrite Rminus_0_r."}]}