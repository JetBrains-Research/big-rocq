{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/bigRocq/dataset/imm/src/hardware/imm_sToARM.v","fileSamples":[{"statement":"(WF0 : Wf G) (COMP0 : complete G) (SC_PER_LOC0 : sc_per_loc G) (POWER_ATOMICITY : rmw_atomicity G) (ACYC : acyclic (obs ∪ dob ∪ aob ∪ boba)) : rmw ⨾ coi ⊆ obs' ∪ dob ∪ aob ∪ boba.","proofString":"rewrite rmw_in_fri; auto.\nrewrite fri_coi; auto.\nrewrite fri_in_fr.\nunfold Arm.obs'.\neauto with hahn."},{"statement":"(WF0 : Wf G) (COMP0 : complete G) (SC_PER_LOC0 : sc_per_loc G) (POWER_ATOMICITY : rmw_atomicity G) (ACYC : acyclic (obs ∪ dob ∪ aob ∪ boba)) : fri ⨾ coi ⊆ obs' ∪ dob ∪ aob ∪ boba.","proofString":"rewrite fri_coi; auto.\nrewrite fri_in_fr.\nunfold Arm.obs'.\neauto with hahn."},{"statement":"(WF0 : Wf G) (COMP0 : complete G) (SC_PER_LOC0 : sc_per_loc G) (POWER_ATOMICITY : rmw_atomicity G) (ACYC : acyclic (obs ∪ dob ∪ aob ∪ boba)) : fri ⊆ obs' ∪ dob ∪ aob ∪ boba.","proofString":"rewrite fri_in_fr.\nunfold Arm.obs'.\neauto with hahn."},{"statement":"(WF0 : Wf G) (COMP0 : complete G) (SC_PER_LOC0 : sc_per_loc G) (POWER_ATOMICITY : rmw_atomicity G) (ACYC : acyclic (obs ∪ dob ∪ aob ∪ boba)) : fr ⊆ obs' ∪ dob ∪ aob ∪ boba.","proofString":"unfold Arm.obs'.\neauto with hahn."},{"statement":"(WF0 : Wf G) (COMP0 : complete G) (SC_PER_LOC0 : sc_per_loc G) (POWER_ATOMICITY : rmw_atomicity G) (ACYC : acyclic (obs ∪ dob ∪ aob ∪ boba)) : fr ⊆ rfe ∪ co ∪ fr ∪ dob ∪ aob ∪ boba.","proofString":"eauto with hahn."},{"statement":"⦗R_ex \\₁ dom_rel rmw⦘ ⨾ sb ⊆ ⦗R_ex⦘ ⨾ sb.","proofString":"basic_solver."},{"statement":"⦗R⦘\n⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw ∪ rmw_dep ⨾ sb^? ∪ ⦗R_ex⦘ ⨾ sb)⁺\n  ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"rewrite REX_IN_RMW_CTRL.\narewrite (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw ∪ rmw_dep ⨾ sb^? ∪ ctrl ⊆            data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw_dep ⨾ sb^?).\nrewrite RMW_DEPS.\nunionL; eauto with hahn.\nrewrite path_union, !seq_union_l, !seq_union_r.\nunionL.\napply ppo_in_dob_helper; auto.\nassert ((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) as AA.\nrewrite (data_in_sb WF), (ctrl_in_sb WF), (addr_in_sb WF).\narewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nins.\nrelsf.\nrewrite AA at 2.\nrewrite ct_begin, !seqA.\nrewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw ∪ rmw_dep ⨾ sb^? ∪ ctrl)⁺ ⨾ ⦗W⦘\n⊆ dob⁺.","proofString":"arewrite (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw ∪ rmw_dep ⨾ sb^? ∪ ctrl ⊆            data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw_dep ⨾ sb^?).\nrewrite RMW_DEPS.\nunionL; eauto with hahn.\nrewrite path_union, !seq_union_l, !seq_union_r.\nunionL.\napply ppo_in_dob_helper; auto.\nassert ((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) as AA.\nrewrite (data_in_sb WF), (ctrl_in_sb WF), (addr_in_sb WF).\narewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nins.\nrelsf.\nrewrite AA at 2.\nrewrite ct_begin, !seqA.\nrewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw ∪ rmw_dep ⨾ sb^? ∪ ctrl\n⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw_dep ⨾ sb^?.","proofString":"rewrite RMW_DEPS.\nunionL; eauto with hahn."},{"statement":"data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ (ctrl ∪ data) ∪ rmw_dep ⨾ sb^? ∪ ctrl\n⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw_dep ⨾ sb^?.","proofString":"unionL; eauto with hahn."},{"statement":"⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi ∪ rmw_dep ⨾ sb^?)⁺ ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"rewrite path_union, !seq_union_l, !seq_union_r.\nunionL.\napply ppo_in_dob_helper; auto.\nassert ((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) as AA.\nrewrite (data_in_sb WF), (ctrl_in_sb WF), (addr_in_sb WF).\narewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nins.\nrelsf.\nrewrite AA at 2.\nrewrite ct_begin, !seqA.\nrewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)⁺ ⨾ ⦗W⦘\n∪ ⦗R⦘\n  ⨾ (((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ rmw_dep ⨾ sb^?)⁺\n     ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊) ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"unionL.\napply ppo_in_dob_helper; auto.\nassert ((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) as AA.\nrewrite (data_in_sb WF), (ctrl_in_sb WF), (addr_in_sb WF).\narewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nins.\nrelsf.\nrewrite AA at 2.\nrewrite ct_begin, !seqA.\nrewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)⁺ ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"apply ppo_in_dob_helper; auto."},{"statement":"⦗R⦘\n⨾ (((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ rmw_dep ⨾ sb^?)⁺\n   ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊) ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"assert ((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) as AA.\nrewrite (data_in_sb WF), (ctrl_in_sb WF), (addr_in_sb WF).\narewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nins.\nrelsf.\nrewrite AA at 2.\nrewrite ct_begin, !seqA.\nrewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?.","proofString":"rewrite (data_in_sb WF), (ctrl_in_sb WF), (addr_in_sb WF).\narewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nins.\nrelsf."},{"statement":"(sb ∪ sb ∪ sb ⨾ sb^? ∪ rfi)＊ ⊆ sb^?.","proofString":"arewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nins.\nrelsf."},{"statement":"(sb ∪ sb ∪ sb ⨾ sb^? ∪ sb)＊ ⊆ sb^?.","proofString":"generalize (@sb_trans G).\nins.\nrelsf."},{"statement":"transitive sb -> (sb ∪ sb ∪ sb ⨾ sb^? ∪ sb)＊ ⊆ sb^?.","proofString":"ins.\nrelsf."},{"statement":"(H : transitive sb) : (sb ∪ sb ∪ sb ⨾ sb^? ∪ sb)＊ ⊆ sb^?.","proofString":"relsf."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘\n⨾ (((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ rmw_dep ⨾ sb^?)⁺\n   ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊) ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"rewrite AA at 2.\nrewrite ct_begin, !seqA.\nrewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘ ⨾ (((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ rmw_dep ⨾ sb^?)⁺ ⨾ sb^?) ⨾ ⦗W⦘\n⊆ dob⁺.","proofString":"rewrite ct_begin, !seqA.\nrewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘\n⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊\n  ⨾ rmw_dep\n    ⨾ sb^?\n      ⨾ ((data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⨾ ⦗W⦘\n⊆ dob⁺.","proofString":"rewrite AA at 2.\narewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘\n⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊\n  ⨾ rmw_dep ⨾ sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"arewrite (sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?).\nrewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf.\narewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : sb^? ⨾ (sb^? ⨾ rmw_dep ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?.","proofString":"rewrite (rmw_dep_in_sb WF).\ngeneralize (@sb_trans G).\nins.\nrelsf."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : sb^? ⨾ (sb^? ⨾ sb ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?.","proofString":"generalize (@sb_trans G).\nins.\nrelsf."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : transitive sb -> sb^? ⨾ (sb^? ⨾ sb ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?.","proofString":"ins.\nrelsf."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) (H : transitive sb) : sb^? ⨾ (sb^? ⨾ sb ⨾ sb^?)＊ ⨾ sb^? ⊆ sb^?.","proofString":"relsf."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"arewrite (rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘).\nrewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver.\nsin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : rmw_dep ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘.","proofString":"rewrite (dom_r (wf_rmw_depD WF)) at 1.\nrewrite R_ex_in_R.\ntype_solver."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : (rmw_dep ⨾ ⦗R_ex⦘) ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘.","proofString":"rewrite R_ex_in_R.\ntype_solver."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : (rmw_dep ⨾ ⦗R⦘) ⨾ sb^? ⨾ ⦗W⦘ ⊆ rmw_dep ⨾ sb ⨾ ⦗W⦘.","proofString":"type_solver."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ rmw_dep ⨾ sb ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"sin_rewrite DEPS_RMW_SB.\narewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⨾ ctrl ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"arewrite (ctrl ⊆ data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) at 2.\nseq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘\n⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊\n  ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi) ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"seq_rewrite <- ct_end.\napply ppo_in_dob_helper; auto."},{"statement":"(AA : (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)＊ ⊆ sb^?) : ⦗R⦘ ⨾ (data ∪ ctrl ∪ addr ⨾ sb^? ∪ rfi)⁺ ⨾ ⦗W⦘ ⊆ dob⁺.","proofString":"apply ppo_in_dob_helper; auto."},{"statement":"dob⁺ ⊆ (obs⁺ ∩ sb ∪ dob ∪ aob ∪ boba' ∪ sb ⨾ ⦗F^ld⦘)⁺.","proofString":"apply clos_trans_mori.\neauto with hahn."},{"statement":"dob ⊆ obs⁺ ∩ sb ∪ dob ∪ aob ∪ boba' ∪ sb ⨾ ⦗F^ld⦘.","proofString":"eauto with hahn."},{"statement":"acyclic (sb^? ⨾ imm_s.psc G ⨾ sb^? ∪ rfe ∪ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘).","proofString":"rewrite s_ar_int_in_ord.\narewrite (rfe ⊆ (obs ∪ dob ∪ aob ∪ boba')⁺ ).\nunfold Arm.obs; rewrite <- ct_step; basic_solver 12.\narewrite (imm_s.psc G ⊆ imm.psc G).\nunfold imm_s.psc, imm.psc.\nby rewrite s_hb_in_hb.\nrewrite psc_in_ord; auto.\nrelsf; red; relsf.\napply (external_alt_bob' WF CON)."},{"statement":"acyclic (sb^? ⨾ imm_s.psc G ⨾ sb^? ∪ rfe ∪ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"arewrite (rfe ⊆ (obs ∪ dob ∪ aob ∪ boba')⁺ ).\nunfold Arm.obs; rewrite <- ct_step; basic_solver 12.\narewrite (imm_s.psc G ⊆ imm.psc G).\nunfold imm_s.psc, imm.psc.\nby rewrite s_hb_in_hb.\nrewrite psc_in_ord; auto.\nrelsf; red; relsf.\napply (external_alt_bob' WF CON)."},{"statement":"rfe ⊆ (obs ∪ dob ∪ aob ∪ boba')⁺.","proofString":"unfold Arm.obs; rewrite <- ct_step; basic_solver 12."},{"statement":"acyclic\n  (sb^? ⨾ imm_s.psc G ⨾ sb^? ∪ (obs ∪ dob ∪ aob ∪ boba')⁺\n   ∪ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"arewrite (imm_s.psc G ⊆ imm.psc G).\nunfold imm_s.psc, imm.psc.\nby rewrite s_hb_in_hb.\nrewrite psc_in_ord; auto.\nrelsf; red; relsf.\napply (external_alt_bob' WF CON)."},{"statement":"imm_s.psc G ⊆ psc.","proofString":"unfold imm_s.psc, imm.psc.\nby rewrite s_hb_in_hb."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ eco ⨾ s_hb ⨾ ⦗F ∩₁ Sc⦘\n⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘.","proofString":"by rewrite s_hb_in_hb."},{"statement":"acyclic\n  (sb^? ⨾ psc ⨾ sb^? ∪ (obs ∪ dob ∪ aob ∪ boba')⁺\n   ∪ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"rewrite psc_in_ord; auto.\nrelsf; red; relsf.\napply (external_alt_bob' WF CON)."},{"statement":"acyclic\n  ((obs ∪ dob ∪ aob ∪ boba')⁺ ∪ (obs ∪ dob ∪ aob ∪ boba')⁺\n   ∪ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"relsf; red; relsf.\napply (external_alt_bob' WF CON)."},{"statement":"irreflexive (obs ∪ dob ∪ aob ∪ boba')⁺.","proofString":"apply (external_alt_bob' WF CON)."},{"statement":"acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ s_hb ⨾ (eco ⨾ s_hb)^? ⨾ ⦗F ∩₁ Sc⦘\n   ∪ ⦗Sc⦘\n     ⨾ (⦗F⦘ ⨾ s_hb)^?\n       ⨾ (sb ∪ (sb \\ same_loc) ⨾ s_hb ⨾ (sb \\ same_loc) ∪ s_hb ∩ same_loc\n          ∪ co ∪ fr) ⨾ (s_hb ⨾ ⦗F⦘)^? ⨾ ⦗Sc⦘).","proofString":"rewrite s_hb_in_hb.\napply immToARMhelper.C_SC; auto."},{"statement":"acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ (eco ⨾ hb)^? ⨾ ⦗F ∩₁ Sc⦘\n   ∪ ⦗Sc⦘\n     ⨾ (⦗F⦘ ⨾ hb)^?\n       ⨾ (sb ∪ (sb \\ same_loc) ⨾ hb ⨾ (sb \\ same_loc) ∪ hb ∩ same_loc ∪ co\n          ∪ fr) ⨾ (hb ⨾ ⦗F⦘)^? ⨾ ⦗Sc⦘).","proofString":"apply immToARMhelper.C_SC; auto."},{"statement":"irreflexive (sb ∪ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"apply irreflexive_union.\nsplit.\nby apply (@sb_irr G).\napply (external_alt_bob' WF CON)."},{"statement":"irreflexive sb /\\ irreflexive (obs ∪ dob ∪ aob ∪ boba')⁺.","proofString":"split.\nby apply (@sb_irr G).\napply (external_alt_bob' WF CON)."},{"statement":"irreflexive sb.","proofString":"by apply (@sb_irr G)."},{"statement":"irreflexive (obs ∪ dob ∪ aob ∪ boba')⁺.","proofString":"apply (external_alt_bob' WF CON)."},{"statement":"s_ar_int ⊆ s_ar_int ⨾ ⦗set_compl (fun a : actid => is_init a)⦘.","proofString":"apply domb_helper.\nrewrite imm_s_ppo.ar_int_in_sb; [| by apply WF].\nerewrite no_sb_to_init.\nbasic_solver."},{"statement":"domb s_ar_int (set_compl (fun a : actid => is_init a)).","proofString":"rewrite imm_s_ppo.ar_int_in_sb; [| by apply WF].\nerewrite no_sb_to_init.\nbasic_solver."},{"statement":"domb sb (set_compl (fun a : actid => is_init a)).","proofString":"erewrite no_sb_to_init.\nbasic_solver."},{"statement":"domb (sb ⨾ ⦗fun x : actid => ~ is_init x⦘)\n  (set_compl (fun a : actid => is_init a)).","proofString":"basic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺).","proofString":"rewrite imm_s_ppo.ar_int_in_sb; auto.\nrewrite ct_of_trans; auto.\nby apply fsupp_sb."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ sb⁺).","proofString":"rewrite ct_of_trans; auto.\nby apply fsupp_sb."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ sb).","proofString":"by apply fsupp_sb."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : domb (s_ar_int ⨾ ⦗set_compl (fun a : actid => is_init a)⦘)\n  (set_compl (fun a : actid => is_init a)).","proofString":"basic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int＊).","proofString":"rewrite rtE, seq_union_r.\napply fsupp_union; auto.\nrewrite <- id_inter.\napply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ ⦗fun _ : actid => True⦘\n   ∪ ⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺).","proofString":"apply fsupp_union; auto.\nrewrite <- id_inter.\napply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ ⦗fun _ : actid => True⦘).","proofString":"rewrite <- id_inter.\napply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp ⦗set_compl (fun a : actid => is_init a) ∩₁ (fun _ : actid => True)⦘.","proofString":"apply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : rfe ⊆ rfe ⨾ ⦗set_compl (fun a : actid => is_init a)⦘.","proofString":"apply domb_helper.\nrewrite rfe_in_rf, no_rf_to_init; basic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : domb rfe (set_compl (fun a : actid => is_init a)).","proofString":"rewrite rfe_in_rf, no_rf_to_init; basic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp ((rfe ⨾ ⦗R⦘) ⨾ ⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int＊).","proofString":"apply fsupp_seq.\nrewrite inclusion_seq_eqv_r, rfe_in_rf.\nby apply fsupp_rf.\nrewrite rtE, seq_union_r.\napply fsupp_union; auto.\nrewrite <- id_inter.\napply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp (rfe ⨾ ⦗R⦘).","proofString":"rewrite inclusion_seq_eqv_r, rfe_in_rf.\nby apply fsupp_rf."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp rf.","proofString":"by apply fsupp_rf."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int＊).","proofString":"rewrite rtE, seq_union_r.\napply fsupp_union; auto.\nrewrite <- id_inter.\napply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ ⦗fun _ : actid => True⦘\n   ∪ ⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺).","proofString":"apply fsupp_union; auto.\nrewrite <- id_inter.\napply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ ⦗fun _ : actid => True⦘).","proofString":"rewrite <- id_inter.\napply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp ⦗set_compl (fun a : actid => is_init a) ∩₁ (fun _ : actid => True)⦘.","proofString":"apply fsupp_eqv."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘\n   ⨾ (rfe ⨾ ⦗R⦘ ⨾ s_ar_int＊ ⨾ ⦗W⦘)＊).","proofString":"arewrite (⦗R⦘ ⨾ s_ar_int＊ ⨾ ⦗W⦘ ⊆ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘).\nrewrite rtE.\nclear.\ntype_solver.\nrewrite s_ar_int_in_ord.\narewrite (rfe ⊆ (obs ∪ dob ∪ aob ∪ boba')⁺).\nrewrite <- ct_step.\nunfold Arm.obs.\neauto with hahn.\nrewrite ct_ct, rt_of_ct.\nrewrite rtE, seq_union_r.\nrewrite <- id_inter.\napply fsupp_union; [by apply fsupp_eqv| ].\neapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : ⦗R⦘ ⨾ s_ar_int＊ ⨾ ⦗W⦘ ⊆ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘.","proofString":"rewrite rtE.\nclear.\ntype_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : ⦗R⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ s_ar_int⁺) ⨾ ⦗W⦘ ⊆ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘.","proofString":"clear.\ntype_solver."},{"statement":"⦗R⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ s_ar_int⁺) ⨾ ⦗W⦘ ⊆ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘.","proofString":"type_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘\n   ⨾ (rfe ⨾ ⦗R⦘ ⨾ s_ar_int⁺ ⨾ ⦗W⦘)＊).","proofString":"rewrite s_ar_int_in_ord.\narewrite (rfe ⊆ (obs ∪ dob ∪ aob ∪ boba')⁺).\nrewrite <- ct_step.\nunfold Arm.obs.\neauto with hahn.\nrewrite ct_ct, rt_of_ct.\nrewrite rtE, seq_union_r.\nrewrite <- id_inter.\napply fsupp_union; [by apply fsupp_eqv| ].\neapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘\n   ⨾ (rfe ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)＊).","proofString":"arewrite (rfe ⊆ (obs ∪ dob ∪ aob ∪ boba')⁺).\nrewrite <- ct_step.\nunfold Arm.obs.\neauto with hahn.\nrewrite ct_ct, rt_of_ct.\nrewrite rtE, seq_union_r.\nrewrite <- id_inter.\napply fsupp_union; [by apply fsupp_eqv| ].\neapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : rfe ⊆ (obs ∪ dob ∪ aob ∪ boba')⁺.","proofString":"rewrite <- ct_step.\nunfold Arm.obs.\neauto with hahn."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : rfe ⊆ obs ∪ dob ∪ aob ∪ boba'.","proofString":"unfold Arm.obs.\neauto with hahn."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : rfe ⊆ rfe ∪ coe ∪ fre ∪ dob ∪ aob ∪ boba'.","proofString":"eauto with hahn."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘\n   ⨾ ((obs ∪ dob ∪ aob ∪ boba')⁺ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)＊).","proofString":"rewrite ct_ct, rt_of_ct.\nrewrite rtE, seq_union_r.\nrewrite <- id_inter.\napply fsupp_union; [by apply fsupp_eqv| ].\neapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')＊).","proofString":"rewrite rtE, seq_union_r.\nrewrite <- id_inter.\napply fsupp_union; [by apply fsupp_eqv| ].\neapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘ ⨾ ⦗fun _ : actid => True⦘\n   ∪ ⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘\n     ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"rewrite <- id_inter.\napply fsupp_union; [by apply fsupp_eqv| ].\neapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W ∩₁ (fun _ : actid => True)⦘\n   ∪ ⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘\n     ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"apply fsupp_union; [by apply fsupp_eqv| ].\neapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : fsupp\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"eapply fsupp_mori; [| by apply FSUPP].\nred.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : Basics.flip inclusion\n  (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)\n  (⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺).","proofString":"red.\nbasic_solver."},{"statement":"(FSUPP : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺)) (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) (WF' : Wf G) (TSB : transitive sb) (AA : fsupp (⦗set_compl (fun a : actid => is_init a)⦘ ⨾ s_ar_int⁺)) : ⦗set_compl (fun a : actid => is_init a) ∩₁ W⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺\n⊆ ⦗set_compl (fun a : actid => is_init a)⦘ ⨾ (obs ∪ dob ∪ aob ∪ boba')⁺.","proofString":"basic_solver."}]}