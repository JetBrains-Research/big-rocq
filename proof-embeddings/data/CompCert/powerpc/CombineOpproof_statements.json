{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/powerpc/CombineOpproof.v","fileSamples":[{"statement":"(v : valnum) (op : operation) (vl : list valnum) (H : get v = Some (Op op vl)) : eval_operation ge sp op (map valu vl) m = Some (valu v).","proofString":"exploit get_sound; eauto.\nintros REV; inv REV; auto."},{"statement":"(v : valnum) (op : operation) (vl : list valnum) (H : get v = Some (Op op vl)) : rhs_eval_to valu ge sp m (Op op vl) (valu v) ->\neval_operation ge sp op (map valu vl) m = Some (valu v).","proofString":"intros REV; inv REV; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) : eval_condition cond (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.zero) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.zero).","proofString":"UseGetSound.\nrewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.zero) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.zero).","proofString":"rewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Cne (Val.of_optbool (eval_condition cond (map valu args) m))\n  (Vint Int.zero) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne\n  (Val.of_optbool (eval_condition cond (map valu args) m)) \n  (Vint Int.zero).","proofString":"destruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some b = Val.cmp_bool Cne (if b then Vtrue else Vfalse) (Vint Int.zero) /\\\nSome b =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (if b then Vtrue else Vfalse)\n  (Vint Int.zero).","proofString":"destruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (n : int) (e : get x = Some (Op (Oxorimm n) args)) (e0 : Int.eq n (Int.zero_ext 12 n) = true) (i : int) (H : Val.xor (Vint i) (Vint n) = valu x) (H0 : Val.xor Vundef (Vint n) = valu x) : Some (negb (Int.eq i n)) = Some (negb (Int.eq (Int.xor i n) Int.zero)) /\\\nSome (negb (Int.eq i n)) = Some (negb (Int.eq (Int.xor i n) Int.zero)).","proofString":"rewrite Int.xor_is_zero; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.zero) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.zero).","proofString":"UseGetSound.\nrewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.zero) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.zero).","proofString":"rewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Ceq (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.zero) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.zero).","proofString":"rewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : option_map negb (eval_condition c (map valu args) m) =\nVal.cmp_bool Ceq (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.zero) /\\\noption_map negb (eval_condition c (map valu args) m) =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.zero).","proofString":"destruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some (negb b) =\nVal.cmp_bool Ceq (if b then Vtrue else Vfalse) (Vint Int.zero) /\\\nSome (negb b) =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (if b then Vtrue else Vfalse)\n  (Vint Int.zero).","proofString":"destruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (n : int) (e : get x = Some (Op (Oxorimm n) args)) (e0 : Int.eq n (Int.zero_ext 12 n) = true) (i : int) (H : Val.xor (Vint i) (Vint n) = valu x) (H0 : Val.xor Vundef (Vint n) = valu x) : Some (Int.eq i n) = Some (Int.eq (Int.xor i n) Int.zero) /\\\nSome (Int.eq i n) = Some (Int.eq (Int.xor i n) Int.zero).","proofString":"rewrite Int.xor_is_zero; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) : combine_compimm_eq_1 get x = Some (cond, args) ->\neval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.one).","proofString":"functional induction (combine_compimm_eq_1 get x); intros EQ; inv EQ.\nUseGetSound.\nrewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) : eval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.one).","proofString":"UseGetSound.\nrewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (valu x) (Vint Int.one).","proofString":"rewrite <- H.\ndestruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (H : Val.of_optbool (eval_condition cond (map valu args) m) = valu x) : eval_condition cond (map valu args) m =\nVal.cmp_bool Ceq (Val.of_optbool (eval_condition cond (map valu args) m))\n  (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq\n  (Val.of_optbool (eval_condition cond (map valu args) m)) \n  (Vint Int.one).","proofString":"destruct (eval_condition cond (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) (e : get x = Some (Op (Ocmp cond) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some b = Val.cmp_bool Ceq (if b then Vtrue else Vfalse) (Vint Int.one) /\\\nSome b =\nVal.cmpu_bool (Mem.valid_pointer m) Ceq (if b then Vtrue else Vfalse)\n  (Vint Int.one).","proofString":"destruct b; auto."},{"statement":"(x : valnum) (cond : condition) (args : list valnum) : combine_compimm_ne_1 get x = Some (cond, args) ->\neval_condition cond (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.one) /\\\neval_condition cond (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.one).","proofString":"functional induction (combine_compimm_ne_1 get x); intros EQ; inv EQ.\nUseGetSound.\nrewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.one) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.one).","proofString":"UseGetSound.\nrewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Cne (valu x) (Vint Int.one) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (valu x) (Vint Int.one).","proofString":"rewrite <- H.\nrewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : eval_condition (negate_condition c) (map valu args) m =\nVal.cmp_bool Cne (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.one) /\\\neval_condition (negate_condition c) (map valu args) m =\nVal.cmpu_bool (Mem.valid_pointer m) Cne\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.one).","proofString":"rewrite eval_negate_condition.\ndestruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (H : Val.of_optbool (eval_condition c (map valu args) m) = valu x) : option_map negb (eval_condition c (map valu args) m) =\nVal.cmp_bool Cne (Val.of_optbool (eval_condition c (map valu args) m))\n  (Vint Int.one) /\\\noption_map negb (eval_condition c (map valu args) m) =\nVal.cmpu_bool (Mem.valid_pointer m) Cne\n  (Val.of_optbool (eval_condition c (map valu args) m)) \n  (Vint Int.one).","proofString":"destruct (eval_condition c (map valu args) m); simpl; auto.\ndestruct b; auto."},{"statement":"(x : valnum) (args : list valnum) (c : condition) (e : get x = Some (Op (Ocmp c) args)) (b : bool) (H : Val.of_optbool (Some b) = valu x) : Some (negb b) = Val.cmp_bool Cne (if b then Vtrue else Vfalse) (Vint Int.one) /\\\nSome (negb b) =\nVal.cmpu_bool (Mem.valid_pointer m) Cne (if b then Vtrue else Vfalse)\n  (Vint Int.one).","proofString":"destruct b; auto."},{"statement":"(cond : condition) (args : list valnum) (cond' : condition) (args' : list valnum) (H : combine_cond get cond args = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition cond (map valu args) m.","proofString":"functional inversion H; subst.\nsimpl; eapply combine_compimm_ne_0_sound; eauto.\nsimpl; eapply combine_compimm_ne_1_sound; eauto.\nsimpl; eapply combine_compimm_eq_0_sound; eauto.\nsimpl; eapply combine_compimm_eq_1_sound; eauto.\nsimpl; eapply combine_compimm_ne_0_sound; eauto.\nsimpl; eapply combine_compimm_ne_1_sound; eauto.\nsimpl; eapply combine_compimm_eq_0_sound; eauto.\nsimpl; eapply combine_compimm_eq_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_ne_0 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Cne Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Cne Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_ne_1 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Cne Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Cne Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_eq_0 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Ceq Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Ceq Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_eq_1 get x = Some (cond', args')) (H : combine_cond get (Ccompimm Ceq Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompimm Ceq Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_ne_0 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Cne Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Cne Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_ne_1 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Cne Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Cne Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_ne_1_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (H5 : Int.eq_dec Int.zero Int.zero = left eq_refl) (H0 : combine_compimm_eq_0 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Ceq Int.zero) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Ceq Int.zero) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_0_sound; eauto."},{"statement":"(cond' : condition) (args' : list valnum) (x : valnum) (_x : Int.one <> Int.zero) (H6 : Int.eq_dec Int.one Int.one = left eq_refl) (H3 : Int.eq_dec Int.one Int.zero = right _x) (H0 : combine_compimm_eq_1 get x = Some (cond', args')) (H : combine_cond get (Ccompuimm Ceq Int.one) (x :: nil) = Some (cond', args')) : eval_condition cond' (map valu args') m =\neval_condition (Ccompuimm Ceq Int.one) (map valu (x :: nil)) m.","proofString":"simpl; eapply combine_compimm_eq_1_sound; eauto."},{"statement":"(c : comparison) (v v0 : valnum) (res res' : bool) (H0 : eval_condition (Ccomp c) (map valu (v :: v0 :: nil)) m = Some res) (H1 : combine_comparison c v v0 = Some res') : res = res'.","proofString":"apply (combine_comparison_cmp_sound valu c v v0 res res'); auto."},{"statement":"(c : comparison) (v v0 : valnum) (res res' : bool) (H0 : eval_condition (Ccompu c) (map valu (v :: v0 :: nil)) m = Some res) (H1 : combine_comparison c v v0 = Some res') : res = res'.","proofString":"apply (combine_comparison_cmpu_sound valu m c v v0 res res'); auto."}]}