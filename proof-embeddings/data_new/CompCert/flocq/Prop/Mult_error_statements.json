{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Prop/Mult_error.v","fileSamples":[{"statement":"(x y : R) (Hx : format x) (Hy : format y) (f : R) (Hxy0 : (x * y)%R = 0%R) : (0 - 0)%R = 0%R.","conclusion":"(0 - 0)%R = 0%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (f : R) (Hxy0 : (x * y)%R = 0%R)","proofString":"ring."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : x <> 0%R.","conclusion":"x <> 0%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"contradict Hxy0.\nnow rewrite Hxy0, Rmult_0_l."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hxy0 : x = 0%R) : (x * y)%R = 0%R.","conclusion":"(x * y)%R = 0%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hxy0 : x = 0%R)","proofString":"now rewrite Hxy0, Rmult_0_l."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : y <> 0%R -> (bpow (ey - 1) <= Rabs y < bpow ey)%R) : y <> 0%R.","conclusion":"y <> 0%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : y <> 0%R -> (bpow (ey - 1) <= Rabs y < bpow ey)%R)","proofString":"contradict Hxy0.\nnow rewrite Hxy0, Rmult_0_r."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : y <> 0%R -> (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hxy0 : y = 0%R) : (x * y)%R = 0%R.","conclusion":"(x * y)%R = 0%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : y <> 0%R -> (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hxy0 : y = 0%R)","proofString":"now rewrite Hxy0, Rmult_0_r."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (cexp (x * y) - prec <= cexp x + cexp y)%Z.","conclusion":"(cexp (x * y) - prec <= cexp x + cexp y)%Z","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"unfold cexp, FLX_exp.\nrewrite mag_unique with (1 := Hex).\nrewrite mag_unique with (1 := Hey).\nrewrite mag_unique with (1 := Hexy).\ncut (exy - 1 < ex + ey)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := proj1 Hexy).\nrewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (mag beta (x * y) - prec - prec <= mag beta x - prec + (mag beta y - prec))%Z.","conclusion":"(mag beta (x * y) - prec - prec <= mag beta x - prec + (mag beta y - prec))%Z","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"rewrite mag_unique with (1 := Hex).\nrewrite mag_unique with (1 := Hey).\nrewrite mag_unique with (1 := Hexy).\ncut (exy - 1 < ex + ey)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := proj1 Hexy).\nrewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (mag beta (x * y) - prec - prec <= ex - prec + (mag beta y - prec))%Z.","conclusion":"(mag beta (x * y) - prec - prec <= ex - prec + (mag beta y - prec))%Z","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"rewrite mag_unique with (1 := Hey).\nrewrite mag_unique with (1 := Hexy).\ncut (exy - 1 < ex + ey)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := proj1 Hexy).\nrewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (mag beta (x * y) - prec - prec <= ex - prec + (ey - prec))%Z.","conclusion":"(mag beta (x * y) - prec - prec <= ex - prec + (ey - prec))%Z","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"rewrite mag_unique with (1 := Hexy).\ncut (exy - 1 < ex + ey)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := proj1 Hexy).\nrewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (exy - prec - prec <= ex - prec + (ey - prec))%Z.","conclusion":"(exy - prec - prec <= ex - prec + (ey - prec))%Z","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"cut (exy - 1 < ex + ey)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := proj1 Hexy).\nrewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (exy - 1 < ex + ey)%Z -> (exy - prec - prec <= ex - prec + (ey - prec))%Z.","conclusion":"(exy - 1 < ex + ey)%Z -> (exy - prec - prec <= ex - prec + (ey - prec))%Z","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"lia."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (exy - 1 < ex + ey)%Z.","conclusion":"(exy - 1 < ex + ey)%Z","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"apply (lt_bpow beta).\napply Rle_lt_trans with (1 := proj1 Hexy).\nrewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (bpow (exy - 1) < bpow (ex + ey))%R.","conclusion":"(bpow (exy - 1) < bpow (ex + ey))%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"apply Rle_lt_trans with (1 := proj1 Hexy).\nrewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (Rabs (x * y) < bpow (ex + ey))%R.","conclusion":"(Rabs (x * y) < bpow (ex + ey))%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"rewrite Rabs_mult.\nrewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (Rabs x * Rabs y < bpow (ex + ey))%R.","conclusion":"(Rabs x * Rabs y < bpow (ex + ey))%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"rewrite bpow_plus.\napply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (Rabs x * Rabs y < bpow ex * bpow ey)%R.","conclusion":"(Rabs x * Rabs y < bpow ex * bpow ey)%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"apply Rmult_le_0_lt_compat.\napply Rabs_pos.\napply Rabs_pos.\napply Hex.\napply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (0 <= Rabs x)%R.","conclusion":"(0 <= Rabs x)%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"apply Rabs_pos."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (0 <= Rabs y)%R.","conclusion":"(0 <= Rabs y)%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"apply Rabs_pos."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (Rabs x < bpow ex)%R.","conclusion":"(Rabs x < bpow ex)%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"apply Hex."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R) : (Rabs y < bpow ey)%R.","conclusion":"(Rabs y < bpow ey)%R","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hz : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) (f : R) (Hxy0 : (x * y)%R <> 0%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x * y) < bpow exy)%R) (er : Z) (Her : (bpow (er - 1) <= Rabs (f - x * y) < bpow er)%R) (ex : Z) (Hex : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (ey : Z) (Hey : (bpow (ey - 1) <= Rabs y < bpow ey)%R) (Hy0 : y <> 0%R)","proofString":"apply Hey."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) : format (round beta (FLX_exp prec) rnd (x * y) - x * y).","conclusion":"format (round beta (FLX_exp prec) rnd (x * y) - x * y)","hypotheses":"(x y : R) (Hx : format x) (Hy : format y)","proofString":"destruct (Req_dec (round beta (FLX_exp prec) rnd (x * y) - x * y) 0) as [Hr0|Hr0].\nrewrite Hr0.\napply generic_format_0.\ndestruct (mult_error_FLX_aux x y Hx Hy Hr0) as ((m,e),(H1,(H2,H3))).\nrewrite <- H1.\nnow apply generic_format_F2R."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hr0 : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R = 0%R) : format (round beta (FLX_exp prec) rnd (x * y) - x * y).","conclusion":"format (round beta (FLX_exp prec) rnd (x * y) - x * y)","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hr0 : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R = 0%R)","proofString":"rewrite Hr0.\napply generic_format_0."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hr0 : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R = 0%R) : format 0.","conclusion":"format 0","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hr0 : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R = 0%R)","proofString":"apply generic_format_0."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hr0 : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R) : format (round beta (FLX_exp prec) rnd (x * y) - x * y).","conclusion":"format (round beta (FLX_exp prec) rnd (x * y) - x * y)","hypotheses":"(x y : R) (Hx : format x) (Hy : format y) (Hr0 : (round beta (FLX_exp prec) rnd (x * y) - x * y)%R <> 0%R)","proofString":"destruct (mult_error_FLX_aux x y Hx Hy Hr0) as ((m,e),(H1,(H2,H3))).\nrewrite <- H1.\nnow apply generic_format_F2R."},{"statement":"(x : R) (e : Z) (Fx : format x) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x)","proofString":"destruct (Req_dec x 0) as [Zx|Nzx].\nrewrite Zx, Rmult_0_l; apply generic_format_0.\nrewrite Fx.\nset (mx := Ztrunc _); set (ex := cexp _).\npose (f := {| Fnum := mx; Fexp := ex + e |} : float beta).\napply (generic_format_F2R' _ _ _ f).\nnow unfold F2R; simpl; rewrite bpow_plus, Rmult_assoc.\nintro Nzmx; unfold mx, ex; rewrite <- Fx.\nunfold f, ex; simpl; unfold cexp; rewrite (mag_mult_bpow _ _ _ Nzx).\nunfold FLX_exp; lia."},{"statement":"(x : R) (e : Z) (Fx : format x) (Zx : x = 0%R) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (Zx : x = 0%R)","proofString":"rewrite Zx, Rmult_0_l; apply generic_format_0."},{"statement":"(x : R) (e : Z) (Fx : format x) (Nzx : x <> 0%R) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (Nzx : x <> 0%R)","proofString":"rewrite Fx.\nset (mx := Ztrunc _); set (ex := cexp _).\npose (f := {| Fnum := mx; Fexp := ex + e |} : float beta).\napply (generic_format_F2R' _ _ _ f).\nnow unfold F2R; simpl; rewrite bpow_plus, Rmult_assoc.\nintro Nzmx; unfold mx, ex; rewrite <- Fx.\nunfold f, ex; simpl; unfold cexp; rewrite (mag_mult_bpow _ _ _ Nzx).\nunfold FLX_exp; lia."},{"statement":"(ny ey : Z) : (IZR ny * bpow ey)%R <> 0%R -> (bpow ey <= IZR (Z.abs ny) * bpow ey)%R.","conclusion":"(IZR ny * bpow ey)%R <> 0%R -> (bpow ey <= IZR (Z.abs ny) * bpow ey)%R","hypotheses":"(ny ey : Z)","proofString":"case (Zle_lt_or_eq 0 (Z.abs ny)).\napply Z.abs_nonneg.\nintros Hy _.\nrewrite <- (Rmult_1_l (bpow _)) at 1.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply IZR_le; lia.\nintros H1 H2; contradict H2.\nreplace ny with 0%Z.\nsimpl; ring.\nnow apply sym_eq, Z.abs_0_iff, sym_eq."},{"statement":"(ny ey : Z) : (0 <= Z.abs ny)%Z.","conclusion":"(0 <= Z.abs ny)%Z","hypotheses":"(ny ey : Z)","proofString":"apply Z.abs_nonneg."},{"statement":"(ny ey : Z) : (0 < Z.abs ny)%Z ->\n(IZR ny * bpow ey)%R <> 0%R -> (bpow ey <= IZR (Z.abs ny) * bpow ey)%R.","conclusion":"(0 < Z.abs ny)%Z ->\n(IZR ny * bpow ey)%R <> 0%R -> (bpow ey <= IZR (Z.abs ny) * bpow ey)%R","hypotheses":"(ny ey : Z)","proofString":"intros Hy _.\nrewrite <- (Rmult_1_l (bpow _)) at 1.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply IZR_le; lia."},{"statement":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z) : (bpow ey <= IZR (Z.abs ny) * bpow ey)%R.","conclusion":"(bpow ey <= IZR (Z.abs ny) * bpow ey)%R","hypotheses":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z)","proofString":"rewrite <- (Rmult_1_l (bpow _)) at 1.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply IZR_le; lia."},{"statement":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z) : (1 * bpow ey <= IZR (Z.abs ny) * bpow ey)%R.","conclusion":"(1 * bpow ey <= IZR (Z.abs ny) * bpow ey)%R","hypotheses":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z)","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\napply IZR_le; lia."},{"statement":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z) : (0 <= bpow ey)%R.","conclusion":"(0 <= bpow ey)%R","hypotheses":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z)","proofString":"apply bpow_ge_0."},{"statement":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z) : (1 <= IZR (Z.abs ny))%R.","conclusion":"(1 <= IZR (Z.abs ny))%R","hypotheses":"(ny ey : Z) (Hy : (0 < Z.abs ny)%Z)","proofString":"apply IZR_le; lia."},{"statement":"(ny ey : Z) : 0%Z = Z.abs ny ->\n(IZR ny * bpow ey)%R <> 0%R -> (bpow ey <= IZR (Z.abs ny) * bpow ey)%R.","conclusion":"0%Z = Z.abs ny ->\n(IZR ny * bpow ey)%R <> 0%R -> (bpow ey <= IZR (Z.abs ny) * bpow ey)%R","hypotheses":"(ny ey : Z)","proofString":"intros H1 H2; contradict H2.\nreplace ny with 0%Z.\nsimpl; ring.\nnow apply sym_eq, Z.abs_0_iff, sym_eq."},{"statement":"(ny ey : Z) (H1 : 0%Z = Z.abs ny) : (IZR ny * bpow ey)%R = 0%R.","conclusion":"(IZR ny * bpow ey)%R = 0%R","hypotheses":"(ny ey : Z) (H1 : 0%Z = Z.abs ny)","proofString":"replace ny with 0%Z.\nsimpl; ring.\nnow apply sym_eq, Z.abs_0_iff, sym_eq."},{"statement":"(ny ey : Z) (H1 : 0%Z = Z.abs ny) : (0 * bpow ey)%R = 0%R.","conclusion":"(0 * bpow ey)%R = 0%R","hypotheses":"(ny ey : Z) (H1 : 0%Z = Z.abs ny)","proofString":"simpl; ring."},{"statement":"(ny ey : Z) (H1 : 0%Z = Z.abs ny) : 0%Z = ny.","conclusion":"0%Z = ny","hypotheses":"(ny ey : Z) (H1 : 0%Z = Z.abs ny)","proofString":"now apply sym_eq, Z.abs_0_iff, sym_eq."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (emin + prec - mag beta x <= e)%Z) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (He : (emin + prec - mag beta x <= e)%Z)","proofString":"destruct (Req_dec x 0) as [Zx|Nzx].\nrewrite Zx, Rmult_0_l; apply generic_format_0.\nrewrite Fx.\nset (mx := Ztrunc _); set (ex := cexp _).\npose (f := {| Fnum := mx; Fexp := ex + e |} : float beta).\napply (generic_format_F2R' _ _ _ f).\nnow unfold F2R; simpl; rewrite bpow_plus, Rmult_assoc.\nintro Nzmx; unfold mx, ex; rewrite <- Fx.\nunfold f, ex; simpl; unfold cexp; rewrite (mag_mult_bpow _ _ _ Nzx).\nunfold FLT_exp; rewrite Z.max_l by lia; rewrite <- Z.add_max_distr_r.\nset (n := (_ - _ + _)%Z); apply (Z.le_trans _ n); [unfold n; lia|].\napply Z.le_max_l."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (emin + prec - mag beta x <= e)%Z) (Zx : x = 0%R) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (He : (emin + prec - mag beta x <= e)%Z) (Zx : x = 0%R)","proofString":"rewrite Zx, Rmult_0_l; apply generic_format_0."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (emin + prec - mag beta x <= e)%Z) (Nzx : x <> 0%R) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (He : (emin + prec - mag beta x <= e)%Z) (Nzx : x <> 0%R)","proofString":"rewrite Fx.\nset (mx := Ztrunc _); set (ex := cexp _).\npose (f := {| Fnum := mx; Fexp := ex + e |} : float beta).\napply (generic_format_F2R' _ _ _ f).\nnow unfold F2R; simpl; rewrite bpow_plus, Rmult_assoc.\nintro Nzmx; unfold mx, ex; rewrite <- Fx.\nunfold f, ex; simpl; unfold cexp; rewrite (mag_mult_bpow _ _ _ Nzx).\nunfold FLT_exp; rewrite Z.max_l by lia; rewrite <- Z.add_max_distr_r.\nset (n := (_ - _ + _)%Z); apply (Z.le_trans _ n); [unfold n; lia|].\napply Z.le_max_l."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (0 <= e)%Z) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (He : (0 <= e)%Z)","proofString":"destruct (Req_dec x 0) as [Zx|Nzx].\nrewrite Zx, Rmult_0_l; apply generic_format_0.\nrewrite Fx.\nset (mx := Ztrunc _); set (ex := cexp _).\npose (f := {| Fnum := mx; Fexp := ex + e |} : float beta).\napply (generic_format_F2R' _ _ _ f).\nnow unfold F2R; simpl; rewrite bpow_plus, Rmult_assoc.\nintro Nzmx; unfold mx, ex; rewrite <- Fx.\nunfold f, ex; simpl; unfold cexp; rewrite (mag_mult_bpow _ _ _ Nzx).\nunfold FLT_exp; rewrite <-Z.add_max_distr_r.\nreplace (_ - _ + e)%Z with (mag beta x + e - prec)%Z; [ |ring].\napply Z.max_le_compat_l; lia."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (0 <= e)%Z) (Zx : x = 0%R) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (He : (0 <= e)%Z) (Zx : x = 0%R)","proofString":"rewrite Zx, Rmult_0_l; apply generic_format_0."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (0 <= e)%Z) (Nzx : x <> 0%R) : format (x * bpow e).","conclusion":"format (x * bpow e)","hypotheses":"(x : R) (e : Z) (Fx : format x) (He : (0 <= e)%Z) (Nzx : x <> 0%R)","proofString":"rewrite Fx.\nset (mx := Ztrunc _); set (ex := cexp _).\npose (f := {| Fnum := mx; Fexp := ex + e |} : float beta).\napply (generic_format_F2R' _ _ _ f).\nnow unfold F2R; simpl; rewrite bpow_plus, Rmult_assoc.\nintro Nzmx; unfold mx, ex; rewrite <- Fx.\nunfold f, ex; simpl; unfold cexp; rewrite (mag_mult_bpow _ _ _ Nzx).\nunfold FLT_exp; rewrite <-Z.add_max_distr_r.\nreplace (_ - _ + e)%Z with (mag beta x + e - prec)%Z; [ |ring].\napply Z.max_le_compat_l; lia."}]}