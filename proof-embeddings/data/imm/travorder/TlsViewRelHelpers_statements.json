{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/bigRocq/dataset/imm/src/travorder/TlsViewRelHelpers.v","fileSamples":[{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) : forall l : location,\nS_tm G l (covered T ∪₁ eq f)\n≡₁ S_tm G l (covered T) ∪₁ t_acq G sc thread l (covered T).","proofString":"intro l; split.\nunfold S_tm, t_acq.\nrewrite s_tmr_union; relsf; unionL; splits; [basic_solver|].\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\nunfold c_acq, urr.\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘).\nby revert NEXT; unfold next, dom_cond; basic_solver 21.\narewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42.\nunionL; [by unfold S_tm; rewrite s_tmr_union; basic_solver|].\nunfold t_acq, S_tm.\nrewrite s_tmr_union.\nrelsf.\nunfold c_acq, urr.\nrewrite (crE sc); relsf; unionL; splits.\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42.\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : S_tm G l (covered T ∪₁ eq f)\n⊆₁ S_tm G l (covered T) ∪₁ t_acq G sc thread l (covered T).","proofString":"unfold S_tm, t_acq.\nrewrite s_tmr_union; relsf; unionL; splits; [basic_solver|].\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\nunfold c_acq, urr.\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘).\nby revert NEXT; unfold next, dom_cond; basic_solver 21.\narewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel (S_tmr G l (covered T ∪₁ eq f))\n⊆₁ dom_rel (S_tmr G l (covered T))\n   ∪₁ dom_rel (c_acq G sc thread l (covered T)).","proofString":"rewrite s_tmr_union; relsf; unionL; splits; [basic_solver|].\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\nunfold c_acq, urr.\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘).\nby revert NEXT; unfold next, dom_cond; basic_solver 21.\narewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel (S_tmr G l (eq f))\n⊆₁ dom_rel (S_tmr G l (covered T))\n   ∪₁ dom_rel (c_acq G sc thread l (covered T)).","proofString":"unionR right.\nrewrite (s_tmr_helper _ _ WF).\nunfold c_acq, urr.\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘).\nby revert NEXT; unfold next, dom_cond; basic_solver 21.\narewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel (S_tmr G l (eq f)) ⊆₁ dom_rel (c_acq G sc thread l (covered T)).","proofString":"rewrite (s_tmr_helper _ _ WF).\nunfold c_acq, urr.\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘).\nby revert NEXT; unfold next, dom_cond; basic_solver 21.\narewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘)\n⊆₁ dom_rel (c_acq G sc thread l (covered T)).","proofString":"unfold c_acq, urr.\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘).\nby revert NEXT; unfold next, dom_cond; basic_solver 21.\narewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘)\n⊆₁ dom_rel\n     ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?)\n      ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘).","proofString":"arewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘).\nby revert NEXT; unfold next, dom_cond; basic_solver 21.\narewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘ ⊆ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘.","proofString":"by revert NEXT; unfold next, dom_cond; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n       ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘)\n⊆₁ dom_rel\n     (⦗W_ l⦘\n      ⨾ rf^?\n        ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n          ⨾ sc^?\n            ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘).","proofString":"arewrite (⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?).\nby unfolder; ins; desf; splits; eauto using sb_tid_init.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : ⦗covered T⦘ ⨾ sb ⨾ ⦗eq f⦘ ⊆ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?.","proofString":"by unfolder; ins; desf; splits; eauto using sb_tid_init."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n       ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⨾ sb^?)\n⊆₁ dom_rel\n     (⦗W_ l⦘\n      ⨾ rf^?\n        ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n          ⨾ sc^?\n            ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘).","proofString":"basic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : S_tm G l (covered T) ∪₁ t_acq G sc thread l (covered T)\n⊆₁ S_tm G l (covered T ∪₁ eq f).","proofString":"unionL; [by unfold S_tm; rewrite s_tmr_union; basic_solver|].\nunfold t_acq, S_tm.\nrewrite s_tmr_union.\nrelsf.\nunfold c_acq, urr.\nrewrite (crE sc); relsf; unionL; splits.\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42.\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : t_acq G sc thread l (covered T) ⊆₁ S_tm G l (covered T ∪₁ eq f).","proofString":"unfold t_acq, S_tm.\nrewrite s_tmr_union.\nrelsf.\nunfold c_acq, urr.\nrewrite (crE sc); relsf; unionL; splits.\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42.\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel (c_acq G sc thread l (covered T))\n⊆₁ dom_rel (S_tmr G l (covered T ∪₁ eq f)).","proofString":"rewrite s_tmr_union.\nrelsf.\nunfold c_acq, urr.\nrewrite (crE sc); relsf; unionL; splits.\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42.\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel (c_acq G sc thread l (covered T))\n⊆₁ dom_rel (S_tmr G l (covered T) ∪ S_tmr G l (eq f)).","proofString":"relsf.\nunfold c_acq, urr.\nrewrite (crE sc); relsf; unionL; splits.\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42.\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel (c_acq G sc thread l (covered T))\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"unfold c_acq, urr.\nrewrite (crE sc); relsf; unionL; splits.\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42.\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc^? ⨾ hb^?)\n   ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"rewrite (crE sc); relsf; unionL; splits.\nunionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42.\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ hb^?)\n   ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"unionR right.\nrewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ hb^?)\n   ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘)\n⊆₁ dom_rel (S_tmr G l (eq f)).","proofString":"rewrite (s_tmr_helper _ _ WF).\narewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ hb^?)\n   ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘)\n⊆₁ dom_rel\n     (⦗W_ l⦘\n      ⨾ rf^?\n        ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n          ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘).","proofString":"arewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel(sb ⨾ ⦗eq f⦘)⦘).\nrewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver.\narewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel (sb ⨾ ⦗eq f⦘)⦘.","proofString":"rewrite <- TID; rewrite next_helper'; eauto.\nbasic_solver."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : ⦗dom_rel (sb ⨾ ⦗eq f⦘)⦘ ⊆ ⦗dom_rel (sb ⨾ ⦗eq f⦘)⦘.","proofString":"basic_solver."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗dom_rel (sb ⨾ ⦗eq f⦘)⦘)\n⊆₁ dom_rel\n     (⦗W_ l⦘\n      ⨾ rf^?\n        ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n          ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘).","proofString":"arewrite (⦗eq f⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘) at 1 by type_solver.\nbasic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n       ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗dom_rel (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘)⦘)\n⊆₁ dom_rel\n     (⦗W_ l⦘\n      ⨾ rf^?\n        ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n          ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗eq f⦘).","proofString":"basic_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  ((⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⨾ hb^?)\n   ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"arewrite (⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘).\nbasic_solver.\narewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : ⦗Tid_ thread ∪₁ Init⦘ ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘.","proofString":"basic_solver."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n       ⨾ sc ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗covered T⦘ ⨾ ⦗Tid_ thread ∪₁ Init⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"arewrite ((release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?).\nby case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver].\narewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : (release ⨾ rf)^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ (release ⨾ rf)^?.","proofString":"by case_refl _;      [basic_solver| rewrite !seqA; rewrite release_rf_covered; auto; basic_solver]."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n       ⨾ sc ⨾ hb^? ⨾ ⦗covered T⦘ ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"arewrite (hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?).\nby case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver].\narewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : hb^? ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ hb^?.","proofString":"by case_refl _; [basic_solver| rewrite hb_covered; auto; basic_solver]."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^?\n       ⨾ sc ⨾ ⦗covered T⦘ ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"arewrite (⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).\nrewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42.\narewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : ⦗W_ l⦘ ⨾ rf^? ⨾ (hb ⨾ ⦗F ∩₁ Sc⦘)^? ⨾ sc ⊆ ⦗W_ l⦘ ⨾ rf^? ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc.","proofString":"rewrite (dom_l (@wf_scD G sc Wf_sc)) at 1; rewrite (dom_r (wf_rfD WF)) at 1; hahn_frame_r; type_solver 42."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ hb\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sc ⨾ ⦗covered T⦘ ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"arewrite (sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc).\nnow eapply sc_covered; eauto.\nunfold S_tmr; basic_solver 21."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : sc ⨾ ⦗covered T⦘ ⊆ ⦗covered T⦘ ⨾ sc.","proofString":"now eapply sc_covered; eauto."},{"statement":"(f : actid) (ordf : mode) (thread : BinNums.positive) (TID : tid f = thread) (RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (NEXT : next G (covered T) f) (FPARAMS : lab f = Afence ordf) (SC : Sc f) (Wf_sc : wf_sc G sc) (Csc : coh_sc G sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G sc) (Cat : rmw_atomicity G) (l : location) : dom_rel\n  (⦗W_ l⦘\n   ⨾ rf^?\n     ⨾ hb\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ ⦗covered T⦘ ⨾ sc ⨾ hb^? ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ thread ∪₁ Init⦘)\n⊆₁ dom_rel (S_tmr G l (covered T)) ∪₁ dom_rel (S_tmr G l (eq f)).","proofString":"unfold S_tmr; basic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : t_acq G sc (tid f) l (eq f) ⊆₁ t_acq G sc (tid f) l (covered T).","proofString":"unfold t_acq, c_acq.\narewrite (⦗Tid_ (tid f) ∪₁ Init⦘ ⨾ ⦗eq f⦘ ⊆ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘) by basic_solver.\nrewrite next_helper'; eauto.\nrewrite <- !seqA.\nrewrite !dom_rel_eqv_dom_rel.\nrewrite !seqA.\nrewrite (dom_r (wf_rfD WF)) at 1.\nrewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘ ⨾ ⦗eq f⦘)\n⊆₁ dom_rel\n     (urr G sc l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘ ⨾ ⦗covered T⦘).","proofString":"arewrite (⦗Tid_ (tid f) ∪₁ Init⦘ ⨾ ⦗eq f⦘ ⊆ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘) by basic_solver.\nrewrite next_helper'; eauto.\nrewrite <- !seqA.\nrewrite !dom_rel_eqv_dom_rel.\nrewrite !seqA.\nrewrite (dom_r (wf_rfD WF)) at 1.\nrewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel\n     (urr G sc l ⨾ (release ⨾ rf)^? ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘ ⨾ ⦗covered T⦘).","proofString":"rewrite next_helper'; eauto.\nrewrite <- !seqA.\nrewrite !dom_rel_eqv_dom_rel.\nrewrite !seqA.\nrewrite (dom_r (wf_rfD WF)) at 1.\nrewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ ⦗dom_rel (sb ⨾ ⦗eq f⦘)⦘).","proofString":"rewrite <- !seqA.\nrewrite !dom_rel_eqv_dom_rel.\nrewrite !seqA.\nrewrite (dom_r (wf_rfD WF)) at 1.\nrewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (((urr G sc l ⨾ (release ⨾ rf)^?) ⨾ ⦗eq f⦘) ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel ((urr G sc l ⨾ (release ⨾ rf)^?) ⨾ ⦗dom_rel (sb ⨾ ⦗eq f⦘)⦘).","proofString":"rewrite !dom_rel_eqv_dom_rel.\nrewrite !seqA.\nrewrite (dom_r (wf_rfD WF)) at 1.\nrewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (((urr G sc l ⨾ (release ⨾ rf)^?) ⨾ ⦗eq f⦘) ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel ((urr G sc l ⨾ (release ⨾ rf)^?) ⨾ sb ⨾ ⦗eq f⦘).","proofString":"rewrite !seqA.\nrewrite (dom_r (wf_rfD WF)) at 1.\nrewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗eq f⦘).","proofString":"rewrite (dom_r (wf_rfD WF)) at 1.\nrewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel\n  (urr G sc l ⨾ (release ⨾ rf ⨾ ⦗R⦘)^? ⨾ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗eq f⦘).","proofString":"rewrite crE at 1; relsf; unionL; splits; [|type_solver].\narewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (urr G sc l ⨾ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗eq f⦘).","proofString":"arewrite (⦗eq f⦘ ⊆ ⦗ F∩₁set_compl Sc ⦘ ⨾ ⦗eq f⦘) at 1 by basic_solver.\nsin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel (urr G sc l ⨾ ⦗F ∩₁ set_compl Sc⦘ ⨾ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗eq f⦘).","proofString":"sin_rewrite (urr_f_non_sc WF); auto.\nbasic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (NSC : ~ is_sc lab f) (NEXT : next G (covered T) f) (l : location) : dom_rel\n  ((urr G sc l ⨾ (release ⨾ rf)^? ⨾ sb) ⨾ ⦗eq f⦘ ⨾ ⦗Tid_ (tid f) ∪₁ Init⦘)\n⊆₁ dom_rel (urr G sc l ⨾ (release ⨾ rf)^? ⨾ sb ⨾ ⦗eq f⦘).","proofString":"basic_solver 21."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : ⦗F ∩₁ Sc⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel (sc ⨾ ⦗eq f⦘)⦘.","proofString":"unfold coverable, dom_cond in *.\nunfolder in *; desf; try type_solver.\nins; desf; splits; eauto.\neexists; splits; eauto.\neapply tot_ex.\napply Wf_sc.\nbasic_solver.\ngeneralize coveredE; basic_solver.\nintro; apply NCOV.\neapply dom_sc_covered; vauto.\nintro; subst; eauto."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : is_f lab f) (SC : is_sc lab f) (COV : (E\n ∩₁ event\n    ↑₁ ((fun e : trav_label => dom_rel (iord G sc ⨾ ⦗eq e⦘) ⊆₁ T)\n        ∩₁ action ↓₁ eq ta_cover)) f) (NCOV : ~ covered T f) : ⦗F ∩₁ Sc⦘ ⨾ ⦗covered T⦘ ⊆ ⦗dom_rel (sc ⨾ ⦗eq f⦘)⦘.","proofString":"unfolder in *; desf; try type_solver.\nins; desf; splits; eauto.\neexists; splits; eauto.\neapply tot_ex.\napply Wf_sc.\nbasic_solver.\ngeneralize coveredE; basic_solver.\nintro; apply NCOV.\neapply dom_sc_covered; vauto.\nintro; subst; eauto."},{"statement":"(Wf_sc : wf_sc G sc) (y : trav_label) (COV : E (event y)) (SC : is_sc lab (event y)) (FENCE : is_f lab (event y)) (COV0 : forall x : trav_label,\n(exists y0 z : trav_label, iord G sc x z /\\ z = y0 /\\ y = z) -> T x) (COV2 : ta_cover = action y) (NCOV : ~ covered T (event y)) : forall x y0 : actid,\nx = y0 /\\ (is_f lab x /\\ is_sc lab x) /\\ covered T x ->\nx = y0 /\\ (exists y1 : actid, sc x y1 /\\ event y = y1).","proofString":"ins; desf; splits; eauto.\neexists; splits; eauto.\neapply tot_ex.\napply Wf_sc.\nbasic_solver.\ngeneralize coveredE; basic_solver.\nintro; apply NCOV.\neapply dom_sc_covered; vauto.\nintro; subst; eauto."},{"statement":"(Wf_sc : wf_sc G sc) (y : trav_label) (COV : E (event y)) (SC : is_sc lab (event y)) (FENCE : is_f lab (event y)) (COV0 : forall x : trav_label,\n(exists y1 z : trav_label, iord G sc x z /\\ z = y1 /\\ y = z) -> T x) (COV2 : ta_cover = action y) (NCOV : ~ covered T (event y)) (y0 : actid) (H1 : covered T y0) (H2 : is_sc lab y0) (H0 : is_f lab y0) : exists y1 : actid, sc y0 y1 /\\ event y = y1.","proofString":"eexists; splits; eauto.\neapply tot_ex.\napply Wf_sc.\nbasic_solver.\ngeneralize coveredE; basic_solver.\nintro; apply NCOV.\neapply dom_sc_covered; vauto.\nintro; subst; eauto."},{"statement":"(Wf_sc : wf_sc G sc) (y : trav_label) (COV : E (event y)) (SC : is_sc lab (event y)) (FENCE : is_f lab (event y)) (COV0 : forall x : trav_label,\n(exists y1 z : trav_label, iord G sc x z /\\ z = y1 /\\ y = z) -> T x) (COV2 : ta_cover = action y) (NCOV : ~ covered T (event y)) (y0 : actid) (H1 : covered T y0) (H2 : is_sc lab y0) (H0 : is_f lab y0) : sc y0 (event y).","proofString":"eapply tot_ex.\napply Wf_sc.\nbasic_solver.\ngeneralize coveredE; basic_solver.\nintro; apply NCOV.\neapply dom_sc_covered; vauto.\nintro; subst; eauto."},{"statement":"(Wf_sc : wf_sc G sc) (y : trav_label) (COV : E (event y)) (SC : is_sc lab (event y)) (FENCE : is_f lab (event y)) (COV0 : forall x : trav_label,\n(exists y1 z : trav_label, iord G sc x z /\\ z = y1 /\\ y = z) -> T x) (COV2 : ta_cover = action y) (NCOV : ~ covered T (event y)) (y0 : actid) (H1 : covered T y0) (H2 : is_sc lab y0) (H0 : is_f lab y0) : ~ sc (event y) y0.","proofString":"intro; apply NCOV.\neapply dom_sc_covered; vauto."},{"statement":"(Wf_sc : wf_sc G sc) (y : trav_label) (COV : E (event y)) (SC : is_sc lab (event y)) (FENCE : is_f lab (event y)) (COV0 : forall x : trav_label,\n(exists y1 z : trav_label, iord G sc x z /\\ z = y1 /\\ y = z) -> T x) (COV2 : ta_cover = action y) (NCOV : ~ covered T (event y)) (y0 : actid) (H1 : covered T y0) (H2 : is_sc lab y0) (H0 : is_f lab y0) (H : sc (event y) y0) : covered T (event y).","proofString":"eapply dom_sc_covered; vauto."},{"statement":"(Wf_sc : wf_sc G sc) (y : trav_label) (COV : E (event y)) (SC : is_sc lab (event y)) (FENCE : is_f lab (event y)) (COV0 : forall x : trav_label,\n(exists y1 z : trav_label, iord G sc x z /\\ z = y1 /\\ y = z) -> T x) (COV2 : ta_cover = action y) (NCOV : ~ covered T (event y)) (y0 : actid) (H1 : covered T y0) (H2 : is_sc lab y0) (H0 : is_f lab y0) : event y <> y0.","proofString":"intro; subst; eauto."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : ⦗dom_rel (sc ⨾ ⦗eq f⦘)⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ ⦗covered T⦘.","proofString":"rewrite <- !id_inter.\napply eqv_rel_mori.\napply set_subset_inter_r.\nsplit.\nrewrite (wf_scD Wf_sc).\nbasic_solver.\nrewrite <- dom_sc_coverable; eauto.\nbasic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : ⦗dom_rel (sc ⨾ ⦗eq f⦘)⦘ ⊆ ⦗F ∩₁ Sc ∩₁ covered T⦘.","proofString":"apply eqv_rel_mori.\napply set_subset_inter_r.\nsplit.\nrewrite (wf_scD Wf_sc).\nbasic_solver.\nrewrite <- dom_sc_coverable; eauto.\nbasic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : dom_rel (sc ⨾ ⦗eq f⦘) ⊆₁ F ∩₁ Sc ∩₁ covered T.","proofString":"apply set_subset_inter_r.\nsplit.\nrewrite (wf_scD Wf_sc).\nbasic_solver.\nrewrite <- dom_sc_coverable; eauto.\nbasic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : dom_rel (sc ⨾ ⦗eq f⦘) ⊆₁ F ∩₁ Sc /\\ dom_rel (sc ⨾ ⦗eq f⦘) ⊆₁ covered T.","proofString":"split.\nrewrite (wf_scD Wf_sc).\nbasic_solver.\nrewrite <- dom_sc_coverable; eauto.\nbasic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : dom_rel (sc ⨾ ⦗eq f⦘) ⊆₁ F ∩₁ Sc.","proofString":"rewrite (wf_scD Wf_sc).\nbasic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : dom_rel ((⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗eq f⦘) ⊆₁ F ∩₁ Sc.","proofString":"basic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : dom_rel (sc ⨾ ⦗eq f⦘) ⊆₁ covered T.","proofString":"rewrite <- dom_sc_coverable; eauto.\nbasic_solver."},{"statement":"(Wf_sc : wf_sc G sc) (f : actid) (FENCE : F f) (SC : Sc f) (COV : coverable G sc T f) (NCOV : ~ covered T f) : dom_rel (sc ⨾ ⦗eq f⦘) ⊆₁ dom_rel (sc ⨾ ⦗coverable G sc T⦘).","proofString":"basic_solver."},{"statement":"(e : actid) (COV : coverable G sc T e) (NCOV : ~ covered T e) : (E ∩₁ dom_cond sb (covered T) ∩₁ set_compl (covered T)) e.","proofString":"split; auto.\nsplit; [apply COV| ].\nred.\nerewrite <- dom_sb_coverable; eauto.\nbasic_solver."},{"statement":"(e : actid) (COV : coverable G sc T e) (NCOV : ~ covered T e) : (E ∩₁ dom_cond sb (covered T)) e.","proofString":"split; [apply COV| ].\nred.\nerewrite <- dom_sb_coverable; eauto.\nbasic_solver."},{"statement":"(e : actid) (COV : coverable G sc T e) (NCOV : ~ covered T e) : dom_cond sb (covered T) e.","proofString":"red.\nerewrite <- dom_sb_coverable; eauto.\nbasic_solver."},{"statement":"(e : actid) (COV : coverable G sc T e) (NCOV : ~ covered T e) : dom_rel (sb ⨾ ⦗eq e⦘) ⊆₁ covered T.","proofString":"erewrite <- dom_sb_coverable; eauto.\nbasic_solver."},{"statement":"(RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = true) : forall l : location,\nt_cur G sc (tid f) l (covered T ∪₁ eq f)\n≡₁ S_tm G l (covered T) ∪₁ t_acq G sc (tid f) l (covered T).","proofString":"apply t_cur_sc_fence_step; auto."},{"statement":"(RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : forall l : location,\nt_cur G sc (tid f) l (covered T ∪₁ eq f)\n≡₁ (if is_acq lab f\n    then t_acq G sc (tid f) l (covered T)\n    else t_cur G sc (tid f) l (covered T)).","proofString":"apply t_cur_n_sc_fence_step; auto.\nby apply IMMCON.\nby ins; desf.\napply coverable_next_covered; auto."},{"statement":"(RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : wf_sc G sc.","proofString":"by apply IMMCON."},{"statement":"(RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : ~ is_sc lab f.","proofString":"by ins; desf."},{"statement":"(RELCOV : W ∩₁ Rel ∩₁ issued T ⊆₁ covered T) (f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : next G (covered T) f.","proofString":"apply coverable_next_covered; auto."},{"statement":"(f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = true) : forall l : location,\nt_acq G sc (tid f) l (covered T ∪₁ eq f)\n≡₁ t_acq G sc (tid f) l (covered T) ∪₁ S_tm G l (covered T).","proofString":"apply t_acq_sc_fence_step; auto."},{"statement":"(f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : forall l : location,\nt_acq G sc (tid f) l (covered T ∪₁ eq f)\n≡₁ t_acq G sc (tid f) l (covered T) ∪₁ ∅.","proofString":"ins; rewrite set_union_empty_r; apply t_acq_n_sc_fence_step; auto.\nby apply IMMCON.\nby ins; desf.\napply coverable_next_covered; auto."},{"statement":"(f : actid) (FENCE : is_f lab f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) (l : location) : wf_sc G sc.","proofString":"by apply IMMCON."},{"statement":"(f : actid) (FENCE : is_f lab f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) (l : location) : ~ is_sc lab f.","proofString":"by ins; desf."},{"statement":"(f : actid) (FENCE : is_f lab f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) (l : location) : next G (covered T) f.","proofString":"apply coverable_next_covered; auto."},{"statement":"(f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = true) : forall l l' : location,\nt_rel G sc (tid f) l l' (covered T ∪₁ eq f)\n∪₁ (if LocSet.Facts.eq_dec l l'\n    then W_ l' ∩₁ Tid_ (tid f) ∩₁ (covered T ∪₁ eq f)\n    else ∅) ≡₁ S_tm G l (covered T) ∪₁ t_acq G sc (tid f) l (covered T).","proofString":"apply t_rel_sc_fence_step; auto."},{"statement":"(f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : forall l l' : location,\nt_rel G sc (tid f) l l' (covered T ∪₁ eq f)\n∪₁ (if LocSet.Facts.eq_dec l l'\n    then W_ l' ∩₁ Tid_ (tid f) ∩₁ (covered T ∪₁ eq f)\n    else ∅)\n≡₁ (if is_acqrel lab f\n    then t_acq G sc (tid f) l (covered T)\n    else\n     if is_rel lab f\n     then t_cur G sc (tid f) l (covered T)\n     else\n      t_rel G sc (tid f) l l' (covered T)\n      ∪₁ (if LocSet.Facts.eq_dec l l'\n          then W_ l' ∩₁ Tid_ (tid f) ∩₁ covered T\n          else ∅)).","proofString":"apply t_rel_n_sc_fence_step; auto.\nby apply IMMCON.\nby ins; desf.\napply coverable_next_covered; auto."},{"statement":"(f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : wf_sc G sc.","proofString":"by apply IMMCON."},{"statement":"(f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : ~ is_sc lab f.","proofString":"by ins; desf."},{"statement":"(f : actid) (FENCE : F f) (COV : coverable G sc T f) (NCOV : ~ covered T f) (H : is_sc lab f = false) : next G (covered T) f.","proofString":"apply coverable_next_covered; auto."}]}