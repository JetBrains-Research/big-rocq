{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/MenhirLib/Alphabet.v","fileSamples":[{"statement":"(A : Type) (C : Comparable A) (x : A) : compare x x = Eq.","conclusion":"compare x x = Eq","hypotheses":"(A : Type) (C : Comparable A) (x : A)","proofString":"pose proof (compare_antisym x x).\ndestruct (compare x x); intuition; try discriminate."},{"statement":"(A : Type) (C : Comparable A) (x : A) (H : CompOpp (compare x x) = compare x x) : compare x x = Eq.","conclusion":"compare x x = Eq","hypotheses":"(A : Type) (C : Comparable A) (x : A) (H : CompOpp (compare x x) = compare x x)","proofString":"destruct (compare x x); intuition; try discriminate."},{"statement":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) : forall x y : A,\nmatch compare x y with\n| Eq => true\n| _ => false\nend = true <-> x = y.","conclusion":"forall x y : A,\nmatch compare x y with\n| Eq => true\n| _ => false\nend = true <-> x = y","hypotheses":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C)","proofString":"intuition.\napply compare_eq.\ndestruct (compare x y); intuition; discriminate.\ndestruct H.\nrewrite compare_refl; intuition."},{"statement":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x y : A) (H : match compare x y with\n| Eq => true\n| _ => false\nend = true) : x = y.","conclusion":"x = y","hypotheses":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x y : A) (H : match compare x y with\n| Eq => true\n| _ => false\nend = true)","proofString":"apply compare_eq.\ndestruct (compare x y); intuition; discriminate."},{"statement":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x y : A) (H : match compare x y with\n| Eq => true\n| _ => false\nend = true) : compare x y = Eq.","conclusion":"compare x y = Eq","hypotheses":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x y : A) (H : match compare x y with\n| Eq => true\n| _ => false\nend = true)","proofString":"destruct (compare x y); intuition; discriminate."},{"statement":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x y : A) (H : x = y) : match compare x y with\n| Eq => true\n| _ => false\nend = true.","conclusion":"match compare x y with\n| Eq => true\n| _ => false\nend = true","hypotheses":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x y : A) (H : x = y)","proofString":"destruct H.\nrewrite compare_refl; intuition."},{"statement":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x : A) : match compare x x with\n| Eq => true\n| _ => false\nend = true.","conclusion":"match compare x x with\n| Eq => true\n| _ => false\nend = true","hypotheses":"(A : Type) (C : Comparable A) (U : ComparableLeibnizEq C) (x : A)","proofString":"rewrite compare_refl; intuition."}]}