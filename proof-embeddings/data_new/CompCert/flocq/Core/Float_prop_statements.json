{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Core/Float_prop.v","fileSamples":[{"statement":"(e m1 m2 : Z) : Rcompare (IZR m1 * bpow e) (IZR m2 * bpow e) = (m1 ?= m2)%Z.","conclusion":"Rcompare (IZR m1 * bpow e) (IZR m2 * bpow e) = (m1 ?= m2)%Z","hypotheses":"(e m1 m2 : Z)","proofString":"rewrite Rcompare_mult_r.\napply Rcompare_IZR.\napply bpow_gt_0."},{"statement":"(e m1 m2 : Z) : Rcompare (IZR m1) (IZR m2) = (m1 ?= m2)%Z.","conclusion":"Rcompare (IZR m1) (IZR m2) = (m1 ?= m2)%Z","hypotheses":"(e m1 m2 : Z)","proofString":"apply Rcompare_IZR."},{"statement":"(e m1 m2 : Z) : (0 < bpow e)%R.","conclusion":"(0 < bpow e)%R","hypotheses":"(e m1 m2 : Z)","proofString":"apply bpow_gt_0."},{"statement":"(m1 m2 e : Z) (H : (m1 <= m2)%Z) : (IZR m1 * bpow e <= IZR m2 * bpow e)%R.","conclusion":"(IZR m1 * bpow e <= IZR m2 * bpow e)%R","hypotheses":"(m1 m2 e : Z) (H : (m1 <= m2)%Z)","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply IZR_le."},{"statement":"(m1 m2 e : Z) (H : (m1 <= m2)%Z) : (0 <= bpow e)%R.","conclusion":"(0 <= bpow e)%R","hypotheses":"(m1 m2 e : Z) (H : (m1 <= m2)%Z)","proofString":"apply bpow_ge_0."},{"statement":"(m1 m2 e : Z) (H : (m1 <= m2)%Z) : (IZR m1 <= IZR m2)%R.","conclusion":"(IZR m1 <= IZR m2)%R","hypotheses":"(m1 m2 e : Z) (H : (m1 <= m2)%Z)","proofString":"now apply IZR_le."},{"statement":"(e m1 m2 : Z) (H : (m1 < m2)%Z) : (IZR m1 * bpow e < IZR m2 * bpow e)%R.","conclusion":"(IZR m1 * bpow e < IZR m2 * bpow e)%R","hypotheses":"(e m1 m2 : Z) (H : (m1 < m2)%Z)","proofString":"apply Rmult_lt_compat_r.\napply bpow_gt_0.\nnow apply IZR_lt."},{"statement":"(e m1 m2 : Z) (H : (m1 < m2)%Z) : (0 < bpow e)%R.","conclusion":"(0 < bpow e)%R","hypotheses":"(e m1 m2 : Z) (H : (m1 < m2)%Z)","proofString":"apply bpow_gt_0."},{"statement":"(e m1 m2 : Z) (H : (m1 < m2)%Z) : (IZR m1 < IZR m2)%R.","conclusion":"(IZR m1 < IZR m2)%R","hypotheses":"(e m1 m2 : Z) (H : (m1 < m2)%Z)","proofString":"now apply IZR_lt."},{"statement":"(m e : Z) : (IZR (Z.abs m) * bpow e)%R = (IZR (Z.abs m) * Rabs (bpow e))%R.","conclusion":"(IZR (Z.abs m) * bpow e)%R = (IZR (Z.abs m) * Rabs (bpow e))%R","hypotheses":"(m e : Z)","proofString":"apply f_equal.\napply sym_eq; apply Rabs_right.\napply Rle_ge.\napply bpow_ge_0."},{"statement":"(m e : Z) : bpow e = Rabs (bpow e).","conclusion":"bpow e = Rabs (bpow e)","hypotheses":"(m e : Z)","proofString":"apply sym_eq; apply Rabs_right.\napply Rle_ge.\napply bpow_ge_0."},{"statement":"(m e : Z) : (bpow e >= 0)%R.","conclusion":"(bpow e >= 0)%R","hypotheses":"(m e : Z)","proofString":"apply Rle_ge.\napply bpow_ge_0."},{"statement":"(m e : Z) : (0 <= bpow e)%R.","conclusion":"(0 <= bpow e)%R","hypotheses":"(m e : Z)","proofString":"apply bpow_ge_0."},{"statement":"(m e : Z) : (IZR (- m) * bpow e)%R = (- (IZR m * bpow e))%R.","conclusion":"(IZR (- m) * bpow e)%R = (- (IZR m * bpow e))%R","hypotheses":"(m e : Z)","proofString":"rewrite <- Ropp_mult_distr_l_reverse.\nnow rewrite opp_IZR."},{"statement":"(m e : Z) : (IZR (- m) * bpow e)%R = (- IZR m * bpow e)%R.","conclusion":"(IZR (- m) * bpow e)%R = (- IZR m * bpow e)%R","hypotheses":"(m e : Z)","proofString":"now rewrite opp_IZR."},{"statement":"(m e : Z) : (IZR (- m) * bpow e)%R = (- (IZR m * bpow e))%R.","conclusion":"(IZR (- m) * bpow e)%R = (- (IZR m * bpow e))%R","hypotheses":"(m e : Z)","proofString":"now rewrite opp_IZR, Ropp_mult_distr_l_reverse."},{"statement":"(m e : Z) : (IZR m * bpow e)%R = (IZR m * bpow e)%R.","conclusion":"(IZR m * bpow e)%R = (IZR m * bpow e)%R","hypotheses":"(m e : Z)","proofString":"apply refl_equal."},{"statement":"(e : Z) : (0 * bpow e)%R = 0%R.","conclusion":"(0 * bpow e)%R = 0%R","hypotheses":"(e : Z)","proofString":"apply Rmult_0_l."},{"statement":"(f : float beta) (H : (0 <= Fnum f)%Z) : (0 <= F2R f)%R.","conclusion":"(0 <= F2R f)%R","hypotheses":"(f : float beta) (H : (0 <= Fnum f)%Z)","proofString":"rewrite <- F2R_0 with (Fexp f).\nnow apply F2R_le."},{"statement":"(f : float beta) (H : (Fnum f <= 0)%Z) : (F2R f <= 0)%R.","conclusion":"(F2R f <= 0)%R","hypotheses":"(f : float beta) (H : (Fnum f <= 0)%Z)","proofString":"rewrite <- F2R_0 with (Fexp f).\nnow apply F2R_le."},{"statement":"(f : float beta) (H : (0 < Fnum f)%Z) : (0 < F2R f)%R.","conclusion":"(0 < F2R f)%R","hypotheses":"(f : float beta) (H : (0 < Fnum f)%Z)","proofString":"rewrite <- F2R_0 with (Fexp f).\nnow apply F2R_lt."},{"statement":"(f : float beta) (H : (Fnum f < 0)%Z) : (F2R f < 0)%R.","conclusion":"(F2R f < 0)%R","hypotheses":"(f : float beta) (H : (Fnum f < 0)%Z)","proofString":"rewrite <- F2R_0 with (Fexp f).\nnow apply F2R_lt."},{"statement":"(f : float beta) (H : Fnum f <> 0%Z) (H1 : F2R f = 0%R) : False.","conclusion":"False","hypotheses":"(f : float beta) (H : Fnum f <> 0%Z) (H1 : F2R f = 0%R)","proofString":"apply H.\nnow apply eq_0_F2R with (Fexp f)."},{"statement":"(f : float beta) (H : Fnum f <> 0%Z) (H1 : F2R f = 0%R) : Fnum f = 0%Z.","conclusion":"Fnum f = 0%Z","hypotheses":"(f : float beta) (H : Fnum f <> 0%Z) (H1 : F2R f = 0%R)","proofString":"now apply eq_0_F2R with (Fexp f)."},{"statement":"(f : float beta) (H : (0 <= F2R f)%R) : (0 <= Fnum f)%Z.","conclusion":"(0 <= Fnum f)%Z","hypotheses":"(f : float beta) (H : (0 <= F2R f)%R)","proofString":"case (Zle_or_lt 0 (Fnum f)); trivial.\nintros H1; contradict H.\napply Rlt_not_le.\nnow apply F2R_lt_0."},{"statement":"(f : float beta) (H : (0 <= F2R f)%R) : (Fnum f < 0)%Z -> (0 <= Fnum f)%Z.","conclusion":"(Fnum f < 0)%Z -> (0 <= Fnum f)%Z","hypotheses":"(f : float beta) (H : (0 <= F2R f)%R)","proofString":"intros H1; contradict H.\napply Rlt_not_le.\nnow apply F2R_lt_0."},{"statement":"(f : float beta) (H1 : (Fnum f < 0)%Z) : ~ (0 <= F2R f)%R.","conclusion":"~ (0 <= F2R f)%R","hypotheses":"(f : float beta) (H1 : (Fnum f < 0)%Z)","proofString":"apply Rlt_not_le.\nnow apply F2R_lt_0."},{"statement":"(f : float beta) (H1 : (Fnum f < 0)%Z) : (F2R f < 0)%R.","conclusion":"(F2R f < 0)%R","hypotheses":"(f : float beta) (H1 : (Fnum f < 0)%Z)","proofString":"now apply F2R_lt_0."},{"statement":"(f : float beta) (H : (F2R f <= 0)%R) : (Fnum f <= 0)%Z.","conclusion":"(Fnum f <= 0)%Z","hypotheses":"(f : float beta) (H : (F2R f <= 0)%R)","proofString":"case (Zle_or_lt (Fnum f) 0); trivial.\nintros H1; contradict H.\napply Rlt_not_le.\nnow apply F2R_gt_0."},{"statement":"(f : float beta) (H : (F2R f <= 0)%R) : (0 < Fnum f)%Z -> (Fnum f <= 0)%Z.","conclusion":"(0 < Fnum f)%Z -> (Fnum f <= 0)%Z","hypotheses":"(f : float beta) (H : (F2R f <= 0)%R)","proofString":"intros H1; contradict H.\napply Rlt_not_le.\nnow apply F2R_gt_0."},{"statement":"(f : float beta) (H1 : (0 < Fnum f)%Z) : ~ (F2R f <= 0)%R.","conclusion":"~ (F2R f <= 0)%R","hypotheses":"(f : float beta) (H1 : (0 < Fnum f)%Z)","proofString":"apply Rlt_not_le.\nnow apply F2R_gt_0."},{"statement":"(f : float beta) (H1 : (0 < Fnum f)%Z) : (0 < F2R f)%R.","conclusion":"(0 < F2R f)%R","hypotheses":"(f : float beta) (H1 : (0 < Fnum f)%Z)","proofString":"now apply F2R_gt_0."},{"statement":"(e : Z) : (1 * bpow e)%R = bpow e.","conclusion":"(1 * bpow e)%R = bpow e","hypotheses":"(e : Z)","proofString":"apply Rmult_1_l."},{"statement":"(m e : Z) (H : (0 < m)%Z) : (1 <= m)%Z.","conclusion":"(1 <= m)%Z","hypotheses":"(m e : Z) (H : (0 < m)%Z)","proofString":"now apply (Zlt_le_succ 0)."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) : (IZR m * bpow e1 < bpow (e2 - e1) * bpow e1)%R ->\n(IZR (m + 1) * bpow e1 <= bpow (e2 - e1) * bpow e1)%R.","conclusion":"(IZR m * bpow e1 < bpow (e2 - e1) * bpow e1)%R ->\n(IZR (m + 1) * bpow e1 <= bpow (e2 - e1) * bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z)","proofString":"rewrite <- (IZR_Zpower beta (e2 - e1)).\nintros H.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rmult_lt_reg_r in H.\napply IZR_le.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0.\nnow apply Zle_minus_le_0."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R ->\n(IZR (m + 1) * bpow e1 <= IZR (beta ^ (e2 - e1)) * bpow e1)%R.","conclusion":"(IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R ->\n(IZR (m + 1) * bpow e1 <= IZR (beta ^ (e2 - e1)) * bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z)","proofString":"intros H.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rmult_lt_reg_r in H.\napply IZR_le.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R) : (IZR (m + 1) * bpow e1 <= IZR (beta ^ (e2 - e1)) * bpow e1)%R.","conclusion":"(IZR (m + 1) * bpow e1 <= IZR (beta ^ (e2 - e1)) * bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R)","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rmult_lt_reg_r in H.\napply IZR_le.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R) : (0 <= bpow e1)%R.","conclusion":"(0 <= bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R)","proofString":"apply bpow_ge_0."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R) : (IZR (m + 1) <= IZR (beta ^ (e2 - e1)))%R.","conclusion":"(IZR (m + 1) <= IZR (beta ^ (e2 - e1)))%R","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R)","proofString":"apply Rmult_lt_reg_r in H.\napply IZR_le.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m < IZR (beta ^ (e2 - e1)))%R) : (IZR (m + 1) <= IZR (beta ^ (e2 - e1)))%R.","conclusion":"(IZR (m + 1) <= IZR (beta ^ (e2 - e1)))%R","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m < IZR (beta ^ (e2 - e1)))%R)","proofString":"apply IZR_le.\napply Zlt_le_succ.\nnow apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m < IZR (beta ^ (e2 - e1)))%R) : (m + 1 <= beta ^ (e2 - e1))%Z.","conclusion":"(m + 1 <= beta ^ (e2 - e1))%Z","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m < IZR (beta ^ (e2 - e1)))%R)","proofString":"apply Zlt_le_succ.\nnow apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m < IZR (beta ^ (e2 - e1)))%R) : (m < beta ^ (e2 - e1))%Z.","conclusion":"(m < beta ^ (e2 - e1))%Z","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m < IZR (beta ^ (e2 - e1)))%R)","proofString":"now apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R) : (0 < bpow e1)%R.","conclusion":"(0 < bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR m * bpow e1 < IZR (beta ^ (e2 - e1)) * bpow e1)%R)","proofString":"apply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z) : (0 <= e2 - e1)%Z.","conclusion":"(0 <= e2 - e1)%Z","hypotheses":"(m e1 e2 : Z) (Hm : (0 < m)%Z) (He : (e1 <= e2)%Z)","proofString":"now apply Zle_minus_le_0."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) : (bpow (e2 - e1) * bpow e1 < IZR m * bpow e1)%R ->\n(bpow (e2 - e1) * bpow e1 <= IZR (m - 1) * bpow e1)%R.","conclusion":"(bpow (e2 - e1) * bpow e1 < IZR m * bpow e1)%R ->\n(bpow (e2 - e1) * bpow e1 <= IZR (m - 1) * bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z)","proofString":"rewrite <- (IZR_Zpower beta (e2 - e1)).\nintros H.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rmult_lt_reg_r in H.\napply IZR_le.\nrewrite (Zpred_succ (Zpower _ _)).\napply Zplus_le_compat_r.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0.\nnow apply Zle_minus_le_0."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R ->\n(IZR (beta ^ (e2 - e1)) * bpow e1 <= IZR (m - 1) * bpow e1)%R.","conclusion":"(IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R ->\n(IZR (beta ^ (e2 - e1)) * bpow e1 <= IZR (m - 1) * bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z)","proofString":"intros H.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rmult_lt_reg_r in H.\napply IZR_le.\nrewrite (Zpred_succ (Zpower _ _)).\napply Zplus_le_compat_r.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R) : (IZR (beta ^ (e2 - e1)) * bpow e1 <= IZR (m - 1) * bpow e1)%R.","conclusion":"(IZR (beta ^ (e2 - e1)) * bpow e1 <= IZR (m - 1) * bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R)","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rmult_lt_reg_r in H.\napply IZR_le.\nrewrite (Zpred_succ (Zpower _ _)).\napply Zplus_le_compat_r.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R) : (0 <= bpow e1)%R.","conclusion":"(0 <= bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R)","proofString":"apply bpow_ge_0."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R) : (IZR (beta ^ (e2 - e1)) <= IZR (m - 1))%R.","conclusion":"(IZR (beta ^ (e2 - e1)) <= IZR (m - 1))%R","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R)","proofString":"apply Rmult_lt_reg_r in H.\napply IZR_le.\nrewrite (Zpred_succ (Zpower _ _)).\napply Zplus_le_compat_r.\napply Zlt_le_succ.\nnow apply lt_IZR.\napply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R) : (IZR (beta ^ (e2 - e1)) <= IZR (m - 1))%R.","conclusion":"(IZR (beta ^ (e2 - e1)) <= IZR (m - 1))%R","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R)","proofString":"apply IZR_le.\nrewrite (Zpred_succ (Zpower _ _)).\napply Zplus_le_compat_r.\napply Zlt_le_succ.\nnow apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R) : (beta ^ (e2 - e1) <= m - 1)%Z.","conclusion":"(beta ^ (e2 - e1) <= m - 1)%Z","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R)","proofString":"rewrite (Zpred_succ (Zpower _ _)).\napply Zplus_le_compat_r.\napply Zlt_le_succ.\nnow apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R) : (Z.pred (Z.succ (beta ^ (e2 - e1))) <= m - 1)%Z.","conclusion":"(Z.pred (Z.succ (beta ^ (e2 - e1))) <= m - 1)%Z","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R)","proofString":"apply Zplus_le_compat_r.\napply Zlt_le_succ.\nnow apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R) : (Z.succ (beta ^ (e2 - e1)) <= m)%Z.","conclusion":"(Z.succ (beta ^ (e2 - e1)) <= m)%Z","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R)","proofString":"apply Zlt_le_succ.\nnow apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R) : (beta ^ (e2 - e1) < m)%Z.","conclusion":"(beta ^ (e2 - e1) < m)%Z","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) < IZR m)%R)","proofString":"now apply lt_IZR."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R) : (0 < bpow e1)%R.","conclusion":"(0 < bpow e1)%R","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) (H : (IZR (beta ^ (e2 - e1)) * bpow e1 < IZR m * bpow e1)%R)","proofString":"apply bpow_gt_0."},{"statement":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z) : (0 <= e2 - e1)%Z.","conclusion":"(0 <= e2 - e1)%Z","hypotheses":"(m e1 e2 : Z) (Hm : (1 < m)%Z) (He : (e1 <= e2)%Z)","proofString":"now apply Zle_minus_le_0."},{"statement":"(e' m e : Z) (He : (e' <= e)%Z) : (IZR m * bpow e)%R = (IZR (m * beta ^ (e - e')) * bpow e')%R.","conclusion":"(IZR m * bpow e)%R = (IZR (m * beta ^ (e - e')) * bpow e')%R","hypotheses":"(e' m e : Z) (He : (e' <= e)%Z)","proofString":"rewrite mult_IZR, IZR_Zpower, Rmult_assoc.\napply f_equal.\npattern e at 1 ; replace e with (e - e' + e')%Z by ring.\napply bpow_plus.\nnow apply Zle_minus_le_0."},{"statement":"(e' m e : Z) (He : (e' <= e)%Z) : (IZR m * bpow e)%R = (IZR m * (bpow (e - e') * bpow e'))%R.","conclusion":"(IZR m * bpow e)%R = (IZR m * (bpow (e - e') * bpow e'))%R","hypotheses":"(e' m e : Z) (He : (e' <= e)%Z)","proofString":"apply f_equal.\npattern e at 1 ; replace e with (e - e' + e')%Z by ring.\napply bpow_plus."},{"statement":"(e' m e : Z) (He : (e' <= e)%Z) : bpow e = (bpow (e - e') * bpow e')%R.","conclusion":"bpow e = (bpow (e - e') * bpow e')%R","hypotheses":"(e' m e : Z) (He : (e' <= e)%Z)","proofString":"pattern e at 1 ; replace e with (e - e' + e')%Z by ring.\napply bpow_plus."},{"statement":"(e' m e : Z) (He : (e' <= e)%Z) : bpow (e - e' + e') = (bpow (e - e') * bpow e')%R.","conclusion":"bpow (e - e' + e') = (bpow (e - e') * bpow e')%R","hypotheses":"(e' m e : Z) (He : (e' <= e)%Z)","proofString":"apply bpow_plus."},{"statement":"(e' m e : Z) (He : (e' <= e)%Z) : (0 <= e - e')%Z.","conclusion":"(0 <= e - e')%Z","hypotheses":"(e' m e : Z) (He : (e' <= e)%Z)","proofString":"now apply Zle_minus_le_0."},{"statement":"(m e : Z) (H : m <> 0%Z) : IZR m <> 0%R.","conclusion":"IZR m <> 0%R","hypotheses":"(m e : Z) (H : m <> 0%Z)","proofString":"now apply IZR_neq."},{"statement":"(n : Z) (Hn : n <> 0%Z) : Zdigits beta n = mag beta (IZR n).","conclusion":"Zdigits beta n = mag beta (IZR n)","hypotheses":"(n : Z) (Hn : n <> 0%Z)","proofString":"destruct (mag beta (IZR n)) as (e, He) ; simpl.\nspecialize (He (IZR_neq _ _ Hn)).\nrewrite <- abs_IZR in He.\nassert (Hd := Zdigits_correct beta n).\nassert (Hd' := Zdigits_gt_0 beta n).\napply Zle_antisym ; apply (bpow_lt_bpow beta).\napply Rle_lt_trans with (2 := proj2 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_le.\napply Rle_lt_trans with (1 := proj1 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_lt."},{"statement":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : IZR n <> 0%R -> (bpow (e - 1) <= Rabs (IZR n) < bpow e)%R) : Zdigits beta n = e.","conclusion":"Zdigits beta n = e","hypotheses":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : IZR n <> 0%R -> (bpow (e - 1) <= Rabs (IZR n) < bpow e)%R)","proofString":"specialize (He (IZR_neq _ _ Hn)).\nrewrite <- abs_IZR in He.\nassert (Hd := Zdigits_correct beta n).\nassert (Hd' := Zdigits_gt_0 beta n).\napply Zle_antisym ; apply (bpow_lt_bpow beta).\napply Rle_lt_trans with (2 := proj2 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_le.\napply Rle_lt_trans with (1 := proj1 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_lt."},{"statement":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= Rabs (IZR n) < bpow e)%R) : Zdigits beta n = e.","conclusion":"Zdigits beta n = e","hypotheses":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= Rabs (IZR n) < bpow e)%R)","proofString":"rewrite <- abs_IZR in He.\nassert (Hd := Zdigits_correct beta n).\nassert (Hd' := Zdigits_gt_0 beta n).\napply Zle_antisym ; apply (bpow_lt_bpow beta).\napply Rle_lt_trans with (2 := proj2 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_le.\napply Rle_lt_trans with (1 := proj1 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_lt."},{"statement":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= IZR (Z.abs n) < bpow e)%R) : Zdigits beta n = e.","conclusion":"Zdigits beta n = e","hypotheses":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= IZR (Z.abs n) < bpow e)%R)","proofString":"assert (Hd := Zdigits_correct beta n).\nassert (Hd' := Zdigits_gt_0 beta n).\napply Zle_antisym ; apply (bpow_lt_bpow beta).\napply Rle_lt_trans with (2 := proj2 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_le.\napply Rle_lt_trans with (1 := proj1 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_lt."},{"statement":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= IZR (Z.abs n) < bpow e)%R) (Hd : (beta ^ (Zdigits beta n - 1) <= Z.abs n < beta ^ Zdigits beta n)%Z) : Zdigits beta n = e.","conclusion":"Zdigits beta n = e","hypotheses":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= IZR (Z.abs n) < bpow e)%R) (Hd : (beta ^ (Zdigits beta n - 1) <= Z.abs n < beta ^ Zdigits beta n)%Z)","proofString":"assert (Hd' := Zdigits_gt_0 beta n).\napply Zle_antisym ; apply (bpow_lt_bpow beta).\napply Rle_lt_trans with (2 := proj2 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_le.\napply Rle_lt_trans with (1 := proj1 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_lt."},{"statement":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= IZR (Z.abs n) < bpow e)%R) (Hd : (beta ^ (Zdigits beta n - 1) <= Z.abs n < beta ^ Zdigits beta n)%Z) (Hd' : n <> 0%Z -> (0 < Zdigits beta n)%Z) : Zdigits beta n = e.","conclusion":"Zdigits beta n = e","hypotheses":"(n : Z) (Hn : n <> 0%Z) (e : Z) (He : (bpow (e - 1) <= IZR (Z.abs n) < bpow e)%R) (Hd : (beta ^ (Zdigits beta n - 1) <= Z.abs n < beta ^ Zdigits beta n)%Z) (Hd' : n <> 0%Z -> (0 < Zdigits beta n)%Z)","proofString":"apply Zle_antisym ; apply (bpow_lt_bpow beta).\napply Rle_lt_trans with (2 := proj2 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_le.\napply Rle_lt_trans with (1 := proj1 He).\nrewrite <- IZR_Zpower by lia.\nnow apply IZR_lt."},{"statement":"(m e : Z) (Hm : m <> 0%Z) : (mag beta (IZR m) + e)%Z = (Zdigits beta m + e)%Z.","conclusion":"(mag beta (IZR m) + e)%Z = (Zdigits beta m + e)%Z","hypotheses":"(m e : Z) (Hm : m <> 0%Z)","proofString":"apply (f_equal (fun v => Zplus v e)).\napply sym_eq.\nnow apply Zdigits_mag."},{"statement":"(m e : Z) (Hm : m <> 0%Z) : Zdigits beta m = mag beta (IZR m).","conclusion":"Zdigits beta m = mag beta (IZR m)","hypotheses":"(m e : Z) (Hm : m <> 0%Z)","proofString":"now apply Zdigits_mag."}]}