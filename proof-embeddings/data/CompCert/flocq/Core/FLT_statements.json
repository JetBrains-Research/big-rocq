{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Core/FLT.v","fileSamples":[{"statement":"forall x : R, FLT_format x -> generic_format beta FLT_exp x.","proofString":"intros x [[mx ex] H1 H2 H3].\nsimpl in H2, H3.\nrewrite H1.\napply generic_format_F2R.\nintros Zmx.\nunfold cexp, FLT_exp.\nrewrite mag_F2R with (1 := Zmx).\napply Z.max_lub with (2 := H3).\napply Zplus_le_reg_r with (prec - ex)%Z.\nring_simplify.\nnow apply mag_le_Zpower."},{"statement":"(e : Z) (He : (emin <= e)%Z) : generic_format beta FLT_exp (bpow e).","proofString":"apply generic_format_bpow; unfold FLT_exp.\napply Z.max_case; try assumption.\nunfold Prec_gt_0 in prec_gt_0_; lia."},{"statement":"(e : Z) (He : (emin <= e)%Z) : (Z.max (e + 1 - prec) emin <= e)%Z.","proofString":"apply Z.max_case; try assumption.\nunfold Prec_gt_0 in prec_gt_0_; lia."},{"statement":"(e : Z) (He : (emin <= e)%Z) : (e + 1 - prec <= e)%Z.","proofString":"unfold Prec_gt_0 in prec_gt_0_; lia."},{"statement":"(e : Z) (He : (emin <= e)%Z) : FLT_format (bpow e).","proofString":"apply FLT_format_generic.\nnow apply generic_format_FLT_bpow."},{"statement":"(e : Z) (He : (emin <= e)%Z) : generic_format beta FLT_exp (bpow e).","proofString":"now apply generic_format_FLT_bpow."},{"statement":"forall x : R, generic_format beta FLT_exp x <-> FLT_format x.","proofString":"intros x.\nsplit.\napply FLT_format_generic.\napply generic_format_FLT."},{"statement":"(x : R) : generic_format beta FLT_exp x <-> FLT_format x.","proofString":"split.\napply FLT_format_generic.\napply generic_format_FLT."},{"statement":"(x : R) : generic_format beta FLT_exp x -> FLT_format x.","proofString":"apply FLT_format_generic."},{"statement":"(x : R) : FLT_format x -> generic_format beta FLT_exp x.","proofString":"apply generic_format_FLT."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) : cexp beta FLT_exp x = cexp beta (FLX_exp prec) x.","proofString":"assert (Hx0: x <> 0%R).\nintros H1; rewrite H1, Rabs_R0 in Hx.\ncontradict Hx; apply Rlt_not_le, bpow_gt_0.\nunfold cexp.\napply Zmax_left.\ndestruct (mag beta x) as (ex, He).\nunfold FLX_exp.\nsimpl.\nspecialize (He Hx0).\ncut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) : x <> 0%R.","proofString":"intros H1; rewrite H1, Rabs_R0 in Hx.\ncontradict Hx; apply Rlt_not_le, bpow_gt_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= 0)%R) (H1 : x = 0%R) : False.","proofString":"contradict Hx; apply Rlt_not_le, bpow_gt_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) : cexp beta FLT_exp x = cexp beta (FLX_exp prec) x.","proofString":"unfold cexp.\napply Zmax_left.\ndestruct (mag beta x) as (ex, He).\nunfold FLX_exp.\nsimpl.\nspecialize (He Hx0).\ncut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) : FLT_exp (mag beta x) = FLX_exp prec (mag beta x).","proofString":"apply Zmax_left.\ndestruct (mag beta x) as (ex, He).\nunfold FLX_exp.\nsimpl.\nspecialize (He Hx0).\ncut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) : (FLX_exp prec (mag beta x) >= emin)%Z.","proofString":"destruct (mag beta x) as (ex, He).\nunfold FLX_exp.\nsimpl.\nspecialize (He Hx0).\ncut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (FLX_exp prec (Build_mag_prop beta x ex He) >= emin)%Z.","proofString":"unfold FLX_exp.\nsimpl.\nspecialize (He Hx0).\ncut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Build_mag_prop beta x ex He - prec >= emin)%Z.","proofString":"simpl.\nspecialize (He Hx0).\ncut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (ex - prec >= emin)%Z.","proofString":"specialize (He Hx0).\ncut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (ex - prec >= emin)%Z.","proofString":"cut (emin + prec - 1 < ex)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (emin + prec - 1 < ex)%Z -> (ex - prec >= emin)%Z.","proofString":"lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (emin + prec - 1 < ex)%Z.","proofString":"apply (lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (bpow (emin + prec - 1) < bpow ex)%R.","proofString":"apply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x < bpow ex)%R.","proofString":"apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (H : generic_format beta (FLX_exp prec) x) : generic_format beta FLT_exp x.","proofString":"destruct (Req_dec x 0) as [Hx0|Hx0].\nrewrite Hx0.\napply generic_format_0.\nunfold generic_format, scaled_mantissa.\nnow rewrite cexp_FLT_FLX."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (H : generic_format beta (FLX_exp prec) x) (Hx0 : x = 0%R) : generic_format beta FLT_exp x.","proofString":"rewrite Hx0.\napply generic_format_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (H : generic_format beta (FLX_exp prec) x) (Hx0 : x = 0%R) : generic_format beta FLT_exp 0.","proofString":"apply generic_format_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (H : generic_format beta (FLX_exp prec) x) (Hx0 : x <> 0%R) : generic_format beta FLT_exp x.","proofString":"unfold generic_format, scaled_mantissa.\nnow rewrite cexp_FLT_FLX."},{"statement":"forall x : R,\ngeneric_format beta FLT_exp x -> generic_format beta (FLX_exp prec) x.","proofString":"intros x Hx.\nunfold generic_format in Hx; rewrite Hx.\napply generic_format_F2R.\nintros _.\nrewrite <- Hx.\nunfold cexp, FLX_exp, FLT_exp.\napply Z.le_max_l."},{"statement":"(x : R) (Hx : generic_format beta FLT_exp x) : generic_format beta (FLX_exp prec) x.","proofString":"unfold generic_format in Hx; rewrite Hx.\napply generic_format_F2R.\nintros _.\nrewrite <- Hx.\nunfold cexp, FLX_exp, FLT_exp.\napply Z.le_max_l."},{"statement":"(rnd : R -> Z) (x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) : round beta FLT_exp rnd x = round beta (FLX_exp prec) rnd x.","proofString":"unfold round, scaled_mantissa.\nrewrite cexp_FLT_FLX ; trivial."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) : cexp beta FLT_exp x = cexp beta (FIX_exp emin) x.","proofString":"unfold cexp.\napply Zmax_right.\nunfold FIX_exp.\ndestruct (mag beta x) as (ex, Hex).\nsimpl.\ncut (ex - 1 < emin + prec)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) : FLT_exp (mag beta x) = FIX_exp emin (mag beta x).","proofString":"apply Zmax_right.\nunfold FIX_exp.\ndestruct (mag beta x) as (ex, Hex).\nsimpl.\ncut (ex - 1 < emin + prec)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) : (mag beta x - prec <= FIX_exp emin (mag beta x))%Z.","proofString":"unfold FIX_exp.\ndestruct (mag beta x) as (ex, Hex).\nsimpl.\ncut (ex - 1 < emin + prec)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) : (mag beta x - prec <= emin)%Z.","proofString":"destruct (mag beta x) as (ex, Hex).\nsimpl.\ncut (ex - 1 < emin + prec)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Build_mag_prop beta x ex Hex - prec <= emin)%Z.","proofString":"simpl.\ncut (ex - 1 < emin + prec)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (ex - prec <= emin)%Z.","proofString":"cut (ex - 1 < emin + prec)%Z.\nlia.\napply (lt_bpow beta).\napply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (ex - 1 < emin + prec)%Z -> (ex - prec <= emin)%Z.","proofString":"lia."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (ex - 1 < emin + prec)%Z.","proofString":"apply (lt_bpow beta).\napply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (bpow (ex - 1) < bpow (emin + prec))%R.","proofString":"apply Rle_lt_trans with (2 := Hx).\nnow apply Hex."},{"statement":"(x : R) (Hx0 : x <> 0%R) (Hx : (Rabs x < bpow (emin + prec))%R) (ex : Z) (Hex : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (bpow (ex - 1) <= Rabs x)%R.","proofString":"now apply Hex."},{"statement":"forall x : R,\ngeneric_format beta FLT_exp x -> generic_format beta (FIX_exp emin) x.","proofString":"intros x Hx.\nrewrite Hx.\napply generic_format_F2R.\nintros _.\nrewrite <- Hx.\napply Z.le_max_r."},{"statement":"(x : R) (Hx : generic_format beta FLT_exp x) : generic_format beta (FIX_exp emin) x.","proofString":"rewrite Hx.\napply generic_format_F2R.\nintros _.\nrewrite <- Hx.\napply Z.le_max_r."},{"statement":"(x : R) (Hx : generic_format beta FLT_exp x) : (cexp beta (FIX_exp emin) x <= cexp beta FLT_exp x)%Z.","proofString":"apply Z.le_max_r."},{"statement":"(forall n : Z, (FLT_exp n < n)%Z) ->\nexists n : Z, None = Some n /\\ (n <= emin)%Z.","proofString":"intro H; exfalso; specialize (H emin); revert H.\napply Zle_not_lt, Z.le_max_r."},{"statement":"(FLT_exp emin < emin)%Z -> False.","proofString":"apply Zle_not_lt, Z.le_max_r."},{"statement":"forall n : Z,\n(n <= FLT_exp n)%Z -> exists n0 : Z, Some n = Some n0 /\\ (n0 <= emin)%Z.","proofString":"intros n Hn; exists n; split; [now simpl|].\ndestruct (Z.max_spec (n - prec) emin) as [(Hm, Hm')|(Hm, Hm')].\nnow revert Hn; unfold FLT_exp; rewrite Hm'.\nrevert Hn prec_gt_0_; unfold FLT_exp, Prec_gt_0; rewrite Hm'; lia."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) : (n <= emin)%Z.","proofString":"destruct (Z.max_spec (n - prec) emin) as [(Hm, Hm')|(Hm, Hm')].\nnow revert Hn; unfold FLT_exp; rewrite Hm'.\nrevert Hn prec_gt_0_; unfold FLT_exp, Prec_gt_0; rewrite Hm'; lia."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) (Hm : (n - prec < emin)%Z) (Hm' : Z.max (n - prec) emin = emin) : (n <= emin)%Z.","proofString":"now revert Hn; unfold FLT_exp; rewrite Hm'."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) (Hm : (emin <= n - prec)%Z) (Hm' : Z.max (n - prec) emin = (n - prec)%Z) : (n <= emin)%Z.","proofString":"revert Hn prec_gt_0_; unfold FLT_exp, Prec_gt_0; rewrite Hm'; lia."},{"statement":"(Hemin : (emin <= 0)%Z) : generic_format beta FLT_exp 1.","proofString":"now apply (generic_format_FLT_bpow 0)."},{"statement":"(if Req_bool 0 0\n then\n  match negligible_exp FLT_exp with\n  | Some n => bpow (FLT_exp n)\n  | None => 0%R\n  end\n else bpow (cexp beta FLT_exp 0)) = bpow emin.","proofString":"rewrite Req_bool_true by easy.\ncase negligible_exp_spec.\nintros T.\nelim Zle_not_lt with (2 := T emin).\napply Z.le_max_r.\nintros n Hn.\napply f_equal.\nassert (H: FLT_exp emin = emin).\napply Z.max_r.\ngeneralize (prec_gt_0 prec).\nclear ; lia.\nrewrite <- H.\napply fexp_negligible_exp_eq.\napply FLT_exp_valid.\nexact Hn.\nrewrite H.\napply Z.le_refl."},{"statement":"match negligible_exp FLT_exp with\n| Some n => bpow (FLT_exp n)\n| None => 0%R\nend = bpow emin.","proofString":"case negligible_exp_spec.\nintros T.\nelim Zle_not_lt with (2 := T emin).\napply Z.le_max_r.\nintros n Hn.\napply f_equal.\nassert (H: FLT_exp emin = emin).\napply Z.max_r.\ngeneralize (prec_gt_0 prec).\nclear ; lia.\nrewrite <- H.\napply fexp_negligible_exp_eq.\napply FLT_exp_valid.\nexact Hn.\nrewrite H.\napply Z.le_refl."},{"statement":"(forall n : Z, (FLT_exp n < n)%Z) -> 0%R = bpow emin.","proofString":"intros T.\nelim Zle_not_lt with (2 := T emin).\napply Z.le_max_r."},{"statement":"(T : forall n : Z, (FLT_exp n < n)%Z) : 0%R = bpow emin.","proofString":"elim Zle_not_lt with (2 := T emin).\napply Z.le_max_r."},{"statement":"(T : forall n : Z, (FLT_exp n < n)%Z) : (emin <= FLT_exp emin)%Z.","proofString":"apply Z.le_max_r."},{"statement":"forall n : Z, (n <= FLT_exp n)%Z -> bpow (FLT_exp n) = bpow emin.","proofString":"intros n Hn.\napply f_equal.\nassert (H: FLT_exp emin = emin).\napply Z.max_r.\ngeneralize (prec_gt_0 prec).\nclear ; lia.\nrewrite <- H.\napply fexp_negligible_exp_eq.\napply FLT_exp_valid.\nexact Hn.\nrewrite H.\napply Z.le_refl."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) : bpow (FLT_exp n) = bpow emin.","proofString":"apply f_equal.\nassert (H: FLT_exp emin = emin).\napply Z.max_r.\ngeneralize (prec_gt_0 prec).\nclear ; lia.\nrewrite <- H.\napply fexp_negligible_exp_eq.\napply FLT_exp_valid.\nexact Hn.\nrewrite H.\napply Z.le_refl."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) : FLT_exp n = emin.","proofString":"assert (H: FLT_exp emin = emin).\napply Z.max_r.\ngeneralize (prec_gt_0 prec).\nclear ; lia.\nrewrite <- H.\napply fexp_negligible_exp_eq.\napply FLT_exp_valid.\nexact Hn.\nrewrite H.\napply Z.le_refl."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) : FLT_exp emin = emin.","proofString":"apply Z.max_r.\ngeneralize (prec_gt_0 prec).\nclear ; lia."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) : (emin - prec <= emin)%Z.","proofString":"generalize (prec_gt_0 prec).\nclear ; lia."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) : (0 < prec)%Z -> (emin - prec <= emin)%Z.","proofString":"clear ; lia."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) (H : FLT_exp emin = emin) : FLT_exp n = emin.","proofString":"rewrite <- H.\napply fexp_negligible_exp_eq.\napply FLT_exp_valid.\nexact Hn.\nrewrite H.\napply Z.le_refl."},{"statement":"(n : Z) (Hn : (n <= FLT_exp n)%Z) (H : FLT_exp emin = emin) : FLT_exp n = FLT_exp emin.","proofString":"apply fexp_negligible_exp_eq.\napply FLT_exp_valid.\nexact Hn.\nrewrite H.\napply Z.le_refl."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) : ulp beta FLT_exp x = bpow emin.","proofString":"destruct (Req_dec x 0%R) as [Zx|Zx].\nrewrite Zx.\napply ulp_FLT_0.\nrewrite ulp_neq_0 by easy.\napply f_equal.\napply Z.max_r.\ndestruct (mag beta x) as [e He].\nsimpl.\ncut (e - 1 < emin + prec)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x = 0%R) : ulp beta FLT_exp x = bpow emin.","proofString":"rewrite Zx.\napply ulp_FLT_0."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x = 0%R) : ulp beta FLT_exp 0 = bpow emin.","proofString":"apply ulp_FLT_0."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) : ulp beta FLT_exp x = bpow emin.","proofString":"rewrite ulp_neq_0 by easy.\napply f_equal.\napply Z.max_r.\ndestruct (mag beta x) as [e He].\nsimpl.\ncut (e - 1 < emin + prec)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) : bpow (cexp beta FLT_exp x) = bpow emin.","proofString":"apply f_equal.\napply Z.max_r.\ndestruct (mag beta x) as [e He].\nsimpl.\ncut (e - 1 < emin + prec)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) : cexp beta FLT_exp x = emin.","proofString":"apply Z.max_r.\ndestruct (mag beta x) as [e He].\nsimpl.\ncut (e - 1 < emin + prec)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) : (mag beta x - prec <= emin)%Z.","proofString":"destruct (mag beta x) as [e He].\nsimpl.\ncut (e - 1 < emin + prec)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (Build_mag_prop beta x e He - prec <= emin)%Z.","proofString":"simpl.\ncut (e - 1 < emin + prec)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (e - prec <= emin)%Z.","proofString":"cut (e - 1 < emin + prec)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (e - 1 < emin + prec)%Z -> (e - prec <= emin)%Z.","proofString":"lia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (e - 1 < emin + prec)%Z.","proofString":"apply lt_bpow with beta.\napply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (e - 1) < bpow (emin + prec))%R.","proofString":"apply Rle_lt_trans with (2 := Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec))%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (e - 1) <= Rabs x)%R.","proofString":"now apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) : (ulp beta FLT_exp x <= Rabs x * bpow (1 - prec))%R.","proofString":"assert (Zx : (x <> 0)%R).\nintros Z; contradict Hx; apply Rgt_not_le, Rlt_gt.\nrewrite Z, Rabs_R0; apply bpow_gt_0.\nrewrite ulp_neq_0 with (1 := Zx).\nunfold cexp, FLT_exp.\ndestruct (mag beta x) as (e,He).\napply Rle_trans with (bpow (e-1)*bpow (1-prec))%R.\nrewrite <- bpow_plus.\nright; apply f_equal.\nreplace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) : x <> 0%R.","proofString":"intros Z; contradict Hx; apply Rgt_not_le, Rlt_gt.\nrewrite Z, Rabs_R0; apply bpow_gt_0."},{"statement":"(x : R) (Z : x = 0%R) : (Rabs x < bpow (emin + prec - 1))%R.","proofString":"rewrite Z, Rabs_R0; apply bpow_gt_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) : (ulp beta FLT_exp x <= Rabs x * bpow (1 - prec))%R.","proofString":"rewrite ulp_neq_0 with (1 := Zx).\nunfold cexp, FLT_exp.\ndestruct (mag beta x) as (e,He).\napply Rle_trans with (bpow (e-1)*bpow (1-prec))%R.\nrewrite <- bpow_plus.\nright; apply f_equal.\nreplace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) : (bpow (cexp beta FLT_exp x) <= Rabs x * bpow (1 - prec))%R.","proofString":"unfold cexp, FLT_exp.\ndestruct (mag beta x) as (e,He).\napply Rle_trans with (bpow (e-1)*bpow (1-prec))%R.\nrewrite <- bpow_plus.\nright; apply f_equal.\nreplace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) : (bpow (Z.max (mag beta x - prec) emin) <= Rabs x * bpow (1 - prec))%R.","proofString":"destruct (mag beta x) as (e,He).\napply Rle_trans with (bpow (e-1)*bpow (1-prec))%R.\nrewrite <- bpow_plus.\nright; apply f_equal.\nreplace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (Z.max (Build_mag_prop beta x e He - prec) emin) <=\n Rabs x * bpow (1 - prec))%R.","proofString":"apply Rle_trans with (bpow (e-1)*bpow (1-prec))%R.\nrewrite <- bpow_plus.\nright; apply f_equal.\nreplace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He.\napply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (Z.max (Build_mag_prop beta x e He - prec) emin) <=\n bpow (e - 1) * bpow (1 - prec))%R.","proofString":"rewrite <- bpow_plus.\nright; apply f_equal.\nreplace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (Z.max (Build_mag_prop beta x e He - prec) emin) <=\n bpow (e - 1 + (1 - prec)))%R.","proofString":"right; apply f_equal.\nreplace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : Z.max (Build_mag_prop beta x e He - prec) emin = (e - 1 + (1 - prec))%Z.","proofString":"replace (e - 1 + (1 - prec))%Z with (e - prec)%Z by ring.\napply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : Z.max (Build_mag_prop beta x e He - prec) emin = (e - prec)%Z.","proofString":"apply Z.max_l; simpl.\ncut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (emin <= e - prec)%Z.","proofString":"cut (emin+prec-1 < e)%Z.\nlia.\napply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (emin + prec - 1 < e)%Z -> (emin <= e - prec)%Z.","proofString":"lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (emin + prec - 1 < e)%Z.","proofString":"apply lt_bpow with beta.\napply Rle_lt_trans with (1:=Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (emin + prec - 1) < bpow e)%R.","proofString":"apply Rle_lt_trans with (1:=Hx).\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (Rabs x < bpow e)%R.","proofString":"now apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (e - 1) * bpow (1 - prec) <= Rabs x * bpow (1 - prec))%R.","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\nnow apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (0 <= bpow (1 - prec))%R.","proofString":"apply bpow_ge_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Zx : x <> 0%R) (e : Z) (He : x <> 0%R -> (bpow (e - 1) <= Rabs x < bpow e)%R) : (bpow (e - 1) <= Rabs x)%R.","proofString":"now apply He."},{"statement":"(x : R) (Hx : x = 0%R) : (Rabs x * bpow (- prec) < ulp beta FLT_exp x)%R.","proofString":"rewrite Hx, ulp_FLT_small, Rabs_R0, Rmult_0_l; try apply bpow_gt_0.\nrewrite Rabs_R0; apply bpow_gt_0."},{"statement":"(x : R) (Hx : x = 0%R) : (Rabs 0 < bpow (emin + prec))%R.","proofString":"rewrite Rabs_R0; apply bpow_gt_0."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) < ulp beta FLT_exp x)%R.","proofString":"rewrite ulp_neq_0; try exact Hx.\nunfold cexp, FLT_exp.\napply Rlt_le_trans with (bpow (mag beta x)*bpow (-prec))%R.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\nnow apply bpow_mag_gt.\nrewrite <- bpow_plus.\napply bpow_le.\napply Z.le_max_l."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) < bpow (cexp beta FLT_exp x))%R.","proofString":"unfold cexp, FLT_exp.\napply Rlt_le_trans with (bpow (mag beta x)*bpow (-prec))%R.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\nnow apply bpow_mag_gt.\nrewrite <- bpow_plus.\napply bpow_le.\napply Z.le_max_l."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) < bpow (Z.max (mag beta x - prec) emin))%R.","proofString":"apply Rlt_le_trans with (bpow (mag beta x)*bpow (-prec))%R.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\nnow apply bpow_mag_gt.\nrewrite <- bpow_plus.\napply bpow_le.\napply Z.le_max_l."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x * bpow (- prec) < bpow (mag beta x) * bpow (- prec))%R.","proofString":"apply Rmult_lt_compat_r.\napply bpow_gt_0.\nnow apply bpow_mag_gt."},{"statement":"(x : R) (Hx : x <> 0%R) : (0 < bpow (- prec))%R.","proofString":"apply bpow_gt_0."},{"statement":"(x : R) (Hx : x <> 0%R) : (Rabs x < bpow (mag beta x))%R.","proofString":"now apply bpow_mag_gt."},{"statement":"(x : R) (Hx : x <> 0%R) : (bpow (mag beta x) * bpow (- prec) <= bpow (Z.max (mag beta x - prec) emin))%R.","proofString":"rewrite <- bpow_plus.\napply bpow_le.\napply Z.le_max_l."},{"statement":"(x : R) (Hx : x <> 0%R) : (bpow (mag beta x + - prec) <= bpow (Z.max (mag beta x - prec) emin))%R.","proofString":"apply bpow_le.\napply Z.le_max_l."},{"statement":"(x : R) (Hx : x <> 0%R) : (mag beta x + - prec <= Z.max (mag beta x - prec) emin)%Z.","proofString":"apply Z.le_max_l."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec <= mag beta x)%Z) (He : (emin + prec - mag beta x <= e)%Z) : ulp beta FLT_exp (x * bpow e) = (ulp beta FLT_exp x * bpow e)%R.","proofString":"unfold ulp; rewrite Req_bool_false;  [|now intro H; apply Nzx, (Rmult_eq_reg_r (bpow e));    [rewrite Rmult_0_l|apply Rgt_not_eq, Rlt_gt, bpow_gt_0]].\nrewrite (Req_bool_false _ _ Nzx), <- bpow_plus; f_equal; unfold cexp, FLT_exp.\nrewrite (mag_mult_bpow _ _ _ Nzx), !Z.max_l; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec <= mag beta x)%Z) (He : (emin + prec - mag beta x <= e)%Z) : bpow (cexp beta FLT_exp (x * bpow e)) =\n((if Req_bool x 0\n  then\n   match negligible_exp FLT_exp with\n   | Some n => bpow (FLT_exp n)\n   | None => 0\n   end\n  else bpow (cexp beta FLT_exp x)) * bpow e)%R.","proofString":"rewrite (Req_bool_false _ _ Nzx), <- bpow_plus; f_equal; unfold cexp, FLT_exp.\nrewrite (mag_mult_bpow _ _ _ Nzx), !Z.max_l; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec <= mag beta x)%Z) (He : (emin + prec - mag beta x <= e)%Z) : Z.max (mag beta (x * bpow e) - prec) emin =\n(Z.max (mag beta x - prec) emin + e)%Z.","proofString":"rewrite (mag_mult_bpow _ _ _ Nzx), !Z.max_l; lia."},{"statement":"(x : R) (e : Z) (Px : (0 < x)%R) (Hmx : (emin + prec <= mag beta x)%Z) (He : (emin + prec - mag beta x <= e)%Z) : succ beta FLT_exp (x * bpow e) = (succ beta FLT_exp x * bpow e)%R.","proofString":"rewrite succ_eq_pos; [|now apply Rlt_le, Rmult_lt_0_compat, bpow_gt_0].\nrewrite (succ_eq_pos _ _ _ (Rlt_le _ _ Px)).\nnow rewrite Rmult_plus_distr_r; f_equal; apply ulp_FLT_exact_shift; [lra| |]."},{"statement":"(x : R) (e : Z) (Px : (0 < x)%R) (Hmx : (emin + prec <= mag beta x)%Z) (He : (emin + prec - mag beta x <= e)%Z) : (x * bpow e + ulp beta FLT_exp (x * bpow e))%R =\n(succ beta FLT_exp x * bpow e)%R.","proofString":"rewrite (succ_eq_pos _ _ _ (Rlt_le _ _ Px)).\nnow rewrite Rmult_plus_distr_r; f_equal; apply ulp_FLT_exact_shift; [lra| |]."},{"statement":"(x : R) (e : Z) (Px : (0 < x)%R) (Hmx : (emin + prec <= mag beta x)%Z) (He : (emin + prec - mag beta x <= e)%Z) : (x * bpow e + ulp beta FLT_exp (x * bpow e))%R =\n((x + ulp beta FLT_exp x) * bpow e)%R.","proofString":"now rewrite Rmult_plus_distr_r; f_equal; apply ulp_FLT_exact_shift; [lra| |]."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) : succ beta FLT_exp (x * bpow e) = (succ beta FLT_exp x * bpow e)%R.","proofString":"destruct (Rle_or_lt 0 x) as [Px|Nx].\nnow apply succ_FLT_exact_shift_pos; [lra|lia|lia].\nunfold succ.\nrewrite Rle_bool_false; [|assert (H := bpow_gt_0 beta e); nra].\nrewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Px : (0 <= x)%R) : succ beta FLT_exp (x * bpow e) = (succ beta FLT_exp x * bpow e)%R.","proofString":"now apply succ_FLT_exact_shift_pos; [lra|lia|lia]."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : succ beta FLT_exp (x * bpow e) = (succ beta FLT_exp x * bpow e)%R.","proofString":"unfold succ.\nrewrite Rle_bool_false; [|assert (H := bpow_gt_0 beta e); nra].\nrewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (if Rle_bool 0 (x * bpow e)\n then (x * bpow e + ulp beta FLT_exp (x * bpow e))%R\n else (- pred_pos beta FLT_exp (- (x * bpow e)))%R) =\n((if Rle_bool 0 x\n  then x + ulp beta FLT_exp x\n  else - pred_pos beta FLT_exp (- x)) * bpow e)%R.","proofString":"rewrite Rle_bool_false; [|assert (H := bpow_gt_0 beta e); nra].\nrewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (- pred_pos beta FLT_exp (- (x * bpow e)))%R =\n((if Rle_bool 0 x\n  then x + ulp beta FLT_exp x\n  else - pred_pos beta FLT_exp (- x)) * bpow e)%R.","proofString":"rewrite Rle_bool_false; [|now simpl].\nrewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (- pred_pos beta FLT_exp (- (x * bpow e)))%R =\n(- pred_pos beta FLT_exp (- x) * bpow e)%R.","proofString":"rewrite Ropp_mult_distr_l_reverse, <-Ropp_mult_distr_l_reverse; f_equal.\nunfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : pred_pos beta FLT_exp (- x * bpow e) =\n(pred_pos beta FLT_exp (- x) * bpow e)%R.","proofString":"unfold pred_pos.\nrewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (if Req_bool (- x * bpow e) (bpow (mag beta (- x * bpow e) - 1))\n then (- x * bpow e - bpow (FLT_exp (mag beta (- x * bpow e) - 1)))%R\n else (- x * bpow e - ulp beta FLT_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLT_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLT_exp (- x)) * bpow e)%R.","proofString":"rewrite mag_mult_bpow; [|lra].\nreplace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (if Req_bool (- x * bpow e) (bpow (mag beta (- x) + e - 1))\n then (- x * bpow e - bpow (FLT_exp (mag beta (- x) + e - 1)))%R\n else (- x * bpow e - ulp beta FLT_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLT_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLT_exp (- x)) * bpow e)%R.","proofString":"replace (_ - 1)%Z with (mag beta (- x) - 1 + e)%Z; [|ring]; rewrite bpow_plus.\nunfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (if Req_bool (- x * bpow e) (bpow (mag beta (- x) - 1) * bpow e)\n then (- x * bpow e - bpow (FLT_exp (mag beta (- x) - 1 + e)))%R\n else (- x * bpow e - ulp beta FLT_exp (- x * bpow e))%R) =\n((if Req_bool (- x) (bpow (mag beta (- x) - 1))\n  then - x - bpow (FLT_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLT_exp (- x)) * bpow e)%R.","proofString":"unfold Req_bool; rewrite Rcompare_mult_r; [|now apply bpow_gt_0].\nfold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (if\n  match Rcompare (- x) (bpow (mag beta (- x) - 1)) with\n  | Eq => true\n  | _ => false\n  end\n then (- x * bpow e - bpow (FLT_exp (mag beta (- x) - 1 + e)))%R\n else (- x * bpow e - ulp beta FLT_exp (- x * bpow e))%R) =\n((if\n   match Rcompare (- x) (bpow (mag beta (- x) - 1)) with\n   | Eq => true\n   | _ => false\n   end\n  then - x - bpow (FLT_exp (mag beta (- x) - 1))\n  else - x - ulp beta FLT_exp (- x)) * bpow e)%R.","proofString":"fold (Req_bool (-x) (bpow (mag beta (-x) - 1))); case Req_bool.\nrewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring.\nrewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (- x * bpow e - bpow (FLT_exp (mag beta (- x) - 1 + e)))%R =\n((- x - bpow (FLT_exp (mag beta (- x) - 1))) * bpow e)%R.","proofString":"rewrite mag_opp; unfold FLT_exp; do 2 (rewrite Z.max_l; [|lia]).\nreplace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (- x * bpow e - bpow (mag beta x - 1 + e - prec))%R =\n((- x - bpow (mag beta x - 1 - prec)) * bpow e)%R.","proofString":"replace (_ - _)%Z with (mag beta x - 1 - prec + e)%Z; [|ring].\nrewrite bpow_plus; ring."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (- x * bpow e - bpow (mag beta x - 1 - prec + e))%R =\n((- x - bpow (mag beta x - 1 - prec)) * bpow e)%R.","proofString":"rewrite bpow_plus; ring."},{"statement":"(x : R) (e : Z) (Nzx : x <> 0%R) (Hmx : (emin + prec + 1 <= mag beta x)%Z) (He : (emin + prec - mag beta x + 1 <= e)%Z) (Nx : (x < 0)%R) : (- x * bpow e - ulp beta FLT_exp (- x * bpow e))%R =\n((- x - ulp beta FLT_exp (- x)) * bpow e)%R.","proofString":"rewrite ulp_FLT_exact_shift; [ring|lra| |]; rewrite mag_opp; lia."}]}