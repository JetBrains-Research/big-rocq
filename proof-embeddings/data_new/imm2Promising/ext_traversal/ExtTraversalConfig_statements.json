{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/promising2ToImm/src/ext_traversal/ExtTraversalConfig.v","fileSamples":[{"statement":"(T : trav_label -> Prop) (r : relation actid) (S1 S2 : actid -> Prop) : dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S1 ∪₁ S2⦘ ⨾ r ⨾ rmw)\n≡₁ dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S1⦘ ⨾ r ⨾ rmw)\n   ∪₁ dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S2⦘ ⨾ r ⨾ rmw).","conclusion":"dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S1 ∪₁ S2⦘ ⨾ r ⨾ rmw)\n≡₁ dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S1⦘ ⨾ r ⨾ rmw)\n   ∪₁ dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S2⦘ ⨾ r ⨾ rmw)","hypotheses":"(T : trav_label -> Prop) (r : relation actid) (S1 S2 : actid -> Prop)","proofString":"basic_solver 10."},{"statement":"(P1 P2 : trav_label -> Prop) (r : relation actid) (S : actid -> Prop) : dom_rel (sb ⨾ ⦗reserved (P1 ∪₁ P2)⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n≡₁ dom_rel (sb ⨾ ⦗reserved P1⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n   ∪₁ dom_rel (sb ⨾ ⦗reserved P2⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw).","conclusion":"dom_rel (sb ⨾ ⦗reserved (P1 ∪₁ P2)⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n≡₁ dom_rel (sb ⨾ ⦗reserved P1⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n   ∪₁ dom_rel (sb ⨾ ⦗reserved P2⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)","hypotheses":"(P1 P2 : trav_label -> Prop) (r : relation actid) (S : actid -> Prop)","proofString":"rewrite reserved_union.\nbasic_solver 10."},{"statement":"(P1 P2 : trav_label -> Prop) (r : relation actid) (S : actid -> Prop) : dom_rel (sb ⨾ ⦗reserved P1 ∪₁ reserved P2⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n≡₁ dom_rel (sb ⨾ ⦗reserved P1⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n   ∪₁ dom_rel (sb ⨾ ⦗reserved P2⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw).","conclusion":"dom_rel (sb ⨾ ⦗reserved P1 ∪₁ reserved P2⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n≡₁ dom_rel (sb ⨾ ⦗reserved P1⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)\n   ∪₁ dom_rel (sb ⨾ ⦗reserved P2⦘) ∩₁ codom_rel (⦗S⦘ ⨾ r ⨾ rmw)","hypotheses":"(P1 P2 : trav_label -> Prop) (r : relation actid) (S : actid -> Prop)","proofString":"basic_solver 10."},{"statement":"dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ∪₁ dom_rel (rfe ⨾ rmw ⨾ ⦗reserved T⦘)\n⊆₁ issued T.","conclusion":"dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ∪₁ dom_rel (rfe ⨾ rmw ⨾ ⦗reserved T⦘)\n⊆₁ issued T","hypotheses":"","proofString":"unionL; [by apply RCOH|].\nrewrite rmw_W_ex, !seqA.\nrewrite <- id_inter.\nrewrite set_interC.\nrewrite rcoh_S_W_ex_rfrmw_I; auto.\nrewrite rfe_in_rf.\nremember (rf ⨾ rmw) as X.\narewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"dom_rel (rfe ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T.","conclusion":"dom_rel (rfe ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T","hypotheses":"","proofString":"rewrite rmw_W_ex, !seqA.\nrewrite <- id_inter.\nrewrite set_interC.\nrewrite rcoh_S_W_ex_rfrmw_I; auto.\nrewrite rfe_in_rf.\nremember (rf ⨾ rmw) as X.\narewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"dom_rel (rfe ⨾ rmw ⨾ ⦗W_ex⦘ ⨾ ⦗reserved T⦘) ⊆₁ issued T.","conclusion":"dom_rel (rfe ⨾ rmw ⨾ ⦗W_ex⦘ ⨾ ⦗reserved T⦘) ⊆₁ issued T","hypotheses":"","proofString":"rewrite <- id_inter.\nrewrite set_interC.\nrewrite rcoh_S_W_ex_rfrmw_I; auto.\nrewrite rfe_in_rf.\nremember (rf ⨾ rmw) as X.\narewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"dom_rel (rfe ⨾ rmw ⨾ ⦗W_ex ∩₁ reserved T⦘) ⊆₁ issued T.","conclusion":"dom_rel (rfe ⨾ rmw ⨾ ⦗W_ex ∩₁ reserved T⦘) ⊆₁ issued T","hypotheses":"","proofString":"rewrite set_interC.\nrewrite rcoh_S_W_ex_rfrmw_I; auto.\nrewrite rfe_in_rf.\nremember (rf ⨾ rmw) as X.\narewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"dom_rel (rfe ⨾ rmw ⨾ ⦗reserved T ∩₁ W_ex⦘) ⊆₁ issued T.","conclusion":"dom_rel (rfe ⨾ rmw ⨾ ⦗reserved T ∩₁ W_ex⦘) ⊆₁ issued T","hypotheses":"","proofString":"rewrite rcoh_S_W_ex_rfrmw_I; auto.\nrewrite rfe_in_rf.\nremember (rf ⨾ rmw) as X.\narewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"dom_rel (rfe ⨾ rmw ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw)⦘) ⊆₁ issued T.","conclusion":"dom_rel (rfe ⨾ rmw ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw)⦘) ⊆₁ issued T","hypotheses":"","proofString":"rewrite rfe_in_rf.\nremember (rf ⨾ rmw) as X.\narewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"dom_rel (rf ⨾ rmw ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw)⦘) ⊆₁ issued T.","conclusion":"dom_rel (rf ⨾ rmw ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw)⦘) ⊆₁ issued T","hypotheses":"","proofString":"remember (rf ⨾ rmw) as X.\narewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"(X : relation actid) (HeqX : X = rf ⨾ rmw) : dom_rel (rf ⨾ rmw ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ X)⦘) ⊆₁ issued T.","conclusion":"dom_rel (rf ⨾ rmw ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ X)⦘) ⊆₁ issued T","hypotheses":"(X : relation actid) (HeqX : X = rf ⨾ rmw)","proofString":"arewrite (rf ⨾ rmw ⊆ X) by subst.\nunfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"(X : relation actid) (HeqX : X = rf ⨾ rmw) : dom_rel (X ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ X)⦘) ⊆₁ issued T.","conclusion":"dom_rel (X ⨾ ⦗codom_rel (⦗issued T⦘ ⨾ X)⦘) ⊆₁ issued T","hypotheses":"(X : relation actid) (HeqX : X = rf ⨾ rmw)","proofString":"unfolder.\nins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"(X : relation actid) (HeqX : X = rf ⨾ rmw) : forall x : actid,\n(exists y : actid,\n   X x y /\\ (exists x0 z : actid, (x0 = z /\\ issued T x0) /\\ X z y)) ->\nissued T x.","conclusion":"forall x : actid,\n(exists y : actid,\n   X x y /\\ (exists x0 z : actid, (x0 = z /\\ issued T x0) /\\ X z y)) ->\nissued T x","hypotheses":"(X : relation actid) (HeqX : X = rf ⨾ rmw)","proofString":"ins.\ndesf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"(X : relation actid) (HeqX : X = rf ⨾ rmw) (x : actid) (H : exists y : actid,\n  X x y /\\ (exists x0 z : actid, (x0 = z /\\ issued T x0) /\\ X z y)) : issued T x.","conclusion":"issued T x","hypotheses":"(X : relation actid) (HeqX : X = rf ⨾ rmw) (x : actid) (H : exists y : actid,\n  X x y /\\ (exists x0 z : actid, (x0 = z /\\ issued T x0) /\\ X z y))","proofString":"desf.\nassert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"(x y : actid) (H : (rf ⨾ rmw) x y) (z : actid) (H2 : issued T z) (H1 : (rf ⨾ rmw) z y) : issued T x.","conclusion":"issued T x","hypotheses":"(x y : actid) (H : (rf ⨾ rmw) x y) (z : actid) (H2 : issued T z) (H1 : (rf ⨾ rmw) z y)","proofString":"assert (x = z); subst; auto.\neapply wf_rfrmwf; eauto."},{"statement":"(x y : actid) (H : (rf ⨾ rmw) x y) (z : actid) (H2 : issued T z) (H1 : (rf ⨾ rmw) z y) : x = z.","conclusion":"x = z","hypotheses":"(x y : actid) (H : (rf ⨾ rmw) x y) (z : actid) (H2 : issued T z) (H1 : (rf ⨾ rmw) z y)","proofString":"eapply wf_rfrmwf; eauto."},{"statement":"reserved T \\₁ issued T ∪₁ reserved T ∩₁ W ⊆₁ W.","conclusion":"reserved T \\₁ issued T ∪₁ reserved T ∩₁ W ⊆₁ W","hypotheses":"","proofString":"rewrite rcoh_S_I_in_W_ex; auto.\nrewrite W_ex_in_W; auto.\nbasic_solver."},{"statement":"W_ex ∪₁ reserved T ∩₁ W ⊆₁ W.","conclusion":"W_ex ∪₁ reserved T ∩₁ W ⊆₁ W","hypotheses":"","proofString":"rewrite W_ex_in_W; auto.\nbasic_solver."},{"statement":"W ∪₁ reserved T ∩₁ W ⊆₁ W.","conclusion":"W ∪₁ reserved T ∩₁ W ⊆₁ W","hypotheses":"","proofString":"basic_solver."},{"statement":"forall x : actid,\nreserved T x -> reserved T x /\\ ~ issued T x \\/ reserved T x /\\ issued T x.","conclusion":"forall x : actid,\nreserved T x -> reserved T x /\\ ~ issued T x \\/ reserved T x /\\ issued T x","hypotheses":"","proofString":"ins.\ndestruct (classic (issued T x)); eauto."},{"statement":"(x : actid) (H : reserved T x) : reserved T x /\\ ~ issued T x \\/ reserved T x /\\ issued T x.","conclusion":"reserved T x /\\ ~ issued T x \\/ reserved T x /\\ issued T x","hypotheses":"(x : actid) (H : reserved T x)","proofString":"destruct (classic (issued T x)); eauto."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) : reserve_coherent T'.","conclusion":"reserve_coherent T'","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e))","proofString":"assert (covered T' ≡₁ covered T ∪₁ eq e) as COV'.\nsubst T'.\nrewrite covered_union.\napply set_equiv_union; unfold covered; basic_solver.\nassert (issued T' ≡₁ issued T) as ISS'.\nsubst T'.\nrewrite issued_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold issued.\nbasic_solver.\nassert (reserved T' ≡₁ reserved T) as RES'.\nsubst T'.\nrewrite reserved_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold reserved.\nbasic_solver.\ndestruct RCOH.\nsplit; unfold dom_sb_S_rfrmw; rewrite ?COV', ?ISS', ?RES'; auto.\nrewrite rcoh_F_sb_S; auto.\nbasic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) : covered T' ≡₁ covered T ∪₁ eq e.","conclusion":"covered T' ≡₁ covered T ∪₁ eq e","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e))","proofString":"subst T'.\nrewrite covered_union.\napply set_equiv_union; unfold covered; basic_solver."},{"statement":"(e : actid) : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e.","conclusion":"covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e","hypotheses":"(e : actid)","proofString":"rewrite covered_union.\napply set_equiv_union; unfold covered; basic_solver."},{"statement":"(e : actid) : covered T ∪₁ covered (eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e.","conclusion":"covered T ∪₁ covered (eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e","hypotheses":"(e : actid)","proofString":"apply set_equiv_union; unfold covered; basic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) : reserve_coherent T'.","conclusion":"reserve_coherent T'","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e)","proofString":"assert (issued T' ≡₁ issued T) as ISS'.\nsubst T'.\nrewrite issued_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold issued.\nbasic_solver.\nassert (reserved T' ≡₁ reserved T) as RES'.\nsubst T'.\nrewrite reserved_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold reserved.\nbasic_solver.\ndestruct RCOH.\nsplit; unfold dom_sb_S_rfrmw; rewrite ?COV', ?ISS', ?RES'; auto.\nrewrite rcoh_F_sb_S; auto.\nbasic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) : issued T' ≡₁ issued T.","conclusion":"issued T' ≡₁ issued T","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e)","proofString":"subst T'.\nrewrite issued_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold issued.\nbasic_solver."},{"statement":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T.","conclusion":"issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T","hypotheses":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"rewrite issued_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold issued.\nbasic_solver."},{"statement":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : issued T ∪₁ issued (eq (mkTL ta_cover e)) ≡₁ issued T.","conclusion":"issued T ∪₁ issued (eq (mkTL ta_cover e)) ≡₁ issued T","hypotheses":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"erewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold issued.\nbasic_solver."},{"statement":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : issued (eq (mkTL ta_cover e)) ≡₁ ∅.","conclusion":"issued (eq (mkTL ta_cover e)) ≡₁ ∅","hypotheses":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"unfold issued.\nbasic_solver."},{"statement":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : event ↑₁ (eq (mkTL ta_cover e) ∩₁ action ↓₁ eq ta_issue) ≡₁ ∅.","conclusion":"event ↑₁ (eq (mkTL ta_cover e) ∩₁ action ↓₁ eq ta_issue) ≡₁ ∅","hypotheses":"(e : actid) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"basic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) : reserve_coherent T'.","conclusion":"reserve_coherent T'","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T)","proofString":"assert (reserved T' ≡₁ reserved T) as RES'.\nsubst T'.\nrewrite reserved_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold reserved.\nbasic_solver.\ndestruct RCOH.\nsplit; unfold dom_sb_S_rfrmw; rewrite ?COV', ?ISS', ?RES'; auto.\nrewrite rcoh_F_sb_S; auto.\nbasic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) : reserved T' ≡₁ reserved T.","conclusion":"reserved T' ≡₁ reserved T","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T)","proofString":"subst T'.\nrewrite reserved_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold reserved.\nbasic_solver."},{"statement":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : reserved (T ∪₁ eq (mkTL ta_cover e)) ≡₁ reserved T.","conclusion":"reserved (T ∪₁ eq (mkTL ta_cover e)) ≡₁ reserved T","hypotheses":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"rewrite reserved_union.\nerewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold reserved.\nbasic_solver."},{"statement":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : reserved T ∪₁ reserved (eq (mkTL ta_cover e)) ≡₁ reserved T.","conclusion":"reserved T ∪₁ reserved (eq (mkTL ta_cover e)) ≡₁ reserved T","hypotheses":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"erewrite set_equiv_union with (t' := set_empty);      cycle 1; [reflexivity| .. | basic_solver].\nunfold reserved.\nbasic_solver."},{"statement":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : reserved (eq (mkTL ta_cover e)) ≡₁ ∅.","conclusion":"reserved (eq (mkTL ta_cover e)) ≡₁ ∅","hypotheses":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"unfold reserved.\nbasic_solver."},{"statement":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e) : event ↑₁ (eq (mkTL ta_cover e) ∩₁ action ↓₁ eq ta_reserve) ≡₁ ∅.","conclusion":"event ↑₁ (eq (mkTL ta_cover e) ∩₁ action ↓₁ eq ta_reserve) ≡₁ ∅","hypotheses":"(e : actid) (ISS' : issued (T ∪₁ eq (mkTL ta_cover e)) ≡₁ issued T) (COV' : covered (T ∪₁ eq (mkTL ta_cover e)) ≡₁ covered T ∪₁ eq e)","proofString":"basic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T) : reserve_coherent T'.","conclusion":"reserve_coherent T'","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T)","proofString":"destruct RCOH.\nsplit; unfold dom_sb_S_rfrmw; rewrite ?COV', ?ISS', ?RES'; auto.\nrewrite rcoh_F_sb_S; auto.\nbasic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T) (rcoh_S_in_E0 : reserved T ⊆₁ E) (rcoh_I_in_S0 : issued T ⊆₁ reserved T) (rcoh_S_I_in_W_ex0 : reserved T \\₁ issued T ⊆₁ W_ex) (rcoh_F_sb_S0 : dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T) (rcoh_dr_R_acq_I0 : dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_W_ex_sb_I0 : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_sb_S0 : dom_sb_S_rfrmw T (rf ⨾ ⦗R_ex⦘) (issued T) ⊆₁ reserved T) (rcoh_rppo_S0 : dom_rel ((detour ∪ rfe) ⨾ (data ∪ rfi ∪ rmw)＊ ⨾ rppo ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_d_rmw_S0 : dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_S_W_ex_rfrmw_I0 : reserved T ∩₁ W_ex ⊆₁ codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw)) : reserve_coherent T'.","conclusion":"reserve_coherent T'","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T) (rcoh_S_in_E0 : reserved T ⊆₁ E) (rcoh_I_in_S0 : issued T ⊆₁ reserved T) (rcoh_S_I_in_W_ex0 : reserved T \\₁ issued T ⊆₁ W_ex) (rcoh_F_sb_S0 : dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T) (rcoh_dr_R_acq_I0 : dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_W_ex_sb_I0 : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_sb_S0 : dom_sb_S_rfrmw T (rf ⨾ ⦗R_ex⦘) (issued T) ⊆₁ reserved T) (rcoh_rppo_S0 : dom_rel ((detour ∪ rfe) ⨾ (data ∪ rfi ∪ rmw)＊ ⨾ rppo ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_d_rmw_S0 : dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_S_W_ex_rfrmw_I0 : reserved T ∩₁ W_ex ⊆₁ codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw))","proofString":"split; unfold dom_sb_S_rfrmw; rewrite ?COV', ?ISS', ?RES'; auto.\nrewrite rcoh_F_sb_S; auto.\nbasic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T) (rcoh_S_in_E0 : reserved T ⊆₁ E) (rcoh_I_in_S0 : issued T ⊆₁ reserved T) (rcoh_S_I_in_W_ex0 : reserved T \\₁ issued T ⊆₁ W_ex) (rcoh_F_sb_S0 : dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T) (rcoh_dr_R_acq_I0 : dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_W_ex_sb_I0 : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_sb_S0 : dom_sb_S_rfrmw T (rf ⨾ ⦗R_ex⦘) (issued T) ⊆₁ reserved T) (rcoh_rppo_S0 : dom_rel ((detour ∪ rfe) ⨾ (data ∪ rfi ∪ rmw)＊ ⨾ rppo ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_d_rmw_S0 : dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_S_W_ex_rfrmw_I0 : reserved T ∩₁ W_ex ⊆₁ codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw)) : dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T ∪₁ eq e.","conclusion":"dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T ∪₁ eq e","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T) (rcoh_S_in_E0 : reserved T ⊆₁ E) (rcoh_I_in_S0 : issued T ⊆₁ reserved T) (rcoh_S_I_in_W_ex0 : reserved T \\₁ issued T ⊆₁ W_ex) (rcoh_F_sb_S0 : dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T) (rcoh_dr_R_acq_I0 : dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_W_ex_sb_I0 : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_sb_S0 : dom_sb_S_rfrmw T (rf ⨾ ⦗R_ex⦘) (issued T) ⊆₁ reserved T) (rcoh_rppo_S0 : dom_rel ((detour ∪ rfe) ⨾ (data ∪ rfi ∪ rmw)＊ ⨾ rppo ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_d_rmw_S0 : dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_S_W_ex_rfrmw_I0 : reserved T ∩₁ W_ex ⊆₁ codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw))","proofString":"rewrite rcoh_F_sb_S; auto.\nbasic_solver."},{"statement":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T) (rcoh_S_in_E0 : reserved T ⊆₁ E) (rcoh_I_in_S0 : issued T ⊆₁ reserved T) (rcoh_S_I_in_W_ex0 : reserved T \\₁ issued T ⊆₁ W_ex) (rcoh_F_sb_S0 : dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T) (rcoh_dr_R_acq_I0 : dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_W_ex_sb_I0 : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_sb_S0 : dom_sb_S_rfrmw T (rf ⨾ ⦗R_ex⦘) (issued T) ⊆₁ reserved T) (rcoh_rppo_S0 : dom_rel ((detour ∪ rfe) ⨾ (data ∪ rfi ∪ rmw)＊ ⨾ rppo ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_d_rmw_S0 : dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_S_W_ex_rfrmw_I0 : reserved T ∩₁ W_ex ⊆₁ codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw)) : covered T ⊆₁ covered T ∪₁ eq e.","conclusion":"covered T ⊆₁ covered T ∪₁ eq e","hypotheses":"(e : actid) (T' : trav_label -> Prop) (HeqT' : T' = T ∪₁ eq (mkTL ta_cover e)) (COV' : covered T' ≡₁ covered T ∪₁ eq e) (ISS' : issued T' ≡₁ issued T) (RES' : reserved T' ≡₁ reserved T) (rcoh_S_in_E0 : reserved T ⊆₁ E) (rcoh_I_in_S0 : issued T ⊆₁ reserved T) (rcoh_S_I_in_W_ex0 : reserved T \\₁ issued T ⊆₁ W_ex) (rcoh_F_sb_S0 : dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ covered T) (rcoh_dr_R_acq_I0 : dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_W_ex_sb_I0 : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_sb_S0 : dom_sb_S_rfrmw T (rf ⨾ ⦗R_ex⦘) (issued T) ⊆₁ reserved T) (rcoh_rppo_S0 : dom_rel ((detour ∪ rfe) ⨾ (data ∪ rfi ∪ rmw)＊ ⨾ rppo ⨾ ⦗reserved T⦘)\n⊆₁ issued T) (rcoh_d_rmw_S0 : dom_rel (detour ⨾ rmw ⨾ ⦗reserved T⦘) ⊆₁ issued T) (rcoh_S_W_ex_rfrmw_I0 : reserved T ∩₁ W_ex ⊆₁ codom_rel (⦗issued T⦘ ⨾ rf ⨾ rmw))","proofString":"basic_solver."},{"statement":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq) : dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S'⦘ ⨾ r' ⨾ rmw) ⊆₁ issued T.","conclusion":"dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S'⦘ ⨾ r' ⨾ rmw) ⊆₁ issued T","hypotheses":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq)","proofString":"rewrite rmw_W_ex, w_ex_is_xacq.\nrepeat rewrite codom_seq.\nrewrite codom_eqv, set_interC.\nrewrite <- dom_eqv1.\nsimpl.\nrewrite RES_ISS'.\napply dom_wex_sb_issuable; auto."},{"statement":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq) : dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S'⦘ ⨾ r' ⨾ rmw ⨾ ⦗W_ex_acq⦘)\n⊆₁ issued T.","conclusion":"dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel (⦗S'⦘ ⨾ r' ⨾ rmw ⨾ ⦗W_ex_acq⦘)\n⊆₁ issued T","hypotheses":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq)","proofString":"repeat rewrite codom_seq.\nrewrite codom_eqv, set_interC.\nrewrite <- dom_eqv1.\nsimpl.\nrewrite RES_ISS'.\napply dom_wex_sb_issuable; auto."},{"statement":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq) : dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel ⦗W_ex_acq⦘ ⊆₁ issued T.","conclusion":"dom_rel (sb ⨾ ⦗reserved T⦘) ∩₁ codom_rel ⦗W_ex_acq⦘ ⊆₁ issued T","hypotheses":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq)","proofString":"rewrite codom_eqv, set_interC.\nrewrite <- dom_eqv1.\nsimpl.\nrewrite RES_ISS'.\napply dom_wex_sb_issuable; auto."},{"statement":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq) : W_ex_acq ∩₁ dom_rel (sb ⨾ ⦗reserved T⦘) ⊆₁ issued T.","conclusion":"W_ex_acq ∩₁ dom_rel (sb ⨾ ⦗reserved T⦘) ⊆₁ issued T","hypotheses":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq)","proofString":"rewrite <- dom_eqv1.\nsimpl.\nrewrite RES_ISS'.\napply dom_wex_sb_issuable; auto."},{"statement":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq) : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T.","conclusion":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T","hypotheses":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq)","proofString":"simpl.\nrewrite RES_ISS'.\napply dom_wex_sb_issuable; auto."},{"statement":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq) : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T.","conclusion":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗reserved T⦘) ⊆₁ issued T","hypotheses":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq)","proofString":"rewrite RES_ISS'.\napply dom_wex_sb_issuable; auto."},{"statement":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq) : dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗issuable G sc T⦘) ⊆₁ issued T.","conclusion":"dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗issuable G sc T⦘) ⊆₁ issued T","hypotheses":"(r' : relation actid) (S' : actid -> Prop) (RES_ISS' : reserved T ⊆₁ issuable G sc T) (w_ex_is_xacq : W_ex ⊆₁ W_ex_acq)","proofString":"apply dom_wex_sb_issuable; auto."}]}