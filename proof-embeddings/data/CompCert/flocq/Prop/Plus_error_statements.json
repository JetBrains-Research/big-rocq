{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Prop/Plus_error.v","fileSamples":[{"statement":"(m e : Z) (e' : Z) (He : (e' <= e)%Z) : (IZR (m * beta ^ (e + - e')) * bpow e')%R = (IZR m * bpow e)%R.","proofString":"rewrite mult_IZR.\nrewrite Rmult_assoc.\nrewrite IZR_Zpower by lia.\nrewrite <- bpow_plus.\napply (f_equal (fun v => IZR m * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e' <= e)%Z) : (IZR m * IZR (beta ^ (e + - e')) * bpow e')%R = (IZR m * bpow e)%R.","proofString":"rewrite Rmult_assoc.\nrewrite IZR_Zpower by lia.\nrewrite <- bpow_plus.\napply (f_equal (fun v => IZR m * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e' <= e)%Z) : (IZR m * (IZR (beta ^ (e + - e')) * bpow e'))%R = (IZR m * bpow e)%R.","proofString":"rewrite IZR_Zpower by lia.\nrewrite <- bpow_plus.\napply (f_equal (fun v => IZR m * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e' <= e)%Z) : (IZR m * (bpow (e + - e') * bpow e'))%R = (IZR m * bpow e)%R.","proofString":"rewrite <- bpow_plus.\napply (f_equal (fun v => IZR m * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e' <= e)%Z) : (IZR m * bpow (e + - e' + e'))%R = (IZR m * bpow e)%R.","proofString":"apply (f_equal (fun v => IZR m * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e' <= e)%Z) : (e + - e' + e')%Z = e.","proofString":"ring."},{"statement":"(m e : Z) (e' : Z) (He : (e < e')%Z) : (IZR (rnd (IZR m * bpow e * bpow (- e'))) * bpow e')%R =\n(IZR (rnd (IZR m * bpow (e - e')) * beta ^ (e' - e)) * bpow e)%R.","proofString":"rewrite mult_IZR.\nrewrite IZR_Zpower by lia.\nrewrite 2!Rmult_assoc.\nrewrite <- 2!bpow_plus.\napply (f_equal (fun v => _ * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e < e')%Z) : (IZR (rnd (IZR m * bpow e * bpow (- e'))) * bpow e')%R =\n(IZR (rnd (IZR m * bpow (e - e'))) * IZR (beta ^ (e' - e)) * bpow e)%R.","proofString":"rewrite IZR_Zpower by lia.\nrewrite 2!Rmult_assoc.\nrewrite <- 2!bpow_plus.\napply (f_equal (fun v => _ * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e < e')%Z) : (IZR (rnd (IZR m * bpow e * bpow (- e'))) * bpow e')%R =\n(IZR (rnd (IZR m * bpow (e - e'))) * bpow (e' - e) * bpow e)%R.","proofString":"rewrite 2!Rmult_assoc.\nrewrite <- 2!bpow_plus.\napply (f_equal (fun v => _ * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e < e')%Z) : (IZR (rnd (IZR m * (bpow e * bpow (- e')))) * bpow e')%R =\n(IZR (rnd (IZR m * bpow (e - e'))) * (bpow (e' - e) * bpow e))%R.","proofString":"rewrite <- 2!bpow_plus.\napply (f_equal (fun v => _ * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e < e')%Z) : (IZR (rnd (IZR m * bpow (e + - e'))) * bpow e')%R =\n(IZR (rnd (IZR m * bpow (e - e'))) * bpow (e' - e + e))%R.","proofString":"apply (f_equal (fun v => _ * bpow v)%R).\nring."},{"statement":"(m e : Z) (e' : Z) (He : (e < e')%Z) : e' = (e' - e + e)%Z.","proofString":"ring."},{"statement":"(x y : R) : (cexp beta fexp x <= cexp beta fexp y)%Z ->\nformat x ->\nformat y -> format (round beta fexp (Znearest choice) (x + y) - (x + y)).","proofString":"set (ex := cexp beta fexp x).\nset (ey := cexp beta fexp y).\nintros He Hx Hy.\ndestruct (Req_dec (round beta fexp (Znearest choice) (x + y) - (x + y)) R0) as [H0|H0].\nrewrite H0.\napply generic_format_0.\nset (mx := Ztrunc (scaled_mantissa beta fexp x)).\nset (my := Ztrunc (scaled_mantissa beta fexp y)).\nassert (Hxy: (x + y)%R = F2R (Float beta (mx + my * beta ^ (ey - ex)) ex)).\nrewrite Hx, Hy.\nfold mx my ex ey.\nrewrite <- F2R_plus.\nunfold Fplus.\nsimpl.\nnow rewrite Zle_imp_le_bool with (1 := He).\nrewrite Hxy.\ndestruct (round_repr_same_exp (Znearest choice) (mx + my * beta ^ (ey - ex)) ex) as (mxy, Hxy').\nrewrite Hxy'.\nassert (H: (F2R (Float beta mxy ex) - F2R (Float beta (mx + my * beta ^ (ey - ex)) ex))%R =  F2R (Float beta (mxy - (mx + my * beta ^ (ey - ex))) ex)).\nnow rewrite <- F2R_minus, Fminus_same_exp.\nrewrite H.\napply generic_format_F2R.\nintros _.\napply monotone_exp.\nrewrite <- H, <- Hxy', <- Hxy.\napply mag_le_abs.\nexact H0.\npattern x at 3 ; replace x with (-(y - (x + y)))%R by ring.\nrewrite Rabs_Ropp.\nnow apply (round_N_pt beta _ choice (x + y))."},{"statement":"(x y : R) (ex : Z) (ey : Z) (He : (ex <= ey)%Z) (Hx : format x) (Hy : format y) (H0 : (round beta fexp (Znearest choice) (x + y) - (x + y))%R = R0) : format (round beta fexp (Znearest choice) (x + y) - (x + y)).","proofString":"rewrite H0.\napply generic_format_0."},{"statement":"(x y : R) (ex : Z) (ey : Z) (He : (ex <= ey)%Z) (Hx : format x) (Hy : format y) (H0 : (round beta fexp (Znearest choice) (x + y) - (x + y))%R = R0) : format R0.","proofString":"apply generic_format_0."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) : format (round beta fexp (Znearest choice) (x + y) - (x + y)).","proofString":"destruct (Zle_or_lt (cexp beta fexp x) (cexp beta fexp y)).\nnow apply plus_error_aux.\nrewrite Rplus_comm.\napply plus_error_aux ; try easy.\nnow apply Zlt_le_weak."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (H : (cexp beta fexp x <= cexp beta fexp y)%Z) : format (round beta fexp (Znearest choice) (x + y) - (x + y)).","proofString":"now apply plus_error_aux."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (H : (cexp beta fexp y < cexp beta fexp x)%Z) : format (round beta fexp (Znearest choice) (x + y) - (x + y)).","proofString":"rewrite Rplus_comm.\napply plus_error_aux ; try easy.\nnow apply Zlt_le_weak."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (H : (cexp beta fexp y < cexp beta fexp x)%Z) : format (round beta fexp (Znearest choice) (y + x) - (y + x)).","proofString":"apply plus_error_aux ; try easy.\nnow apply Zlt_le_weak."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (H : (cexp beta fexp y < cexp beta fexp x)%Z) : (cexp beta fexp y <= cexp beta fexp x)%Z.","proofString":"now apply Zlt_le_weak."},{"statement":"(x y : R) (He : (cexp beta fexp x <= cexp beta fexp y)%Z) (Hx : format x) (Hy : format y) (Hxy : (0 < x + y)%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x + y) < bpow exy)%R) (He' : (fexp exy < exy)%Z) (H : round beta fexp rnd (x + y) = 0%R) : (0 < bpow (exy - 1))%R.","proofString":"apply bpow_gt_0."},{"statement":"(x y : R) (He : (cexp beta fexp x <= cexp beta fexp y)%Z) (Hx : format x) (Hy : format y) (Hxy : (0 < x + y)%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x + y) < bpow exy)%R) (He' : (fexp exy < exy)%Z) (H : round beta fexp rnd (x + y) = 0%R) : format (bpow (exy - 1)).","proofString":"apply generic_format_bpow.\napply Zlt_succ_le.\nnow rewrite (Zsucc_pred exy) in He'."},{"statement":"(x y : R) (He : (cexp beta fexp x <= cexp beta fexp y)%Z) (Hx : format x) (Hy : format y) (Hxy : (0 < x + y)%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x + y) < bpow exy)%R) (He' : (fexp exy < exy)%Z) (H : round beta fexp rnd (x + y) = 0%R) : (fexp (exy - 1 + 1) <= exy - 1)%Z.","proofString":"apply Zlt_succ_le.\nnow rewrite (Zsucc_pred exy) in He'."},{"statement":"(x y : R) (He : (cexp beta fexp x <= cexp beta fexp y)%Z) (Hx : format x) (Hy : format y) (Hxy : (0 < x + y)%R) (exy : Z) (Hexy : (bpow (exy - 1) <= Rabs (x + y) < bpow exy)%R) (He' : (fexp exy < exy)%Z) (H : round beta fexp rnd (x + y) = 0%R) : (fexp (exy - 1 + 1) < Z.succ (exy - 1))%Z.","proofString":"now rewrite (Zsucc_pred exy) in He'."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (0 <= x + y)%R) (H2 : (cexp beta fexp x <= cexp beta fexp y)%Z) : (0 < x + y)%R.","proofString":"lra."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (0 <= x + y)%R) (H2 : (cexp beta fexp y < cexp beta fexp x)%Z) : round beta fexp rnd (x + y) <> 0%R.","proofString":"rewrite Rplus_comm.\napply round_plus_neq_0_aux ; try easy.\nnow apply Zlt_le_weak.\nlra."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (0 <= x + y)%R) (H2 : (cexp beta fexp y < cexp beta fexp x)%Z) : round beta fexp rnd (y + x) <> 0%R.","proofString":"apply round_plus_neq_0_aux ; try easy.\nnow apply Zlt_le_weak.\nlra."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (0 <= x + y)%R) (H2 : (cexp beta fexp y < cexp beta fexp x)%Z) : (cexp beta fexp y <= cexp beta fexp x)%Z.","proofString":"now apply Zlt_le_weak."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (0 <= x + y)%R) (H2 : (cexp beta fexp y < cexp beta fexp x)%Z) : (0 < y + x)%R.","proofString":"lra."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (x + y < 0)%R) (H2 : (cexp beta fexp (- x) <= cexp beta fexp (- y))%Z) : (0 < - x + - y)%R.","proofString":"lra."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (x + y < 0)%R) (H2 : (cexp beta fexp (- y) < cexp beta fexp (- x))%Z) : (cexp beta fexp (- y) <= cexp beta fexp (- x))%Z.","proofString":"now apply Zlt_le_weak."},{"statement":"(x y : R) (Hx : format x) (Hy : format y) (Hxy : (x + y)%R <> 0%R) (H1 : (x + y < 0)%R) (H2 : (cexp beta fexp (- y) < cexp beta fexp (- x))%Z) : (0 < - y + - x)%R.","proofString":"lra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (H : round beta fexp rnd (x + y) = 0%R) : (x + y)%R = 0%R.","proofString":"destruct (Req_dec (x + y) 0) as [H'|H'].\nexact H'.\ncontradict H.\nnow apply round_plus_neq_0."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (H : round beta fexp rnd (x + y) = 0%R) (H' : (x + y)%R = 0%R) : (x + y)%R = 0%R.","proofString":"exact H'."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (H : round beta fexp rnd (x + y) = 0%R) (H' : (x + y)%R <> 0%R) : (x + y)%R = 0%R.","proofString":"contradict H.\nnow apply round_plus_neq_0."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (H' : (x + y)%R <> 0%R) : round beta fexp rnd (x + y) <> 0%R.","proofString":"now apply round_plus_neq_0."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : (Rabs (x + y) <= bpow (emin + prec))%R.","proofString":"rewrite Zplus_comm; assumption."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : generic_format beta (FIX_exp emin) (x + y).","proofString":"apply generic_format_FIX_FLT, FIX_format_generic in Fx.\napply generic_format_FIX_FLT, FIX_format_generic in Fy.\ndestruct Fx as [nx H1x H2x].\ndestruct Fy as [ny H1y H2y].\napply generic_format_FIX.\nexists (Float beta (Fnum nx+Fnum ny)%Z emin).\nrewrite H1x,H1y; unfold F2R; simpl.\nrewrite H2x, H2y.\nrewrite plus_IZR; ring.\neasy."},{"statement":"(x y : R) (Fx : FIX_format beta emin x) (Fy : generic_format beta (FLT_exp emin prec) y) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : generic_format beta (FIX_exp emin) (x + y).","proofString":"apply generic_format_FIX_FLT, FIX_format_generic in Fy.\ndestruct Fx as [nx H1x H2x].\ndestruct Fy as [ny H1y H2y].\napply generic_format_FIX.\nexists (Float beta (Fnum nx+Fnum ny)%Z emin).\nrewrite H1x,H1y; unfold F2R; simpl.\nrewrite H2x, H2y.\nrewrite plus_IZR; ring.\neasy."},{"statement":"(x y : R) (Fx : FIX_format beta emin x) (Fy : FIX_format beta emin y) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : generic_format beta (FIX_exp emin) (x + y).","proofString":"destruct Fx as [nx H1x H2x].\ndestruct Fy as [ny H1y H2y].\napply generic_format_FIX.\nexists (Float beta (Fnum nx+Fnum ny)%Z emin).\nrewrite H1x,H1y; unfold F2R; simpl.\nrewrite H2x, H2y.\nrewrite plus_IZR; ring.\neasy."},{"statement":"(x y : R) (nx : float beta) (H1x : x = F2R nx) (H2x : Fexp nx = emin) (Fy : FIX_format beta emin y) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : generic_format beta (FIX_exp emin) (x + y).","proofString":"destruct Fy as [ny H1y H2y].\napply generic_format_FIX.\nexists (Float beta (Fnum nx+Fnum ny)%Z emin).\nrewrite H1x,H1y; unfold F2R; simpl.\nrewrite H2x, H2y.\nrewrite plus_IZR; ring.\neasy."},{"statement":"(x y : R) (nx : float beta) (H1x : x = F2R nx) (H2x : Fexp nx = emin) (ny : float beta) (H1y : y = F2R ny) (H2y : Fexp ny = emin) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : generic_format beta (FIX_exp emin) (x + y).","proofString":"apply generic_format_FIX.\nexists (Float beta (Fnum nx+Fnum ny)%Z emin).\nrewrite H1x,H1y; unfold F2R; simpl.\nrewrite H2x, H2y.\nrewrite plus_IZR; ring.\neasy."},{"statement":"(x y : R) (nx : float beta) (H1x : x = F2R nx) (H2x : Fexp nx = emin) (ny : float beta) (H1y : y = F2R ny) (H2y : Fexp ny = emin) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : FIX_format beta emin (x + y).","proofString":"exists (Float beta (Fnum nx+Fnum ny)%Z emin).\nrewrite H1x,H1y; unfold F2R; simpl.\nrewrite H2x, H2y.\nrewrite plus_IZR; ring.\neasy."},{"statement":"(x y : R) (nx : float beta) (H1x : x = F2R nx) (H2x : Fexp nx = emin) (ny : float beta) (H1y : y = F2R ny) (H2y : Fexp ny = emin) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : (IZR (Fnum nx) * bpow (Fexp nx) + IZR (Fnum ny) * bpow (Fexp ny))%R =\n(IZR (Fnum nx + Fnum ny) * bpow emin)%R.","proofString":"rewrite H2x, H2y.\nrewrite plus_IZR; ring."},{"statement":"(x y : R) (nx : float beta) (H1x : x = F2R nx) (H2x : Fexp nx = emin) (ny : float beta) (H1y : y = F2R ny) (H2y : Fexp ny = emin) (H : (Rabs (x + y) <= bpow (prec + emin))%R) : (IZR (Fnum nx) * bpow emin + IZR (Fnum ny) * bpow emin)%R =\n(IZR (Fnum nx + Fnum ny) * bpow emin)%R.","proofString":"rewrite plus_IZR; ring."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) : exists eps : R,\n  (Rabs eps <= u_ro beta prec / (1 + u_ro beta prec))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (x + y) =\n  ((x + y) * (1 + eps))%R.","proofString":"assert (Pb := u_rod1pu_ro_pos beta prec).\ndestruct (Rle_or_lt (bpow (emin + prec - 1)) (Rabs (x + y))) as [M|M].\ndestruct (relative_error_N_FLX'_ex beta prec prec_gt_0_ choice (x + y))    as (d, (Bd, Hd)).\nnow exists d; split; [exact Bd|]; rewrite <- Hd; apply round_FLT_FLX.\nexists 0%R; rewrite Rabs_R0; split; [exact Pb|]; rewrite Rplus_0_r, Rmult_1_r.\napply round_generic; [apply valid_rnd_N|].\napply FLT_format_plus_small; [exact Fx|exact Fy|].\napply Rlt_le, (Rlt_le_trans _ _ _ M), bpow_le; lia."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (Pb : (0 <= u_ro beta prec / (1 + u_ro beta prec))%R) : exists eps : R,\n  (Rabs eps <= u_ro beta prec / (1 + u_ro beta prec))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (x + y) =\n  ((x + y) * (1 + eps))%R.","proofString":"destruct (Rle_or_lt (bpow (emin + prec - 1)) (Rabs (x + y))) as [M|M].\ndestruct (relative_error_N_FLX'_ex beta prec prec_gt_0_ choice (x + y))    as (d, (Bd, Hd)).\nnow exists d; split; [exact Bd|]; rewrite <- Hd; apply round_FLT_FLX.\nexists 0%R; rewrite Rabs_R0; split; [exact Pb|]; rewrite Rplus_0_r, Rmult_1_r.\napply round_generic; [apply valid_rnd_N|].\napply FLT_format_plus_small; [exact Fx|exact Fy|].\napply Rlt_le, (Rlt_le_trans _ _ _ M), bpow_le; lia."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (Pb : (0 <= u_ro beta prec / (1 + u_ro beta prec))%R) (M : (bpow (emin + prec - 1) <= Rabs (x + y))%R) : exists eps : R,\n  (Rabs eps <= u_ro beta prec / (1 + u_ro beta prec))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (x + y) =\n  ((x + y) * (1 + eps))%R.","proofString":"destruct (relative_error_N_FLX'_ex beta prec prec_gt_0_ choice (x + y))    as (d, (Bd, Hd)).\nnow exists d; split; [exact Bd|]; rewrite <- Hd; apply round_FLT_FLX."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (Pb : (0 <= u_ro beta prec / (1 + u_ro beta prec))%R) (M : (bpow (emin + prec - 1) <= Rabs (x + y))%R) (d : R) (Bd : (Rabs d <= u_ro beta prec / (1 + u_ro beta prec))%R) (Hd : round beta (FLX_exp prec) (Znearest choice) (x + y) = ((x + y) * (1 + d))%R) : exists eps : R,\n  (Rabs eps <= u_ro beta prec / (1 + u_ro beta prec))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (x + y) =\n  ((x + y) * (1 + eps))%R.","proofString":"now exists d; split; [exact Bd|]; rewrite <- Hd; apply round_FLT_FLX."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (Pb : (0 <= u_ro beta prec / (1 + u_ro beta prec))%R) (M : (Rabs (x + y) < bpow (emin + prec - 1))%R) : exists eps : R,\n  (Rabs eps <= u_ro beta prec / (1 + u_ro beta prec))%R /\\\n  round beta (FLT_exp emin prec) (Znearest choice) (x + y) =\n  ((x + y) * (1 + eps))%R.","proofString":"exists 0%R; rewrite Rabs_R0; split; [exact Pb|]; rewrite Rplus_0_r, Rmult_1_r.\napply round_generic; [apply valid_rnd_N|].\napply FLT_format_plus_small; [exact Fx|exact Fy|].\napply Rlt_le, (Rlt_le_trans _ _ _ M), bpow_le; lia."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (Pb : (0 <= u_ro beta prec / (1 + u_ro beta prec))%R) (M : (Rabs (x + y) < bpow (emin + prec - 1))%R) : round beta (FLT_exp emin prec) (Znearest choice) (x + y) = (x + y)%R.","proofString":"apply round_generic; [apply valid_rnd_N|].\napply FLT_format_plus_small; [exact Fx|exact Fy|].\napply Rlt_le, (Rlt_le_trans _ _ _ M), bpow_le; lia."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (Pb : (0 <= u_ro beta prec / (1 + u_ro beta prec))%R) (M : (Rabs (x + y) < bpow (emin + prec - 1))%R) : generic_format beta (FLT_exp emin prec) (x + y).","proofString":"apply FLT_format_plus_small; [exact Fx|exact Fy|].\napply Rlt_le, (Rlt_le_trans _ _ _ M), bpow_le; lia."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (Pb : (0 <= u_ro beta prec / (1 + u_ro beta prec))%R) (M : (Rabs (x + y) < bpow (emin + prec - 1))%R) : (Rabs (x + y) <= bpow (prec + emin))%R.","proofString":"apply Rlt_le, (Rlt_le_trans _ _ _ M), bpow_le; lia."},{"statement":"(x y : R) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) : exists eps : R,\n  (Rabs eps <= u_ro beta prec)%R /\\\n  (x + y)%R =\n  (round beta (FLT_exp emin prec) (Znearest choice) (x + y) * (1 + eps))%R.","proofString":"now apply relative_error_N_round_ex_derive, FLT_plus_error_N_ex."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (e <= cexp x)%Z) : exists m : Z, x = (IZR m * bpow e)%R.","proofString":"exists (Ztrunc (scaled_mantissa beta fexp x)*Zpower beta (cexp x -e))%Z.\nrewrite Fx at 1; unfold F2R; simpl.\nrewrite mult_IZR, Rmult_assoc.\nf_equal.\nrewrite IZR_Zpower by lia.\nrewrite <- bpow_plus; f_equal; ring."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (e <= cexp x)%Z) : x =\n(IZR (Ztrunc (scaled_mantissa beta fexp x) * beta ^ (cexp x - e)) * bpow e)%R.","proofString":"rewrite Fx at 1; unfold F2R; simpl.\nrewrite mult_IZR, Rmult_assoc.\nf_equal.\nrewrite IZR_Zpower by lia.\nrewrite <- bpow_plus; f_equal; ring."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (e <= cexp x)%Z) : (IZR (Ztrunc (scaled_mantissa beta fexp x)) * bpow (cexp x))%R =\n(IZR (Ztrunc (scaled_mantissa beta fexp x) * beta ^ (cexp x - e)) * bpow e)%R.","proofString":"rewrite mult_IZR, Rmult_assoc.\nf_equal.\nrewrite IZR_Zpower by lia.\nrewrite <- bpow_plus; f_equal; ring."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (e <= cexp x)%Z) : (IZR (Ztrunc (scaled_mantissa beta fexp x)) * bpow (cexp x))%R =\n(IZR (Ztrunc (scaled_mantissa beta fexp x)) *\n (IZR (beta ^ (cexp x - e)) * bpow e))%R.","proofString":"f_equal.\nrewrite IZR_Zpower by lia.\nrewrite <- bpow_plus; f_equal; ring."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (e <= cexp x)%Z) : bpow (cexp x) = (IZR (beta ^ (cexp x - e)) * bpow e)%R.","proofString":"rewrite IZR_Zpower by lia.\nrewrite <- bpow_plus; f_equal; ring."},{"statement":"(x : R) (e : Z) (Fx : format x) (He : (e <= cexp x)%Z) : bpow (cexp x) = (bpow (cexp x - e) * bpow e)%R.","proofString":"rewrite <- bpow_plus; f_equal; ring."},{"statement":"(z : R) (Hz : z <> 0%R) : (mag beta z - 1)%Z = mag beta (z / IZR beta).","proofString":"unfold Zminus.\nrewrite <- mag_mult_bpow by easy.\nnow rewrite bpow_opp, bpow_1."},{"statement":"(z : R) (Hz : z <> 0%R) : (mag beta z + - (1))%Z = mag beta (z / IZR beta).","proofString":"rewrite <- mag_mult_bpow by easy.\nnow rewrite bpow_opp, bpow_1."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta (x / IZR beta) <= mag beta y)%Z) (e : Z) : (mag beta (x / IZR beta) <= mag beta x)%Z.","proofString":"rewrite <- (mag_minus1 x Zx); lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) : (cexp (x / IZR beta) <= cexp (x + y))%Z.","proofString":"apply monotone_exp.\nrewrite <- mag_minus1 by easy.\nrewrite <- (mag_abs beta (x+y)).\nassert (U: (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nassert (V: forall x y, (Rabs y <= Rabs x)%R ->   (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nclear; intros x y.\ncase (Rle_or_lt 0 y); intros Hy.\ncase Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.\ncase (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra.\napply V; left.\napply lt_mag with beta.\nnow apply Rabs_pos_lt.\nrewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia.\ndestruct U as [U|U].\nrewrite U; apply Z.le_trans with (mag beta x).\nlia.\nrewrite <- mag_abs.\napply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos.\ndestruct U as (U',U); rewrite U.\nrewrite <- mag_abs.\napply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) : (mag beta (x / IZR beta) <= mag beta (x + y))%Z.","proofString":"rewrite <- mag_minus1 by easy.\nrewrite <- (mag_abs beta (x+y)).\nassert (U: (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nassert (V: forall x y, (Rabs y <= Rabs x)%R ->   (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nclear; intros x y.\ncase (Rle_or_lt 0 y); intros Hy.\ncase Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.\ncase (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra.\napply V; left.\napply lt_mag with beta.\nnow apply Rabs_pos_lt.\nrewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia.\ndestruct U as [U|U].\nrewrite U; apply Z.le_trans with (mag beta x).\nlia.\nrewrite <- mag_abs.\napply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos.\ndestruct U as (U',U); rewrite U.\nrewrite <- mag_abs.\napply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) : (mag beta x - 1 <= mag beta (x + y))%Z.","proofString":"rewrite <- (mag_abs beta (x+y)).\nassert (U: (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nassert (V: forall x y, (Rabs y <= Rabs x)%R ->   (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nclear; intros x y.\ncase (Rle_or_lt 0 y); intros Hy.\ncase Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.\ncase (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra.\napply V; left.\napply lt_mag with beta.\nnow apply Rabs_pos_lt.\nrewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia.\ndestruct U as [U|U].\nrewrite U; apply Z.le_trans with (mag beta x).\nlia.\nrewrite <- mag_abs.\napply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos.\ndestruct U as (U',U); rewrite U.\nrewrite <- mag_abs.\napply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) : (mag beta x - 1 <= mag beta (Rabs (x + y)))%Z.","proofString":"assert (U: (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nassert (V: forall x y, (Rabs y <= Rabs x)%R ->   (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nclear; intros x y.\ncase (Rle_or_lt 0 y); intros Hy.\ncase Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.\ncase (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra.\napply V; left.\napply lt_mag with beta.\nnow apply Rabs_pos_lt.\nrewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia.\ndestruct U as [U|U].\nrewrite U; apply Z.le_trans with (mag beta x).\nlia.\nrewrite <- mag_abs.\napply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos.\ndestruct U as (U',U); rewrite U.\nrewrite <- mag_abs.\napply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) : Rabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"assert (V: forall x y, (Rabs y <= Rabs x)%R ->   (Rabs (x+y) = Rabs x + Rabs y)%R \\/ (y <> 0 /\\ Rabs (x+y) = Rabs x - Rabs y)%R).\nclear; intros x y.\ncase (Rle_or_lt 0 y); intros Hy.\ncase Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.\ncase (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra.\napply V; left.\napply lt_mag with beta.\nnow apply Rabs_pos_lt.\nrewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) : forall x0 y0 : R,\n(Rabs y0 <= Rabs x0)%R ->\nRabs (x0 + y0) = (Rabs x0 + Rabs y0)%R \\/\ny0 <> 0%R /\\ Rabs (x0 + y0) = (Rabs x0 - Rabs y0)%R.","proofString":"clear; intros x y.\ncase (Rle_or_lt 0 y); intros Hy.\ncase Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.\ncase (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra."},{"statement":"(x y : R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"case (Rle_or_lt 0 y); intros Hy.\ncase Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r.\ncase (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra."},{"statement":"(x y : R) (Hy : (0 <= y)%R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"case Hy; intros Hy'.\ncase (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption.\nintros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"case (Rle_or_lt 0 x); intros Hx.\nintros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat.\nrewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (0 <= x)%R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"intros _; rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (0 <= x)%R) : Rabs (x + y) = (Rabs x + y)%R \\/ y <> 0%R /\\ Rabs (x + y) = (Rabs x - y)%R.","proofString":"rewrite (Rabs_pos_eq x) by easy.\nleft; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (0 <= x)%R) : Rabs (x + y) = (x + y)%R \\/ y <> 0%R /\\ Rabs (x + y) = (x - y)%R.","proofString":"left; apply Rabs_pos_eq.\nnow apply Rplus_le_le_0_compat."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (0 <= x)%R) : (0 <= x + y)%R.","proofString":"now apply Rplus_le_le_0_compat."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (x < 0)%R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"rewrite (Rabs_pos_eq y) by easy.\nrewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (x < 0)%R) : (y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + y)%R \\/ y <> 0%R /\\ Rabs (x + y) = (Rabs x - y)%R.","proofString":"rewrite (Rabs_left x) by easy.\nintros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (x < 0)%R) : (y <= - x)%R ->\nRabs (x + y) = (- x + y)%R \\/ y <> 0%R /\\ Rabs (x + y) = (- x - y)%R.","proofString":"intros H; right; split.\nnow apply Rgt_not_eq.\nrewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (x < 0)%R) (H : (y <= - x)%R) : y <> 0%R.","proofString":"now apply Rgt_not_eq."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (x < 0)%R) (H : (y <= - x)%R) : Rabs (x + y) = (- x - y)%R.","proofString":"rewrite Rabs_left1.\nring.\napply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (x < 0)%R) (H : (y <= - x)%R) : (- (x + y))%R = (- x - y)%R.","proofString":"ring."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : (0 < y)%R) (Hx : (x < 0)%R) (H : (y <= - x)%R) : (x + y <= 0)%R.","proofString":"apply Rplus_le_reg_l with (-x)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : 0%R = y) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"intros _; left.\nnow rewrite <- Hy', Rabs_R0, 2!Rplus_0_r."},{"statement":"(x y : R) (Hy : (0 <= y)%R) (Hy' : 0%R = y) : Rabs (x + y) = (Rabs x + Rabs y)%R.","proofString":"now rewrite <- Hy', Rabs_R0, 2!Rplus_0_r."},{"statement":"(x y : R) (Hy : (y < 0)%R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"case (Rle_or_lt 0 x); intros Hx.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption.\nintros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (0 <= x)%R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"rewrite (Rabs_left y) by easy.\nrewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (0 <= x)%R) : (- y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + - y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - - y)%R.","proofString":"rewrite (Rabs_pos_eq x) by easy.\nintros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (0 <= x)%R) : (- y <= x)%R ->\nRabs (x + y) = (x + - y)%R \\/ y <> 0%R /\\ Rabs (x + y) = (x - - y)%R.","proofString":"intros H; right; split.\nnow apply Rlt_not_eq.\nrewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (0 <= x)%R) (H : (- y <= x)%R) : y <> 0%R.","proofString":"now apply Rlt_not_eq."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (0 <= x)%R) (H : (- y <= x)%R) : Rabs (x + y) = (x - - y)%R.","proofString":"rewrite Rabs_pos_eq.\nring.\napply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (0 <= x)%R) (H : (- y <= x)%R) : (x + y)%R = (x - - y)%R.","proofString":"ring."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (0 <= x)%R) (H : (- y <= x)%R) : (0 <= x + y)%R.","proofString":"apply Rplus_le_reg_l with (-y)%R; ring_simplify; assumption."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (x < 0)%R) : (Rabs y <= Rabs x)%R ->\nRabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"intros _; left.\nrewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (x < 0)%R) : Rabs (x + y) = (Rabs x + Rabs y)%R.","proofString":"rewrite (Rabs_left y) by easy.\nrewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (x < 0)%R) : Rabs (x + y) = (Rabs x + - y)%R.","proofString":"rewrite (Rabs_left x) by easy.\nrewrite Rabs_left1.\nring.\nlra."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (x < 0)%R) : Rabs (x + y) = (- x + - y)%R.","proofString":"rewrite Rabs_left1.\nring.\nlra."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (x < 0)%R) : (- (x + y))%R = (- x + - y)%R.","proofString":"ring."},{"statement":"(x y : R) (Hy : (y < 0)%R) (Hx : (x < 0)%R) : (x + y <= 0)%R.","proofString":"lra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (V : forall x0 y0 : R,\n(Rabs y0 <= Rabs x0)%R ->\nRabs (x0 + y0) = (Rabs x0 + Rabs y0)%R \\/\ny0 <> 0%R /\\ Rabs (x0 + y0) = (Rabs x0 - Rabs y0)%R) : Rabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R.","proofString":"apply V; left.\napply lt_mag with beta.\nnow apply Rabs_pos_lt.\nrewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (V : forall x0 y0 : R,\n(Rabs y0 <= Rabs x0)%R ->\nRabs (x0 + y0) = (Rabs x0 + Rabs y0)%R \\/\ny0 <> 0%R /\\ Rabs (x0 + y0) = (Rabs x0 - Rabs y0)%R) : (Rabs y < Rabs x)%R.","proofString":"apply lt_mag with beta.\nnow apply Rabs_pos_lt.\nrewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (V : forall x0 y0 : R,\n(Rabs y0 <= Rabs x0)%R ->\nRabs (x0 + y0) = (Rabs x0 + Rabs y0)%R \\/\ny0 <> 0%R /\\ Rabs (x0 + y0) = (Rabs x0 - Rabs y0)%R) : (0 < Rabs x)%R.","proofString":"now apply Rabs_pos_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (V : forall x0 y0 : R,\n(Rabs y0 <= Rabs x0)%R ->\nRabs (x0 + y0) = (Rabs x0 + Rabs y0)%R \\/\ny0 <> 0%R /\\ Rabs (x0 + y0) = (Rabs x0 - Rabs y0)%R) : (mag beta (Rabs y) < mag beta (Rabs x))%Z.","proofString":"rewrite <- mag_minus1 in H1; try assumption.\nrewrite 2!mag_abs; lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta x - 1)%Z) (V : forall x0 y0 : R,\n(Rabs y0 <= Rabs x0)%R ->\nRabs (x0 + y0) = (Rabs x0 + Rabs y0)%R \\/\ny0 <> 0%R /\\ Rabs (x0 + y0) = (Rabs x0 - Rabs y0)%R) : (mag beta (Rabs y) < mag beta (Rabs x))%Z.","proofString":"rewrite 2!mag_abs; lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R \\/\ny <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R) : (mag beta x - 1 <= mag beta (Rabs (x + y)))%Z.","proofString":"destruct U as [U|U].\nrewrite U; apply Z.le_trans with (mag beta x).\nlia.\nrewrite <- mag_abs.\napply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos.\ndestruct U as (U',U); rewrite U.\nrewrite <- mag_abs.\napply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R) : (mag beta x - 1 <= mag beta (Rabs (x + y)))%Z.","proofString":"rewrite U; apply Z.le_trans with (mag beta x).\nlia.\nrewrite <- mag_abs.\napply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R) : (mag beta x - 1 <= mag beta x)%Z.","proofString":"lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R) : (mag beta x <= mag beta (Rabs x + Rabs y))%Z.","proofString":"rewrite <- mag_abs.\napply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R) : (mag beta (Rabs x) <= mag beta (Rabs x + Rabs y))%Z.","proofString":"apply mag_le.\nnow apply Rabs_pos_lt.\napply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R) : (0 < Rabs x)%R.","proofString":"now apply Rabs_pos_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R) : (Rabs x <= Rabs x + Rabs y)%R.","proofString":"apply Rplus_le_reg_l with (-Rabs x)%R; ring_simplify.\napply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : Rabs (x + y) = (Rabs x + Rabs y)%R) : (0 <= Rabs y)%R.","proofString":"apply Rabs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U : y <> 0%R /\\ Rabs (x + y) = (Rabs x - Rabs y)%R) : (mag beta x - 1 <= mag beta (Rabs (x + y)))%Z.","proofString":"destruct U as (U',U); rewrite U.\nrewrite <- mag_abs.\napply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) : (mag beta x - 1 <= mag beta (Rabs x - Rabs y))%Z.","proofString":"rewrite <- mag_abs.\napply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) : (mag beta (Rabs x) - 1 <= mag beta (Rabs x - Rabs y))%Z.","proofString":"apply mag_minus_lb.\nnow apply Rabs_pos_lt.\nnow apply Rabs_pos_lt.\nrewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) : (0 < Rabs x)%R.","proofString":"now apply Rabs_pos_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) : (0 < Rabs y)%R.","proofString":"now apply Rabs_pos_lt."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) : (mag beta (Rabs y) <= mag beta (Rabs x) - 2)%Z.","proofString":"rewrite 2!mag_abs.\nassert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) : (mag beta y <= mag beta x - 2)%Z.","proofString":"assert (mag beta y < mag beta x - 1)%Z.\nnow rewrite (mag_minus1 x Zx).\nlia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) : (mag beta y < mag beta x - 1)%Z.","proofString":"now rewrite (mag_minus1 x Zx)."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (U' : y <> 0%R) (U : Rabs (x + y) = (Rabs x - Rabs y)%R) (H : (mag beta y < mag beta x - 1)%Z) : (mag beta y <= mag beta x - 2)%Z.","proofString":"lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) : (x + y)%R <> 0%R.","proofString":"contradict H1; apply Zle_not_lt.\nrewrite <- (mag_minus1 x Zx).\nreplace y with (-x)%R.\nrewrite mag_opp; lia.\nlra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (x + y)%R = 0%R) : (mag beta (x / IZR beta) <= mag beta y)%Z.","proofString":"rewrite <- (mag_minus1 x Zx).\nreplace y with (-x)%R.\nrewrite mag_opp; lia.\nlra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (x + y)%R = 0%R) : (mag beta x - 1 <= mag beta y)%Z.","proofString":"replace y with (-x)%R.\nrewrite mag_opp; lia.\nlra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (x + y)%R = 0%R) : (mag beta x - 1 <= mag beta (- x))%Z.","proofString":"rewrite mag_opp; lia."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (x + y)%R = 0%R) : (- x)%R = y.","proofString":"lra."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (Zx : x <> 0%R) (H1 : (mag beta y < mag beta (x / IZR beta))%Z) (n : Z) (Hn : round beta fexp rnd (x + y) = (IZR n * bpow (cexp (x / IZR beta)))%R) : exists m : Z,\n  round beta fexp rnd (x + y) = (IZR m * bpow (cexp (x / IZR beta)))%R.","proofString":"now exists n."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) : y <> 0%R.","proofString":"intros K; apply Hm.\nrewrite K, scaled_mantissa_0.\napply Ztrunc_IZR."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) (K : y = 0%R) : Ztrunc (scaled_mantissa beta fexp y) = 0%Z.","proofString":"rewrite K, scaled_mantissa_0.\napply Ztrunc_IZR."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) (K : y = 0%R) : Ztrunc 0 = 0%Z.","proofString":"apply Ztrunc_IZR."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) : (1 * bpow (cexp y) <=\n Rabs (IZR (Ztrunc (scaled_mantissa beta fexp y))) * bpow (cexp y))%R.","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\nrewrite <- abs_IZR.\napply IZR_le.\napply (Zlt_le_succ 0).\nnow apply Z.abs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) : (0 <= bpow (cexp y))%R.","proofString":"apply bpow_ge_0."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) : (1 <= Rabs (IZR (Ztrunc (scaled_mantissa beta fexp y))))%R.","proofString":"rewrite <- abs_IZR.\napply IZR_le.\napply (Zlt_le_succ 0).\nnow apply Z.abs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) : (1 <= IZR (Z.abs (Ztrunc (scaled_mantissa beta fexp y))))%R.","proofString":"apply IZR_le.\napply (Zlt_le_succ 0).\nnow apply Z.abs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) : (1 <= Z.abs (Ztrunc (scaled_mantissa beta fexp y)))%Z.","proofString":"apply (Zlt_le_succ 0).\nnow apply Z.abs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x = 0%R) (Hm : Ztrunc (scaled_mantissa beta fexp y) <> 0%Z) : (0 < Z.abs (Ztrunc (scaled_mantissa beta fexp y)))%Z.","proofString":"now apply Z.abs_pos."},{"statement":"(x y : R) (Fx : format x) (Fy : format y) (KK : round beta fexp rnd (x + y) <> 0%R) (Zx : x <> 0%R) : (ulp beta fexp (x / IZR beta) <= Rabs (round beta fexp rnd (x + y)))%R.","proofString":"destruct (round_plus_F2R x y Fx Fy Zx) as (m,Hm).\ncase (Z.eq_dec m 0); intros Zm.\ncontradict KK.\nrewrite Hm, Zm.\napply F2R_0.\nrewrite Hm, <- F2R_Zabs.\nrewrite ulp_neq_0.\nrewrite <- (Rmult_1_l (bpow _)).\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply IZR_le.\napply (Zlt_le_succ 0).\nnow apply Z.abs_pos.\napply Rmult_integral_contrapositive_currified with (1 := Zx).\napply Rinv_neq_0_compat.\napply Rgt_not_eq, radix_pos."},{"statement":"(x y : R) (e : Z) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (H1 : x <> 0%R -> (bpow (e + prec) <= Rabs x)%R) (H2 : x = 0%R -> y <> 0%R -> (bpow e <= Rabs y)%R) (H3 : round beta (FLT_exp emin prec) rnd (x + y) <> 0%R) (H4 : x <> 0%R) : (bpow e <= Rabs (round beta (FLT_exp emin prec) rnd (x + y)))%R.","proofString":"apply round_FLT_plus_ge; try easy.\nnow apply H1."},{"statement":"(x y : R) (e : Z) (Fx : generic_format beta (FLT_exp emin prec) x) (Fy : generic_format beta (FLT_exp emin prec) y) (H1 : x <> 0%R -> (bpow (e + prec) <= Rabs x)%R) (H2 : x = 0%R -> y <> 0%R -> (bpow e <= Rabs y)%R) (H3 : round beta (FLT_exp emin prec) rnd (x + y) <> 0%R) (H4 : x <> 0%R) : (bpow (e + prec) <= Rabs x)%R.","proofString":"now apply H1."},{"statement":"(x y : R) (Fx : generic_format beta fexp x) (Fy : generic_format beta fexp y) : (Rabs (round beta fexp (Znearest choice) (x + y) - (x + y)) <= Rabs x)%R.","proofString":"apply (Rle_trans _ (Rabs (y - (x + y)))); [now apply round_N_pt|].\nrewrite Rabs_minus_sym; right; f_equal; ring."},{"statement":"(x y : R) (Fx : generic_format beta fexp x) (Fy : generic_format beta fexp y) : (Rabs (y - (x + y)) <= Rabs x)%R.","proofString":"rewrite Rabs_minus_sym; right; f_equal; ring."}]}