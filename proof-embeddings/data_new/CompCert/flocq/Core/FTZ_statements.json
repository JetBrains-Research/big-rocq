{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Core/FTZ.v","fileSamples":[{"statement":"(x : R) (Hx : FTZ_format x) : generic_format beta FTZ_exp x.","conclusion":"generic_format beta FTZ_exp x","hypotheses":"(x : R) (Hx : FTZ_format x)","proofString":"cut (generic_format beta (FLX_exp prec) x).\napply generic_inclusion_mag.\nintros Zx.\ndestruct Hx as [[xm xe] Hx1 Hx2 Hx3].\nsimpl in Hx2, Hx3.\nspecialize (Hx2 Zx).\nassert (Zxm: xm <> Z0).\ncontradict Zx.\nrewrite Hx1, Zx.\napply F2R_0.\nunfold FTZ_exp, FLX_exp.\nrewrite Zlt_bool_false.\napply Z.le_refl.\nrewrite Hx1, mag_F2R with (1 := Zxm).\ncut (prec - 1 < mag beta (IZR xm))%Z.\nclear -Hx3 ; lia.\napply mag_gt_Zpower with (1 := Zxm).\napply Hx2.\napply generic_format_FLXN.\nnow apply FLXN_format_FTZ."},{"statement":"(x : R) (Hx : generic_format beta FTZ_exp x) : FTZ_format x.","conclusion":"FTZ_format x","hypotheses":"(x : R) (Hx : generic_format beta FTZ_exp x)","proofString":"destruct (Req_dec x 0) as [->|Hx3].\nexists (Float beta 0 emin).\napply sym_eq, F2R_0.\nintros H.\nnow elim H.\napply Z.le_refl.\nunfold generic_format, scaled_mantissa, cexp, FTZ_exp in Hx.\ndestruct (mag beta x) as (ex, Hx4).\nsimpl in Hx.\nspecialize (Hx4 Hx3).\ngeneralize (Zlt_cases (ex - prec) emin) Hx.\nclear Hx.\ncase (Zlt_bool (ex - prec) emin) ; intros Hx5 Hx2.\nelim Rlt_not_ge with (1 := proj2 Hx4).\napply Rle_ge.\nrewrite Hx2, <- F2R_Zabs.\nrewrite <- (Rmult_1_l (bpow ex)).\nunfold F2R.\nsimpl.\napply Rmult_le_compat.\nnow apply IZR_le.\napply bpow_ge_0.\napply IZR_le.\napply (Zlt_le_succ 0).\napply lt_IZR.\napply Rmult_lt_reg_r with (bpow (emin + prec - 1)).\napply bpow_gt_0.\nrewrite Rmult_0_l.\nchange (0 < F2R (Float beta (Z.abs (Ztrunc (x * bpow (- (emin + prec - 1))))) (emin + prec - 1)))%R.\nrewrite F2R_Zabs, <- Hx2.\nnow apply Rabs_pos_lt.\napply bpow_le.\nlia.\nrewrite Hx2.\neexists ; repeat split ; simpl.\napply le_IZR.\nrewrite IZR_Zpower.\napply Rmult_le_reg_r with (bpow (ex - prec)).\napply bpow_gt_0.\nrewrite <- bpow_plus.\nreplace (prec - 1 + (ex - prec))%Z with (ex - 1)%Z by ring.\nchange (bpow (ex - 1) <= F2R (Float beta (Z.abs (Ztrunc (x * bpow (- (ex - prec))))) (ex - prec)))%R.\nrewrite F2R_Zabs, <- Hx2.\napply Hx4.\napply Zle_minus_le_0.\nnow apply (Zlt_le_succ 0).\napply lt_IZR.\nrewrite IZR_Zpower.\napply Rmult_lt_reg_r with (bpow (ex - prec)).\napply bpow_gt_0.\nrewrite <- bpow_plus.\nreplace (prec + (ex - prec))%Z with ex by ring.\nchange (F2R (Float beta (Z.abs (Ztrunc (x * bpow (- (ex - prec))))) (ex - prec)) < bpow ex)%R.\nrewrite F2R_Zabs, <- Hx2.\napply Hx4.\nnow apply Zlt_le_weak.\nnow apply Z.ge_le."},{"statement":"(Hx : generic_format beta FTZ_exp 0) : FTZ_format 0.","conclusion":"FTZ_format 0","hypotheses":"(Hx : generic_format beta FTZ_exp 0)","proofString":"exists (Float beta 0 emin).\napply sym_eq, F2R_0.\nintros H.\nnow elim H.\napply Z.le_refl."},{"statement":"(x : R) (Hx : generic_format beta FTZ_exp x) (Hx3 : x <> 0%R) : FTZ_format x.","conclusion":"FTZ_format x","hypotheses":"(x : R) (Hx : generic_format beta FTZ_exp x) (Hx3 : x <> 0%R)","proofString":"unfold generic_format, scaled_mantissa, cexp, FTZ_exp in Hx.\ndestruct (mag beta x) as (ex, Hx4).\nsimpl in Hx.\nspecialize (Hx4 Hx3).\ngeneralize (Zlt_cases (ex - prec) emin) Hx.\nclear Hx.\ncase (Zlt_bool (ex - prec) emin) ; intros Hx5 Hx2.\nelim Rlt_not_ge with (1 := proj2 Hx4).\napply Rle_ge.\nrewrite Hx2, <- F2R_Zabs.\nrewrite <- (Rmult_1_l (bpow ex)).\nunfold F2R.\nsimpl.\napply Rmult_le_compat.\nnow apply IZR_le.\napply bpow_ge_0.\napply IZR_le.\napply (Zlt_le_succ 0).\napply lt_IZR.\napply Rmult_lt_reg_r with (bpow (emin + prec - 1)).\napply bpow_gt_0.\nrewrite Rmult_0_l.\nchange (0 < F2R (Float beta (Z.abs (Ztrunc (x * bpow (- (emin + prec - 1))))) (emin + prec - 1)))%R.\nrewrite F2R_Zabs, <- Hx2.\nnow apply Rabs_pos_lt.\napply bpow_le.\nlia.\nrewrite Hx2.\neexists ; repeat split ; simpl.\napply le_IZR.\nrewrite IZR_Zpower.\napply Rmult_le_reg_r with (bpow (ex - prec)).\napply bpow_gt_0.\nrewrite <- bpow_plus.\nreplace (prec - 1 + (ex - prec))%Z with (ex - 1)%Z by ring.\nchange (bpow (ex - 1) <= F2R (Float beta (Z.abs (Ztrunc (x * bpow (- (ex - prec))))) (ex - prec)))%R.\nrewrite F2R_Zabs, <- Hx2.\napply Hx4.\napply Zle_minus_le_0.\nnow apply (Zlt_le_succ 0).\napply lt_IZR.\nrewrite IZR_Zpower.\napply Rmult_lt_reg_r with (bpow (ex - prec)).\napply bpow_gt_0.\nrewrite <- bpow_plus.\nreplace (prec + (ex - prec))%Z with ex by ring.\nchange (F2R (Float beta (Z.abs (Ztrunc (x * bpow (- (ex - prec))))) (ex - prec)) < bpow ex)%R.\nrewrite F2R_Zabs, <- Hx2.\napply Hx4.\nnow apply Zlt_le_weak.\nnow apply Z.ge_le."},{"statement":"forall x : R, generic_format beta FTZ_exp x <-> FTZ_format x.","conclusion":"forall x : R, generic_format beta FTZ_exp x <-> FTZ_format x","hypotheses":"","proofString":"intros x.\nsplit.\napply FTZ_format_generic.\napply generic_format_FTZ."},{"statement":"(x : R) : generic_format beta FTZ_exp x <-> FTZ_format x.","conclusion":"generic_format beta FTZ_exp x <-> FTZ_format x","hypotheses":"(x : R)","proofString":"split.\napply FTZ_format_generic.\napply generic_format_FTZ."},{"statement":"(x : R) : generic_format beta FTZ_exp x -> FTZ_format x.","conclusion":"generic_format beta FTZ_exp x -> FTZ_format x","hypotheses":"(x : R)","proofString":"apply FTZ_format_generic."},{"statement":"(x : R) : FTZ_format x -> generic_format beta FTZ_exp x.","conclusion":"FTZ_format x -> generic_format beta FTZ_exp x","hypotheses":"(x : R)","proofString":"apply generic_format_FTZ."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Fx : FLXN_format beta prec x) : FTZ_format x.","conclusion":"FTZ_format x","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Fx : FLXN_format beta prec x)","proofString":"apply FTZ_format_generic.\napply generic_format_FLXN in Fx.\nrevert Hx Fx.\napply generic_inclusion_ge.\nintros e He.\nunfold FTZ_exp.\nrewrite Zlt_bool_false.\napply Z.le_refl.\nlia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Fx : FLXN_format beta prec x) : generic_format beta FTZ_exp x.","conclusion":"generic_format beta FTZ_exp x","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Fx : FLXN_format beta prec x)","proofString":"apply generic_format_FLXN in Fx.\nrevert Hx Fx.\napply generic_inclusion_ge.\nintros e He.\nunfold FTZ_exp.\nrewrite Zlt_bool_false.\napply Z.le_refl.\nlia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Fx : generic_format beta (FLX_exp prec) x) : generic_format beta FTZ_exp x.","conclusion":"generic_format beta FTZ_exp x","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (Fx : generic_format beta (FLX_exp prec) x)","proofString":"revert Hx Fx.\napply generic_inclusion_ge.\nintros e He.\nunfold FTZ_exp.\nrewrite Zlt_bool_false.\napply Z.le_refl.\nlia."},{"statement":"(x : R) : (bpow (emin + prec - 1) <= Rabs x)%R ->\ngeneric_format beta (FLX_exp prec) x -> generic_format beta FTZ_exp x.","conclusion":"(bpow (emin + prec - 1) <= Rabs x)%R ->\ngeneric_format beta (FLX_exp prec) x -> generic_format beta FTZ_exp x","hypotheses":"(x : R)","proofString":"apply generic_inclusion_ge.\nintros e He.\nunfold FTZ_exp.\nrewrite Zlt_bool_false.\napply Z.le_refl.\nlia."},{"statement":"(x : R) : forall e : Z, (emin + prec - 1 < e)%Z -> (FTZ_exp e <= FLX_exp prec e)%Z.","conclusion":"forall e : Z, (emin + prec - 1 < e)%Z -> (FTZ_exp e <= FLX_exp prec e)%Z","hypotheses":"(x : R)","proofString":"intros e He.\nunfold FTZ_exp.\nrewrite Zlt_bool_false.\napply Z.le_refl.\nlia."},{"statement":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z) : (FTZ_exp e <= FLX_exp prec e)%Z.","conclusion":"(FTZ_exp e <= FLX_exp prec e)%Z","hypotheses":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z)","proofString":"unfold FTZ_exp.\nrewrite Zlt_bool_false.\napply Z.le_refl.\nlia."},{"statement":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z) : ((if e - prec <? emin then emin + prec - 1 else e - prec) <= FLX_exp prec e)%Z.","conclusion":"((if e - prec <? emin then emin + prec - 1 else e - prec) <= FLX_exp prec e)%Z","hypotheses":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z)","proofString":"rewrite Zlt_bool_false.\napply Z.le_refl.\nlia."},{"statement":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z) : (e - prec <= FLX_exp prec e)%Z.","conclusion":"(e - prec <= FLX_exp prec e)%Z","hypotheses":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z)","proofString":"apply Z.le_refl."},{"statement":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z) : (emin <= e - prec)%Z.","conclusion":"(emin <= e - prec)%Z","hypotheses":"(x : R) (e : Z) (He : (emin + prec - 1 < e)%Z)","proofString":"lia."},{"statement":"(forall n : Z, (FTZ_exp n < n)%Z) -> 0%R = bpow (emin + prec - 1).","conclusion":"(forall n : Z, (FTZ_exp n < n)%Z) -> 0%R = bpow (emin + prec - 1)","hypotheses":"","proofString":"intros T; specialize (T (emin-1)%Z); contradict T.\napply Zle_not_lt; unfold FTZ_exp; unfold Prec_gt_0 in prec_gt_0_.\nrewrite Zlt_bool_true; lia."},{"statement":"~ (FTZ_exp (emin - 1) < emin - 1)%Z.","conclusion":"~ (FTZ_exp (emin - 1) < emin - 1)%Z","hypotheses":"","proofString":"apply Zle_not_lt; unfold FTZ_exp; unfold Prec_gt_0 in prec_gt_0_.\nrewrite Zlt_bool_true; lia."},{"statement":"FTZ_exp (emin + prec - 1) = (emin + prec - 1)%Z.","conclusion":"FTZ_exp (emin + prec - 1) = (emin + prec - 1)%Z","hypotheses":"","proofString":"unfold FTZ_exp; rewrite Zlt_bool_true; lia."},{"statement":"(V : FTZ_exp (emin + prec - 1) = (emin + prec - 1)%Z) (n : Z) (H2 : (n <= FTZ_exp n)%Z) : (emin + prec - 1 <= FTZ_exp (emin + prec - 1))%Z.","conclusion":"(emin + prec - 1 <= FTZ_exp (emin + prec - 1))%Z","hypotheses":"(V : FTZ_exp (emin + prec - 1) = (emin + prec - 1)%Z) (n : Z) (H2 : (n <= FTZ_exp n)%Z)","proofString":"lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) : round beta FTZ_exp Zrnd_FTZ x = round beta (FLX_exp prec) rnd x.","conclusion":"round beta FTZ_exp Zrnd_FTZ x = round beta (FLX_exp prec) rnd x","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R)","proofString":"unfold round, scaled_mantissa, cexp.\ndestruct (mag beta x) as (ex, He).\nsimpl.\nassert (Hx0: x <> 0%R).\nintros Hx0.\napply Rle_not_lt with (1 := Hx).\nrewrite Hx0, Rabs_R0.\napply bpow_gt_0.\nspecialize (He Hx0).\nassert (He': (emin + prec <= ex)%Z).\napply (bpow_lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He.\nreplace (FTZ_exp ex) with (FLX_exp prec ex).\nunfold Zrnd_FTZ.\nrewrite Rle_bool_true.\napply refl_equal.\nrewrite Rabs_mult.\nrewrite (Rabs_pos_eq (bpow (- FLX_exp prec ex))).\nchange 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FLX_exp prec ex)).\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia.\napply bpow_ge_0.\nunfold FLX_exp, FTZ_exp.\nrewrite Zlt_bool_false.\napply refl_equal.\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) : x <> 0%R.","conclusion":"x <> 0%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"intros Hx0.\napply Rle_not_lt with (1 := Hx).\nrewrite Hx0, Rabs_R0.\napply bpow_gt_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x = 0%R) : False.","conclusion":"False","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x = 0%R)","proofString":"apply Rle_not_lt with (1 := Hx).\nrewrite Hx0, Rabs_R0.\napply bpow_gt_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x = 0%R) : (Rabs x < bpow (emin + prec - 1))%R.","conclusion":"(Rabs x < bpow (emin + prec - 1))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x = 0%R)","proofString":"rewrite Hx0, Rabs_R0.\napply bpow_gt_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x = 0%R) : (0 < bpow (emin + prec - 1))%R.","conclusion":"(0 < bpow (emin + prec - 1))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : x <> 0%R -> (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x = 0%R)","proofString":"apply bpow_gt_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) : (emin + prec <= ex)%Z.","conclusion":"(emin + prec <= ex)%Z","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R)","proofString":"apply (bpow_lt_bpow beta).\napply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) : (bpow (emin + prec - 1) < bpow ex)%R.","conclusion":"(bpow (emin + prec - 1) < bpow ex)%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R)","proofString":"apply Rle_lt_trans with (1 := Hx).\napply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) : (Rabs x < bpow ex)%R.","conclusion":"(Rabs x < bpow ex)%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R)","proofString":"apply He."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (1 <= Rabs (x * bpow (- FLX_exp prec ex)))%R.","conclusion":"(1 <= Rabs (x * bpow (- FLX_exp prec ex)))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"rewrite Rabs_mult.\nrewrite (Rabs_pos_eq (bpow (- FLX_exp prec ex))).\nchange 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FLX_exp prec ex)).\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia.\napply bpow_ge_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (1 <= Rabs x * Rabs (bpow (- FLX_exp prec ex)))%R.","conclusion":"(1 <= Rabs x * Rabs (bpow (- FLX_exp prec ex)))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"rewrite (Rabs_pos_eq (bpow (- FLX_exp prec ex))).\nchange 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FLX_exp prec ex)).\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia.\napply bpow_ge_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (1 <= Rabs x * bpow (- FLX_exp prec ex))%R.","conclusion":"(1 <= Rabs x * bpow (- FLX_exp prec ex))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"change 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FLX_exp prec ex)).\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (bpow 0 <= Rabs x * bpow (- FLX_exp prec ex))%R.","conclusion":"(bpow 0 <= Rabs x * bpow (- FLX_exp prec ex))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"rewrite <- (Zplus_opp_r (FLX_exp prec ex)).\nrewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (bpow (FLX_exp prec ex + - FLX_exp prec ex) <=\n Rabs x * bpow (- FLX_exp prec ex))%R.","conclusion":"(bpow (FLX_exp prec ex + - FLX_exp prec ex) <=\n Rabs x * bpow (- FLX_exp prec ex))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"rewrite bpow_plus.\napply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (bpow (FLX_exp prec ex) * bpow (- FLX_exp prec ex) <=\n Rabs x * bpow (- FLX_exp prec ex))%R.","conclusion":"(bpow (FLX_exp prec ex) * bpow (- FLX_exp prec ex) <=\n Rabs x * bpow (- FLX_exp prec ex))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"apply Rmult_le_compat_r.\napply bpow_ge_0.\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (0 <= bpow (- FLX_exp prec ex))%R.","conclusion":"(0 <= bpow (- FLX_exp prec ex))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"apply bpow_ge_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (bpow (FLX_exp prec ex) <= Rabs x)%R.","conclusion":"(bpow (FLX_exp prec ex) <= Rabs x)%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"apply Rle_trans with (2 := proj1 He).\napply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (bpow (FLX_exp prec ex) <= bpow (ex - 1))%R.","conclusion":"(bpow (FLX_exp prec ex) <= bpow (ex - 1))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"apply bpow_le.\nunfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (FLX_exp prec ex <= ex - 1)%Z.","conclusion":"(FLX_exp prec ex <= ex - 1)%Z","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"unfold FLX_exp.\ngeneralize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (ex - prec <= ex - 1)%Z.","conclusion":"(ex - prec <= ex - 1)%Z","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"generalize (prec_gt_0 prec).\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (0 < prec)%Z -> (ex - prec <= ex - 1)%Z.","conclusion":"(0 < prec)%Z -> (ex - prec <= ex - 1)%Z","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"clear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (0 <= bpow (- FLX_exp prec ex))%R.","conclusion":"(0 <= bpow (- FLX_exp prec ex))%R","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"apply bpow_ge_0."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : FLX_exp prec ex = FTZ_exp ex.","conclusion":"FLX_exp prec ex = FTZ_exp ex","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"unfold FLX_exp, FTZ_exp.\nrewrite Zlt_bool_false.\napply refl_equal.\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (ex - prec)%Z =\n(if (ex - prec <? emin)%Z then (emin + prec - 1)%Z else (ex - prec)%Z).","conclusion":"(ex - prec)%Z =\n(if (ex - prec <? emin)%Z then (emin + prec - 1)%Z else (ex - prec)%Z)","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"rewrite Zlt_bool_false.\napply refl_equal.\nclear -He' ; lia."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (ex - prec)%Z = (ex - prec)%Z.","conclusion":"(ex - prec)%Z = (ex - prec)%Z","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"apply refl_equal."},{"statement":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z) : (emin <= ex - prec)%Z.","conclusion":"(emin <= ex - prec)%Z","hypotheses":"(x : R) (Hx : (bpow (emin + prec - 1) <= Rabs x)%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (Hx0 : x <> 0%R) (He' : (emin + prec <= ex)%Z)","proofString":"clear -He' ; lia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) : round beta FTZ_exp Zrnd_FTZ x = 0%R.","conclusion":"round beta FTZ_exp Zrnd_FTZ x = 0%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R)","proofString":"unfold round, scaled_mantissa, cexp.\ndestruct (mag beta x) as (ex, He).\nsimpl.\nspecialize (He Hx0).\nunfold Zrnd_FTZ.\nrewrite Rle_bool_false.\napply F2R_0.\nrewrite Rabs_mult.\nrewrite (Rabs_pos_eq (bpow (- FTZ_exp ex))).\nchange 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FTZ_exp ex)).\nrewrite bpow_plus.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\napply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia.\napply bpow_ge_0."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs (x * bpow (- FTZ_exp ex)) < 1)%R.","conclusion":"(Rabs (x * bpow (- FTZ_exp ex)) < 1)%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"rewrite Rabs_mult.\nrewrite (Rabs_pos_eq (bpow (- FTZ_exp ex))).\nchange 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FTZ_exp ex)).\nrewrite bpow_plus.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\napply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia.\napply bpow_ge_0."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x * Rabs (bpow (- FTZ_exp ex)) < 1)%R.","conclusion":"(Rabs x * Rabs (bpow (- FTZ_exp ex)) < 1)%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"rewrite (Rabs_pos_eq (bpow (- FTZ_exp ex))).\nchange 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FTZ_exp ex)).\nrewrite bpow_plus.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\napply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia.\napply bpow_ge_0."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x * bpow (- FTZ_exp ex) < 1)%R.","conclusion":"(Rabs x * bpow (- FTZ_exp ex) < 1)%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"change 1%R with (bpow 0).\nrewrite <- (Zplus_opp_r (FTZ_exp ex)).\nrewrite bpow_plus.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\napply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x * bpow (- FTZ_exp ex) < bpow 0)%R.","conclusion":"(Rabs x * bpow (- FTZ_exp ex) < bpow 0)%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"rewrite <- (Zplus_opp_r (FTZ_exp ex)).\nrewrite bpow_plus.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\napply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x * bpow (- FTZ_exp ex) < bpow (FTZ_exp ex + - FTZ_exp ex))%R.","conclusion":"(Rabs x * bpow (- FTZ_exp ex) < bpow (FTZ_exp ex + - FTZ_exp ex))%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"rewrite bpow_plus.\napply Rmult_lt_compat_r.\napply bpow_gt_0.\napply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x * bpow (- FTZ_exp ex) < bpow (FTZ_exp ex) * bpow (- FTZ_exp ex))%R.","conclusion":"(Rabs x * bpow (- FTZ_exp ex) < bpow (FTZ_exp ex) * bpow (- FTZ_exp ex))%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"apply Rmult_lt_compat_r.\napply bpow_gt_0.\napply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (0 < bpow (- FTZ_exp ex))%R.","conclusion":"(0 < bpow (- FTZ_exp ex))%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"apply bpow_gt_0."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (Rabs x < bpow (FTZ_exp ex))%R.","conclusion":"(Rabs x < bpow (FTZ_exp ex))%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"apply Rlt_le_trans with (1 := Hx).\napply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (bpow (emin + prec - 1) <= bpow (FTZ_exp ex))%R.","conclusion":"(bpow (emin + prec - 1) <= bpow (FTZ_exp ex))%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"apply bpow_le.\nunfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (emin + prec - 1 <= FTZ_exp ex)%Z.","conclusion":"(emin + prec - 1 <= FTZ_exp ex)%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"unfold FTZ_exp.\ngeneralize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (emin + prec - 1 <=\n (if ex - prec <? emin then emin + prec - 1 else ex - prec))%Z.","conclusion":"(emin + prec - 1 <=\n (if ex - prec <? emin then emin + prec - 1 else ex - prec))%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"generalize (Zlt_cases (ex - prec) emin).\ncase Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (if (ex - prec <? emin)%Z\n then (ex - prec < emin)%Z\n else (ex - prec >= emin)%Z) ->\n(emin + prec - 1 <=\n (if ex - prec <? emin then emin + prec - 1 else ex - prec))%Z.","conclusion":"(if (ex - prec <? emin)%Z\n then (ex - prec < emin)%Z\n else (ex - prec >= emin)%Z) ->\n(emin + prec - 1 <=\n (if ex - prec <? emin then emin + prec - 1 else ex - prec))%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"case Zlt_bool.\nintros _.\napply Z.le_refl.\nintros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (ex - prec < emin)%Z -> (emin + prec - 1 <= emin + prec - 1)%Z.","conclusion":"(ex - prec < emin)%Z -> (emin + prec - 1 <= emin + prec - 1)%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"intros _.\napply Z.le_refl."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (emin + prec - 1 <= emin + prec - 1)%Z.","conclusion":"(emin + prec - 1 <= emin + prec - 1)%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"apply Z.le_refl."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (ex - prec >= emin)%Z -> (emin + prec - 1 <= ex - prec)%Z.","conclusion":"(ex - prec >= emin)%Z -> (emin + prec - 1 <= ex - prec)%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"intros He'.\nelim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z) : (emin + prec - 1 <= ex - prec)%Z.","conclusion":"(emin + prec - 1 <= ex - prec)%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z)","proofString":"elim Rlt_not_le with (1 := Hx).\napply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z) : (bpow (emin + prec - 1) <= Rabs x)%R.","conclusion":"(bpow (emin + prec - 1) <= Rabs x)%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z)","proofString":"apply Rle_trans with (2 := proj1 He).\napply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z) : (bpow (emin + prec - 1) <= bpow (ex - 1))%R.","conclusion":"(bpow (emin + prec - 1) <= bpow (ex - 1))%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z)","proofString":"apply bpow_le.\nlia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z) : (emin + prec - 1 <= ex - 1)%Z.","conclusion":"(emin + prec - 1 <= ex - 1)%Z","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) (He' : (ex - prec >= emin)%Z)","proofString":"lia."},{"statement":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R) : (0 <= bpow (- FTZ_exp ex))%R.","conclusion":"(0 <= bpow (- FTZ_exp ex))%R","hypotheses":"(x : R) (Hx : (Rabs x < bpow (emin + prec - 1))%R) (Hx0 : x <> 0%R) (ex : Z) (He : (bpow (ex - 1) <= Rabs x < bpow ex)%R)","proofString":"apply bpow_ge_0."}]}