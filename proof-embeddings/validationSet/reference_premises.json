{
  "references": [
    {
      "clique": [
        "exists v0 : value, Some v = Some v0",
        "exists l0 : location, Some l = Some l0",
        "exists v0 : value, Some v = Some v0",
        "exists l0 : location, Some l = Some l0"
      ]
    },
    {
      "clique": [
        "eq_dom (fun _ : A => True) (loc lab1) (loc lab2)",
        "eq_dom (fun _ : A => True) (mod lab1) (mod lab2)",
        "eq_dom (fun _ : A => True) (xmod lab1) (xmod lab2)"
      ]
    },
    {
      "clique": [
        "(fun _ : A => True) ∩₁ (fun a : A => is_r lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_r lab2 a) ->\n(fun a : A => is_r lab1 a) ≡₁ (fun a : A => is_r lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_w lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_w lab2 a) ->\n(fun a : A => is_w lab1 a) ≡₁ (fun a : A => is_w lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_only_pln lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_only_pln lab2 a) ->\n(fun a : A => is_only_pln lab1 a) ≡₁ (fun a : A => is_only_pln lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_only_rlx lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_only_rlx lab2 a) ->\n(fun a : A => is_only_rlx lab1 a) ≡₁ (fun a : A => is_only_rlx lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_rlx lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_rlx lab2 a) ->\n(fun a : A => is_rlx lab1 a) ≡₁ (fun a : A => is_rlx lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_acq lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_acq lab2 a) ->\n(fun a : A => is_acq lab1 a) ≡₁ (fun a : A => is_acq lab2 a)"
      ]
    },
    {
      "clique": [
        "(fun _ : A => True) ∩₁ (fun a : A => is_ra lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_ra lab2 a) ->\n(fun a : A => is_ra lab1 a) ≡₁ (fun a : A => is_ra lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_w lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_w lab2 a) ->\n(fun a : A => is_w lab1 a) ≡₁ (fun a : A => is_w lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_f lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_f lab2 a) ->\n(fun a : A => is_f lab1 a) ≡₁ (fun a : A => is_f lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => R_ex lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => R_ex lab2 a) ->\n(fun a : A => R_ex lab1 a) ≡₁ (fun a : A => R_ex lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_sc lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_sc lab2 a) ->\n(fun a : A => is_sc lab1 a) ≡₁ (fun a : A => is_sc lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_xacq lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_xacq lab2 a) ->\n(fun a : A => is_xacq lab1 a) ≡₁ (fun a : A => is_xacq lab2 a)"
      ]
    },
    {
      "clique": [
        "(fun _ : A => True) ∩₁ (fun a : A => is_acqrel lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_acqrel lab2 a) ->\n(fun a : A => is_acqrel lab1 a) ≡₁ (fun a : A => is_acqrel lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_w lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_w lab2 a) ->\n(fun a : A => is_w lab1 a) ≡₁ (fun a : A => is_w lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_only_rlx lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_only_rlx lab2 a) ->\n(fun a : A => is_only_rlx lab1 a) ≡₁ (fun a : A => is_only_rlx lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_rlx lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_rlx lab2 a) ->\n(fun a : A => is_rlx lab1 a) ≡₁ (fun a : A => is_rlx lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_acq lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_acq lab2 a) ->\n(fun a : A => is_acq lab1 a) ≡₁ (fun a : A => is_acq lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_rel lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_rel lab2 a) ->\n(fun a : A => is_rel lab1 a) ≡₁ (fun a : A => is_rel lab2 a)"
      ]
    },
    {
      "clique": [
        "(fun _ : A => True) ∩₁ (fun a : A => is_xacq lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_xacq lab2 a) ->\n(fun a : A => is_xacq lab1 a) ≡₁ (fun a : A => is_xacq lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_rel lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_rel lab2 a) ->\n(fun a : A => is_rel lab1 a) ≡₁ (fun a : A => is_rel lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_acqrel lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_acqrel lab2 a) ->\n(fun a : A => is_acqrel lab1 a) ≡₁ (fun a : A => is_acqrel lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_sc lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_sc lab2 a) ->\n(fun a : A => is_sc lab1 a) ≡₁ (fun a : A => is_sc lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_ra lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_ra lab2 a) ->\n(fun a : A => is_ra lab1 a) ≡₁ (fun a : A => is_ra lab2 a)",
        "(fun _ : A => True) ∩₁ (fun a : A => is_xacq lab1 a)\n≡₁ (fun _ : A => True) ∩₁ (fun a : A => is_xacq lab2 a) ->\n(fun a : A => is_xacq lab1 a) ≡₁ (fun a : A => is_xacq lab2 a)"
      ]
    },
    {
      "clique": [
        "forall e : A, s' e -> same_label_u2v (lab e) (lab' e)",
        "same_label_u2v (lab e) (lab' e)"
      ]
    },
    {
      "clique": [
        "match lbl1 with\n| Aload r1 o1 l1 _ =>\n    match lbl3 with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match lbl3 with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match lbl3 with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend",
        "match lbl2 with\n| Aload r1 o1 l1 _ =>\n    match lbl1 with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match lbl1 with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match lbl1 with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend",
        "match lab2 e with\n| Aload r1 o1 l1 _ =>\n    match lab1 e with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match lab1 e with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match lab1 e with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend"
      ]
    },
    {
      "clique": [
        "same_label_u2v (lab1 e) (lab3 e)",
        "same_label_u2v (lab1 e) (lab3 e)",
        "same_label_u2v (lab2 e) (lab1 e)"
      ]
    },
    {
      "clique": [
        "match x with\n| InitEvent _ =>\n    match z with\n    | InitEvent _ => False\n    | ThreadEvent _ _ => True\n    end\n| ThreadEvent t i =>\n    match z with\n    | InitEvent _ => False\n    | ThreadEvent t' i' => t = t' /\\ i < i'\n    end\nend",
        "match y with\n| InitEvent _ =>\n    match z with\n    | InitEvent _ => False\n    | ThreadEvent _ _ => True\n    end\n| ThreadEvent t i =>\n    match z with\n    | InitEvent _ => False\n    | ThreadEvent t' i' => t = t' /\\ i < i'\n    end\nend \\/\nmatch z with\n| InitEvent _ =>\n    match y with\n    | InitEvent _ => False\n    | ThreadEvent _ _ => True\n    end\n| ThreadEvent t i =>\n    match y with\n    | InitEvent _ => False\n    | ThreadEvent t' i' => t = t' /\\ i < i'\n    end\nend"
      ]
    },
    {
      "clique": [
        "False",
        "index1 < index2 \\/ index2 < index1",
        "index1 < index2 \\/ index2 < index1",
        "index0 < index1 \\/ index1 < index0 \\/ index0 = index1"
      ]
    },
    {
      "clique": [
        "(fun a : actid => is_init a) × set_compl (fun a : actid => is_init a)\n⊆ (fun a b : actid =>\n   match a with\n   | InitEvent _ =>\n       match b with\n       | InitEvent _ => False\n       | ThreadEvent _ _ => True\n       end\n   | ThreadEvent t i =>\n       match b with\n       | InitEvent _ => False\n       | ThreadEvent t' i' => t = t' /\\ i < i'\n       end\n   end)",
        "(ext_sb^? ∪ ext_sb⁻¹ ∪ (fun a b : actid => is_init a /\\ is_init b))\n⨾ ⦗set_compl (fun a : actid => is_init a)⦘ ⊆ ext_sb^? ∪ ext_sb⁻¹"
      ]
    }
  ]
}