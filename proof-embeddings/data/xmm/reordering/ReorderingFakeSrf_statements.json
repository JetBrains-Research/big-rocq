{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/xmm/src/reordering/ReorderingFakeSrf.v","fileSamples":[{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n⊆ ⦗E_s⦘\n  ⨾ (⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb).","proofString":"rewrite <- seq_eqv_minus_ll.\napply minus_rel_mori; [| red; auto with hahn].\nseq_rewrite seq_eqvC.\nrewrite wf_vfE_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n⊆ ⦗E_s⦘ ⨾ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\\n  co_s ⨾ vf_s ⨾ fake_sb.","proofString":"apply minus_rel_mori; [| red; auto with hahn].\nseq_rewrite seq_eqvC.\nrewrite wf_vfE_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb\n⊆ ⦗E_s⦘ ⨾ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb.","proofString":"seq_rewrite seq_eqvC.\nrewrite wf_vfE_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb\n⊆ (⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗E_s⦘) ⨾ vf_s ⨾ fake_sb.","proofString":"rewrite wf_vfE_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ (⦗E_s⦘ ⨾ vf_s) ⨾ fake_sb\n⊆ (⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗E_s⦘) ⨾ vf_s ⨾ fake_sb.","proofString":"rewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗E_s⦘ ⨾ vf_s ⨾ fake_sb\n⊆ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗E_s⦘ ⨾ vf_s ⨾ fake_sb.","proofString":"reflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n⊆ ⦗W_s⦘\n  ⨾ (⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb).","proofString":"rewrite <- seq_eqv_minus_ll.\napply minus_rel_mori; [| red; auto with hahn].\nseq_rewrite seq_eqvC.\nrewrite vf_d_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n⊆ ⦗W_s⦘ ⨾ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\\n  co_s ⨾ vf_s ⨾ fake_sb.","proofString":"apply minus_rel_mori; [| red; auto with hahn].\nseq_rewrite seq_eqvC.\nrewrite vf_d_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb\n⊆ ⦗W_s⦘ ⨾ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb.","proofString":"seq_rewrite seq_eqvC.\nrewrite vf_d_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb\n⊆ (⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗W_s⦘) ⨾ vf_s ⨾ fake_sb.","proofString":"rewrite vf_d_left at 1.\nrewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ (⦗W_s⦘ ⨾ vf_s) ⨾ fake_sb\n⊆ (⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗W_s⦘) ⨾ vf_s ⨾ fake_sb.","proofString":"rewrite 2!seqA.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗W_s⦘ ⨾ vf_s ⨾ fake_sb\n⊆ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ ⦗W_s⦘ ⨾ vf_s ⨾ fake_sb.","proofString":"reflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n⊆ ⦗Loc_s_ (WCore.lab_loc l_e)⦘\n  ⨾ (⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb).","proofString":"rewrite <- seq_eqv_minus_ll.\napply minus_rel_mori; [| red; auto with hahn].\nseq_rewrite seq_eqvK.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n⊆ ⦗Loc_s_ (WCore.lab_loc l_e)⦘\n  ⨾ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ \n  co_s ⨾ vf_s ⨾ fake_sb.","proofString":"apply minus_rel_mori; [| red; auto with hahn].\nseq_rewrite seq_eqvK.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb\n⊆ ⦗Loc_s_ (WCore.lab_loc l_e)⦘\n  ⨾ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb.","proofString":"seq_rewrite seq_eqvK.\nreflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb\n⊆ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb.","proofString":"reflexivity."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n⊆ vf_s ⨾ fake_sb.","proofString":"rewrite inclusion_minus_rel, inclusion_seq_eqv_l.\nreflexivity."},{"statement":"vf_s ⨾ fake_sb ⊆ vf_s ⨾ fake_sb.","proofString":"reflexivity."},{"statement":"(WF : Wf G_s) : functional (⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ fake_srf)⁻¹.","proofString":"unfolder.\nintros x y z (((YINE & YW) & YL) & SRF1) (((ZINE & ZW) & ZL) & SRF2).\ndestruct (classic (y = z)) as [EQ|NEQ]; ins.\ndestruct (wf_co_total WF)      with (a := y) (b := z)           (ol := WCore.lab_loc l_e)        as [CO|CO].\nunfold set_inter; splits; assumption.\nunfold set_inter; splits; assumption.\nexact NEQ.\nexfalso.\napply SRF1.\napply fake_srf_in_vfsb in SRF2.\nred; eauto.\nexfalso.\napply SRF2.\napply fake_srf_in_vfsb in SRF1.\nred; eauto."},{"statement":"(WF : Wf G_s) : forall x y z : actid,\n((E_s y /\\ is_w lab_s y) /\\ loc_s y = WCore.lab_loc l_e) /\\ fake_srf y x ->\n((E_s z /\\ is_w lab_s z) /\\ loc_s z = WCore.lab_loc l_e) /\\ fake_srf z x ->\ny = z.","proofString":"intros x y z (((YINE & YW) & YL) & SRF1) (((ZINE & ZW) & ZL) & SRF2).\ndestruct (classic (y = z)) as [EQ|NEQ]; ins.\ndestruct (wf_co_total WF)      with (a := y) (b := z)           (ol := WCore.lab_loc l_e)        as [CO|CO].\nunfold set_inter; splits; assumption.\nunfold set_inter; splits; assumption.\nexact NEQ.\nexfalso.\napply SRF1.\napply fake_srf_in_vfsb in SRF2.\nred; eauto.\nexfalso.\napply SRF2.\napply fake_srf_in_vfsb in SRF1.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) : y = z.","proofString":"destruct (classic (y = z)) as [EQ|NEQ]; ins.\ndestruct (wf_co_total WF)      with (a := y) (b := z)           (ol := WCore.lab_loc l_e)        as [CO|CO].\nunfold set_inter; splits; assumption.\nunfold set_inter; splits; assumption.\nexact NEQ.\nexfalso.\napply SRF1.\napply fake_srf_in_vfsb in SRF2.\nred; eauto.\nexfalso.\napply SRF2.\napply fake_srf_in_vfsb in SRF1.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) : y = z.","proofString":"destruct (wf_co_total WF)      with (a := y) (b := z)           (ol := WCore.lab_loc l_e)        as [CO|CO].\nunfold set_inter; splits; assumption.\nunfold set_inter; splits; assumption.\nexact NEQ.\nexfalso.\napply SRF1.\napply fake_srf_in_vfsb in SRF2.\nred; eauto.\nexfalso.\napply SRF2.\napply fake_srf_in_vfsb in SRF1.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) : (E_s ∩₁ W_s ∩₁ Loc_s_ (WCore.lab_loc l_e)) y.","proofString":"unfold set_inter; splits; assumption."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) : (E_s ∩₁ W_s ∩₁ Loc_s_ (WCore.lab_loc l_e)) z.","proofString":"unfold set_inter; splits; assumption."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) : y <> z.","proofString":"exact NEQ."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) (CO : co_s y z) : y = z.","proofString":"exfalso.\napply SRF1.\napply fake_srf_in_vfsb in SRF2.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) (CO : co_s y z) : False.","proofString":"apply SRF1.\napply fake_srf_in_vfsb in SRF2.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) (CO : co_s y z) : (co_s ⨾ vf_s ⨾ fake_sb) y x.","proofString":"apply fake_srf_in_vfsb in SRF2.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : (vf_s ⨾ fake_sb) z x) (NEQ : y <> z) (CO : co_s y z) : (co_s ⨾ vf_s ⨾ fake_sb) y x.","proofString":"red; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) (CO : co_s z y) : y = z.","proofString":"exfalso.\napply SRF2.\napply fake_srf_in_vfsb in SRF1.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) (CO : co_s z y) : False.","proofString":"apply SRF2.\napply fake_srf_in_vfsb in SRF1.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : fake_srf y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) (CO : co_s z y) : (co_s ⨾ vf_s ⨾ fake_sb) z x.","proofString":"apply fake_srf_in_vfsb in SRF1.\nred; eauto."},{"statement":"(WF : Wf G_s) (x y z : actid) (YINE : E_s y) (YW : is_w lab_s y) (YL : loc_s y = WCore.lab_loc l_e) (SRF1 : (vf_s ⨾ fake_sb) y x) (ZINE : E_s z) (ZW : is_w lab_s z) (ZL : loc_s z = WCore.lab_loc l_e) (SRF2 : fake_srf z x) (NEQ : y <> z) (CO : co_s z y) : (co_s ⨾ vf_s ⨾ fake_sb) z x.","proofString":"red; eauto."},{"statement":"(WF : Wf G_s) (EMP : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) ≡₁ ∅) : exists w : option actid,\n  eq_opt w ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘).","proofString":"exists None.\nrewrite EMP.\nauto with hahn."},{"statement":"(WF : Wf G_s) (EMP : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) ≡₁ ∅) : eq_opt None ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘).","proofString":"rewrite EMP.\nauto with hahn."},{"statement":"(WF : Wf G_s) (NEMP : ~ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) ≡₁ ∅) : exists w : option actid,\n  eq_opt w ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘).","proofString":"apply set_nonemptyE in NEMP.\ndestruct NEMP as (x & DOM).\nexists (Some x).\nrewrite eq_opt_someE.\nsplit; red; [congruence|].\nintros x' DOM'.\napply (fake_srff WF) with e.\nunfolder in DOM.\ndesf.\nunfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (NEMP : exists x : actid, dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) : exists w : option actid,\n  eq_opt w ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘).","proofString":"destruct NEMP as (x & DOM).\nexists (Some x).\nrewrite eq_opt_someE.\nsplit; red; [congruence|].\nintros x' DOM'.\napply (fake_srff WF) with e.\nunfolder in DOM.\ndesf.\nunfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) : exists w : option actid,\n  eq_opt w ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘).","proofString":"exists (Some x).\nrewrite eq_opt_someE.\nsplit; red; [congruence|].\nintros x' DOM'.\napply (fake_srff WF) with e.\nunfolder in DOM.\ndesf.\nunfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) : eq_opt (Some x) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘).","proofString":"rewrite eq_opt_someE.\nsplit; red; [congruence|].\nintros x' DOM'.\napply (fake_srff WF) with e.\nunfolder in DOM.\ndesf.\nunfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) : eq x ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘).","proofString":"split; red; [congruence|].\nintros x' DOM'.\napply (fake_srff WF) with e.\nunfolder in DOM.\ndesf.\nunfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) : forall x0 : actid,\ndom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x0 -> x = x0.","proofString":"intros x' DOM'.\napply (fake_srff WF) with e.\nunfolder in DOM.\ndesf.\nunfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) (x' : actid) (DOM' : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x') : x = x'.","proofString":"apply (fake_srff WF) with e.\nunfolder in DOM.\ndesf.\nunfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) (x' : actid) (DOM' : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x') : fake_srf⁻¹ e x.","proofString":"unfolder in DOM.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : exists y z : actid, fake_srf x z /\\ z = y /\\ e = z /\\ WCore.lab_is_r l_e z) (x' : actid) (DOM' : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x') : fake_srf⁻¹ e x.","proofString":"desf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) (x' : actid) (DOM' : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x') : fake_srf⁻¹ e x'.","proofString":"unfolder in DOM'.\ndesf."},{"statement":"(WF : Wf G_s) (x : actid) (DOM : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘) x) (x' : actid) (DOM' : exists y z : actid, fake_srf x' z /\\ z = y /\\ e = z /\\ WCore.lab_is_r l_e z) : fake_srf⁻¹ e x'.","proofString":"desf."},{"statement":"(WF : Wf G_s) (w : actid) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)) : WCore.lab_is_r l_e e.","proofString":"unfolder in SRF_W.\ndestruct SRF_W as [ISR _].\nclear - ISR.\ndestruct ISR with w; desf."},{"statement":"(WF : Wf G_s) (w : actid) (SRF_W : (forall x : actid,\n w = x -> exists y : actid, fake_srf x y /\\ e = y /\\ WCore.lab_is_r l_e y) /\\\n(forall x : actid,\n (exists y : actid, fake_srf x y /\\ e = y /\\ WCore.lab_is_r l_e y) -> w = x)) : WCore.lab_is_r l_e e.","proofString":"destruct SRF_W as [ISR _].\nclear - ISR.\ndestruct ISR with w; desf."},{"statement":"(WF : Wf G_s) (w : actid) (ISR : forall x : actid,\nw = x -> exists y : actid, fake_srf x y /\\ e = y /\\ WCore.lab_is_r l_e y) : WCore.lab_is_r l_e e.","proofString":"clear - ISR.\ndestruct ISR with w; desf."},{"statement":"(w : actid) (ISR : forall x : actid,\nw = x -> exists y : actid, fake_srf x y /\\ e = y /\\ WCore.lab_is_r l_e y) : WCore.lab_is_r l_e e.","proofString":"destruct ISR with w; desf."},{"statement":"(WF : Wf G_s) (w : actid) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)) (ISR : WCore.lab_is_r l_e e) : is_w lab_s w.","proofString":"unfold fake_srf, vf in SRF_W.\nunfolder in SRF_W.\ndestruct SRF_W as [ISW _].\ndestruct ISW with w; desf."},{"statement":"(WF : Wf G_s) (w : actid) (SRF_W : eq_opt (Some w)\n≡₁ dom_rel\n     ((⦗Loc_s_ (WCore.lab_loc l_e)⦘\n       ⨾ (⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ hb_s^?) ⨾ fake_sb \\\n       co_s ⨾ (⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ hb_s^?) ⨾ fake_sb)\n      ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)) (ISR : WCore.lab_is_r l_e e) : is_w lab_s w.","proofString":"unfolder in SRF_W.\ndestruct SRF_W as [ISW _].\ndestruct ISW with w; desf."},{"statement":"(WF : Wf G_s) (w : actid) (SRF_W : (forall x : actid,\n w = x ->\n exists y : actid,\n   ((exists z : actid,\n       (x = z /\\ loc_s x = WCore.lab_loc l_e) /\\\n       (exists z0 : actid,\n          (z = z0 /\\ E_s z) /\\\n          (exists z1 : actid,\n             (z0 = z1 /\\ is_w lab_s z0) /\\\n             (exists z2 : actid,\n                (z1 = z2 \\/ rf_s z1 z2) /\\\n                (exists z3 : actid, (z2 = z3 \\/ hb_s z2 z3) /\\ fake_sb z3 y))))) /\\\n    ~\n    (exists z : actid,\n       co_s x z /\\\n       (exists z0 : actid,\n          (z = z0 /\\ E_s z) /\\\n          (exists z1 : actid,\n             (z0 = z1 /\\ is_w lab_s z0) /\\\n             (exists z2 : actid,\n                (z1 = z2 \\/ rf_s z1 z2) /\\\n                (exists z3 : actid, (z2 = z3 \\/ hb_s z2 z3) /\\ fake_sb z3 y)))))) /\\\n   e = y /\\ WCore.lab_is_r l_e y) /\\\n(forall x : actid,\n (exists y : actid,\n    ((exists z : actid,\n        (x = z /\\ loc_s x = WCore.lab_loc l_e) /\\\n        (exists z0 : actid,\n           (z = z0 /\\ E_s z) /\\\n           (exists z1 : actid,\n              (z0 = z1 /\\ is_w lab_s z0) /\\\n              (exists z2 : actid,\n                 (z1 = z2 \\/ rf_s z1 z2) /\\\n                 (exists z3 : actid, (z2 = z3 \\/ hb_s z2 z3) /\\ fake_sb z3 y))))) /\\\n     ~\n     (exists z : actid,\n        co_s x z /\\\n        (exists z0 : actid,\n           (z = z0 /\\ E_s z) /\\\n           (exists z1 : actid,\n              (z0 = z1 /\\ is_w lab_s z0) /\\\n              (exists z2 : actid,\n                 (z1 = z2 \\/ rf_s z1 z2) /\\\n                 (exists z3 : actid, (z2 = z3 \\/ hb_s z2 z3) /\\ fake_sb z3 y)))))) /\\\n    e = y /\\ WCore.lab_is_r l_e y) -> w = x)) (ISR : WCore.lab_is_r l_e e) : is_w lab_s w.","proofString":"destruct SRF_W as [ISW _].\ndestruct ISW with w; desf."},{"statement":"(WF : Wf G_s) (w : actid) (ISW : forall x : actid,\nw = x ->\nexists y : actid,\n  ((exists z : actid,\n      (x = z /\\ loc_s x = WCore.lab_loc l_e) /\\\n      (exists z0 : actid,\n         (z = z0 /\\ E_s z) /\\\n         (exists z1 : actid,\n            (z0 = z1 /\\ is_w lab_s z0) /\\\n            (exists z2 : actid,\n               (z1 = z2 \\/ rf_s z1 z2) /\\\n               (exists z3 : actid, (z2 = z3 \\/ hb_s z2 z3) /\\ fake_sb z3 y))))) /\\\n   ~\n   (exists z : actid,\n      co_s x z /\\\n      (exists z0 : actid,\n         (z = z0 /\\ E_s z) /\\\n         (exists z1 : actid,\n            (z0 = z1 /\\ is_w lab_s z0) /\\\n            (exists z2 : actid,\n               (z1 = z2 \\/ rf_s z1 z2) /\\\n               (exists z3 : actid, (z2 = z3 \\/ hb_s z2 z3) /\\ fake_sb z3 y)))))) /\\\n  e = y /\\ WCore.lab_is_r l_e y) (ISR : WCore.lab_is_r l_e e) : is_w lab_s w.","proofString":"destruct ISW with w; desf."},{"statement":"(WF : Wf G_s) (w : actid) (aex : bool) (amo : mode) (al : location) (av : value) (HEQA : l_e = Aload aex amo al av) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)) (ISR : ⊤₁ e) (wxmo : x_mode) (wmo : mode) (wl : location) (wv : value) (HEQW : lab_s w = Astore wxmo wmo wl wv) (ISW : true) : same_label_u2v (Aload aex amo al wv) (Aload aex amo al av).","proofString":"red.\ndesf."},{"statement":"(WF : Wf G_s) (w : actid) (aex : bool) (amo : mode) (al : location) (av : value) (HEQA : l_e = Aload aex amo al av) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)) (ISR : ⊤₁ e) (wxmo : x_mode) (wmo : mode) (wl : location) (wv : value) (HEQW : lab_s w = Astore wxmo wmo wl wv) (ISW : true) : aex = aex /\\ amo = amo /\\ al = al.","proofString":"desf."},{"statement":"(WF : Wf G_s) (w : actid) (aex : bool) (amo : mode) (al : location) (av : value) (HEQA : l_e = Aload aex amo al av) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)) (ISR : ⊤₁ e) (wxmo : x_mode) (wmo : mode) (wl : location) (wv : value) (HEQW : lab_s w = Astore wxmo wmo wl wv) (ISW : true) : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)\n⊆₁ Val_s_ (WCore.lab_val (Aload aex amo al wv)).","proofString":"arewrite (dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘) ⊆₁ Val_s_ (val_s w)).\nrewrite <- SRF_W.\nclear.\nbasic_solver.\nunfold val.\nrewrite HEQW; ins."},{"statement":"(WF : Wf G_s) (w : actid) (aex : bool) (amo : mode) (al : location) (av : value) (HEQA : l_e = Aload aex amo al av) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)) (ISR : ⊤₁ e) (wxmo : x_mode) (wmo : mode) (wl : location) (wv : value) (HEQW : lab_s w = Astore wxmo wmo wl wv) (ISW : true) : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘) ⊆₁ Val_s_ (val_s w).","proofString":"rewrite <- SRF_W.\nclear.\nbasic_solver."},{"statement":"(WF : Wf G_s) (w : actid) (aex : bool) (amo : mode) (al : location) (av : value) (HEQA : l_e = Aload aex amo al av) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)) (ISR : ⊤₁ e) (wxmo : x_mode) (wmo : mode) (wl : location) (wv : value) (HEQW : lab_s w = Astore wxmo wmo wl wv) (ISW : true) : eq_opt (Some w) ⊆₁ Val_s_ (val_s w).","proofString":"clear.\nbasic_solver."},{"statement":"(w : actid) : eq_opt (Some w) ⊆₁ Val_s_ (val_s w).","proofString":"basic_solver."},{"statement":"(WF : Wf G_s) (w : actid) (aex : bool) (amo : mode) (al : location) (av : value) (HEQA : l_e = Aload aex amo al av) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)) (ISR : ⊤₁ e) (wxmo : x_mode) (wmo : mode) (wl : location) (wv : value) (HEQW : lab_s w = Astore wxmo wmo wl wv) (ISW : true) : Val_s_ (val_s w) ⊆₁ Val_s_ (WCore.lab_val (Aload aex amo al wv)).","proofString":"unfold val.\nrewrite HEQW; ins."},{"statement":"(WF : Wf G_s) (w : actid) (aex : bool) (amo : mode) (al : location) (av : value) (HEQA : l_e = Aload aex amo al av) (SRF_W : eq_opt (Some w) ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ ⊤₁⦘)) (ISR : ⊤₁ e) (wxmo : x_mode) (wmo : mode) (wl : location) (wv : value) (HEQW : lab_s w = Astore wxmo wmo wl wv) (ISW : true) : (fun e0 : actid =>\n match lab_s e0 with\n | Aload _ _ _ v | Astore _ _ _ v => Some v\n | Afence _ => None\n end =\n match lab_s w with\n | Aload _ _ _ v | Astore _ _ _ v => Some v\n | Afence _ => None\n end)\n⊆₁ (fun e0 : actid =>\n    match lab_s e0 with\n    | Aload _ _ _ v | Astore _ _ _ v => Some v\n    | Afence _ => None\n    end = WCore.lab_val (Aload aex amo al wv)).","proofString":"rewrite HEQW; ins."},{"statement":"(WF : Wf G_s) (SRF_W : eq_opt None ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)) : same_label_u2v l_e l_e.","proofString":"red.\ndesf."},{"statement":"(WF : Wf G_s) (SRF_W : eq_opt None ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)) : match l_e with\n| Aload r1 o1 l1 _ =>\n    match l_e with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match l_e with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match l_e with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend.","proofString":"desf."},{"statement":"(WF : Wf G_s) (SRF_W : eq_opt None ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)) : dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)\n⊆₁ Val_s_ (WCore.lab_val l_e).","proofString":"rewrite <- SRF_W.\nclear.\nbasic_solver."},{"statement":"(WF : Wf G_s) (SRF_W : eq_opt None ≡₁ dom_rel (fake_srf ⨾ ⦗eq e ∩₁ WCore.lab_is_r l_e⦘)) : eq_opt None ⊆₁ Val_s_ (WCore.lab_val l_e).","proofString":"clear.\nbasic_solver."},{"statement":"eq_opt None ⊆₁ Val_s_ (WCore.lab_val l_e).","proofString":"basic_solver."},{"statement":"(⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ hb_s^?) ⨾ fake_sb\n≡ (⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ rhb_s^?) ⨾ fake_sb.","proofString":"rewrite !seqA.\nsplit; [| now rewrite rhb_in_hb].\nrewrite hb_helper, cr_union_r,          seq_union_l.\narewrite (sb_s ⊆ fake_sb).\nunfold sb, fake_sb.\nunfolder.\nins.\ndesf; splits; eauto.\nrewrite rewrite_trans by apply fake_sb_trans.\nbasic_solver 11."},{"statement":"⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ hb_s^? ⨾ fake_sb\n≡ ⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ rhb_s^? ⨾ fake_sb.","proofString":"split; [| now rewrite rhb_in_hb].\nrewrite hb_helper, cr_union_r,          seq_union_l.\narewrite (sb_s ⊆ fake_sb).\nunfold sb, fake_sb.\nunfolder.\nins.\ndesf; splits; eauto.\nrewrite rewrite_trans by apply fake_sb_trans.\nbasic_solver 11."},{"statement":"⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ hb_s^? ⨾ fake_sb\n⊆ ⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ rhb_s^? ⨾ fake_sb.","proofString":"rewrite hb_helper, cr_union_r,          seq_union_l.\narewrite (sb_s ⊆ fake_sb).\nunfold sb, fake_sb.\nunfolder.\nins.\ndesf; splits; eauto.\nrewrite rewrite_trans by apply fake_sb_trans.\nbasic_solver 11."},{"statement":"⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ (sb_s ⨾ fake_sb ∪ rhb_s^? ⨾ fake_sb)\n⊆ ⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ rhb_s^? ⨾ fake_sb.","proofString":"arewrite (sb_s ⊆ fake_sb).\nunfold sb, fake_sb.\nunfolder.\nins.\ndesf; splits; eauto.\nrewrite rewrite_trans by apply fake_sb_trans.\nbasic_solver 11."},{"statement":"sb_s ⊆ fake_sb.","proofString":"unfold sb, fake_sb.\nunfolder.\nins.\ndesf; splits; eauto."},{"statement":"⦗E_s⦘ ⨾ ext_sb ⨾ ⦗E_s⦘ ⊆ ⦗E_s ∪₁ eq e⦘ ⨾ ext_sb ⨾ ⦗E_s ∪₁ eq e⦘.","proofString":"unfolder.\nins.\ndesf; splits; eauto."},{"statement":"forall x y : actid,\nE_s x /\\ ext_sb x y /\\ E_s y ->\n(E_s x \\/ e = x) /\\ ext_sb x y /\\ (E_s y \\/ e = y).","proofString":"ins.\ndesf; splits; eauto."},{"statement":"(x y : actid) (H : E_s x /\\ ext_sb x y /\\ E_s y) : (E_s x \\/ e = x) /\\ ext_sb x y /\\ (E_s y \\/ e = y).","proofString":"desf; splits; eauto."},{"statement":"⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ (fake_sb ⨾ fake_sb ∪ rhb_s^? ⨾ fake_sb)\n⊆ ⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ rhb_s^? ⨾ fake_sb.","proofString":"rewrite rewrite_trans by apply fake_sb_trans.\nbasic_solver 11."},{"statement":"⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ (fake_sb ∪ rhb_s^? ⨾ fake_sb)\n⊆ ⦗E_s⦘ ⨾ ⦗W_s⦘ ⨾ rf_s^? ⨾ rhb_s^? ⨾ fake_sb.","proofString":"basic_solver 11."},{"statement":"⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_s ⨾ fake_sb \\ co_s ⨾ vf_s ⨾ fake_sb\n≡ ⦗Loc_s_ (WCore.lab_loc l_e)⦘ ⨾ vf_rhb_s ⨾ fake_sb \\\n  co_s ⨾ vf_rhb_s ⨾ fake_sb.","proofString":"now rewrite vf_fake_sb."},{"statement":"(G : execution) (e : actid) (l_e l_e' : label) (U2V : same_label_u2v l_e l_e') : ⦗fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e⦘ ⨾ vf G ⨾ fake_sb G e \\\nco G ⨾ vf G ⨾ fake_sb G e\n≡ ⦗fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e'⦘\n  ⨾ vf G ⨾ fake_sb G e \\ co G ⨾ vf G ⨾ fake_sb G e.","proofString":"apply minus_rel_more; auto.\nrepeat apply seq_more; auto.\napply eqv_rel_more.\nunfolder.\nunfold WCore.lab_loc, loc, same_label_u2v in *.\nsplit; ins; do 2 desf."},{"statement":"(G : execution) (e : actid) (l_e l_e' : label) (U2V : same_label_u2v l_e l_e') : ⦗fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e⦘ ⨾ vf G ⨾ fake_sb G e\n≡ ⦗fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e'⦘\n  ⨾ vf G ⨾ fake_sb G e.","proofString":"repeat apply seq_more; auto.\napply eqv_rel_more.\nunfolder.\nunfold WCore.lab_loc, loc, same_label_u2v in *.\nsplit; ins; do 2 desf."},{"statement":"(G : execution) (e : actid) (l_e l_e' : label) (U2V : same_label_u2v l_e l_e') : ⦗fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e⦘\n≡ ⦗fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e'⦘.","proofString":"apply eqv_rel_more.\nunfolder.\nunfold WCore.lab_loc, loc, same_label_u2v in *.\nsplit; ins; do 2 desf."},{"statement":"(G : execution) (e : actid) (l_e l_e' : label) (U2V : same_label_u2v l_e l_e') : (fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e)\n≡₁ (fun e0 : actid => loc (lab G) e0 = WCore.lab_loc l_e').","proofString":"unfolder.\nunfold WCore.lab_loc, loc, same_label_u2v in *.\nsplit; ins; do 2 desf."},{"statement":"(G : execution) (e : actid) (l_e l_e' : label) (U2V : same_label_u2v l_e l_e') : (forall x : actid,\n loc (lab G) x = WCore.lab_loc l_e -> loc (lab G) x = WCore.lab_loc l_e') /\\\n(forall x : actid,\n loc (lab G) x = WCore.lab_loc l_e' -> loc (lab G) x = WCore.lab_loc l_e).","proofString":"unfold WCore.lab_loc, loc, same_label_u2v in *.\nsplit; ins; do 2 desf."},{"statement":"(G : execution) (e : actid) (l_e l_e' : label) (U2V : match l_e with\n| Aload r1 o1 l1 _ =>\n    match l_e' with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match l_e' with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match l_e' with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend) : (forall x : actid,\n match lab G x with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end =\n match l_e with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end ->\n match lab G x with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end =\n match l_e' with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end) /\\\n(forall x : actid,\n match lab G x with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end =\n match l_e' with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end ->\n match lab G x with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end =\n match l_e with\n | Aload _ _ l _ | Astore _ _ l _ => Some l\n | Afence _ => None\n end).","proofString":"split; ins; do 2 desf."}]}