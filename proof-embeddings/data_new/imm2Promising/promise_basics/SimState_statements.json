{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/promising2ToImm/src/promise_basics/SimState.v","fileSamples":[{"statement":"(G : execution) (C C' : actid -> Prop) (smode : sim_mode) (thread : thread_id) (state : Language.state (thread_lts thread)) (CINCL : C ⊆₁ C') (COVSTEP : forall a : actid, tid a = thread -> C' a -> C a) (SIMSTATE : sim_state G smode C state) (PCOV : forall index : nat, C (ThreadEvent thread index) <-> index < eindex state) (state' : Language.state (thread_lts thread)) (SIMSTATE1 : sim_state_helper G smode state state') : sim_state G smode C' state.","conclusion":"sim_state G smode C' state","hypotheses":"(G : execution) (C C' : actid -> Prop) (smode : sim_mode) (thread : thread_id) (state : Language.state (thread_lts thread)) (CINCL : C ⊆₁ C') (COVSTEP : forall a : actid, tid a = thread -> C' a -> C a) (SIMSTATE : sim_state G smode C state) (PCOV : forall index : nat, C (ThreadEvent thread index) <-> index < eindex state) (state' : Language.state (thread_lts thread)) (SIMSTATE1 : sim_state_helper G smode state state')","proofString":"red.\nsplits; eauto.\nins.\nsplit; ins.\napply PCOV.\napply COVSTEP; eauto.\napply CINCL.\nby apply PCOV."},{"statement":"(G : execution) (C C' : actid -> Prop) (smode : sim_mode) (thread : thread_id) (state : Language.state (thread_lts thread)) (CINCL : C ⊆₁ C') (COVSTEP : forall a : actid, tid a = thread -> C' a -> C a) (SIMSTATE : sim_state G smode C state) (PCOV : forall index : nat, C (ThreadEvent thread index) <-> index < eindex state) (state' : Language.state (thread_lts thread)) (SIMSTATE1 : sim_state_helper G smode state state') : forall index : nat, C' (ThreadEvent thread index) <-> index < eindex state.","conclusion":"forall index : nat, C' (ThreadEvent thread index) <-> index < eindex state","hypotheses":"(G : execution) (C C' : actid -> Prop) (smode : sim_mode) (thread : thread_id) (state : Language.state (thread_lts thread)) (CINCL : C ⊆₁ C') (COVSTEP : forall a : actid, tid a = thread -> C' a -> C a) (SIMSTATE : sim_state G smode C state) (PCOV : forall index : nat, C (ThreadEvent thread index) <-> index < eindex state) (state' : Language.state (thread_lts thread)) (SIMSTATE1 : sim_state_helper G smode state state')","proofString":"ins.\nsplit; ins.\napply PCOV.\napply COVSTEP; eauto.\napply CINCL.\nby apply PCOV."}]}