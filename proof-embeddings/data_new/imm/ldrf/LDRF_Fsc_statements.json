{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/imm/src/ldrf/LDRF_Fsc.v","fileSamples":[{"statement":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l) : S ⊆₁ S ∩₁ NA ∪₁ S ∩₁ AT /\\ S ∩₁ NA ∪₁ S ∩₁ AT ⊆₁ S.","conclusion":"S ⊆₁ S ∩₁ NA ∪₁ S ∩₁ AT /\\ S ∩₁ NA ∪₁ S ∩₁ AT ⊆₁ S","hypotheses":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l)","proofString":"split; [| basic_solver].\nrewrite <- set_inter_union_r.\napply set_subset_inter_r.\nsplit; [basic_solver| ].\nred.\nintros x Sx.\nred.\nspecialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l) : S ⊆₁ S ∩₁ NA ∪₁ S ∩₁ AT.","conclusion":"S ⊆₁ S ∩₁ NA ∪₁ S ∩₁ AT","hypotheses":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l)","proofString":"rewrite <- set_inter_union_r.\napply set_subset_inter_r.\nsplit; [basic_solver| ].\nred.\nintros x Sx.\nred.\nspecialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l) : S ⊆₁ S ∩₁ (NA ∪₁ AT).","conclusion":"S ⊆₁ S ∩₁ (NA ∪₁ AT)","hypotheses":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l)","proofString":"apply set_subset_inter_r.\nsplit; [basic_solver| ].\nred.\nintros x Sx.\nred.\nspecialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l) : S ⊆₁ S /\\ S ⊆₁ NA ∪₁ AT.","conclusion":"S ⊆₁ S /\\ S ⊆₁ NA ∪₁ AT","hypotheses":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l)","proofString":"split; [basic_solver| ].\nred.\nintros x Sx.\nred.\nspecialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l) : S ⊆₁ NA ∪₁ AT.","conclusion":"S ⊆₁ NA ∪₁ AT","hypotheses":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l)","proofString":"red.\nintros x Sx.\nred.\nspecialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l) : forall x : actid, S x -> (NA ∪₁ AT) x.","conclusion":"forall x : actid, S x -> (NA ∪₁ AT) x","hypotheses":"(S : actid -> Prop) (HASLOC : forall x : actid, S x -> exists l : location, loc x = Some l)","proofString":"intros x Sx.\nred.\nspecialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (HASLOC : forall x0 : actid, S x0 -> exists l : location, loc x0 = Some l) (x : actid) (Sx : S x) : (NA ∪₁ AT) x.","conclusion":"(NA ∪₁ AT) x","hypotheses":"(S : actid -> Prop) (HASLOC : forall x0 : actid, S x0 -> exists l : location, loc x0 = Some l) (x : actid) (Sx : S x)","proofString":"red.\nspecialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (HASLOC : forall x0 : actid, S x0 -> exists l : location, loc x0 = Some l) (x : actid) (Sx : S x) : NA x \\/ AT x.","conclusion":"NA x \\/ AT x","hypotheses":"(S : actid -> Prop) (HASLOC : forall x0 : actid, S x0 -> exists l : location, loc x0 = Some l) (x : actid) (Sx : S x)","proofString":"specialize (HASLOC x).\napply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (x : actid) (HASLOC : S x -> exists l : location, loc x = Some l) (Sx : S x) : NA x \\/ AT x.","conclusion":"NA x \\/ AT x","hypotheses":"(S : actid -> Prop) (x : actid) (HASLOC : S x -> exists l : location, loc x = Some l) (Sx : S x)","proofString":"apply HASLOC in Sx.\ndestruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (x : actid) (HASLOC : S x -> exists l : location, loc x = Some l) (Sx : exists l : location, loc x = Some l) : NA x \\/ AT x.","conclusion":"NA x \\/ AT x","hypotheses":"(S : actid -> Prop) (x : actid) (HASLOC : S x -> exists l : location, loc x = Some l) (Sx : exists l : location, loc x = Some l)","proofString":"destruct Sx as [l Lx].\nspecialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(S : actid -> Prop) (x : actid) (HASLOC : S x -> exists l0 : location, loc x = Some l0) (l : location) (Lx : loc x = Some l) : NA x \\/ AT x.","conclusion":"NA x \\/ AT x","hypotheses":"(S : actid -> Prop) (x : actid) (HASLOC : S x -> exists l0 : location, loc x = Some l0) (l : location) (Lx : loc x = Some l)","proofString":"specialize (LOCMODE l).\ndestruct LOCMODE; specialize (H x); auto."},{"statement":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb)) : forall x y : actid,\n(is_r lab x \\/ is_w lab x) /\\ sb x y /\\ T y ->\n(is_r lab x \\/ is_w lab x) /\\\n(exists z : actid, sb x z /\\ (is_f lab z /\\ M z) /\\ sb z y /\\ T y).","conclusion":"forall x y : actid,\n(is_r lab x \\/ is_w lab x) /\\ sb x y /\\ T y ->\n(is_r lab x \\/ is_w lab x) /\\\n(exists z : actid, sb x z /\\ (is_f lab z /\\ M z) /\\ sb z y /\\ T y)","hypotheses":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb))","proofString":"intros e a H.\ndestruct H as [RWe [SBew Ta]].\nsplit; auto.\nred in TF.\nspecialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_l in HH.\ndestruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb)) (e a : actid) (H : (is_r lab e \\/ is_w lab e) /\\ sb e a /\\ T a) : (is_r lab e \\/ is_w lab e) /\\\n(exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a).","conclusion":"(is_r lab e \\/ is_w lab e) /\\\n(exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a)","hypotheses":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb)) (e a : actid) (H : (is_r lab e \\/ is_w lab e) /\\ sb e a /\\ T a)","proofString":"destruct H as [RWe [SBew Ta]].\nsplit; auto.\nred in TF.\nspecialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_l in HH.\ndestruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb)) (e a : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) : (is_r lab e \\/ is_w lab e) /\\\n(exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a).","conclusion":"(is_r lab e \\/ is_w lab e) /\\\n(exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a)","hypotheses":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb)) (e a : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a)","proofString":"split; auto.\nred in TF.\nspecialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_l in HH.\ndestruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb)) (e a : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) : exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a.","conclusion":"exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a","hypotheses":"(T M : actid -> Prop) (TF : T ⊆₁ codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb)) (e a : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a)","proofString":"red in TF.\nspecialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_l in HH.\ndestruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (TF : forall x : actid, T x -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) x) (e a : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) : exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a.","conclusion":"exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a","hypotheses":"(T M : actid -> Prop) (TF : forall x : actid, T x -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) x) (e a : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a)","proofString":"specialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_l in HH.\ndestruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) : exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a.","conclusion":"exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a)","proofString":"pose proof (TF Ta) as [f HH].\napply seq_eqv_l in HH.\ndestruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (HH : (⦗F ∩₁ M⦘ ⨾ immediate sb) f a) : exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a.","conclusion":"exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (HH : (⦗F ∩₁ M⦘ ⨾ immediate sb) f a)","proofString":"apply seq_eqv_l in HH.\ndestruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (HH : (F ∩₁ M) f /\\ immediate sb f a) : exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a.","conclusion":"exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (HH : (F ∩₁ M) f /\\ immediate sb f a)","proofString":"destruct HH as [[Ff Mf] [SBfw IMMfw]].\nexists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) : exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a.","conclusion":"exists z : actid, sb e z /\\ (is_f lab z /\\ M z) /\\ sb z a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False)","proofString":"exists f.\nassert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) : sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a.","conclusion":"sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False)","proofString":"assert (NIf: NInit f).\nspecialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) : set_compl (fun a0 : actid => Init a0) f.","conclusion":"set_compl (fun a0 : actid => Init a0) f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False)","proofString":"specialize (read_or_fence_is_not_init WF).\nintros RFNI.\nspecialize (RFNI f).\nbasic_solver 10."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) : (forall a0 : actid, R a0 \\/ F a0 -> ~ Init a0) ->\nset_compl (fun a0 : actid => Init a0) f.","conclusion":"(forall a0 : actid, R a0 \\/ F a0 -> ~ Init a0) ->\nset_compl (fun a0 : actid => Init a0) f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False)","proofString":"intros RFNI.\nspecialize (RFNI f).\nbasic_solver 10."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (RFNI : forall a0 : actid, R a0 \\/ F a0 -> ~ Init a0) : set_compl (fun a0 : actid => Init a0) f.","conclusion":"set_compl (fun a0 : actid => Init a0) f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (RFNI : forall a0 : actid, R a0 \\/ F a0 -> ~ Init a0)","proofString":"specialize (RFNI f).\nbasic_solver 10."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (RFNI : R f \\/ F f -> ~ Init f) : set_compl (fun a0 : actid => Init a0) f.","conclusion":"set_compl (fun a0 : actid => Init a0) f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (RFNI : R f \\/ F f -> ~ Init f)","proofString":"basic_solver 10."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) : sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a.","conclusion":"sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f)","proofString":"assert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) : e <> f.","conclusion":"e <> f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f)","proofString":"destruct RWe; red; intros; type_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) : sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a.","conclusion":"sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f)","proofString":"assert (SBef: sb e f).\npose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) : sb e f.","conclusion":"sb e f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f)","proofString":"pose (sb_semi_total_r WF NIf NEQef SBew SBfw) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (SB2 : sb e f \\/ sb f e) : sb e f.","conclusion":"sb e f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (SB2 : sb e f \\/ sb f e)","proofString":"destruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (H : sb f e) : sb e f.","conclusion":"sb e f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (H : sb f e)","proofString":"exfalso.\nspecialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (H : sb f e) : False.","conclusion":"False","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (H : sb f e)","proofString":"specialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : sb f e -> sb e a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (H : sb f e) : False.","conclusion":"False","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : sb f e -> sb e a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (H : sb f e)","proofString":"auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (SBef : sb e f) : sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a.","conclusion":"sb e f /\\ (is_f lab f /\\ M f) /\\ sb f a /\\ T a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> codom_rel (⦗F ∩₁ M⦘ ⨾ immediate sb) a) (e : actid) (RWe : is_r lab e \\/ is_w lab e) (SBew : sb e a) (Ta : T a) (f : actid) (Ff : is_f lab f) (Mf : M f) (SBfw : sb f a) (IMMfw : forall c : actid, sb f c -> sb c a -> False) (NIf : set_compl (fun a0 : actid => Init a0) f) (NEQef : e <> f) (SBef : sb e f)","proofString":"basic_solver."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) : ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))","proofString":"rewrite (no_sb_to_init G) at 3.\nrewrite seqA, <- id_inter.\nassert (TMP: NInit ∩₁ (W ∩₁ MW) ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)).\nrewrite COMP.\nrewrite set_inter_union_r.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver].\nrewrite (no_sb_to_init G) at 1.\nrewrite seqA, <- id_inter.\napply (sb_f_helper TMP)."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) : ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗W ∩₁ MW⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗W ∩₁ MW⦘","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))","proofString":"rewrite seqA, <- id_inter.\nassert (TMP: NInit ∩₁ (W ∩₁ MW) ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)).\nrewrite COMP.\nrewrite set_inter_union_r.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver].\nrewrite (no_sb_to_init G) at 1.\nrewrite seqA, <- id_inter.\napply (sb_f_helper TMP)."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) : ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))","proofString":"assert (TMP: NInit ∩₁ (W ∩₁ MW) ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)).\nrewrite COMP.\nrewrite set_inter_union_r.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver].\nrewrite (no_sb_to_init G) at 1.\nrewrite seqA, <- id_inter.\napply (sb_f_helper TMP)."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) : set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb).","conclusion":"set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))","proofString":"rewrite COMP.\nrewrite set_inter_union_r.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) : set_compl (fun a : actid => Init a)\n∩₁ (codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb).","conclusion":"set_compl (fun a : actid => Init a)\n∩₁ (codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))","proofString":"rewrite set_inter_union_r.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) : set_compl (fun a : actid => Init a) ∩₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)\n∪₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb).","conclusion":"set_compl (fun a : actid => Init a) ∩₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)\n∪₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))","proofString":"apply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) : set_compl (fun a : actid => Init a) ∩₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) /\\\nset_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb).","conclusion":"set_compl (fun a : actid => Init a) ∩₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) /\\\nset_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))","proofString":"split; [basic_solver 10 | basic_solver]."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) (TMP : set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)) : ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) (TMP : set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb))","proofString":"rewrite (no_sb_to_init G) at 1.\nrewrite seqA, <- id_inter.\napply (sb_f_helper TMP)."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) (TMP : set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)) : ⦗RW⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗W ∩₁ MW⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) (TMP : set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb))","proofString":"rewrite seqA, <- id_inter.\napply (sb_f_helper TMP)."},{"statement":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) (TMP : set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb)) : ⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (W ∩₁ MW)⦘","hypotheses":"(MW MF : actid -> Prop) (COMP : W ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a)) (TMP : set_compl (fun a : actid => Init a) ∩₁ (W ∩₁ MW)\n⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb))","proofString":"apply (sb_f_helper TMP)."},{"statement":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘) : ⦗RW⦘ ⨾ sb ⨾ ⦗W⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗W⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘","hypotheses":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘)","proofString":"rewrite (mode_split W) at 2; [| apply is_w_loc].\nrewrite (id_union (W ∩₁ NA) _).\ndo 2 rewrite seq_union_r.\nunionL; [unionR right;apply (FENCE NA Acqrel WNAF)          | unionR left; apply (FENCE AT Sc WATF1)]."},{"statement":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘) : ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ NA ∪₁ W ∩₁ AT⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ NA ∪₁ W ∩₁ AT⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘","hypotheses":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘)","proofString":"rewrite (id_union (W ∩₁ NA) _).\ndo 2 rewrite seq_union_r.\nunionL; [unionR right;apply (FENCE NA Acqrel WNAF)          | unionR left; apply (FENCE AT Sc WATF1)]."},{"statement":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘) : ⦗RW⦘ ⨾ sb ⨾ (⦗W ∩₁ NA⦘ ∪ ⦗W ∩₁ AT⦘)\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ (⦗W ∩₁ NA⦘ ∪ ⦗W ∩₁ AT⦘)\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘","hypotheses":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘)","proofString":"do 2 rewrite seq_union_r.\nunionL; [unionR right;apply (FENCE NA Acqrel WNAF)          | unionR left; apply (FENCE AT Sc WATF1)]."},{"statement":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘) : ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘ ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘ ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘","hypotheses":"(FENCE : forall MW MF : actid -> Prop,\nW ∩₁ MW ⊆₁ codom_rel (⦗F ∩₁ MF⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a) ->\n⦗RW⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ MF⦘ ⨾ sb ⨾ ⦗W ∩₁ MW⦘)","proofString":"unionL; [unionR right;apply (FENCE NA Acqrel WNAF)          | unionR left; apply (FENCE AT Sc WATF1)]."},{"statement":"acyclic (sb ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘).","conclusion":"acyclic (sb ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘)","hypotheses":"","proofString":"arewrite (R ⊆₁ RW).\nrewrite <- !seqA, acyclic_rotl, !seqA.\nsin_rewrite sb_f_w.\ncdes IC.\ncdes Cext.\narewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\narewrite (F ∩₁ Acqrel ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\nassert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"acyclic (sb ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗RW⦘).","conclusion":"acyclic (sb ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗RW⦘)","hypotheses":"","proofString":"rewrite <- !seqA, acyclic_rotl, !seqA.\nsin_rewrite sb_f_w.\ncdes IC.\ncdes Cext.\narewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\narewrite (F ∩₁ Acqrel ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\nassert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ rfe).","conclusion":"acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ rfe)","hypotheses":"","proofString":"sin_rewrite sb_f_w.\ncdes IC.\ncdes Cext.\narewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\narewrite (F ∩₁ Acqrel ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\nassert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)","hypotheses":"","proofString":"cdes IC.\ncdes Cext.\narewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\narewrite (F ∩₁ Acqrel ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\nassert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cext.\narewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\narewrite (F ∩₁ Acqrel ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\nassert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"arewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\narewrite (F ∩₁ Acqrel ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\nassert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"arewrite (F ∩₁ Acqrel ⊆₁ F ∩₁ Acq/Rel) by mode_solver.\nassert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"assert (FBOB: sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob).\nseq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver.\ndo 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob.","conclusion":"sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"seq_rewrite <- seq_eqvK.\nrewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : sb ⨾ (⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗F ∩₁ Acq/Rel⦘) ⨾ sb ⊆ bob ⨾ bob.","conclusion":"sb ⨾ (⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗F ∩₁ Acq/Rel⦘) ⨾ sb ⊆ bob ⨾ bob","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"rewrite seqA.\nsin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob.","conclusion":"sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"sin_rewrite sb_to_f_in_bob.\nsin_rewrite sb_from_f_in_bob.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : bob ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob.","conclusion":"bob ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"sin_rewrite sb_from_f_in_bob.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : bob ⨾ bob ⊆ bob ⨾ bob.","conclusion":"bob ⨾ bob ⊆ bob ⨾ bob","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"basic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n    ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"do 2 sin_rewrite FBOB.\nrewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : acyclic\n  ((⦗RW⦘ ⨾ (bob ⨾ bob) ⨾ ⦗W ∩₁ AT⦘ ∪ ⦗RW⦘ ⨾ (bob ⨾ bob) ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ (bob ⨾ bob) ⨾ ⦗W ∩₁ AT⦘ ∪ ⦗RW⦘ ⨾ (bob ⨾ bob) ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"rewrite !inclusion_seq_eqv_r, !inclusion_seq_eqv_l.\narewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : acyclic ((bob ⨾ bob ∪ bob ⨾ bob) ⨾ rfe).","conclusion":"acyclic ((bob ⨾ bob ∪ bob ⨾ bob) ⨾ rfe)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"arewrite (rfe ⊆ ar).\narewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : acyclic ((bob ⨾ bob ∪ bob ⨾ bob) ⨾ ar).","conclusion":"acyclic ((bob ⨾ bob ∪ bob ⨾ bob) ⨾ ar)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"arewrite (bob ⊆ ar).\nunfold ar, ar_int.\neauto with hahn.\nrewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : bob ⊆ ar.","conclusion":"bob ⊆ ar","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"unfold ar, ar_int.\neauto with hahn."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : bob\n⊆ psc G ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour\n     ∪ ⦗W_ex G ∩₁ (fun a : actid => is_xacq lab a)⦘ ⨾ sb ⨾ ⦗W⦘\n     ∪ ⦗W_ex G⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","conclusion":"bob\n⊆ psc G ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour\n     ∪ ⦗W_ex G ∩₁ (fun a : actid => is_xacq lab a)⦘ ⨾ sb ⨾ ⦗W⦘\n     ∪ ⦗W_ex G⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"eauto with hahn."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : acyclic ((ar ⨾ ar ∪ ar ⨾ ar) ⨾ ar).","conclusion":"acyclic ((ar ⨾ ar ∪ ar ⨾ ar) ⨾ ar)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"rewrite unionK, seqA.\nred.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : acyclic (ar ⨾ ar ⨾ ar).","conclusion":"acyclic (ar ⨾ ar ⨾ ar)","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"red.\nred in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : irreflexive (ar ⨾ ar ⨾ ar)⁺.","conclusion":"irreflexive (ar ⨾ ar ⨾ ar)⁺","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"red in Cext0.\narewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : irreflexive (ar ⨾ ar ⨾ ar)⁺.","conclusion":"irreflexive (ar ⨾ ar ⨾ ar)⁺","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"arewrite (ar ⨾ ar ⨾ ar ⊆ ar^+).\ndo 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step.\nrewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : ar ⨾ ar ⨾ ar ⊆ ar⁺.","conclusion":"ar ⨾ ar ⨾ ar ⊆ ar⁺","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"do 2 rewrite <- ct_unit.\nrewrite seqA.\nnow rewrite <- ct_step."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : ar ⨾ ar ⨾ ar ⊆ (ar⁺ ⨾ ar) ⨾ ar.","conclusion":"ar ⨾ ar ⨾ ar ⊆ (ar⁺ ⨾ ar) ⨾ ar","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"rewrite seqA.\nnow rewrite <- ct_step."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : ar ⨾ ar ⨾ ar ⊆ ar⁺ ⨾ ar ⨾ ar.","conclusion":"ar ⨾ ar ⨾ ar ⊆ ar⁺ ⨾ ar ⨾ ar","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"now rewrite <- ct_step."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : irreflexive (ar⁺)⁺.","conclusion":"irreflexive (ar⁺)⁺","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"rewrite ct_of_ct.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : irreflexive ar⁺) (FBOB : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ bob ⨾ bob)","proofString":"auto."},{"statement":"(⦗RW⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ hb.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ hb","hypotheses":"","proofString":"sin_rewrite sb_f_w.\narewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acqrel) by mode_solver.\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite unionK.\nrewrite inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite rtE, seq_union_l.\nunionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)＊ ⨾ \nsb ⨾ ⦗F ∩₁ Sc⦘ ⊆ hb.","conclusion":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)＊ ⨾ \nsb ⨾ ⦗F ∩₁ Sc⦘ ⊆ hb","hypotheses":"","proofString":"arewrite (F ∩₁ Sc ⊆₁ F ∩₁ Acqrel) by mode_solver.\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite unionK.\nrewrite inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite rtE, seq_union_l.\nunionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)＊ ⨾ \nsb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ AT⦘\n  ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W ∩₁ NA⦘) ⨾ rfe)＊ ⨾ \nsb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"do 2 rewrite inclusion_seq_eqv_r.\nrewrite unionK.\nrewrite inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite rtE, seq_union_l.\nunionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb) ⨾ rfe)＊\n⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ∪ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb) ⨾ rfe)＊\n⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"rewrite unionK.\nrewrite inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite rtE, seq_union_l.\nunionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb) ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb) ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"rewrite inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite rtE, seq_union_l.\nunionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb) ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb) ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"rewrite !seqA.\nrewrite rtE, seq_union_l.\nunionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"rewrite rtE, seq_union_l.\nunionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘\n∪ (sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘\n∪ (sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"unionL.\nrewrite sb_in_hb.\nbasic_solver.\narewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"rewrite sb_in_hb.\nbasic_solver."},{"statement":"⦗fun _ : actid => True⦘ ⨾ hb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"⦗fun _ : actid => True⦘ ⨾ hb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"basic_solver."},{"statement":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"arewrite ((sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺ ⊆ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)^* ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe).\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver.\narewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe.","conclusion":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe","hypotheses":"","proofString":"rewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver."},{"statement":"(sb ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ ⦗F ∩₁ Acqrel⦘) ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe.","conclusion":"(sb ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ ⦗F ∩₁ Acqrel⦘) ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe","hypotheses":"","proofString":"rewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver."},{"statement":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe.","conclusion":"(sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe","hypotheses":"","proofString":"rewrite <- seqA with (r2:=⦗F ∩₁ Acqrel⦘).\nrewrite ct_rotl.\nbasic_solver."},{"statement":"((sb ⨾ ⦗F ∩₁ Acqrel⦘) ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe.","conclusion":"((sb ⨾ ⦗F ∩₁ Acqrel⦘) ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe)⁺\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe","hypotheses":"","proofString":"rewrite ct_rotl.\nbasic_solver."},{"statement":"(sb ⨾ ⦗F ∩₁ Acqrel⦘)\n⨾ ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe) ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n  ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe.","conclusion":"(sb ⨾ ⦗F ∩₁ Acqrel⦘)\n⨾ ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe) ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n  ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe\n⊆ sb\n  ⨾ ⦗F ∩₁ Acqrel⦘\n    ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n      ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe","hypotheses":"","proofString":"basic_solver."},{"statement":"sb\n⨾ ⦗F ∩₁ Acqrel⦘\n  ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n    ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"sb\n⨾ ⦗F ∩₁ Acqrel⦘\n  ⨾ (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘)＊\n    ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"arewrite ((⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘) ⊆ hb).\nseq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver.\nrewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"seq_rewrite (dom_l (wf_rfeD WF)).\nrewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ (⦗W⦘ ⨾ rfe) ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ (⦗W⦘ ⨾ rfe) ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"rewrite seqA.\narewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"arewrite (⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ imm_hb.release G).\nunfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10.\nrewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ release.","conclusion":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ release","hypotheses":"","proofString":"unfold imm_hb.release.\narewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10."},{"statement":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ rs.","conclusion":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ rs","hypotheses":"","proofString":"arewrite (⦗W⦘ ⊆ imm_hb.rs G).\nunfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver.\nhahn_frame_r.\nmode_solver 10."},{"statement":"⦗W⦘ ⊆ rs.","conclusion":"⦗W⦘ ⊆ rs","hypotheses":"","proofString":"unfold imm_hb.rs.\nrewrite seq_union_r.\nunionR right.\nbasic_solver."},{"statement":"⦗W⦘ ⊆ ⦗W⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊).","conclusion":"⦗W⦘ ⊆ ⦗W⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘ ∪ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊)","hypotheses":"","proofString":"rewrite seq_union_r.\nunionR right.\nbasic_solver."},{"statement":"⦗W⦘ ⊆ ⦗W⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ⦗W⦘ ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"⦗W⦘ ⊆ ⦗W⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ ⦗W⦘ ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"unionR right.\nbasic_solver."},{"statement":"⦗W⦘ ⊆ ⦗W⦘ ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊.","conclusion":"⦗W⦘ ⊆ ⦗W⦘ ⨾ ((sb ∩ same_loc)^? ⨾ rf ⨾ rmw)＊","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rs ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ rs.","conclusion":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⨾ rs ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ rs","hypotheses":"","proofString":"hahn_frame_r.\nmode_solver 10."},{"statement":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^?.","conclusion":"⦗F ∩₁ Acqrel⦘ ⨾ sb ⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^?","hypotheses":"","proofString":"mode_solver 10."},{"statement":"release ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb.","conclusion":"release ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ hb","hypotheses":"","proofString":"rewrite <- sw_in_hb.\nunfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"release ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ sw.","conclusion":"release ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘ ⊆ sw","hypotheses":"","proofString":"unfold imm_hb.sw.\nrewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"release ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘.","conclusion":"release ⨾ rfe ⨾ sb ⨾ ⦗F ∩₁ Acqrel⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘","hypotheses":"","proofString":"rewrite id_inter.\narewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"release ⨾ rfe ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acqrel⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘.","conclusion":"release ⨾ rfe ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acqrel⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘","hypotheses":"","proofString":"arewrite (Acqrel ⊆₁ Acq) by mode_solver.\narewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"release ⨾ rfe ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘.","conclusion":"release ⨾ rfe ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘","hypotheses":"","proofString":"arewrite ((sb ⨾ ⦗F⦘) ⊆ (sb ⨾ ⦗F⦘)^?).\nhahn_frame.\nunionR right.\nbasic_solver."},{"statement":"release ⨾ rfe ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘.","conclusion":"release ⨾ rfe ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘\n⊆ release ⨾ (rfi ∪ (sb ∩ same_loc)^? ⨾ rfe) ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘","hypotheses":"","proofString":"hahn_frame.\nunionR right.\nbasic_solver."},{"statement":"rfe ⊆ rfi ∪ (sb ∩ same_loc)^? ⨾ rfe.","conclusion":"rfe ⊆ rfi ∪ (sb ∩ same_loc)^? ⨾ rfe","hypotheses":"","proofString":"unionR right.\nbasic_solver."},{"statement":"rfe ⊆ (sb ∩ same_loc)^? ⨾ rfe.","conclusion":"rfe ⊆ (sb ∩ same_loc)^? ⨾ rfe","hypotheses":"","proofString":"basic_solver."},{"statement":"sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ hb＊ ⨾ hb ⊆ hb.","conclusion":"sb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ hb＊ ⨾ hb ⊆ hb","hypotheses":"","proofString":"rewrite sb_in_hb.\nrewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"hb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ hb＊ ⨾ hb ⊆ hb.","conclusion":"hb ⨾ ⦗F ∩₁ Acqrel⦘ ⨾ hb＊ ⨾ hb ⊆ hb","hypotheses":"","proofString":"rewrite inclusion_seq_eqv_l.\nseq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"hb ⨾ hb＊ ⨾ hb ⊆ hb.","conclusion":"hb ⨾ hb＊ ⨾ hb ⊆ hb","hypotheses":"","proofString":"seq_rewrite <- ct_begin.\nsin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"hb⁺ ⨾ hb ⊆ hb.","conclusion":"hb⁺ ⨾ hb ⊆ hb","hypotheses":"","proofString":"sin_rewrite ct_unit.\nrewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"hb⁺ ⊆ hb.","conclusion":"hb⁺ ⊆ hb","hypotheses":"","proofString":"rewrite (ct_of_trans (@hb_trans G)).\nbasic_solver."},{"statement":"hb ⊆ hb.","conclusion":"hb ⊆ hb","hypotheses":"","proofString":"basic_solver."},{"statement":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n∪₁ W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb).","conclusion":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n∪₁ W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb)","hypotheses":"","proofString":"apply set_subset_union_l.\nsplit.\narewrite (R ∩₁ AT ∩₁ NInit ⊆₁ R ∩₁ AT) by basic_solver.\nrewrite WATF1.\nrewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) /\\\nW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb).","conclusion":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) /\\\nW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb)","hypotheses":"","proofString":"split.\narewrite (R ∩₁ AT ∩₁ NInit ⊆₁ R ∩₁ AT) by basic_solver.\nrewrite WATF1.\nrewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb).","conclusion":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb)","hypotheses":"","proofString":"arewrite (R ∩₁ AT ∩₁ NInit ⊆₁ R ∩₁ AT) by basic_solver."},{"statement":"W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb).","conclusion":"W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb)","hypotheses":"","proofString":"rewrite WATF1.\nrewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"(codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))\n∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb).","conclusion":"(codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) ∪₁ (fun a : actid => Init a))\n∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb)","hypotheses":"","proofString":"rewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) ∩₁ set_compl (fun a : actid => Init a)\n∪₁ (fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb).","conclusion":"codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) ∩₁ set_compl (fun a : actid => Init a)\n∪₁ (fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb)","hypotheses":"","proofString":"apply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) /\\\n(fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb).","conclusion":"codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb) /\\\n(fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ codom_rel (⦗F ∩₁ Sc⦘ ⨾ immediate sb)","hypotheses":"","proofString":"split; [basic_solver 10 | basic_solver]."},{"statement":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n∪₁ W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n∪₁ W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"apply set_subset_union_l.\nsplit.\narewrite (R ∩₁ AT ∩₁ NInit ⊆₁ R ∩₁ AT) by basic_solver.\nrewrite WATF2.\nrewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) /\\\nW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) /\\\nW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"split.\narewrite (R ∩₁ AT ∩₁ NInit ⊆₁ R ∩₁ AT) by basic_solver.\nrewrite WATF2.\nrewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"R ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"arewrite (R ∩₁ AT ∩₁ NInit ⊆₁ R ∩₁ AT) by basic_solver."},{"statement":"W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"W ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"rewrite WATF2.\nrewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"(dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) ∪₁ (fun a : actid => Init a))\n∩₁ set_compl (fun a : actid => Init a) ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"(dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) ∪₁ (fun a : actid => Init a))\n∩₁ set_compl (fun a : actid => Init a) ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"rewrite set_inter_union_l.\napply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) ∩₁ set_compl (fun a : actid => Init a)\n∪₁ (fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) ∩₁ set_compl (fun a : actid => Init a)\n∪₁ (fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"apply set_subset_union_l.\nsplit; [basic_solver 10 | basic_solver]."},{"statement":"dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) /\\\n(fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘) /\\\n(fun a : actid => Init a) ∩₁ set_compl (fun a : actid => Init a)\n⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"split; [basic_solver 10 | basic_solver]."},{"statement":"(A : Type) (r : relation A) (dom : A -> Prop) : ⦗dom⦘ ⨾ (r ⨾ ⦗dom⦘)⁺ ≡ (⦗dom⦘ ⨾ r ⨾ ⦗dom⦘)⁺.","conclusion":"⦗dom⦘ ⨾ (r ⨾ ⦗dom⦘)⁺ ≡ (⦗dom⦘ ⨾ r ⨾ ⦗dom⦘)⁺","hypotheses":"(A : Type) (r : relation A) (dom : A -> Prop)","proofString":"rewrite ct_rotl.\nrewrite <- (seqA ⦗dom⦘ r ⦗dom⦘).\nrewrite ct_rotl.\nrewrite !seqA.\nseq_rewrite seq_eqvK.\nbasic_solver."},{"statement":"(A : Type) (r : relation A) (dom : A -> Prop) : ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ (⦗dom⦘ ⨾ r ⨾ ⦗dom⦘)⁺.","conclusion":"⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ (⦗dom⦘ ⨾ r ⨾ ⦗dom⦘)⁺","hypotheses":"(A : Type) (r : relation A) (dom : A -> Prop)","proofString":"rewrite <- (seqA ⦗dom⦘ r ⦗dom⦘).\nrewrite ct_rotl.\nrewrite !seqA.\nseq_rewrite seq_eqvK.\nbasic_solver."},{"statement":"(A : Type) (r : relation A) (dom : A -> Prop) : ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ ((⦗dom⦘ ⨾ r) ⨾ ⦗dom⦘)⁺.","conclusion":"⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ ((⦗dom⦘ ⨾ r) ⨾ ⦗dom⦘)⁺","hypotheses":"(A : Type) (r : relation A) (dom : A -> Prop)","proofString":"rewrite ct_rotl.\nrewrite !seqA.\nseq_rewrite seq_eqvK.\nbasic_solver."},{"statement":"(A : Type) (r : relation A) (dom : A -> Prop) : ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ (⦗dom⦘ ⨾ r) ⨾ (⦗dom⦘ ⨾ ⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘.","conclusion":"⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ (⦗dom⦘ ⨾ r) ⨾ (⦗dom⦘ ⨾ ⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘","hypotheses":"(A : Type) (r : relation A) (dom : A -> Prop)","proofString":"rewrite !seqA.\nseq_rewrite seq_eqvK.\nbasic_solver."},{"statement":"(A : Type) (r : relation A) (dom : A -> Prop) : ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ ⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘.","conclusion":"⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ ⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘","hypotheses":"(A : Type) (r : relation A) (dom : A -> Prop)","proofString":"seq_rewrite seq_eqvK.\nbasic_solver."},{"statement":"(A : Type) (r : relation A) (dom : A -> Prop) : ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘.","conclusion":"⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘ ≡ ⦗dom⦘ ⨾ r ⨾ (⦗dom⦘ ⨾ r)＊ ⨾ ⦗dom⦘","hypotheses":"(A : Type) (r : relation A) (dom : A -> Prop)","proofString":"basic_solver."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘","hypotheses":"","proofString":"rewrite sb_in_hb.\nbasic_solver 10."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘","hypotheses":"","proofString":"basic_solver 10."},{"statement":"rfe ⨾ rfe ≡ ∅₂.","conclusion":"rfe ⨾ rfe ≡ ∅₂","hypotheses":"","proofString":"rewrite (wf_rfeD WF).\ntype_solver."},{"statement":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ≡ ∅₂.","conclusion":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ≡ ∅₂","hypotheses":"","proofString":"type_solver."},{"statement":"eco ⊆ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"eco ⊆ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"arewrite (eco ≡ eco ⨾ ⦗codom_rel eco⦘) at 1 by basic_solver.\napply seq_mori; [basic_solver|].\nrewrite (eco_alt3 WF).\ncdes IC.\nrewrite (no_rf_to_init WF), (no_co_to_init WF (coherence_sc_per_loc Cint)).\nrewrite (no_fr_to_init WF (coherence_sc_per_loc Cint)).\ndo 2 rewrite <- seq_union_l.\nrewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"eco ⨾ ⦗codom_rel eco⦘ ⊆ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"eco ⨾ ⦗codom_rel eco⦘ ⊆ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"apply seq_mori; [basic_solver|].\nrewrite (eco_alt3 WF).\ncdes IC.\nrewrite (no_rf_to_init WF), (no_co_to_init WF (coherence_sc_per_loc Cint)).\nrewrite (no_fr_to_init WF (coherence_sc_per_loc Cint)).\ndo 2 rewrite <- seq_union_l.\nrewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"⦗codom_rel eco⦘ ⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel eco⦘ ⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"rewrite (eco_alt3 WF).\ncdes IC.\nrewrite (no_rf_to_init WF), (no_co_to_init WF (coherence_sc_per_loc Cint)).\nrewrite (no_fr_to_init WF (coherence_sc_per_loc Cint)).\ndo 2 rewrite <- seq_union_l.\nrewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"⦗codom_rel (rf ∪ co ∪ fr)⁺⦘ ⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel (rf ∪ co ∪ fr)⁺⦘ ⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"cdes IC.\nrewrite (no_rf_to_init WF), (no_co_to_init WF (coherence_sc_per_loc Cint)).\nrewrite (no_fr_to_init WF (coherence_sc_per_loc Cint)).\ndo 2 rewrite <- seq_union_l.\nrewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : ⦗codom_rel (rf ∪ co ∪ fr)⁺⦘ ⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel (rf ∪ co ∪ fr)⁺⦘ ⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"rewrite (no_rf_to_init WF), (no_co_to_init WF (coherence_sc_per_loc Cint)).\nrewrite (no_fr_to_init WF (coherence_sc_per_loc Cint)).\ndo 2 rewrite <- seq_union_l.\nrewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : ⦗codom_rel\n   (rf ⨾ ⦗fun x : actid => ~ Init x⦘\n    ∪ co ⨾ ⦗set_compl (fun a : actid => Init a)⦘ ∪ fr)⁺⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel\n   (rf ⨾ ⦗fun x : actid => ~ Init x⦘\n    ∪ co ⨾ ⦗set_compl (fun a : actid => Init a)⦘ ∪ fr)⁺⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"rewrite (no_fr_to_init WF (coherence_sc_per_loc Cint)).\ndo 2 rewrite <- seq_union_l.\nrewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : ⦗codom_rel\n   (rf ⨾ ⦗fun x : actid => ~ Init x⦘\n    ∪ co ⨾ ⦗set_compl (fun a : actid => Init a)⦘\n    ∪ fr ⨾ ⦗fun x : actid => ~ Init x⦘)⁺⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel\n   (rf ⨾ ⦗fun x : actid => ~ Init x⦘\n    ∪ co ⨾ ⦗set_compl (fun a : actid => Init a)⦘\n    ∪ fr ⨾ ⦗fun x : actid => ~ Init x⦘)⁺⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"do 2 rewrite <- seq_union_l.\nrewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : ⦗codom_rel ((rf ∪ co ∪ fr) ⨾ ⦗fun x : actid => ~ Init x⦘)⁺⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel ((rf ∪ co ∪ fr) ⨾ ⦗fun x : actid => ~ Init x⦘)⁺⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"rewrite inclusion_ct_seq_eqv_r.\nrewrite codom_seq.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : ⦗codom_rel ((rf ∪ co ∪ fr)⁺ ⨾ ⦗fun x : actid => ~ Init x⦘)⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel ((rf ∪ co ∪ fr)⁺ ⨾ ⦗fun x : actid => ~ Init x⦘)⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"rewrite codom_seq.\nbasic_solver."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : ⦗codom_rel ⦗fun x : actid => ~ Init x⦘⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"⦗codom_rel ⦗fun x : actid => ~ Init x⦘⦘\n⊆ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"basic_solver."},{"statement":"acyclic (sb ∪ restr_rel NA rfi ∪ restr_rel NA rfe ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ restr_rel NA rfi ∪ restr_rel NA rfe ∪ restr_rel AT eco)","hypotheses":"","proofString":"arewrite (restr_rel NA rfi ⊆ sb).\nrewrite unionK.\nassert (na_at_rels_empty: restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂).\ngeneralize DIFMODE.\nbasic_solver.\nrewrite unionA.\napply acyclic_union1; [apply Execution.sb_acyclic | |].\ncdes IC.\ncdes Cint.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty.\nrewrite (ct_of_trans (@sb_trans G)).\narewrite ((restr_rel NA rfe ∪ restr_rel AT eco)⁺ ⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺).\nrewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver.\nrewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (sb ∪ sb ∪ restr_rel NA rfe ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ sb ∪ restr_rel NA rfe ∪ restr_rel AT eco)","hypotheses":"","proofString":"rewrite unionK.\nassert (na_at_rels_empty: restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂).\ngeneralize DIFMODE.\nbasic_solver.\nrewrite unionA.\napply acyclic_union1; [apply Execution.sb_acyclic | |].\ncdes IC.\ncdes Cint.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty.\nrewrite (ct_of_trans (@sb_trans G)).\narewrite ((restr_rel NA rfe ∪ restr_rel AT eco)⁺ ⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺).\nrewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver.\nrewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (sb ∪ restr_rel NA rfe ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ restr_rel NA rfe ∪ restr_rel AT eco)","hypotheses":"","proofString":"assert (na_at_rels_empty: restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂).\ngeneralize DIFMODE.\nbasic_solver.\nrewrite unionA.\napply acyclic_union1; [apply Execution.sb_acyclic | |].\ncdes IC.\ncdes Cint.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty.\nrewrite (ct_of_trans (@sb_trans G)).\narewrite ((restr_rel NA rfe ∪ restr_rel AT eco)⁺ ⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺).\nrewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver.\nrewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂.","conclusion":"restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂","hypotheses":"","proofString":"generalize DIFMODE.\nbasic_solver."},{"statement":"AT ∩₁ NA ≡₁ ∅ -> restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂.","conclusion":"AT ∩₁ NA ≡₁ ∅ -> restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂","hypotheses":"","proofString":"basic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ∪ restr_rel NA rfe ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ restr_rel NA rfe ∪ restr_rel AT eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite unionA.\napply acyclic_union1; [apply Execution.sb_acyclic | |].\ncdes IC.\ncdes Cint.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty.\nrewrite (ct_of_trans (@sb_trans G)).\narewrite ((restr_rel NA rfe ∪ restr_rel AT eco)⁺ ⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺).\nrewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver.\nrewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ∪ (restr_rel NA rfe ∪ restr_rel AT eco)).","conclusion":"acyclic (sb ∪ (restr_rel NA rfe ∪ restr_rel AT eco))","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"apply acyclic_union1; [apply Execution.sb_acyclic | |].\ncdes IC.\ncdes Cint.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty.\nrewrite (ct_of_trans (@sb_trans G)).\narewrite ((restr_rel NA rfe ∪ restr_rel AT eco)⁺ ⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺).\nrewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver.\nrewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (restr_rel NA rfe ∪ restr_rel AT eco).","conclusion":"acyclic (restr_rel NA rfe ∪ restr_rel AT eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"cdes IC.\ncdes Cint.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : acyclic (restr_rel NA rfe ∪ restr_rel AT eco).","conclusion":"acyclic (restr_rel NA rfe ∪ restr_rel AT eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cint.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic (restr_rel NA rfe ∪ restr_rel AT eco).","conclusion":"acyclic (restr_rel NA rfe ∪ restr_rel AT eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"apply acyclic_union1.\nrewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver.\nrewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF).\nrewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic (restr_rel NA rfe).","conclusion":"acyclic (restr_rel NA rfe)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"rewrite inclusion_restr.\nrewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic rfe.","conclusion":"acyclic rfe","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"rewrite (wf_rfeD WF).\napply acyclic_disj.\ntype_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘).","conclusion":"acyclic (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"apply acyclic_disj.\ntype_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ≡ ∅₂.","conclusion":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ≡ ∅₂","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"type_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic (restr_rel AT eco).","conclusion":"acyclic (restr_rel AT eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"rewrite inclusion_restr.\nred.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF)."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic eco.","conclusion":"acyclic eco","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"red.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF)."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : irreflexive eco⁺.","conclusion":"irreflexive eco⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"rewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF)."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : irreflexive eco.","conclusion":"irreflexive eco","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"apply (eco_irr WF)."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic ((restr_rel NA rfe)⁺ ⨾ (restr_rel AT eco)⁺).","conclusion":"acyclic ((restr_rel NA rfe)⁺ ⨾ (restr_rel AT eco)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"rewrite ct_end, ct_begin, seqA.\nseq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic\n  ((restr_rel NA rfe)＊\n   ⨾ restr_rel NA rfe ⨾ restr_rel AT eco ⨾ (restr_rel AT eco)＊).","conclusion":"acyclic\n  ((restr_rel NA rfe)＊\n   ⨾ restr_rel NA rfe ⨾ restr_rel AT eco ⨾ (restr_rel AT eco)＊)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"seq_rewrite na_at_rels_empty.\nrewrite seq_false_l, seq_false_r.\napply acyclic_empty."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : acyclic ((restr_rel NA rfe)＊ ⨾ ∅₂ ⨾ (restr_rel AT eco)＊).","conclusion":"acyclic ((restr_rel NA rfe)＊ ⨾ ∅₂ ⨾ (restr_rel AT eco)＊)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"rewrite seq_false_l, seq_false_r.\napply acyclic_empty."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb⁺ ⨾ (restr_rel NA rfe ∪ restr_rel AT eco)⁺).","conclusion":"acyclic (sb⁺ ⨾ (restr_rel NA rfe ∪ restr_rel AT eco)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (ct_of_trans (@sb_trans G)).\narewrite ((restr_rel NA rfe ∪ restr_rel AT eco)⁺ ⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺).\nrewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver.\nrewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ (restr_rel NA rfe ∪ restr_rel AT eco)⁺).","conclusion":"acyclic (sb ⨾ (restr_rel NA rfe ∪ restr_rel AT eco)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite ((restr_rel NA rfe ∪ restr_rel AT eco)⁺ ⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺).\nrewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver.\nrewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (restr_rel NA rfe ∪ restr_rel AT eco)⁺\n⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺.","conclusion":"(restr_rel NA rfe ∪ restr_rel AT eco)⁺\n⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite path_union.\napply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (restr_rel NA rfe)⁺\n∪ ((restr_rel NA rfe)＊ ⨾ restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺.","conclusion":"(restr_rel NA rfe)⁺\n∪ ((restr_rel NA rfe)＊ ⨾ restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"apply union_mori; [basic_solver| ].\nrewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ((restr_rel NA rfe)＊ ⨾ restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel AT eco)⁺.","conclusion":"((restr_rel NA rfe)＊ ⨾ restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite rtE.\nrewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ((⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺.","conclusion":"((⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite seq_union_l.\nrewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco\n ∪ (restr_rel NA rfe)⁺ ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺.","conclusion":"(⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco\n ∪ (restr_rel NA rfe)⁺ ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (ct_end (restr_rel NA rfe)) at 1.\nrewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco\n ∪ ((restr_rel NA rfe)＊ ⨾ restr_rel NA rfe) ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺.","conclusion":"(⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco\n ∪ ((restr_rel NA rfe)＊ ⨾ restr_rel NA rfe) ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite seqA.\nrewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco\n ∪ (restr_rel NA rfe)＊ ⨾ restr_rel NA rfe ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺.","conclusion":"(⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco\n ∪ (restr_rel NA rfe)＊ ⨾ restr_rel NA rfe ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite na_at_rels_empty.\nrewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco ∪ (restr_rel NA rfe)＊ ⨾ ∅₂)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺.","conclusion":"(⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco ∪ (restr_rel NA rfe)＊ ⨾ ∅₂)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite !seq_false_r, union_false_r.\nrewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺.","conclusion":"(⦗fun _ : actid => True⦘ ⨾ restr_rel AT eco)⁺\n⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺) ⊆ \n(restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite seq_id_l at 1.\nrewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (restr_rel AT eco)⁺ ⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺)\n⊆ (restr_rel AT eco)⁺.","conclusion":"(restr_rel AT eco)⁺ ⨾ (⦗fun _ : actid => True⦘ ∪ (restr_rel NA rfe)⁺)\n⊆ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite seq_union_r.\nunionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (restr_rel AT eco)⁺ ⨾ ⦗fun _ : actid => True⦘\n∪ (restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)⁺ ⊆ (restr_rel AT eco)⁺.","conclusion":"(restr_rel AT eco)⁺ ⨾ ⦗fun _ : actid => True⦘\n∪ (restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)⁺ ⊆ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"unionL; [basic_solver| ].\nrewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)⁺ ⊆ (restr_rel AT eco)⁺.","conclusion":"(restr_rel AT eco)⁺ ⨾ (restr_rel NA rfe)⁺ ⊆ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite ct_end, ct_begin, seqA at 1.\nassert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (restr_rel AT eco)＊\n⨾ restr_rel AT eco ⨾ restr_rel NA rfe ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel AT eco)⁺.","conclusion":"(restr_rel AT eco)＊\n⨾ restr_rel AT eco ⨾ restr_rel NA rfe ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"assert (restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂).\ndo 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver.\nseq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂.","conclusion":"restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"do 2 rewrite restr_relE, seqA.\nseq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘ ⨾ ⦗NA⦘ ⨾ rfe ⨾ ⦗NA⦘ ≡ ∅₂.","conclusion":"⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘ ⨾ ⦗NA⦘ ⨾ rfe ⨾ ⦗NA⦘ ≡ ∅₂","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"seq_rewrite <- id_inter.\nrewrite DIFMODE.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗AT⦘ ⨾ eco ⨾ ⦗AT ∩₁ NA⦘ ⨾ rfe ⨾ ⦗NA⦘ ≡ ∅₂.","conclusion":"⦗AT⦘ ⨾ eco ⨾ ⦗AT ∩₁ NA⦘ ⨾ rfe ⨾ ⦗NA⦘ ≡ ∅₂","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite DIFMODE.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗AT⦘ ⨾ eco ⨾ ⦗∅⦘ ⨾ rfe ⨾ ⦗NA⦘ ≡ ∅₂.","conclusion":"⦗AT⦘ ⨾ eco ⨾ ⦗∅⦘ ⨾ rfe ⨾ ⦗NA⦘ ≡ ∅₂","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"basic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (H : restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂) : (restr_rel AT eco)＊\n⨾ restr_rel AT eco ⨾ restr_rel NA rfe ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel AT eco)⁺.","conclusion":"(restr_rel AT eco)＊\n⨾ restr_rel AT eco ⨾ restr_rel NA rfe ⨾ (restr_rel NA rfe)＊\n⊆ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (H : restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂)","proofString":"seq_rewrite H.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (H : restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂) : (restr_rel AT eco)＊ ⨾ ∅₂ ⨾ (restr_rel NA rfe)＊ ⊆ (restr_rel AT eco)⁺.","conclusion":"(restr_rel AT eco)＊ ⨾ ∅₂ ⨾ (restr_rel NA rfe)＊ ⊆ (restr_rel AT eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (H : restr_rel AT eco ⨾ restr_rel NA rfe ≡ ∅₂)","proofString":"basic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ((restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺)).","conclusion":"acyclic (sb ⨾ ((restr_rel NA rfe)⁺ ∪ (restr_rel AT eco)⁺))","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite seq_union_r.\napply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ (restr_rel NA rfe)⁺ ∪ sb ⨾ (restr_rel AT eco)⁺).","conclusion":"acyclic (sb ⨾ (restr_rel NA rfe)⁺ ∪ sb ⨾ (restr_rel AT eco)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"apply acyclic_union1.\nrewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic.\nrewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto.\nrewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ (restr_rel NA rfe)⁺).","conclusion":"acyclic (sb ⨾ (restr_rel NA rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_restr.\nrewrite RFE1.\napply sb_rf_acyclic."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ rfe⁺).","conclusion":"acyclic (sb ⨾ rfe⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite RFE1.\napply sb_rf_acyclic."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ rfe).","conclusion":"acyclic (sb ⨾ rfe)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"apply sb_rf_acyclic."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ (restr_rel AT eco)⁺).","conclusion":"acyclic (sb ⨾ (restr_rel AT eco)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite restr_relE.\nrewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ (⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘)⁺).","conclusion":"acyclic (sb ⨾ (⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_ct_seq_eqv_l, inclusion_seq_eqv_r.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ⦗AT⦘ ⨾ eco⁺).","conclusion":"acyclic (sb ⨾ ⦗AT⦘ ⨾ eco⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (ct_of_trans (eco_trans WF)).\nrewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ⦗AT⦘ ⨾ eco).","conclusion":"acyclic (sb ⨾ ⦗AT⦘ ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (wf_ecoD WF).\nseq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘).","conclusion":"acyclic (sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"seq_rewrite <- id_inter.\nrewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ⦗AT ∩₁ RW⦘ ⨾ eco ⨾ ⦗RW⦘).","conclusion":"acyclic (sb ⨾ ⦗AT ∩₁ RW⦘ ⨾ eco ⨾ ⦗RW⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA with (r3:=⦗RW⦘), <- seqA.\nrewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗AT ∩₁ RW⦘ ⨾ eco) ⨾ ⦗RW⦘).","conclusion":"acyclic ((sb ⨾ ⦗AT ∩₁ RW⦘ ⨾ eco) ⨾ ⦗RW⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite acyclic_rotl.\nrewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗AT ∩₁ RW⦘ ⨾ eco).","conclusion":"acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗AT ∩₁ RW⦘ ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite set_interC.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco).","conclusion":"acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco).","conclusion":"acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"seq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘ ⨾ eco).","conclusion":"acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘ ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ (fun x : actid => ~ Init x)⦘ ⨾ eco).","conclusion":"acyclic (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ (fun x : actid => ~ Init x)⦘ ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"sin_rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  ((⦗RW⦘\n    ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘)\n   ⨾ eco).","conclusion":"acyclic\n  ((⦗RW⦘\n    ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘)\n   ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_seq_eqv_r,  inclusion_seq_eqv_l.\nrewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb) ⨾ eco).","conclusion":"acyclic ((sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb) ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite !seqA.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco).","conclusion":"acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- (seq_eqvK (F ∩₁ Sc)), seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco).","conclusion":"acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\napply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco).","conclusion":"acyclic ((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"apply acyclic_rotl.\nrewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite !seqA.\nrewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (psc G).","conclusion":"acyclic (psc G)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ar.","conclusion":"acyclic ar","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"cdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : acyclic ar.","conclusion":"acyclic ar","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : acyclic ar.","conclusion":"acyclic ar","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"auto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ (restr_rel NA rfe)⁺)⁺ ⨾ (sb ⨾ (restr_rel AT eco)⁺)⁺).","conclusion":"acyclic ((sb ⨾ (restr_rel NA rfe)⁺)⁺ ⨾ (sb ⨾ (restr_rel AT eco)⁺)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_restr, RFE1.\nrewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ rfe)⁺ ⨾ (sb ⨾ (restr_rel AT eco)⁺)⁺).","conclusion":"acyclic ((sb ⨾ rfe)⁺ ⨾ (sb ⨾ (restr_rel AT eco)⁺)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite restr_relE, inclusion_seq_eqv_r.\nrewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ rfe)⁺ ⨾ (sb ⨾ (⦗AT⦘ ⨾ eco)⁺)⁺).","conclusion":"acyclic ((sb ⨾ rfe)⁺ ⨾ (sb ⨾ (⦗AT⦘ ⨾ eco)⁺)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite acyclic_rotl.\nrewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ (⦗AT⦘ ⨾ eco)⁺)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic ((sb ⨾ (⦗AT⦘ ⨾ eco)⁺)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_ct_seq_eqv_l.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco⁺)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco⁺)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (ct_of_trans (eco_trans WF)).\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺).","conclusion":"acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite (R ⊆₁ RW) at 1.\nrewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe ⨾ ⦗RW⦘)⁺).","conclusion":"acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe ⨾ ⦗RW⦘)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA with (r3:=⦗RW⦘).\nrewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ ((sb ⨾ rfe) ⨾ ⦗RW⦘)⁺).","conclusion":"acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ ((sb ⨾ rfe) ⨾ ⦗RW⦘)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (@inclusion_ct_seq_eqv_r _ RW _).\nrewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺ ⨾ ⦗RW⦘).","conclusion":"acyclic ((sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺ ⨾ ⦗RW⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA, acyclic_rotl.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite (⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺).\nrewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver.\nrewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ eco)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (wf_ecoD WF) at 1.\nrewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- !seqA.\nrewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ ((((sb ⨾ ⦗AT⦘) ⨾ ⦗RW⦘) ⨾ eco) ⨾ ⦗RW⦘)⁺\n⊆ (((⦗RW⦘ ⨾ sb) ⨾ ⦗RW ∩₁ AT⦘) ⨾ eco)⁺.","conclusion":"⦗RW⦘ ⨾ ((((sb ⨾ ⦗AT⦘) ⨾ ⦗RW⦘) ⨾ eco) ⨾ ⦗RW⦘)⁺\n⊆ (((⦗RW⦘ ⨾ sb) ⨾ ⦗RW ∩₁ AT⦘) ⨾ eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite ct_dom_start, !seqA.\napply clos_trans_mori.\nhahn_frame.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗RW⦘ ⨾ sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"apply clos_trans_mori.\nhahn_frame.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco.","conclusion":"⦗RW⦘ ⨾ sb ⨾ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⊆ ⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"hahn_frame.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ eco.","conclusion":"⦗AT⦘ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ eco","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"basic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic ((⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite no_sb_to_init, seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺\n   ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ eco)⁺\n   ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"seq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘ ⨾ eco)⁺\n   ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘ ⨾ eco)⁺\n   ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ (fun x : actid => ~ Init x)⦘ ⨾ eco)⁺\n   ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺).","conclusion":"acyclic\n  ((⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ (fun x : actid => ~ Init x)⦘ ⨾ eco)⁺\n   ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"sin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  (((⦗RW⦘\n     ⨾ sb\n       ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘)\n    ⨾ eco)⁺ ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺).","conclusion":"acyclic\n  (((⦗RW⦘\n     ⨾ sb\n       ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘)\n    ⨾ eco)⁺ ⨾ ((sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"do 2 rewrite inclusion_seq_eqv_r.\nrewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb) ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic (((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb) ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- (seq_eqvK (F ∩₁ Sc)), !seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((⦗RW⦘ ⨾ (sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic ((⦗RW⦘ ⨾ (sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA with (r1:=⦗RW⦘).\nrewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic (((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_seq_eqv_l.\nrewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic (((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco)⁺ ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite ct_rotl, !seqA.\nrewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊\n       ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊\n       ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite sb_eco_sb_psc.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA.\nrewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺).","conclusion":"acyclic ((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite acyclic_rotl.\nrewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic (((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite !seqA.\narewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic ((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite (eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺).\nrewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nrewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"eco ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (dom_r (wf_ecoD WF)) at 1.\nrewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (eco ⨾ ⦗RW⦘) ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"(eco ⨾ ⦗RW⦘) ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite !seqA.\nhahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : eco ⨾ ⦗RW⦘ ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"eco ⨾ ⦗RW⦘ ⨾ (sb ⨾ rfe)⁺ ⊆ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"hahn_frame_l.\nrewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ (sb ⨾ rfe)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ rfe)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite (dom_r (wf_rfeD WF)) at 1.\narewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite (R ⊆₁ RW) at 2.\nrewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ (sb ⨾ rfe ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ rfe ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- seqA.\nrewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : ⦗RW⦘ ⨾ ((sb ⨾ rfe) ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"⦗RW⦘ ⨾ ((sb ⨾ rfe) ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗RW⦘ ⨾ (sb ⨾ rfe) ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"(⦗RW⦘ ⨾ (sb ⨾ rfe) ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : (⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"basic_solver."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  ((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic\n  ((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- (seq_eqvK (F ∩₁ Sc)) at 2.\nrewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  ((psc G)＊\n   ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic\n  ((psc G)＊\n   ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite inclusion_t_rt.\nsin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic\n  ((psc G)＊\n   ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic\n  ((psc G)＊\n   ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"sin_rewrite sb_rfe_crt_hb.\narewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic ((psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⊆ psc G).\nrewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ((psc G)＊ ⨾ psc G).","conclusion":"acyclic ((psc G)＊ ⨾ psc G)","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite <- ct_end.\narewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic (psc G)⁺.","conclusion":"acyclic (psc G)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"arewrite (psc G ⊆ ar).\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : acyclic ar⁺.","conclusion":"acyclic ar⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"red.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : irreflexive (ar⁺)⁺.","conclusion":"irreflexive (ar⁺)⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"rewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂)","proofString":"cdes IC.\ncdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cext.\nauto."},{"statement":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(na_at_rels_empty : restr_rel NA rfe ⨾ restr_rel AT eco ≡ ∅₂) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"auto."},{"statement":"acyclic (sb ∪ rf ∪ restr_rel AT (coe ∪ fre G)).","conclusion":"acyclic (sb ∪ rf ∪ restr_rel AT (coe ∪ fre G))","hypotheses":"","proofString":"arewrite (rf ⊆ restr_rel NA rf ∪ restr_rel AT rf).\nrewrite (wf_rfD WF) at 1.\narewrite (R ⊆₁ RW).\narewrite (W ⊆₁ RW) at 1.\nrewrite sl_mode; [basic_solver | apply (wf_rfl WF)].\ndo 2 rewrite unionA.\nrewrite <- restr_union.\narewrite ((rf ∪ (coe ∪ fre G)) ⊆ eco).\nunfold Execution_eco.eco, Execution.rf, Execution.coe, Execution.fre.\nbasic_solver 10.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"rf ⊆ restr_rel NA rf ∪ restr_rel AT rf.","conclusion":"rf ⊆ restr_rel NA rf ∪ restr_rel AT rf","hypotheses":"","proofString":"rewrite (wf_rfD WF) at 1.\narewrite (R ⊆₁ RW).\narewrite (W ⊆₁ RW) at 1.\nrewrite sl_mode; [basic_solver | apply (wf_rfl WF)]."},{"statement":"⦗W⦘ ⨾ rf ⨾ ⦗R⦘ ⊆ restr_rel NA rf ∪ restr_rel AT rf.","conclusion":"⦗W⦘ ⨾ rf ⨾ ⦗R⦘ ⊆ restr_rel NA rf ∪ restr_rel AT rf","hypotheses":"","proofString":"arewrite (R ⊆₁ RW).\narewrite (W ⊆₁ RW) at 1.\nrewrite sl_mode; [basic_solver | apply (wf_rfl WF)]."},{"statement":"⦗W⦘ ⨾ rf ⨾ ⦗RW⦘ ⊆ restr_rel NA rf ∪ restr_rel AT rf.","conclusion":"⦗W⦘ ⨾ rf ⨾ ⦗RW⦘ ⊆ restr_rel NA rf ∪ restr_rel AT rf","hypotheses":"","proofString":"arewrite (W ⊆₁ RW) at 1.\nrewrite sl_mode; [basic_solver | apply (wf_rfl WF)]."},{"statement":"⦗RW⦘ ⨾ rf ⨾ ⦗RW⦘ ⊆ restr_rel NA rf ∪ restr_rel AT rf.","conclusion":"⦗RW⦘ ⨾ rf ⨾ ⦗RW⦘ ⊆ restr_rel NA rf ∪ restr_rel AT rf","hypotheses":"","proofString":"rewrite sl_mode; [basic_solver | apply (wf_rfl WF)]."},{"statement":"acyclic\n  (sb ∪ (restr_rel NA rf ∪ restr_rel AT rf) ∪ restr_rel AT (coe ∪ fre G)).","conclusion":"acyclic\n  (sb ∪ (restr_rel NA rf ∪ restr_rel AT rf) ∪ restr_rel AT (coe ∪ fre G))","hypotheses":"","proofString":"do 2 rewrite unionA.\nrewrite <- restr_union.\narewrite ((rf ∪ (coe ∪ fre G)) ⊆ eco).\nunfold Execution_eco.eco, Execution.rf, Execution.coe, Execution.fre.\nbasic_solver 10.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic\n  (sb ∪ (restr_rel NA rf ∪ (restr_rel AT rf ∪ restr_rel AT (coe ∪ fre G)))).","conclusion":"acyclic\n  (sb ∪ (restr_rel NA rf ∪ (restr_rel AT rf ∪ restr_rel AT (coe ∪ fre G))))","hypotheses":"","proofString":"rewrite <- restr_union.\narewrite ((rf ∪ (coe ∪ fre G)) ⊆ eco).\nunfold Execution_eco.eco, Execution.rf, Execution.coe, Execution.fre.\nbasic_solver 10.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT (rf ∪ (coe ∪ fre G)))).","conclusion":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT (rf ∪ (coe ∪ fre G))))","hypotheses":"","proofString":"arewrite ((rf ∪ (coe ∪ fre G)) ⊆ eco).\nunfold Execution_eco.eco, Execution.rf, Execution.coe, Execution.fre.\nbasic_solver 10.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"rf ∪ (coe ∪ fre G) ⊆ eco.","conclusion":"rf ∪ (coe ∪ fre G) ⊆ eco","hypotheses":"","proofString":"unfold Execution_eco.eco, Execution.rf, Execution.coe, Execution.fre.\nbasic_solver 10."},{"statement":"(let (_, _, _, _, _, _, _, _, rf, _) := G in rf) ∪ (co \\ sb ∪ fr \\ sb)\n⊆ (let (_, _, _, _, _, _, _, _, rf, _) := G in rf)\n  ∪ co ⨾ (let (_, _, _, _, _, _, _, _, rf, _) := G in rf)^?\n  ∪ fr ⨾ (let (_, _, _, _, _, _, _, _, rf, _) := G in rf)^?.","conclusion":"(let (_, _, _, _, _, _, _, _, rf, _) := G in rf) ∪ (co \\ sb ∪ fr \\ sb)\n⊆ (let (_, _, _, _, _, _, _, _, rf, _) := G in rf)\n  ∪ co ⨾ (let (_, _, _, _, _, _, _, _, rf, _) := G in rf)^?\n  ∪ fr ⨾ (let (_, _, _, _, _, _, _, _, rf, _) := G in rf)^?","hypotheses":"","proofString":"basic_solver 10."},{"statement":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT eco)).","conclusion":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT eco))","hypotheses":"","proofString":"rewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ restr_rel NA rf ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ restr_rel NA rf ∪ restr_rel AT eco)","hypotheses":"","proofString":"apply acyclic_sb_rf_eco."},{"statement":"(T M : actid -> Prop) (TF : T ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘)) (NIT : T ∩₁ (fun a : actid => Init a) ≡₁ ∅) : forall x y : actid,\nT x /\\ sb x y /\\ (is_r lab y \\/ is_w lab y) ->\nT x /\\\n(exists z : actid,\n   sb x z /\\ (is_f lab z /\\ M z) /\\ sb z y /\\ (is_r lab y \\/ is_w lab y)).","conclusion":"forall x y : actid,\nT x /\\ sb x y /\\ (is_r lab y \\/ is_w lab y) ->\nT x /\\\n(exists z : actid,\n   sb x z /\\ (is_f lab z /\\ M z) /\\ sb z y /\\ (is_r lab y \\/ is_w lab y))","hypotheses":"(T M : actid -> Prop) (TF : T ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘)) (NIT : T ∩₁ (fun a : actid => Init a) ≡₁ ∅)","proofString":"intros a e [Ta [SBae RWe]].\nsplit; auto.\nred in TF.\nspecialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_r in HH.\ndestruct HH as [[SBaf IMMfw] [Ff Mf]].\nexists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (TF : T ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘)) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (a e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) : T a /\\\n(exists z : actid,\n   sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e)).","conclusion":"T a /\\\n(exists z : actid,\n   sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e))","hypotheses":"(T M : actid -> Prop) (TF : T ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘)) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (a e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e)","proofString":"split; auto.\nred in TF.\nspecialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_r in HH.\ndestruct HH as [[SBaf IMMfw] [Ff Mf]].\nexists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (TF : T ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘)) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (a e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) : exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (TF : T ⊆₁ dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘)) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (a e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e)","proofString":"red in TF.\nspecialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_r in HH.\ndestruct HH as [[SBaf IMMfw] [Ff Mf]].\nexists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (TF : forall x : actid, T x -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) x) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (a e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) : exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (TF : forall x : actid, T x -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) x) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (a e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e)","proofString":"specialize (@TF a).\npose proof (TF Ta) as [f HH].\napply seq_eqv_r in HH.\ndestruct HH as [[SBaf IMMfw] [Ff Mf]].\nexists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) : exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e)","proofString":"pose proof (TF Ta) as [f HH].\napply seq_eqv_r in HH.\ndestruct HH as [[SBaf IMMfw] [Ff Mf]].\nexists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (HH : (immediate sb ⨾ ⦗F ∩₁ M⦘) a f) : exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (HH : (immediate sb ⨾ ⦗F ∩₁ M⦘) a f)","proofString":"apply seq_eqv_r in HH.\ndestruct HH as [[SBaf IMMfw] [Ff Mf]].\nexists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (HH : immediate sb a f /\\ (F ∩₁ M) f) : exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (HH : immediate sb a f /\\ (F ∩₁ M) f)","proofString":"destruct HH as [[SBaf IMMfw] [Ff Mf]].\nexists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"exists z : actid,\n  sb a z /\\ (is_f lab z /\\ M z) /\\ sb z e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"exists f.\nassert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"assert (NIa: ~is_init a).\nred in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto.\nassert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : ~ Init a.","conclusion":"~ Init a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"red in NIT.\ndestruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ⊆₁ ∅ /\\\n∅ ⊆₁ T ∩₁ (fun a0 : actid => Init a0)) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : ~ Init a.","conclusion":"~ Init a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ⊆₁ ∅ /\\\n∅ ⊆₁ T ∩₁ (fun a0 : actid => Init a0)) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"destruct NIT as [NIT _].\nred in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ⊆₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : ~ Init a.","conclusion":"~ Init a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ⊆₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"red in NIT.\nspecialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : forall x : actid, (T ∩₁ (fun a0 : actid => Init a0)) x -> ∅ x) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : ~ Init a.","conclusion":"~ Init a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : forall x : actid, (T ∩₁ (fun a0 : actid => Init a0)) x -> ∅ x) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"specialize (NIT a).\nred.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : (T ∩₁ (fun a0 : actid => Init a0)) a -> ∅ a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : ~ Init a.","conclusion":"~ Init a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : (T ∩₁ (fun a0 : actid => Init a0)) a -> ∅ a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"red.\nintros contra.\ndestruct NIT.\nred.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : (T ∩₁ (fun a0 : actid => Init a0)) a -> ∅ a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) : Init a -> False.","conclusion":"Init a -> False","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : (T ∩₁ (fun a0 : actid => Init a0)) a -> ∅ a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f)","proofString":"intros contra.\ndestruct NIT.\nred.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : (T ∩₁ (fun a0 : actid => Init a0)) a -> ∅ a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (contra : Init a) : False.","conclusion":"False","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : (T ∩₁ (fun a0 : actid => Init a0)) a -> ∅ a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (contra : Init a)","proofString":"destruct NIT.\nred.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (contra : Init a) : (T ∩₁ (fun a0 : actid => Init a0)) a.","conclusion":"(T ∩₁ (fun a0 : actid => Init a0)) a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (contra : Init a)","proofString":"red.\nsplit; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (contra : Init a) : T a /\\ Init a.","conclusion":"T a /\\ Init a","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (contra : Init a)","proofString":"split; auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) : sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a)","proofString":"assert (NEQef: e <> f).\ndestruct RWe; red; intros; type_solver.\nassert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) : e <> f.","conclusion":"e <> f","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a)","proofString":"destruct RWe; red; intros; type_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) : sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f)","proofString":"assert (SBfe: sb f e).\npose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto.\nbasic_solver."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) : sb f e.","conclusion":"sb f e","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f)","proofString":"pose (sb_semi_total_l WF NIa NEQef SBae SBaf) as SB2.\ndestruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (SB2 : sb e f \\/ sb f e) : sb f e.","conclusion":"sb f e","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (SB2 : sb e f \\/ sb f e)","proofString":"destruct SB2; auto.\nexfalso.\nspecialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (H : sb e f) : sb f e.","conclusion":"sb f e","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (H : sb e f)","proofString":"exfalso.\nspecialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (H : sb e f) : False.","conclusion":"False","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (H : sb e f)","proofString":"specialize (IMMfw e).\nauto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : sb a e -> sb e f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (H : sb e f) : False.","conclusion":"False","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : sb a e -> sb e f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (H : sb e f)","proofString":"auto."},{"statement":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (SBfe : sb f e) : sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e).","conclusion":"sb a f /\\ (is_f lab f /\\ M f) /\\ sb f e /\\ (is_r lab e \\/ is_w lab e)","hypotheses":"(T M : actid -> Prop) (a : actid) (TF : T a -> dom_rel (immediate sb ⨾ ⦗F ∩₁ M⦘) a) (NIT : T ∩₁ (fun a0 : actid => Init a0) ≡₁ ∅) (e : actid) (Ta : T a) (SBae : sb a e) (RWe : is_r lab e \\/ is_w lab e) (f : actid) (SBaf : sb a f) (IMMfw : forall c : actid, sb a c -> sb c f -> False) (Ff : is_f lab f) (Mf : M f) (NIa : ~ Init a) (NEQef : e <> f) (SBfe : sb f e)","proofString":"basic_solver."},{"statement":"(A : Type) (r : relation A) : acyclic r <-> irreflexive r⁺.","conclusion":"acyclic r <-> irreflexive r⁺","hypotheses":"(A : Type) (r : relation A)","proofString":"basic_solver."},{"statement":"ae ⊆ eco.","conclusion":"ae ⊆ eco","hypotheses":"","proofString":"unfold Execution_eco.eco, ae.\nrewrite inclusion_seq_eqv_l, inclusion_seq_eqv_r.\nunfold Execution.rfe.\nbasic_solver 10."},{"statement":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?","hypotheses":"","proofString":"rewrite inclusion_seq_eqv_l, inclusion_seq_eqv_r.\nunfold Execution.rfe.\nbasic_solver 10."},{"statement":"rfe ∪ co ⊆ rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?.","conclusion":"rfe ∪ co ⊆ rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?","hypotheses":"","proofString":"unfold Execution.rfe.\nbasic_solver 10."},{"statement":"rf \\ sb ∪ co ⊆ rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?.","conclusion":"rf \\ sb ∪ co ⊆ rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?","hypotheses":"","proofString":"basic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (ae⁺ ⨾ eco).","conclusion":"irreflexive (ae⁺ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite ae_in_eco.\nrewrite ct_unit.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF)."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (eco⁺ ⨾ eco).","conclusion":"irreflexive (eco⁺ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite ct_unit.\nrewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF)."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive eco⁺.","conclusion":"irreflexive eco⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (ct_of_trans (eco_trans WF)).\napply (eco_irr WF)."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive eco.","conclusion":"irreflexive eco","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply (eco_irr WF)."},{"statement":"(ae_in_eco : ae ⊆ eco) : eco ⨾ ae＊ ⊆ eco.","conclusion":"eco ⨾ ae＊ ⊆ eco","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite ae_in_eco.\nrewrite <- ct_begin.\napply (ct_of_trans (eco_trans WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : eco ⨾ eco＊ ⊆ eco.","conclusion":"eco ⨾ eco＊ ⊆ eco","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite <- ct_begin.\napply (ct_of_trans (eco_trans WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : eco⁺ ⊆ eco.","conclusion":"eco⁺ ⊆ eco","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply (ct_of_trans (eco_trans WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : sb ⨾ ae⁺ ⊆ sb ⨾ ae⁺.","conclusion":"sb ⨾ ae⁺ ⊆ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"basic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco ∪ sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco).","conclusion":"irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco ∪ sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite unionA.\napply irreflexive_union.\nsplit.\narewrite (ae ⊆ ⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘).\nunfold ae, Execution_eco.eco, Execution.rfe.\nbasic_solver 10.\nrewrite <- restr_relE.\nrewrite (ct_of_trans (transitive_restr (eco_trans WF))).\nassert (eco_sl: eco ⊆ same_loc).\nrewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab)).\nrewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco.\nrewrite (ct_of_trans (@sb_trans G)).\napply irreflexive_union.\nsplit.\nrewrite sb_in_hb.\ncdes IC.\ncdes Cint.\nauto.\nrewrite (dom_r (wf_ecoD WF)), <- seqA.\nrewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco ∪ (sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco)).","conclusion":"irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco ∪ (sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco))","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply irreflexive_union.\nsplit.\narewrite (ae ⊆ ⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘).\nunfold ae, Execution_eco.eco, Execution.rfe.\nbasic_solver 10.\nrewrite <- restr_relE.\nrewrite (ct_of_trans (transitive_restr (eco_trans WF))).\nassert (eco_sl: eco ⊆ same_loc).\nrewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab)).\nrewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco.\nrewrite (ct_of_trans (@sb_trans G)).\napply irreflexive_union.\nsplit.\nrewrite sb_in_hb.\ncdes IC.\ncdes Cint.\nauto.\nrewrite (dom_r (wf_ecoD WF)), <- seqA.\nrewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco) /\\\nirreflexive (sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco).","conclusion":"irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco) /\\\nirreflexive (sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"split.\narewrite (ae ⊆ ⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘).\nunfold ae, Execution_eco.eco, Execution.rfe.\nbasic_solver 10.\nrewrite <- restr_relE.\nrewrite (ct_of_trans (transitive_restr (eco_trans WF))).\nassert (eco_sl: eco ⊆ same_loc).\nrewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab)).\nrewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco.\nrewrite (ct_of_trans (@sb_trans G)).\napply irreflexive_union.\nsplit.\nrewrite sb_in_hb.\ncdes IC.\ncdes Cint.\nauto.\nrewrite (dom_r (wf_ecoD WF)), <- seqA.\nrewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco).","conclusion":"irreflexive ((sb ⨾ ae⁺)⁺ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"arewrite (ae ⊆ ⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘).\nunfold ae, Execution_eco.eco, Execution.rfe.\nbasic_solver 10.\nrewrite <- restr_relE.\nrewrite (ct_of_trans (transitive_restr (eco_trans WF))).\nassert (eco_sl: eco ⊆ same_loc).\nrewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab)).\nrewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) : ae ⊆ ⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘.","conclusion":"ae ⊆ ⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"unfold ae, Execution_eco.eco, Execution.rfe.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rf \\ sb ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗AT⦘ ⨾ (rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?) ⨾ ⦗AT⦘.","conclusion":"⦗AT⦘ ⨾ (rf \\ sb ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗AT⦘ ⨾ (rf ∪ co ⨾ rf^? ∪ fr ⨾ rf^?) ⨾ ⦗AT⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"basic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((sb ⨾ (⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘)⁺)⁺ ⨾ eco).","conclusion":"irreflexive ((sb ⨾ (⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘)⁺)⁺ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite <- restr_relE.\nrewrite (ct_of_trans (transitive_restr (eco_trans WF))).\nassert (eco_sl: eco ⊆ same_loc).\nrewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab)).\nrewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((sb ⨾ (restr_rel AT eco)⁺)⁺ ⨾ eco).","conclusion":"irreflexive ((sb ⨾ (restr_rel AT eco)⁺)⁺ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (ct_of_trans (transitive_restr (eco_trans WF))).\nassert (eco_sl: eco ⊆ same_loc).\nrewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab)).\nrewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ eco).","conclusion":"irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"assert (eco_sl: eco ⊆ same_loc).\nrewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab)).\nrewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) : eco ⊆ same_loc.","conclusion":"eco ⊆ same_loc","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (eco_alt3 WF).\nrewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab))."},{"statement":"(ae_in_eco : ae ⊆ eco) : (rf ∪ co ∪ fr)⁺ ⊆ same_loc.","conclusion":"(rf ∪ co ∪ fr)⁺ ⊆ same_loc","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (wf_rfl WF), (wf_col WF), (wf_frl WF).\ndo 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab))."},{"statement":"(ae_in_eco : ae ⊆ eco) : (same_loc ∪ same_loc ∪ same_loc)⁺ ⊆ same_loc.","conclusion":"(same_loc ∪ same_loc ∪ same_loc)⁺ ⊆ same_loc","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"do 2 rewrite unionK.\napply (ct_of_trans (@same_loc_trans _ lab))."},{"statement":"(ae_in_eco : ae ⊆ eco) : same_loc⁺ ⊆ same_loc.","conclusion":"same_loc⁺ ⊆ same_loc","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply (ct_of_trans (@same_loc_trans _ lab))."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ eco).","conclusion":"irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite (wf_ecoD WF) at 2.\nrewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘).","conclusion":"irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite (sl_mode eco_sl).\nrewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive\n  ((sb ⨾ restr_rel AT eco)⁺ ⨾ (restr_rel NA eco ∪ restr_rel AT eco)).","conclusion":"irreflexive\n  ((sb ⨾ restr_rel AT eco)⁺ ⨾ (restr_rel NA eco ∪ restr_rel AT eco))","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite seq_union_r.\napply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive\n  ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel NA eco\n   ∪ (sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel AT eco).","conclusion":"irreflexive\n  ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel NA eco\n   ∪ (sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"apply irreflexive_union.\nsplit.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel NA eco) /\\\nirreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel AT eco).","conclusion":"irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel NA eco) /\\\nirreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"split.\nrewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver.\nrewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel NA eco).","conclusion":"irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel NA eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite ct_end, seqA, seqA.\narewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive\n  ((sb ⨾ restr_rel AT eco)＊ ⨾ sb ⨾ restr_rel AT eco ⨾ restr_rel NA eco).","conclusion":"irreflexive\n  ((sb ⨾ restr_rel AT eco)＊ ⨾ sb ⨾ restr_rel AT eco ⨾ restr_rel NA eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"arewrite (restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂).\ndo 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver.\nrewrite !seq_false_r.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂.","conclusion":"restr_rel AT eco ⨾ restr_rel NA eco ⊆ ∅₂","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"do 2 rewrite restr_relE.\ngeneralize DIFMODE.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : (⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘) ⨾ ⦗NA⦘ ⨾ eco ⨾ ⦗NA⦘ ⊆ ∅₂.","conclusion":"(⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘) ⨾ ⦗NA⦘ ⨾ eco ⨾ ⦗NA⦘ ⊆ ∅₂","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"generalize DIFMODE.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : AT ∩₁ NA ≡₁ ∅ -> (⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘) ⨾ ⦗NA⦘ ⨾ eco ⨾ ⦗NA⦘ ⊆ ∅₂.","conclusion":"AT ∩₁ NA ≡₁ ∅ -> (⦗AT⦘ ⨾ eco ⨾ ⦗AT⦘) ⨾ ⦗NA⦘ ⨾ eco ⨾ ⦗NA⦘ ⊆ ∅₂","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"basic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive ((sb ⨾ restr_rel AT eco)＊ ⨾ sb ⨾ ∅₂).","conclusion":"irreflexive ((sb ⨾ restr_rel AT eco)＊ ⨾ sb ⨾ ∅₂)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite !seq_false_r.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel AT eco).","conclusion":"irreflexive ((sb ⨾ restr_rel AT eco)⁺ ⨾ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite ct_rotl, !seqA.\nrewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive\n  (sb ⨾ (restr_rel AT eco ⨾ sb)＊ ⨾ restr_rel AT eco ⨾ restr_rel AT eco).","conclusion":"irreflexive\n  (sb ⨾ (restr_rel AT eco ⨾ sb)＊ ⨾ restr_rel AT eco ⨾ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite (rewrite_trans (transitive_restr (eco_trans WF))).\nrewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive (sb ⨾ (restr_rel AT eco ⨾ sb)＊ ⨾ restr_rel AT eco).","conclusion":"irreflexive (sb ⨾ (restr_rel AT eco ⨾ sb)＊ ⨾ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite <- ct_rotl.\nrewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : irreflexive (sb ⨾ restr_rel AT eco)⁺.","conclusion":"irreflexive (sb ⨾ restr_rel AT eco)⁺","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"rewrite <- ac_irr.\napply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : acyclic (sb ⨾ restr_rel AT eco).","conclusion":"acyclic (sb ⨾ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"apply acyclic_seq_from_union.\narewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : acyclic (sb ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"arewrite (sb ∪ restr_rel AT eco ⊆ sb ∪ restr_rel NA rf ∪ restr_rel AT eco) by basic_solver 10.\napply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc) : acyclic (sb ∪ restr_rel NA rf ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ restr_rel NA rf ∪ restr_rel AT eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (eco_sl : eco ⊆ same_loc)","proofString":"apply acyclic_sb_rf_eco."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco).","conclusion":"irreflexive (sb⁺ ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb⁺) ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (ct_of_trans (@sb_trans G)).\napply irreflexive_union.\nsplit.\nrewrite sb_in_hb.\ncdes IC.\ncdes Cint.\nauto.\nrewrite (dom_r (wf_ecoD WF)), <- seqA.\nrewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (sb ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco).","conclusion":"irreflexive (sb ⨾ eco ∪ ((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply irreflexive_union.\nsplit.\nrewrite sb_in_hb.\ncdes IC.\ncdes Cint.\nauto.\nrewrite (dom_r (wf_ecoD WF)), <- seqA.\nrewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (sb ⨾ eco) /\\ irreflexive (((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco).","conclusion":"irreflexive (sb ⨾ eco) /\\ irreflexive (((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"split.\nrewrite sb_in_hb.\ncdes IC.\ncdes Cint.\nauto.\nrewrite (dom_r (wf_ecoD WF)), <- seqA.\nrewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (sb ⨾ eco).","conclusion":"irreflexive (sb ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite sb_in_hb.\ncdes IC.\ncdes Cint.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (hb ⨾ eco).","conclusion":"irreflexive (hb ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"cdes IC.\ncdes Cint.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : irreflexive (hb ⨾ eco).","conclusion":"irreflexive (hb ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cint.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco)) : irreflexive (hb ⨾ eco).","conclusion":"irreflexive (hb ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cint0 : irreflexive (hb ⨾ eco))","proofString":"auto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco).","conclusion":"irreflexive (((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (dom_r (wf_ecoD WF)), <- seqA.\nrewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive ((((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco) ⨾ ⦗RW⦘).","conclusion":"irreflexive ((((sb ⨾ ae⁺)⁺ ⨾ sb) ⨾ eco) ⨾ ⦗RW⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite irreflexive_seqC, seqA.\narewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⨾ sb ⨾ eco).","conclusion":"irreflexive (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⨾ sb ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"arewrite (⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆  sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)^* ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺).\narewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10.\narewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ ae⁺)⁺ ⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"arewrite (ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘) at 1.\nrewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver.\ndo 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘.","conclusion":"ae⁺ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite <- inclusion_ct_seq_eqv_r, <- inclusion_ct_seq_eqv_l.\napply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ae⁺ ⊆ (⦗RW ∩₁ AT⦘ ⨾ ae ⨾ ⦗RW⦘)⁺.","conclusion":"ae⁺ ⊆ (⦗RW ∩₁ AT⦘ ⨾ ae ⨾ ⦗RW⦘)⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply clos_trans_mori.\nunfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ae ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae ⨾ ⦗RW⦘.","conclusion":"ae ⊆ ⦗RW ∩₁ AT⦘ ⨾ ae ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"unfold ae.\nrewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ (⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘) ⨾ ⦗RW⦘.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ (⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘) ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite !seqA.\nrewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite id_inter, seqA.\nseq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW⦘ ⨾ ⦗AT⦘ ⨾ ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW⦘ ⨾ ⦗AT⦘ ⨾ ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"seq_rewrite seq_eqvK.\nseq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW⦘ ⨾ ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗RW⦘ ⨾ ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"seq_rewrite (seq_eqvC (RW) (AT)).\nrewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ (⦗AT⦘ ⨾ ⦗RW⦘) ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ (⦗AT⦘ ⨾ ⦗RW⦘) ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite seqA.\nrewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (seq_eqvC (AT) (RW)).\nhahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗RW⦘ ⨾ ⦗AT⦘.","conclusion":"⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘ ⊆ ⦗AT⦘ ⨾ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗RW⦘ ⨾ ⦗AT⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"hahn_frame.\nrewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : rfe ∪ co ⊆ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗RW⦘.","conclusion":"rfe ∪ co ⊆ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite ((wf_rfeD WF)), ((wf_coD WF)) at 1.\nbasic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ∪ ⦗W⦘ ⨾ co ⨾ ⦗W⦘ ⊆ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗RW⦘.","conclusion":"⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ∪ ⦗W⦘ ⨾ co ⨾ ⦗W⦘ ⊆ ⦗RW⦘ ⨾ (rfe ∪ co) ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"basic_solver."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗RW⦘ ⨾ (sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"do 2 rewrite <- seqA.\nrewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗RW⦘ ⨾ (((sb ⨾ ⦗RW ∩₁ AT⦘) ⨾ ae⁺) ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"⦗RW⦘ ⨾ (((sb ⨾ ⦗RW ∩₁ AT⦘) ⨾ ae⁺) ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite ct_dom_start, seqA, seqA.\nrewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite no_sb_to_init at 1.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗RW⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(⦗RW⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite seqA.\nseq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗RW⦘ ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"seq_rewrite <- id_inter.\nrewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite set_interC.\nsin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ (fun x : actid => ~ Init x)⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ (fun x : actid => ~ Init x)⦘ ⨾ ae⁺ ⨾ ⦗RW⦘)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"sin_rewrite (sb_f_helper sb_f_at).\ndo 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ((⦗RW⦘\n  ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘)\n ⨾ ae⁺ ⨾ ⦗RW⦘)⁺ ⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"((⦗RW⦘\n  ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘)\n ⨾ ae⁺ ⨾ ⦗RW⦘)⁺ ⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"do 2 rewrite inclusion_seq_eqv_r.\nrewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb) ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"((⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb) ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite !seqA.\nrewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite inclusion_seq_eqv_l.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (sb ⨾ (⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(sb ⨾ (⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite seqA.\nrewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite <- seqA with (r2:=⦗F ∩₁ Sc⦘).\nrewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺)⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite ct_rotl, seqA.\nhahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : sb\n⨾ ⦗F ∩₁ Sc⦘\n  ⨾ ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"sb\n⨾ ⦗F ∩₁ Sc⦘\n  ⨾ ((⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺\n⊆ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"hahn_frame.\nrepeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺\n⊆ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺\n⊆ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"repeat hahn_frame_r.\napply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊ ⊆ (psc G)＊.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)＊ ⊆ (psc G)＊","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply clos_refl_trans_mori.\nrewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite ae_in_eco.\nrewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (ct_of_trans (eco_trans WF)).\nrewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite sb_in_hb.\nunfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"unfold psc.\nbasic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"basic_solver 10."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ eco).","conclusion":"irreflexive (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ae⁺ ⨾ sb ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"arewrite (ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘).\nunfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF)).\nrewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘.","conclusion":"ae⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"unfold ae.\nrewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘)⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘.","conclusion":"(⦗AT⦘ ⨾ (rfe ∪ co) ⨾ ⦗AT⦘)⁺ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite <- seqA, inclusion_ct_seq_eqv_r.\nrewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗AT⦘ ⨾ (rfe ∪ co))⁺ ⨾ ⦗AT⦘ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘.","conclusion":"(⦗AT⦘ ⨾ (rfe ∪ co))⁺ ⨾ ⦗AT⦘ ⊆ eco ⨾ ⦗RW ∩₁ AT⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite id_inter.\nhahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗AT⦘ ⨾ (rfe ∪ co))⁺ ⨾ ⦗AT⦘ ⊆ eco ⨾ ⦗RW⦘ ⨾ ⦗AT⦘.","conclusion":"(⦗AT⦘ ⨾ (rfe ∪ co))⁺ ⨾ ⦗AT⦘ ⊆ eco ⨾ ⦗RW⦘ ⨾ ⦗AT⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"hahn_frame.\nrewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : (⦗AT⦘ ⨾ (rfe ∪ co))⁺ ⊆ eco ⨾ ⦗RW⦘.","conclusion":"(⦗AT⦘ ⨾ (rfe ∪ co))⁺ ⊆ eco ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite inclusion_seq_eqv_l.\narewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : (rfe ∪ co)⁺ ⊆ eco ⨾ ⦗RW⦘.","conclusion":"(rfe ∪ co)⁺ ⊆ eco ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"arewrite (rfe ∪ co ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver 10.\nrewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : eco⁺ ⊆ eco ⨾ ⦗RW⦘.","conclusion":"eco⁺ ⊆ eco ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (ct_of_trans (eco_trans WF)).\napply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : eco ⊆ eco ⨾ ⦗RW⦘.","conclusion":"eco ⊆ eco ⨾ ⦗RW⦘","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"apply (dom_r (wf_ecoD WF))."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive\n  (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco).","conclusion":"irreflexive\n  (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (dom_l (wf_ecoD WF)) at 2.\nrewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite no_eco_to_init.\nrewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ (eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)\n             ⨾ ⦗RW ∩₁ AT⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ (eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)\n             ⨾ ⦗RW ∩₁ AT⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite seqA.\nseq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗set_compl (fun a : actid => Init a)⦘\n               ⨾ ⦗RW ∩₁ AT⦘\n                 ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗set_compl (fun a : actid => Init a)⦘\n               ⨾ ⦗RW ∩₁ AT⦘\n                 ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"seq_rewrite <- id_inter.\nrewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗set_compl (fun a : actid => Init a) ∩₁ (RW ∩₁ AT)⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗set_compl (fun a : actid => Init a) ∩₁ (RW ∩₁ AT)⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"rewrite (set_interC _ (RW ∩₁ AT)).\nassert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco)","proofString":"assert (NINIT: RW ∩₁ AT ∩₁ NInit ∩₁ Init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"sin_rewrite (f_sb_helper f_sb_at NINIT).\nrewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ (⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n                ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘)\n               ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ (⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n                ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘)\n               ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"rewrite !seqA.\nsin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb\n                 ⨾ ⦗F ∩₁ Sc⦘\n                   ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb\n                 ⨾ ⦗F ∩₁ Sc⦘\n                   ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"sin_rewrite (@inclusion_seq_eqv_r _ eco _).\nrewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"rewrite <- seq_eqvK at 3.\nrewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ (⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ (⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"rewrite seqA.\narewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘\n         ⨾ sb\n           ⨾ eco\n             ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n               ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"arewrite (⦗RW ∩₁ AT ∩₁ NInit⦘ ⨾ sb ⊆ sb).\nsin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive\n  (sb\n   ⨾ ⦗F ∩₁ Sc⦘\n     ⨾ (psc G)＊\n       ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"sin_rewrite sb_eco_sb_psc.\nrewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)＊ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"rewrite <- seqA with (r2:=psc G).\nrewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ((psc G)＊ ⨾ psc G) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive\n  (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ((psc G)＊ ⨾ psc G) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"rewrite <- seqA with (r1:=sb).\nrewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive\n  ((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ((psc G)＊ ⨾ psc G) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco).","conclusion":"irreflexive\n  ((sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ((psc G)＊ ⨾ psc G) ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"rewrite irreflexive_seqC, !seqA.\nsin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive ((psc G)＊ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"irreflexive ((psc G)＊ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"sin_rewrite (@inclusion_seq_eqv_l _ eco _).\nsin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive ((psc G)＊ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"irreflexive ((psc G)＊ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"sin_rewrite sb_eco_sb_psc.\nseq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive ((psc G)＊ ⨾ psc G ⨾ psc G).","conclusion":"irreflexive ((psc G)＊ ⨾ psc G ⨾ psc G)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"seq_rewrite <- ct_end.\nrewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive ((psc G)⁺ ⨾ psc G).","conclusion":"irreflexive ((psc G)⁺ ⨾ psc G)","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"rewrite ct_unit.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive (psc G)⁺.","conclusion":"irreflexive (psc G)⁺","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"arewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"cdes IC.\ncdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cext.\nauto."},{"statement":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(ae_in_eco : ae ⊆ eco) (NINIT : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"auto."},{"statement":"acyclic (sb ∪ rf).","conclusion":"acyclic (sb ∪ rf)","hypotheses":"","proofString":"rewrite (wf_rfD WF).\narewrite (W ⊆₁ RW).\narewrite (R ⊆₁ RW) at 2 .\nrewrite (sl_mode); [| apply (wf_rfl WF)].\nrewrite rf_in_eco at 2.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ ⦗W⦘ ⨾ rf ⨾ ⦗R⦘).","conclusion":"acyclic (sb ∪ ⦗W⦘ ⨾ rf ⨾ ⦗R⦘)","hypotheses":"","proofString":"arewrite (W ⊆₁ RW).\narewrite (R ⊆₁ RW) at 2 .\nrewrite (sl_mode); [| apply (wf_rfl WF)].\nrewrite rf_in_eco at 2.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ ⦗RW⦘ ⨾ rf ⨾ ⦗R⦘).","conclusion":"acyclic (sb ∪ ⦗RW⦘ ⨾ rf ⨾ ⦗R⦘)","hypotheses":"","proofString":"arewrite (R ⊆₁ RW) at 2 .\nrewrite (sl_mode); [| apply (wf_rfl WF)].\nrewrite rf_in_eco at 2.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ ⦗RW⦘ ⨾ rf ⨾ ⦗RW⦘).","conclusion":"acyclic (sb ∪ ⦗RW⦘ ⨾ rf ⨾ ⦗RW⦘)","hypotheses":"","proofString":"rewrite (sl_mode); [| apply (wf_rfl WF)].\nrewrite rf_in_eco at 2.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT rf)).","conclusion":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT rf))","hypotheses":"","proofString":"rewrite rf_in_eco at 2.\nrewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT eco)).","conclusion":"acyclic (sb ∪ (restr_rel NA rf ∪ restr_rel AT eco))","hypotheses":"","proofString":"rewrite <- unionA.\napply acyclic_sb_rf_eco."},{"statement":"acyclic (sb ∪ restr_rel NA rf ∪ restr_rel AT eco).","conclusion":"acyclic (sb ∪ restr_rel NA rf ∪ restr_rel AT eco)","hypotheses":"","proofString":"apply acyclic_sb_rf_eco."},{"statement":"acyclic (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"sin_rewrite sb_eco_sb_psc.\narewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (psc G).","conclusion":"acyclic (psc G)","hypotheses":"","proofString":"arewrite (psc G ⊆ ar).\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic ar.","conclusion":"acyclic ar","hypotheses":"","proofString":"cdes IC.\ncdes Cext.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : acyclic ar.","conclusion":"acyclic ar","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cext.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : acyclic ar.","conclusion":"acyclic ar","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"auto."},{"statement":"acyclic ((sb ∪ rf)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic ((sb ∪ rf)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite rfi_union_rfe, (rfi_in_sbloc' WF), inclusion_inter_l1.\nrewrite <- unionA, unionK.\nrewrite <- seq_eqvK.\nrewrite !seqA.\nsin_rewrite sb_eco_sb_psc.\nrewrite unionC.\nrewrite path_ut2; [| apply (@sb_trans G)].\nrewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic ((sb ∪ (sb ∪ rfe))⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic ((sb ∪ (sb ∪ rfe))⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite <- unionA, unionK.\nrewrite <- seq_eqvK.\nrewrite !seqA.\nsin_rewrite sb_eco_sb_psc.\nrewrite unionC.\nrewrite path_ut2; [| apply (@sb_trans G)].\nrewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic ((sb ∪ rfe)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic ((sb ∪ rfe)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite <- seq_eqvK.\nrewrite !seqA.\nsin_rewrite sb_eco_sb_psc.\nrewrite unionC.\nrewrite path_ut2; [| apply (@sb_trans G)].\nrewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((sb ∪ rfe)⁺\n   ⨾ ((⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic\n  ((sb ∪ rfe)⁺\n   ⨾ ((⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite !seqA.\nsin_rewrite sb_eco_sb_psc.\nrewrite unionC.\nrewrite path_ut2; [| apply (@sb_trans G)].\nrewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((sb ∪ rfe)⁺\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic\n  ((sb ∪ rfe)⁺\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"sin_rewrite sb_eco_sb_psc.\nrewrite unionC.\nrewrite path_ut2; [| apply (@sb_trans G)].\nrewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic ((sb ∪ rfe)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic ((sb ∪ rfe)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite unionC.\nrewrite path_ut2; [| apply (@sb_trans G)].\nrewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic ((rfe ∪ sb)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic ((rfe ∪ sb)⁺ ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite path_ut2; [| apply (@sb_trans G)].\nrewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((rfe⁺ ∪ rfe＊ ⨾ (sb ⨾ rfe⁺)＊ ⨾ sb ⨾ rfe＊)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic\n  ((rfe⁺ ∪ rfe＊ ⨾ (sb ⨾ rfe⁺)＊ ⨾ sb ⨾ rfe＊)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite RFE1.\narewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((rfe ∪ rfe＊ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe＊) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic\n  ((rfe ∪ rfe＊ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe＊) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"arewrite (rfe^* ≡ rfe^?).\nrewrite rtE, RFE1.\nbasic_solver.\nrewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"rfe＊ ≡ rfe^?.","conclusion":"rfe＊ ≡ rfe^?","hypotheses":"","proofString":"rewrite rtE, RFE1.\nbasic_solver."},{"statement":"⦗fun _ : actid => True⦘ ∪ rfe ≡ rfe^?.","conclusion":"⦗fun _ : actid => True⦘ ∪ rfe ≡ rfe^?","hypotheses":"","proofString":"basic_solver."},{"statement":"acyclic\n  ((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic\n  ((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite <- seqA with (r3:=⦗F ∩₁ Sc⦘).\nrewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ ((⦗F ∩₁ Sc⦘ ⨾ psc G) ⨾ ⦗F ∩₁ Sc⦘)⁺).","conclusion":"acyclic\n  ((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ ((⦗F ∩₁ Sc⦘ ⨾ psc G) ⨾ ⦗F ∩₁ Sc⦘)⁺)","hypotheses":"","proofString":"rewrite inclusion_ct_seq_eqv_r.\nrewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺ ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic\n  ((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺ ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"rewrite <- seqA.\nrewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  (((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺)\n   ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic\n  (((rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺)\n   ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"","proofString":"rewrite acyclic_rotl.\nseq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  (⦗F ∩₁ Sc⦘\n   ⨾ (rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺).","conclusion":"acyclic\n  (⦗F ∩₁ Sc⦘\n   ⨾ (rfe ∪ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺)","hypotheses":"","proofString":"seq_rewrite seq_union_r.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((⦗F ∩₁ Sc⦘ ⨾ rfe ∪ ⦗F ∩₁ Sc⦘ ⨾ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺).","conclusion":"acyclic\n  ((⦗F ∩₁ Sc⦘ ⨾ rfe ∪ ⦗F ∩₁ Sc⦘ ⨾ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?)\n   ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺)","hypotheses":"","proofString":"arewrite (⦗F ∩₁ Sc⦘ ⨾ rfe ≡ ∅₂) by rewrite (wf_rfeD WF); type_solver.\nrewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((∅₂ ∪ ⦗F ∩₁ Sc⦘ ⨾ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺).","conclusion":"acyclic\n  ((∅₂ ∪ ⦗F ∩₁ Sc⦘ ⨾ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺)","hypotheses":"","proofString":"rewrite union_false_l.\narewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  ((⦗F ∩₁ Sc⦘ ⨾ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺).","conclusion":"acyclic\n  ((⦗F ∩₁ Sc⦘ ⨾ rfe^? ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^?) ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺)","hypotheses":"","proofString":"arewrite (⦗F ∩₁ Sc⦘ ⨾ rfe^? ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^? ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺).","conclusion":"acyclic (⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^? ⨾ (⦗F ∩₁ Sc⦘ ⨾ psc G)⁺)","hypotheses":"","proofString":"rewrite inclusion_ct_seq_eqv_l.\narewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^? ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic (⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ rfe^? ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"arewrite (rfe^? ⨾ ⦗F ∩₁ Sc⦘ ≡ ⦗F ∩₁ Sc⦘) by rewrite (wf_rfeD WF); type_solver.\nrewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic (⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"rewrite rtE.\nrepeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  (⦗F ∩₁ Sc⦘\n   ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ⨾ rfe)⁺) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic\n  (⦗F ∩₁ Sc⦘\n   ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ⨾ rfe)⁺) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"repeat case_union _ _.\narewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic\n  (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"arewrite (⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar).\narewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10.\nrewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ar","hypotheses":"","proofString":"arewrite (sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob).\nunfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10.\nunfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10."},{"statement":"sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob.","conclusion":"sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ bob","hypotheses":"","proofString":"unfold imm_bob.bob, imm_bob.fwbob.\narewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10."},{"statement":"sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb.","conclusion":"sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb","hypotheses":"","proofString":"arewrite (Sc ⊆₁ Acq/Rel) by mode_solver.\nbasic_solver 10."},{"statement":"sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb.","conclusion":"sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb","hypotheses":"","proofString":"basic_solver 10."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ bob ⊆ ar.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ bob ⊆ ar","hypotheses":"","proofString":"unfold imm.ar, imm_ppo.ar_int.\nbasic_solver 10."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ bob\n⊆ psc G ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour\n     ∪ ⦗W_ex G ∩₁ (fun a : actid => is_xacq lab a)⦘ ⨾ sb ⨾ ⦗W⦘\n     ∪ ⦗W_ex G⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","conclusion":"⦗F ∩₁ Sc⦘ ⨾ ⦗fun _ : actid => True⦘ ⨾ bob\n⊆ psc G ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour\n     ∪ ⦗W_ex G ∩₁ (fun a : actid => is_xacq lab a)⦘ ⨾ sb ⨾ ⦗W⦘\n     ∪ ⦗W_ex G⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)","hypotheses":"","proofString":"basic_solver 10."},{"statement":"acyclic (ar ⨾ (psc G)⁺ ∪ ⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic (ar ⨾ (psc G)⁺ ∪ ⦗F ∩₁ Sc⦘ ⨾ (sb ⨾ rfe)⁺ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"rewrite ct_begin with (r:=(sb ⨾ rfe)).\nrewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ ((sb ⨾ rfe) ⨾ (sb ⨾ rfe)＊) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ ((sb ⨾ rfe) ⨾ (sb ⨾ rfe)＊) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"rewrite !seqA.\nrewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ rfe ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ rfe ⨾ (sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"rewrite (dom_r (wf_rfeD WF)), seqA.\narewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘\n     ⨾ sb ⨾ rfe ⨾ ⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘\n     ⨾ sb ⨾ rfe ⨾ ⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"arewrite (⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊).\nrewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver.\nsin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊.","conclusion":"⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)＊ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊","hypotheses":"","proofString":"rewrite rtE, seq_union_r.\nunionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"⦗R⦘ ⨾ ⦗fun _ : actid => True⦘ ∪ ⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊.","conclusion":"⦗R⦘ ⨾ ⦗fun _ : actid => True⦘ ∪ ⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊","hypotheses":"","proofString":"unionL; [basic_solver| ].\narewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊.","conclusion":"⦗R⦘ ⨾ (sb ⨾ rfe ⨾ ⦗R⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊","hypotheses":"","proofString":"arewrite (⦗R⦘ ⊆ ⦗RW⦘).\nrewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"⦗RW⦘ ⨾ (sb ⨾ rfe ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊.","conclusion":"⦗RW⦘ ⨾ (sb ⨾ rfe ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊","hypotheses":"","proofString":"rewrite <- seqA, ct_dom_start.\nrewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(⦗RW⦘ ⨾ (sb ⨾ rfe) ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊.","conclusion":"(⦗RW⦘ ⨾ (sb ⨾ rfe) ⨾ ⦗RW⦘)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊","hypotheses":"","proofString":"rewrite inclusion_seq_eqv_r.\nbasic_solver."},{"statement":"(⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊.","conclusion":"(⦗RW⦘ ⨾ sb ⨾ rfe)⁺ ⊆ (⦗RW⦘ ⨾ sb ⨾ rfe)＊","hypotheses":"","proofString":"basic_solver."},{"statement":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ rfe ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic\n  (ar ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ rfe ⨾ (⦗RW⦘ ⨾ sb ⨾ rfe)＊ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"sin_rewrite sb_rfe_crt_hb.\narewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (ar ⨾ (psc G)⁺ ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ rfe ⨾ hb ⨾ (psc G)⁺).","conclusion":"acyclic (ar ⨾ (psc G)⁺ ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ rfe ⨾ hb ⨾ (psc G)⁺)","hypotheses":"","proofString":"arewrite (rfe ⊆ eco) by unfold Execution_eco.eco, Execution.rfe; basic_solver.\narewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (ar ⨾ (psc G)⁺ ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ (psc G)⁺).","conclusion":"acyclic (ar ⨾ (psc G)⁺ ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ (psc G)⁺)","hypotheses":"","proofString":"arewrite ((psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).\nunfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver.\narewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"(psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺.","conclusion":"(psc G)⁺ ⊆ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺","hypotheses":"","proofString":"unfold psc.\nrewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺","hypotheses":"","proofString":"rewrite <- seq_eqvK at 1.\nrewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver."},{"statement":"((⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺.","conclusion":"((⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘) ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺","hypotheses":"","proofString":"rewrite seqA.\nrewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺","hypotheses":"","proofString":"rewrite inclusion_ct_seq_eqv_l at 1.\nbasic_solver."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺\n⊆ ⦗F ∩₁ Sc⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘)⁺","hypotheses":"","proofString":"basic_solver."},{"statement":"acyclic\n  (ar ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺).","conclusion":"acyclic\n  (ar ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺\n   ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺)","hypotheses":"","proofString":"arewrite (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc G).\narewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (ar ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺ ∪ psc G ⨾ (psc G)⁺).","conclusion":"acyclic (ar ⨾ ⦗F ∩₁ Sc⦘ ⨾ (psc G)⁺ ∪ psc G ⨾ (psc G)⁺)","hypotheses":"","proofString":"arewrite (psc G ⊆ ar).\nrewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (ar ⨾ ⦗F ∩₁ Sc⦘ ⨾ ar⁺ ∪ ar ⨾ ar⁺).","conclusion":"acyclic (ar ⨾ ⦗F ∩₁ Sc⦘ ⨾ ar⁺ ∪ ar ⨾ ar⁺)","hypotheses":"","proofString":"rewrite inclusion_seq_eqv_l, unionK.\nrewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic (ar ⨾ ar⁺).","conclusion":"acyclic (ar ⨾ ar⁺)","hypotheses":"","proofString":"rewrite acyclic_rotl, ct_unit.\nred.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"acyclic ar⁺.","conclusion":"acyclic ar⁺","hypotheses":"","proofString":"red.\nrewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"irreflexive (ar⁺)⁺.","conclusion":"irreflexive (ar⁺)⁺","hypotheses":"","proofString":"rewrite ct_of_ct.\ncdes IC.\ncdes Cext.\nauto."},{"statement":"irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"","proofString":"cdes IC.\ncdes Cext.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G)","proofString":"cdes Cext.\nauto."},{"statement":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar) : irreflexive ar⁺.","conclusion":"irreflexive ar⁺","hypotheses":"(Comp : complete G) (Cint : coherence G) (Cext : acyc_ext G) (Cpsc : acyclic (psc_f G ∪ psc_base G)) (Cat : rmw_atomicity G) (Cext0 : acyclic ar)","proofString":"auto."},{"statement":"sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"rewrite (no_sb_to_init G) at 1.\nrewrite (no_sb_to_init G) at 3.\nrewrite (no_rf_to_init WF) at 1.\nrewrite seqA.\nrewrite seq_eqvC.\nrewrite <- !seqA.\ndo 2 rewrite <- seq_union_l.\nhahn_frame.\nbasic_solver."},{"statement":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"rewrite (no_sb_to_init G) at 3.\nrewrite (no_rf_to_init WF) at 1.\nrewrite seqA.\nrewrite seq_eqvC.\nrewrite <- !seqA.\ndo 2 rewrite <- seq_union_l.\nhahn_frame.\nbasic_solver."},{"statement":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"rewrite (no_rf_to_init WF) at 1.\nrewrite seqA.\nrewrite seq_eqvC.\nrewrite <- !seqA.\ndo 2 rewrite <- seq_union_l.\nhahn_frame.\nbasic_solver."},{"statement":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"rewrite seqA.\nrewrite seq_eqvC.\nrewrite <- !seqA.\ndo 2 rewrite <- seq_union_l.\nhahn_frame.\nbasic_solver."},{"statement":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗fun x : actid => ~ Init x⦘ ⨾ ⦗AT⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"rewrite seq_eqvC.\nrewrite <- !seqA.\ndo 2 rewrite <- seq_union_l.\nhahn_frame.\nbasic_solver."},{"statement":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘ ⨾ ⦗fun x : actid => ~ Init x⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘ ⨾ ⦗fun x : actid => ~ Init x⦘\n⊆ (sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"rewrite <- !seqA.\ndo 2 rewrite <- seq_union_l.\nhahn_frame.\nbasic_solver."},{"statement":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ((((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘) ⨾ ⦗fun x : actid => ~ Init x⦘\n⊆ (sb ∪ rf ∪ (((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"sb ⨾ ⦗fun x : actid => ~ Init x⦘ ∪ rf ⨾ ⦗fun x : actid => ~ Init x⦘\n∪ ((((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘) ⨾ ⦗fun x : actid => ~ Init x⦘\n⊆ (sb ∪ rf ∪ (((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"do 2 rewrite <- seq_union_l.\nhahn_frame.\nbasic_solver."},{"statement":"(sb ∪ rf ∪ (((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘) ⨾ ⦗fun x : actid => ~ Init x⦘\n⊆ (sb ∪ rf ∪ (((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘.","conclusion":"(sb ∪ rf ∪ (((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘) ⨾ ⦗fun x : actid => ~ Init x⦘\n⊆ (sb ∪ rf ∪ (((⦗AT⦘ ⨾ sb) ⨾ eco) ⨾ sb) ⨾ ⦗AT⦘)\n  ⨾ ⦗set_compl (fun a : actid => Init a)⦘","hypotheses":"","proofString":"hahn_frame.\nbasic_solver."},{"statement":"sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘ ⊆ sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘.","conclusion":"sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘ ⊆ sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘","hypotheses":"","proofString":"basic_solver."},{"statement":"acyclic\n  ((sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n   ⨾ ⦗set_compl (fun a : actid => Init a)⦘).","conclusion":"acyclic\n  ((sb ∪ rf ∪ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)\n   ⨾ ⦗set_compl (fun a : actid => Init a)⦘)","hypotheses":"","proofString":"rewrite acyclic_rotl, seq_union_r.\narewrite (AT ⊆₁ RW ∩₁ AT).\napply set_subset_inter_r.\nsplit; auto.\ngeneralize RWMODE.\nbasic_solver.\narewrite (⦗NInit⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb).\nseq_rewrite <- id_inter.\nrewrite set_interC.\nrewrite (wf_ecoD WF), !seqA.\nrewrite no_sb_to_init at 2.\nrewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver.\ndo 2 rewrite inclusion_seq_eqv_l.\nred.\nassert (ct_spec: forall (x y z: relation actid), (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺).\nintros x y z.\nassert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext].\ndo 4 rewrite <- seqA with (r3:=sb).\nrewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"acyclic\n  (⦗set_compl (fun a : actid => Init a)⦘ ⨾ (sb ∪ rf)\n   ∪ ⦗set_compl (fun a : actid => Init a)⦘ ⨾ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘).","conclusion":"acyclic\n  (⦗set_compl (fun a : actid => Init a)⦘ ⨾ (sb ∪ rf)\n   ∪ ⦗set_compl (fun a : actid => Init a)⦘ ⨾ ⦗AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗AT⦘)","hypotheses":"","proofString":"arewrite (AT ⊆₁ RW ∩₁ AT).\napply set_subset_inter_r.\nsplit; auto.\ngeneralize RWMODE.\nbasic_solver.\narewrite (⦗NInit⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb).\nseq_rewrite <- id_inter.\nrewrite set_interC.\nrewrite (wf_ecoD WF), !seqA.\nrewrite no_sb_to_init at 2.\nrewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver.\ndo 2 rewrite inclusion_seq_eqv_l.\nred.\nassert (ct_spec: forall (x y z: relation actid), (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺).\nintros x y z.\nassert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext].\ndo 4 rewrite <- seqA with (r3:=sb).\nrewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"AT ⊆₁ RW ∩₁ AT.","conclusion":"AT ⊆₁ RW ∩₁ AT","hypotheses":"","proofString":"apply set_subset_inter_r.\nsplit; auto.\ngeneralize RWMODE.\nbasic_solver."},{"statement":"AT ⊆₁ RW /\\ AT ⊆₁ AT.","conclusion":"AT ⊆₁ RW /\\ AT ⊆₁ AT","hypotheses":"","proofString":"split; auto.\ngeneralize RWMODE.\nbasic_solver."},{"statement":"AT ⊆₁ RW.","conclusion":"AT ⊆₁ RW","hypotheses":"","proofString":"generalize RWMODE.\nbasic_solver."},{"statement":"AT ∪₁ NA ≡₁ RW -> AT ⊆₁ RW.","conclusion":"AT ∪₁ NA ≡₁ RW -> AT ⊆₁ RW","hypotheses":"","proofString":"basic_solver."},{"statement":"acyclic\n  (⦗set_compl (fun a : actid => Init a)⦘ ⨾ (sb ∪ rf)\n   ∪ ⦗set_compl (fun a : actid => Init a)⦘\n     ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘).","conclusion":"acyclic\n  (⦗set_compl (fun a : actid => Init a)⦘ ⨾ (sb ∪ rf)\n   ∪ ⦗set_compl (fun a : actid => Init a)⦘\n     ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘)","hypotheses":"","proofString":"arewrite (⦗NInit⦘ ⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb).\nseq_rewrite <- id_inter.\nrewrite set_interC.\nrewrite (wf_ecoD WF), !seqA.\nrewrite no_sb_to_init at 2.\nrewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver.\ndo 2 rewrite inclusion_seq_eqv_l.\nred.\nassert (ct_spec: forall (x y z: relation actid), (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺).\nintros x y z.\nassert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext].\ndo 4 rewrite <- seqA with (r3:=sb).\nrewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"⦗set_compl (fun a : actid => Init a)⦘\n⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗set_compl (fun a : actid => Init a)⦘\n⨾ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"seq_rewrite <- id_inter.\nrewrite set_interC.\nrewrite (wf_ecoD WF), !seqA.\nrewrite no_sb_to_init at 2.\nrewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗set_compl (fun a : actid => Init a) ∩₁ (RW ∩₁ AT)⦘\n⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗set_compl (fun a : actid => Init a) ∩₁ (RW ∩₁ AT)⦘\n⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"rewrite set_interC.\nrewrite (wf_ecoD WF), !seqA.\nrewrite no_sb_to_init at 2.\nrewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ eco ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"rewrite (wf_ecoD WF), !seqA.\nrewrite no_sb_to_init at 2.\nrewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"rewrite no_sb_to_init at 2.\nrewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ (sb ⨾ ⦗fun x : actid => ~ Init x⦘) ⨾ ⦗RW ∩₁ AT⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"rewrite seqA, <- id_inter.\nrewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗(fun x : actid => ~ Init x) ∩₁ (RW ∩₁ AT)⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"rewrite (set_interC NInit _).\nrewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb\n  ⨾ ⦗RW⦘\n    ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb\n  ⨾ ⦗RW⦘\n    ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"rewrite (sb_f_helper sb_f_at).\nrewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb\n  ⨾ ⦗RW⦘\n    ⨾ eco\n      ⨾ ⦗RW⦘\n        ⨾ sb\n          ⨾ ⦗F ∩₁ Sc⦘\n            ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb\n  ⨾ ⦗RW⦘\n    ⨾ eco\n      ⨾ ⦗RW⦘\n        ⨾ sb\n          ⨾ ⦗F ∩₁ Sc⦘\n            ⨾ sb ⨾ ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"rewrite inclusion_seq_eqv_r.\ndo 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⨾ eco ⨾ ⦗RW⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb","hypotheses":"","proofString":"do 5 hahn_frame_r.\nassert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘ ⨾ sb ⨾ ⦗RW⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘ ⨾ sb ⨾ ⦗RW⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘","hypotheses":"","proofString":"assert (ninit': (RW ∩₁ AT ∩₁ NInit) ∩₁ is_init ≡₁ ∅) by basic_solver.\nsin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"(ninit' : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘ ⨾ sb ⨾ ⦗RW⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘ ⨾ sb ⨾ ⦗RW⦘\n⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘","hypotheses":"(ninit' : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"sin_rewrite (f_sb_helper f_sb_at ninit').\nhahn_frame.\nbasic_solver."},{"statement":"(ninit' : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘\n⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘ ⊆ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗RW⦘","hypotheses":"(ninit' : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"hahn_frame.\nbasic_solver."},{"statement":"(ninit' : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅) : ⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘ ⊆ ⦗RW ∩₁ AT⦘.","conclusion":"⦗RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a)⦘ ⊆ ⦗RW ∩₁ AT⦘","hypotheses":"(ninit' : RW ∩₁ AT ∩₁ set_compl (fun a : actid => Init a) ∩₁ (fun a : actid => Init a)\n≡₁ ∅)","proofString":"basic_solver."},{"statement":"acyclic\n  (⦗set_compl (fun a : actid => Init a)⦘ ⨾ (sb ∪ rf)\n   ∪ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb).","conclusion":"acyclic\n  (⦗set_compl (fun a : actid => Init a)⦘ ⨾ (sb ∪ rf)\n   ∪ ⦗RW ∩₁ AT⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb)","hypotheses":"","proofString":"do 2 rewrite inclusion_seq_eqv_l.\nred.\nassert (ct_spec: forall (x y z: relation actid), (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺).\nintros x y z.\nassert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext].\ndo 4 rewrite <- seqA with (r3:=sb).\nrewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"acyclic (sb ∪ rf ∪ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb).","conclusion":"acyclic (sb ∪ rf ∪ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb)","hypotheses":"","proofString":"red.\nassert (ct_spec: forall (x y z: relation actid), (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺).\nintros x y z.\nassert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext].\ndo 4 rewrite <- seqA with (r3:=sb).\nrewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"irreflexive (sb ∪ rf ∪ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb)⁺.","conclusion":"irreflexive (sb ∪ rf ∪ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb)⁺","hypotheses":"","proofString":"assert (ct_spec: forall (x y z: relation actid), (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺).\nintros x y z.\nassert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext].\ndo 4 rewrite <- seqA with (r3:=sb).\nrewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺.","conclusion":"forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺","hypotheses":"","proofString":"intros x y z.\nassert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext]."},{"statement":"(x y z : relation actid) : (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺.","conclusion":"(x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid)","proofString":"assert (inclusion_ext: x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺).\napply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver.\napply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext]."},{"statement":"(x y z : relation actid) : x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺.","conclusion":"x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid)","proofString":"apply inclusion_union_l.\nrewrite <- ct_step.\nbasic_solver.\ndo 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver."},{"statement":"(x y z : relation actid) : x ∪ y ⊆ (x ∪ y ∪ z)⁺.","conclusion":"x ∪ y ⊆ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid)","proofString":"rewrite <- ct_step.\nbasic_solver."},{"statement":"(x y z : relation actid) : x ∪ y ⊆ x ∪ y ∪ z.","conclusion":"x ∪ y ⊆ x ∪ y ∪ z","hypotheses":"(x y z : relation actid)","proofString":"basic_solver."},{"statement":"(x y z : relation actid) : x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺.","conclusion":"x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid)","proofString":"do 2 rewrite <- ct_unit.\nrewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver."},{"statement":"(x y z : relation actid) : x ⨾ z ⨾ x ⊆ ((x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z)) ⨾ (x ∪ y ∪ z).","conclusion":"x ⨾ z ⨾ x ⊆ ((x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z)) ⨾ (x ∪ y ∪ z)","hypotheses":"(x y z : relation actid)","proofString":"rewrite <- seqA.\napply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver."},{"statement":"(x y z : relation actid) : (x ⨾ z) ⨾ x ⊆ ((x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z)) ⨾ (x ∪ y ∪ z).","conclusion":"(x ⨾ z) ⨾ x ⊆ ((x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z)) ⨾ (x ∪ y ∪ z)","hypotheses":"(x y z : relation actid)","proofString":"apply seq_mori; [| basic_solver].\napply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver."},{"statement":"(x y z : relation actid) : x ⨾ z ⊆ (x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z).","conclusion":"x ⨾ z ⊆ (x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z)","hypotheses":"(x y z : relation actid)","proofString":"apply seq_mori; [| basic_solver].\nrewrite <- ct_step.\nbasic_solver."},{"statement":"(x y z : relation actid) : x ⊆ (x ∪ y ∪ z)⁺.","conclusion":"x ⊆ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid)","proofString":"rewrite <- ct_step.\nbasic_solver."},{"statement":"(x y z : relation actid) : x ⊆ x ∪ y ∪ z.","conclusion":"x ⊆ x ∪ y ∪ z","hypotheses":"(x y z : relation actid)","proofString":"basic_solver."},{"statement":"(x y z : relation actid) (inclusion_ext : x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺) : (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺.","conclusion":"(x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid) (inclusion_ext : x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺)","proofString":"apply inclusion_t_ind_right; [apply inclusion_ext| ].\nrewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext]."},{"statement":"(x y z : relation actid) (inclusion_ext : x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺) : (x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ x ⨾ z ⨾ x) ⊆ (x ∪ y ∪ z)⁺.","conclusion":"(x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ x ⨾ z ⨾ x) ⊆ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid) (inclusion_ext : x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺)","proofString":"rewrite <- ct_ct with (r:=(x ∪ y ∪ z)) at 2.\napply seq_mori; [basic_solver | apply inclusion_ext]."},{"statement":"(x y z : relation actid) (inclusion_ext : x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺) : (x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ x ⨾ z ⨾ x) ⊆ (x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z)⁺.","conclusion":"(x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ x ⨾ z ⨾ x) ⊆ (x ∪ y ∪ z)⁺ ⨾ (x ∪ y ∪ z)⁺","hypotheses":"(x y z : relation actid) (inclusion_ext : x ∪ y ∪ x ⨾ z ⨾ x ⊆ (x ∪ y ∪ z)⁺)","proofString":"apply seq_mori; [basic_solver | apply inclusion_ext]."},{"statement":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺) : irreflexive (sb ∪ rf ∪ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb)⁺.","conclusion":"irreflexive (sb ∪ rf ∪ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb)⁺","hypotheses":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺)","proofString":"do 4 rewrite <- seqA with (r3:=sb).\nrewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺) : irreflexive (sb ∪ rf ∪ sb ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb)⁺.","conclusion":"irreflexive (sb ∪ rf ∪ sb ⨾ (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb)⁺","hypotheses":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺)","proofString":"rewrite ct_spec.\napply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺) : irreflexive (sb ∪ rf ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺.","conclusion":"irreflexive (sb ∪ rf ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)⁺","hypotheses":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺)","proofString":"apply -> ac_irr.\napply ldrf_condition_ext."},{"statement":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺) : acyclic (sb ∪ rf ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic (sb ∪ rf ∪ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ eco ⨾ sb ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(ct_spec : forall x y z : relation actid, (x ∪ y ∪ x ⨾ z ⨾ x)⁺ ⊆ (x ∪ y ∪ z)⁺)","proofString":"apply ldrf_condition_ext."}]}