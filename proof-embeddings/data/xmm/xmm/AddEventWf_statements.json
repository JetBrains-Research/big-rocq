{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/xmm/src/xmm/AddEventWf.v","fileSamples":[{"statement":"(s : actid -> Prop) (IN : forall x : actid, s x -> loc' x = loc' e) : forall x y : actid, s x /\\ e = y -> same_loc' x y.","proofString":"unfold same_loc.\nins.\ndesf.\neauto."},{"statement":"(s : actid -> Prop) (IN : forall x : actid, s x -> loc' x = loc' e) : forall x y : actid, s x /\\ e = y -> loc' x = loc' y.","proofString":"ins.\ndesf.\neauto."},{"statement":"(s : actid -> Prop) (IN : forall x0 : actid, s x0 -> loc' x0 = loc' e) (x y : actid) (H : s x /\\ e = y) : loc' x = loc' y.","proofString":"desf.\neauto."},{"statement":"(s : actid -> Prop) (y : actid) (IN : forall x0 : actid, s x0 -> loc' x0 = loc' y) (x : actid) (H : s x) : loc' x = loc' y.","proofString":"eauto."},{"statement":"(A B : actid -> Prop) (SUB : A × B ⊆ (fun x y : actid => loc' x = loc' y)) : B × A ⊆ (fun x y : actid => loc' x = loc' y).","proofString":"unfolder in *.\nins.\ndesf.\nsymmetry.\neauto."},{"statement":"(A B : actid -> Prop) (SUB : forall x y : actid, A x /\\ B y -> loc' x = loc' y) : forall x y : actid, B x /\\ A y -> loc' x = loc' y.","proofString":"ins.\ndesf.\nsymmetry.\neauto."},{"statement":"(A B : actid -> Prop) (SUB : forall x0 y0 : actid, A x0 /\\ B y0 -> loc' x0 = loc' y0) (x y : actid) (H : B x /\\ A y) : loc' x = loc' y.","proofString":"desf.\nsymmetry.\neauto."},{"statement":"(A B : actid -> Prop) (SUB : forall x0 y0 : actid, A x0 /\\ B y0 -> loc' x0 = loc' y0) (x y : actid) (H : B x) (H0 : A y) : loc' x = loc' y.","proofString":"symmetry.\neauto."},{"statement":"(A B : actid -> Prop) (SUB : forall x0 y0 : actid, A x0 /\\ B y0 -> loc' x0 = loc' y0) (x y : actid) (H : B x) (H0 : A y) : loc' y = loc' x.","proofString":"eauto."},{"statement":"(A : Type) (B : Type) (f : A -> B) (s1 s2 : A -> Prop) (FUN : forall a b : A, s1 a /\\ s2 b -> f a = f b) : forall a b : A, s2 a /\\ s1 b -> f a = f b.","proofString":"ins.\ndesf.\nsymmetry.\neauto."},{"statement":"(A : Type) (B : Type) (f : A -> B) (s1 s2 : A -> Prop) (FUN : forall a0 b0 : A, s1 a0 /\\ s2 b0 -> f a0 = f b0) (a b : A) (H : s2 a /\\ s1 b) : f a = f b.","proofString":"desf.\nsymmetry.\neauto."},{"statement":"(A : Type) (B : Type) (f : A -> B) (s1 s2 : A -> Prop) (FUN : forall a0 b0 : A, s1 a0 /\\ s2 b0 -> f a0 = f b0) (a b : A) (H : s2 a) (H0 : s1 b) : f a = f b.","proofString":"symmetry.\neauto."},{"statement":"(A : Type) (B : Type) (f : A -> B) (s1 s2 : A -> Prop) (FUN : forall a0 b0 : A, s1 a0 /\\ s2 b0 -> f a0 = f b0) (a b : A) (H : s2 a) (H0 : s1 b) : f b = f a.","proofString":"eauto."},{"statement":"(r : relation actid) (SUB : r\n⊆ (fun x y : actid =>\n   match lab' x with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end =\n   match lab' y with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end)) : funeq\n  (fun a : actid =>\n   match lab' a with\n   | Aload _ _ _ v | Astore _ _ _ v => Some v\n   | Afence _ => None\n   end) r.","proofString":"unfolder in *.\nins."},{"statement":"(r : relation actid) (SUB : forall x y : actid,\nr x y ->\nmatch lab' x with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab' y with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend) : forall a b : actid,\nr a b ->\nmatch lab' a with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend =\nmatch lab' b with\n| Aload _ _ _ v | Astore _ _ _ v => Some v\n| Afence _ => None\nend.","proofString":"ins."}]}