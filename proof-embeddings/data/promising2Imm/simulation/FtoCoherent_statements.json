{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/promising2ToImm/src/simulation/FtoCoherent.v","fileSamples":[{"statement":"(e : actid) (EE : E e) (WW : match lab e with\n| Astore _ _ _ _ => true\n| _ => false\nend) (ISS : I e) (NINIT : ~ is_init e) : Time.lt tid_init (f_to e).","proofString":"destruct e; desf.\ncdes FCOH.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf.\nassert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\neapply f_to_co_mon; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) : Time.lt tid_init (f_to (ThreadEvent thread index)).","proofString":"cdes FCOH.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf.\nassert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\neapply f_to_co_mon; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : Time.lt tid_init (f_to (ThreadEvent thread index)).","proofString":"assert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf.\nassert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\neapply f_to_co_mon; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : E (InitEvent l).","proofString":"apply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : exists b : actid, E b /\\ loc lab b = Some l.","proofString":"eexists.\nsplit; eauto.\nunfold loc.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : loc lab (ThreadEvent thread index) = Some l.","proofString":"unfold loc.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : match lab (ThreadEvent thread index) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend = Some l.","proofString":"desf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) : Time.lt tid_init (f_to (ThreadEvent thread index)).","proofString":"assert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\neapply f_to_co_mon; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l).","proofString":"by split; eauto."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : Time.lt tid_init (f_to (ThreadEvent thread index)).","proofString":"erewrite <- TINITTO; eauto.\neapply f_to_co_mon; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : Time.lt (f_to (InitEvent l)) (f_to (ThreadEvent thread index)).","proofString":"eapply f_to_co_mon; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : co (InitEvent l) (ThreadEvent thread index).","proofString":"eapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : is_w lab (ThreadEvent thread index).","proofString":"unfold is_w.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : match lab (ThreadEvent thread index) with\n| Astore _ _ _ _ => true\n| _ => false\nend.","proofString":"desf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : same_loc lab (InitEvent l) (ThreadEvent thread index).","proofString":"red.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : loc lab (InitEvent l) = loc lab (ThreadEvent thread index).","proofString":"unfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : match lab (InitEvent l) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend =\nmatch lab (ThreadEvent thread index) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend.","proofString":"rewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : Some l =\nmatch lab (ThreadEvent thread index) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend.","proofString":"desf."},{"statement":"(e : actid) (EE : E e) (WW : match lab e with\n| Astore _ _ _ _ => true\n| _ => false\nend) (ISS : I e) : Time.le tid_init (f_to e).","proofString":"destruct e; desf.\napply Time.le_lteq.\nright.\nsymmetry.\ncdes FCOH.\napply TINITTO.\nsplit; auto.\napply Time.le_lteq.\nleft.\neapply lt_init_ts; eauto.\nunfold is_w.\ndesf."},{"statement":"(l : location) (EE : E (InitEvent l)) (s : x_mode) (o : mode) (l0 : location) (v : value) (Heq : lab (InitEvent l) = Astore s o l0 v) (WW : true) (ISS : I (InitEvent l)) : Time.le tid_init (f_to (InitEvent l)).","proofString":"apply Time.le_lteq.\nright.\nsymmetry.\ncdes FCOH.\napply TINITTO.\nsplit; auto."},{"statement":"(l : location) (EE : E (InitEvent l)) (s : x_mode) (o : mode) (l0 : location) (v : value) (Heq : lab (InitEvent l) = Astore s o l0 v) (WW : true) (ISS : I (InitEvent l)) : Time.lt tid_init (f_to (InitEvent l)) \\/ tid_init = f_to (InitEvent l).","proofString":"right.\nsymmetry.\ncdes FCOH.\napply TINITTO.\nsplit; auto."},{"statement":"(l : location) (EE : E (InitEvent l)) (s : x_mode) (o : mode) (l0 : location) (v : value) (Heq : lab (InitEvent l) = Astore s o l0 v) (WW : true) (ISS : I (InitEvent l)) : tid_init = f_to (InitEvent l).","proofString":"symmetry.\ncdes FCOH.\napply TINITTO.\nsplit; auto."},{"statement":"(l : location) (EE : E (InitEvent l)) (s : x_mode) (o : mode) (l0 : location) (v : value) (Heq : lab (InitEvent l) = Astore s o l0 v) (WW : true) (ISS : I (InitEvent l)) : f_to (InitEvent l) = tid_init.","proofString":"cdes FCOH.\napply TINITTO.\nsplit; auto."},{"statement":"(l : location) (EE : E (InitEvent l)) (s : x_mode) (o : mode) (l0 : location) (v : value) (Heq : lab (InitEvent l) = Astore s o l0 v) (WW : true) (ISS : I (InitEvent l)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : f_to (InitEvent l) = tid_init.","proofString":"apply TINITTO.\nsplit; auto."},{"statement":"(l : location) (EE : E (InitEvent l)) (s : x_mode) (o : mode) (l0 : location) (v : value) (Heq : lab (InitEvent l) = Astore s o l0 v) (WW : true) (ISS : I (InitEvent l)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l).","proofString":"split; auto."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) : Time.le tid_init (f_to (ThreadEvent thread index)).","proofString":"apply Time.le_lteq.\nleft.\neapply lt_init_ts; eauto.\nunfold is_w.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) : Time.lt tid_init (f_to (ThreadEvent thread index)) \\/\ntid_init = f_to (ThreadEvent thread index).","proofString":"left.\neapply lt_init_ts; eauto.\nunfold is_w.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) : Time.lt tid_init (f_to (ThreadEvent thread index)).","proofString":"eapply lt_init_ts; eauto.\nunfold is_w.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) : is_w lab (ThreadEvent thread index).","proofString":"unfold is_w.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) : match lab (ThreadEvent thread index) with\n| Astore _ _ _ _ => true\n| _ => false\nend.","proofString":"desf."},{"statement":"(e : actid) (EE : E e) (WW : match lab e with\n| Astore _ _ _ _ => true\n| _ => false\nend) (ISS : I e) (NINIT : ~ is_init e) : Time.le tid_init (f_from e).","proofString":"destruct e; desf.\ncdes FCOH.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf.\nassert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\napply FCOH; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) : Time.le tid_init (f_from (ThreadEvent thread index)).","proofString":"cdes FCOH.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf.\nassert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\napply FCOH; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : Time.le tid_init (f_from (ThreadEvent thread index)).","proofString":"assert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf.\nassert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\napply FCOH; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : E (InitEvent l).","proofString":"apply (wf_init WF).\neexists.\nsplit; eauto.\nunfold loc.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : exists b : actid, E b /\\ loc lab b = Some l.","proofString":"eexists.\nsplit; eauto.\nunfold loc.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : loc lab (ThreadEvent thread index) = Some l.","proofString":"unfold loc.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) : match lab (ThreadEvent thread index) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend = Some l.","proofString":"desf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) : Time.le tid_init (f_from (ThreadEvent thread index)).","proofString":"assert ((is_init ∩₁ E) (InitEvent l)) as LL.\nby split; eauto.\nerewrite <- TINITTO; eauto.\napply FCOH; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l).","proofString":"by split; eauto."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : Time.le tid_init (f_from (ThreadEvent thread index)).","proofString":"erewrite <- TINITTO; eauto.\napply FCOH; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : Time.le (f_to (InitEvent l)) (f_from (ThreadEvent thread index)).","proofString":"apply FCOH; eauto.\neapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : co (InitEvent l) (ThreadEvent thread index).","proofString":"eapply init_co_w; eauto.\nunfold is_w.\ndesf.\nred.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : is_w lab (ThreadEvent thread index).","proofString":"unfold is_w.\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : match lab (ThreadEvent thread index) with\n| Astore _ _ _ _ => true\n| _ => false\nend.","proofString":"desf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : same_loc lab (InitEvent l) (ThreadEvent thread index).","proofString":"red.\nunfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : loc lab (InitEvent l) = loc lab (ThreadEvent thread index).","proofString":"unfold loc.\nrewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : match lab (InitEvent l) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend =\nmatch lab (ThreadEvent thread index) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend.","proofString":"rewrite (wf_init_lab WF).\ndesf."},{"statement":"(thread : thread_id) (index : nat) (EE : E (ThreadEvent thread index)) (s : x_mode) (o : mode) (l : location) (v : value) (Heq : lab (ThreadEvent thread index) = Astore s o l v) (WW : true) (ISS : I (ThreadEvent thread index)) (NINIT : ~ is_init (ThreadEvent thread index)) (TINITTO : forall x : actid, ((fun a : actid => is_init a) ∩₁ E) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ E) x -> f_from x = tid_init) (TTOFROM : forall x : actid, I x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, I x -> I y -> co x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, I x -> I y -> (rf ⨾ rmw) x y -> f_to x = f_from y) (EL : E (InitEvent l)) (LL : ((fun a : actid => is_init a) ∩₁ E) (InitEvent l)) : Some l =\nmatch lab (ThreadEvent thread index) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend.","proofString":"desf."},{"statement":"(w w' : actid) (SW : I w) (SW' : I w') (CO : co w w') : Time.le (f_to w) (f_to w').","proofString":"apply Time.le_lteq; left.\neapply f_to_co_mon; eauto."},{"statement":"(w w' : actid) (SW : I w) (SW' : I w') (CO : co w w') : Time.lt (f_to w) (f_to w').","proofString":"eapply f_to_co_mon; eauto."},{"statement":"(w w' : actid) (NINIT : ~ is_init w) (SW : I w) (SW' : I w') (CO : co w w') : Time.le (f_from w) (f_from w').","proofString":"apply Time.le_lteq; left.\neapply f_from_co_mon; eauto."},{"statement":"(w w' : actid) (NINIT : ~ is_init w) (SW : I w) (SW' : I w') (CO : co w w') : Time.lt (f_from w) (f_from w').","proofString":"eapply f_from_co_mon; eauto."},{"statement":"(G : execution) (S S' : actid -> Prop) (f_to f_from : actid -> Time.t) (IN : S' ⊆₁ S) (FCOH : f_to_coherent G S f_to f_from) (TINITTO : forall x : actid,\n((fun a : actid => is_init a) ∩₁ acts_set G) x -> f_to x = tid_init) (TINITFROM : forall x : actid,\n((fun a : actid => is_init a) ∩₁ acts_set G) x -> f_from x = tid_init) (TTOFROM : forall x : actid, S x -> ~ is_init x -> Time.lt (f_from x) (f_to x)) (TCO : forall x y : actid, S x -> S y -> co G x y -> Time.le (f_to x) (f_from y)) (TRMW : forall x y : actid, S x -> S y -> (rf G ⨾ rmw G) x y -> f_to x = f_from y) : f_to_coherent G S' f_to f_from.","proofString":"red.\nsplits; auto."}]}