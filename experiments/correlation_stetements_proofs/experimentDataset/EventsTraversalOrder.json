[{"statement":"Lemma dom_sb_coverable :\n    dom_rel (sb ⨾ ⦗ coverable G sc T ⦘) ⊆₁ C.","proof":"unfold coverable, covered.\nrewrite id_inter, <- seqA.\neapply dom_rel_iord_ext_parts.\n3: {\nby apply init_covered.\n}\n2: {\nrewrite sb_E_ENI.\nbasic_solver.\n}\nunfold iord_simpl, SB.\nrewrite <- ct_step, <- inclusion_union_r1 with (r' := sc).\nrewrite inclusion_seq_eqv_r with (r := sb).\nintuition (auto with *).\n"},{"statement":"Lemma dom_sb_covered :\n    dom_rel (sb ⨾ ⦗ C ⦘) ⊆₁ C.","proof":"rewrite covered_in_coverable at 1; eauto.\napply dom_sb_coverable.\n"},{"statement":"Lemma sb_coverable :\n    sb ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗ C ⦘ ⨾ sb.","proof":"rewrite (dom_rel_helper dom_sb_coverable).\nbasic_solver.\n"},{"statement":"Lemma sb_covered :\n    sb ⨾ ⦗ C ⦘ ≡ ⦗ C ⦘ ⨾ sb ⨾ ⦗ C ⦘.","proof":"rewrite (dom_rel_helper dom_sb_covered).\nbasic_solver.\n"},{"statement":"Lemma dom_rf_coverable :\n    dom_rel (rf ⨾ ⦗coverable G sc T⦘) ⊆₁ I.","proof":"unfold coverable, issued.\nrewrite id_inter, <- seqA.\napply dom_rel_iord_ext_parts.\n3: by apply init_issued.\n2: rewrite rf_E_ENI; basic_solver.\ntransitivity (RF G); [| unfold iord_simpl; basic_solver 10].\nunfold RF.\nhahn_frame.\napply map_rel_mori; [done| ].\nrewrite wf_rfD, wf_rfE; eauto.\nbasic_solver 10.\n"},{"statement":"Lemma dom_rf_covered :\n    dom_rel (rf ⨾ ⦗C⦘) ⊆₁ I.","proof":"rewrite covered_in_coverable; eauto.\napply dom_rf_coverable.\n"},{"statement":"Lemma rf_coverable :\n    rf ⨾ ⦗coverable G sc T⦘ ⊆ ⦗I⦘ ⨾ rf.","proof":"rewrite (dom_rel_helper dom_rf_coverable).\nbasic_solver.\n"},{"statement":"Lemma rf_covered:\n    rf ⨾ ⦗C⦘ ≡ ⦗I⦘ ⨾ rf ⨾ ⦗C⦘.","proof":"rewrite (dom_rel_helper dom_rf_covered).\nbasic_solver.\n"},{"statement":"Lemma dom_sc_coverable :\n    dom_rel (sc ⨾ ⦗ coverable G sc T ⦘) ⊆₁ C.","proof":"unfold coverable, covered.\nrewrite id_inter, <- seqA.\napply dom_rel_iord_ext_parts.\n3: by apply init_covered.\n2: {\nerewrite (sc_E_ENI WF WFSC).\nbasic_solver.\n}\ntransitivity (SB G sc); [| unfold iord_simpl; basic_solver 10].\nunfold SB.\nhahn_frame.\napply map_rel_mori; [done| ].\nrewrite <- ct_step.\nrewrite (wf_scE WFSC).\nbasic_solver 10.\n"},{"statement":"Lemma dom_sc_covered :\n    dom_rel (sc ⨾ ⦗ C ⦘) ⊆₁ C.","proof":"rewrite covered_in_coverable at 1; eauto.\napply dom_sc_coverable.\n"},{"statement":"Lemma sc_coverable  :\n    sc ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗C⦘ ⨾ sc.","proof":"seq_rewrite (dom_rel_helper dom_sc_coverable).\nbasic_solver.\n"},{"statement":"Lemma sc_covered :\n    sc ⨾ ⦗C⦘ ⊆ ⦗C⦘ ⨾ sc.","proof":"seq_rewrite (dom_rel_helper dom_sc_covered).\nbasic_solver.\n"},{"statement":"Lemma ar_int_ct_issuable_in_I:\n    dom_rel (⦗W⦘ ⨾ (ar_int G)^+ ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nrewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite ar_int_in_sb, ct_of_trans, wf_sbE, no_sb_to_init; try basic_solver.\napply sb_trans.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\nhahn_frame.\napply clos_trans_mori.\nunfold ar.\nbasic_solver.\n"},{"statement":"Lemma ar_coverable_in_CI  :\n    dom_rel (ar ⨾ ⦗coverable G sc T⦘) ⊆₁ C ∪₁ I.","proof":"unfold imm_s.ar.\nrewrite !seq_union_l.\nrewrite ar_int_in_sb, rfe_in_rf; eauto.\nrewrite sb_coverable, rf_coverable, sc_coverable.\nbasic_solver.\n"},{"statement":"Lemma ar_C_in_CI  :\n    dom_rel (ar ⨾ ⦗C⦘) ⊆₁ C ∪₁ I.","proof":"unfold imm_s.ar.\nrewrite !seq_union_l.\nrewrite (ar_int_in_sb WF).\narewrite (rfe ⊆ rf).\nrewrite sb_covered, rf_covered.\nrewrite sc_covered.\nbasic_solver.\n"},{"statement":"Lemma ar_rf_ppo_loc_ct_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ (ppo ∩ same_loc))⁺ ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable, issued.\nrewrite id_inter, <- !seqA.\neapply dom_rel_iord_ext_parts.\n3: by apply init_issued.\n2: rewrite ar_rf_ppo_loc_ct_E_ENI; basic_solver.\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nerewrite eqv_rel_mori with (x := _ ∩₁ _); [| red; intro; apply proj2].\nunfold AR.\nbasic_solver 10.\n"},{"statement":"Lemma ar_rfrmw_ct_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\napply ar_rf_ppo_loc_ct_issuable_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_ct_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ (ppo ∩ same_loc))⁺ ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply ar_rf_ppo_loc_ct_issuable_in_I.\n"},{"statement":"Lemma ar_rfrmw_ct_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply ar_rfrmw_ct_issuable_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_rt_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ (ppo ∩ same_loc))＊ ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite rtE.\nrewrite !seq_union_l, !seq_union_r, dom_union; unionL.\n{\nbasic_solver.\n}\napply ar_rf_ppo_loc_ct_I_in_I.\n"},{"statement":"Lemma ar_rfrmw_rt_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply ar_rf_ppo_loc_rt_I_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_issuable_in_I:\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ (ppo ∩ same_loc)) ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"rewrite ct_step with (r := ar ∪ rf ⨾ (ppo ∩ same_loc)).\nby apply ar_rf_ppo_loc_ct_issuable_in_I.\n"},{"statement":"Lemma ar_rfrmw_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw) ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply ar_rf_ppo_loc_issuable_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ (ppo ∩ same_loc)) ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite ct_step with (r := ar ∪ rf ⨾ (ppo ∩ same_loc)).\nrewrite issued_in_issuable at 1; eauto.\napply ar_rf_ppo_loc_ct_issuable_in_I.\n"},{"statement":"Lemma ar_rfrmw_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw) ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply ar_rf_ppo_loc_I_in_I.\n"},{"statement":"Lemma ar_ct_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"arewrite (ar ⊆ ar ∪ rf ⨾ rmw).\nby apply ar_rfrmw_ct_issuable_in_I.\n"},{"statement":"Lemma ar_ct_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar⁺ ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply ar_ct_issuable_in_I.\n"},{"statement":"Lemma ar_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"rewrite ct_step with (r:=ar).\nby apply ar_ct_issuable_in_I.\n"},{"statement":"Lemma ar_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply ar_issuable_in_I.\n"},{"statement":"Lemma W_ar_coverable_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗coverable G sc T⦘) ⊆₁ I.","proof":"rewrite dom_eqv1.\nrewrite ar_coverable_in_CI.\nrewrite set_inter_union_r; unionL.\n2: basic_solver.\neapply w_covered_issued; eauto.\n"},{"statement":"Lemma W_ar_C_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗C⦘) ⊆₁ I.","proof":"rewrite covered_in_coverable; eauto.\napply W_ar_coverable_in_I.\n"},{"statement":"Lemma W_ar_coverable_issuable_in_CI  :\n    dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗coverable G sc T ∪₁ issuable G sc T⦘) ⊆₁ I.","proof":"rewrite id_union, !seq_union_r, dom_union; unionL.\n{\nby apply W_ar_coverable_in_I.\n}\napply ar_issuable_in_I.\n"},{"statement":"Lemma ar_rt_I_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar＊ ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite rtE, !seq_union_l, !seq_union_r, seq_id_l, dom_union.\nunionL; [basic_solver|].\nby apply ar_ct_I_in_I.\n"},{"statement":"Lemma dom_W_sb_coverable_in_I  :\n    dom_rel (⦗W⦘ ⨾ sb ⨾ ⦗coverable G sc T⦘) ⊆₁ I.","proof":"rewrite sb_coverable; auto.\netransitivity.\n2: by eapply w_covered_issued; eauto.\nbasic_solver.\n"},{"statement":"Lemma dom_W_sb_C_in_I  :\n    dom_rel (⦗W⦘ ⨾ sb ⨾ ⦗C⦘) ⊆₁ I.","proof":"rewrite covered_in_coverable; eauto.\napply dom_W_sb_coverable_in_I.\n"},{"statement":"Lemma rf_ppo_loc_issuable_in_I:\n    dom_rel (rf ⨾ ppo ∩ same_loc ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable.\nrewrite id_inter.\nrewrite <- !seqA.\neapply dom_rel_iord_ext_parts.\n3: {\nby erewrite init_issued; eauto.\n}\n2: {\nrewrite wf_rfE, ppo_in_sb, wf_sbE, no_sb_to_init; basic_solver.\n}\nerewrite eqv_rel_mori with (x := _ ∩₁ _); [| intro; apply proj2].\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nhahn_frame.\nrewrite <- ct_step.\nrewrite (dom_l (wf_rfD WF)) at 1.\nbasic_solver 10.\n"},{"statement":"Lemma rf_ppo_loc_coverable_in_I:\n    dom_rel (rf ⨾ (ppo ∩ same_loc) ⨾ ⦗coverable G sc T⦘) ⊆₁ I.","proof":"rewrite rfi_union_rfe, !seq_union_l, dom_union.\nunionL.\n2: {\nrewrite (dom_r (@wf_ppoD G)), seq_eqv_inter_lr, !seqA.\nrewrite <- id_inter.\nrewrite w_coverable_issued; eauto.\nrewrite issued_in_issuable at 1; eauto.\nrewrite rfe_in_rf.\neapply rf_ppo_loc_issuable_in_I.\n}\nrewrite (dom_l (wf_rfiD WF)), seqA.\nrewrite inclusion_inter_l1.\nrewrite (ppo_in_sb WF), rfi_in_sb.\nsin_rewrite sb_sb.\nrewrite dom_W_sb_coverable_in_I; auto.\n"},{"statement":"Lemma rfrmw_coverable_in_I  :\n    dom_rel (rf ⨾ rmw ⨾ ⦗coverable G sc T⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply rf_ppo_loc_coverable_in_I.\n"},{"statement":"Lemma rf_ppo_loc_C_in_I  :\n    dom_rel (rf ⨾ (ppo ∩ same_loc) ⨾ ⦗C⦘) ⊆₁ I.","proof":"rewrite covered_in_coverable; eauto.\napply rf_ppo_loc_coverable_in_I.\n"},{"statement":"Lemma rfrmw_C_in_I  :\n    dom_rel (rf ⨾ rmw ⨾ ⦗C⦘) ⊆₁ I.","proof":"rewrite covered_in_coverable; eauto.\napply rfrmw_coverable_in_I.\n"},{"statement":"Lemma rf_ppo_loc_coverable_issuable_in_I  :\n    dom_rel (rf ⨾ (ppo ∩ same_loc) ⨾ ⦗coverable G sc T ∪₁ issuable G sc T⦘) ⊆₁ I.","proof":"rewrite id_union, !seq_union_r, dom_union.\nunionL.\n{\napply rf_ppo_loc_coverable_in_I.\n}\napply rf_ppo_loc_issuable_in_I.\n"},{"statement":"Lemma rfrmw_coverable_issuable_in_I  :\n    dom_rel (rf ⨾ rmw ⨾ ⦗coverable G sc T ∪₁ issuable G sc T⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply rf_ppo_loc_coverable_issuable_in_I.\n"},{"statement":"Lemma rf_ppo_loc_I_in_I  :\n    dom_rel (rf ⨾ (ppo ∩ same_loc) ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply rf_ppo_loc_issuable_in_I.\n"},{"statement":"Lemma rfrmw_I_in_I  :\n    dom_rel (rf ⨾ rmw ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply rf_ppo_loc_I_in_I.\n"},{"statement":"Lemma rf_ppo_loc_rt_I_in_I  :\n    dom_rel ((rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗I⦘) ⊆₁ I.","proof":"apply dom_rel_clos_refl_trans_eqv.\nrewrite seqA.\napply rf_ppo_loc_I_in_I.\n"},{"statement":"Lemma rfrmw_rt_I_in_I  :\n    dom_rel ((rf ⨾ rmw)＊ ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply rf_ppo_loc_rt_I_in_I.\n"},{"statement":"Lemma rf_ppo_loc_CI_in_I  :\n    dom_rel (rf ⨾ (ppo ∩ same_loc) ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite id_union, !seq_union_r, dom_union.\nunionL.\n{\nby apply rf_ppo_loc_C_in_I.\n}\nby apply rf_ppo_loc_I_in_I.\n"},{"statement":"Lemma rfrmw_CI_in_I  :\n    dom_rel (rf ⨾ rmw ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply rf_ppo_loc_CI_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_coverable_in_CI  :\n    dom_rel ((ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable G sc T⦘) ⊆₁ C ∪₁ I.","proof":"rewrite seq_union_l, dom_union, !seqA.\nunionL.\n{\nby apply ar_coverable_in_CI.\n}\nrewrite rf_ppo_loc_coverable_in_I; eauto with hahn.\n"},{"statement":"Lemma ar_rfrmw_coverable_in_CI  :\n    dom_rel ((ar ∪ rf ⨾ rmw) ⨾ ⦗coverable G sc T⦘) ⊆₁ C ∪₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply ar_rf_ppo_loc_coverable_in_CI.\n"},{"statement":"Lemma ar_rf_ppo_loc_C_in_CI  :\n    dom_rel ((ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗C⦘) ⊆₁ C ∪₁ I.","proof":"rewrite covered_in_coverable at 1; eauto.\napply ar_rf_ppo_loc_coverable_in_CI.\n"},{"statement":"Lemma ar_rfrmw_C_in_CI  :\n    dom_rel ((ar ∪ rf ⨾ rmw) ⨾ ⦗C⦘) ⊆₁ C ∪₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply ar_rf_ppo_loc_C_in_CI.\n"},{"statement":"Lemma ar_rf_ppo_loc_coverable_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗coverable G sc T ∪₁ issuable G sc T⦘) ⊆₁ I.","proof":"rewrite seq_union_l, seq_union_r, dom_union; unionL.\n{\napply W_ar_coverable_issuable_in_CI.\n}\narewrite_id ⦗W⦘.\nrewrite seq_id_l.\napply rf_ppo_loc_coverable_issuable_in_I.\n"},{"statement":"Lemma ar_rfrmw_coverable_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw) ⨾ ⦗coverable G sc T ∪₁ issuable G sc T⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply ar_rf_ppo_loc_coverable_issuable_in_I.\n"},{"statement":"Lemma ar_CI_in_CI  :\n    dom_rel (⦗W⦘ ⨾ ar ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite id_union, !seq_union_r, dom_union; unionL.\n{\nby apply W_ar_C_in_I.\n}\napply ar_I_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_CI_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite seq_union_l, seq_union_r, dom_union; unionL.\n{\napply ar_CI_in_CI.\n}\narewrite_id ⦗W⦘.\nrewrite seq_id_l.\napply rf_ppo_loc_CI_in_I.\n"},{"statement":"Lemma ar_rfrmw_CI_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw) ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\nby apply ar_rf_ppo_loc_CI_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_ct_coverable_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗coverable G sc T ∪₁ issuable G sc T⦘) ⊆₁ I.","proof":"intros x [y HH].\ndestruct_seq HH as [AA BB].\napply clos_trans_tn1 in HH.\ninduction HH as [y HH|y z QQ].\n{\neapply ar_rf_ppo_loc_coverable_issuable_in_I.\nbasic_solver 10.\n}\napply clos_tn1_trans in HH.\ndestruct QQ as [QQ|QQ].\n2: {\napply IHHH.\nright.\napply issued_in_issuable; eauto.\napply rf_ppo_loc_coverable_issuable_in_I.\nexists z.\napply seqA.\nbasic_solver.\n}\ndestruct BB as [BB|BB].\n2: {\napply ar_rf_ppo_loc_ct_issuable_in_I.\nexists z.\napply seq_eqv_lr.\nsplits; auto.\napply ct_end.\nexists y.\nsplit; auto.\n{\nby apply clos_trans_in_rt.\n}\nby left.\n}\napply IHHH.\ndestruct QQ as [[QQ|QQ]|QQ].\n{\nleft.\napply covered_in_coverable; eauto.\napply dom_sc_coverable.\nexists z.\nbasic_solver.\n}\n{\nright.\napply issued_in_issuable; eauto.\napply dom_rf_coverable.\nexists z.\ndo 2 red in QQ.\nbasic_solver.\n}\nleft.\napply covered_in_coverable; eauto.\napply dom_sb_coverable.\nexists z.\napply seq_eqv_r.\nsplit; auto.\nby apply ar_int_in_sb.\n"},{"statement":"Lemma ar_rfrmw_ct_coverable_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗coverable G sc T ∪₁ issuable G sc T⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\napply ar_rf_ppo_loc_ct_coverable_issuable_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_ct_CI_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite covered_in_coverable; eauto.\nrewrite issued_in_issuable at 1; eauto.\napply ar_rf_ppo_loc_ct_coverable_issuable_in_I.\n"},{"statement":"Lemma ar_rfrmw_ct_CI_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)⁺ ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\napply ar_rf_ppo_loc_ct_CI_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_rt_coverable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗coverable G sc T⦘) ⊆₁ I.","proof":"rewrite rtE.\nrewrite !seq_union_l, !seq_union_r, dom_union, seq_id_l.\nunionL.\n{\ngeneralize w_coverable_issued.\nbasic_solver.\n}\narewrite (coverable G sc T ⊆₁ coverable G sc T ∪₁ issuable G sc T).\napply ar_rf_ppo_loc_ct_coverable_issuable_in_I.\n"},{"statement":"Lemma ar_rfrmw_rt_coverable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗coverable G sc T⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\napply ar_rf_ppo_loc_rt_coverable_in_I.\n"},{"statement":"Lemma ar_rf_ppo_loc_rt_CI_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite rtE.\nrewrite !seq_union_l, !seq_union_r, dom_union, seq_id_l.\nunionL.\n{\ngeneralize w_covered_issued.\nbasic_solver.\n}\napply ar_rf_ppo_loc_ct_CI_in_I.\n"},{"statement":"Lemma ar_rfrmw_rt_CI_in_I  :\n    dom_rel (⦗W⦘ ⨾ (ar ∪ rf ⨾ rmw)＊ ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite (rmw_in_ppo_loc WF).\napply ar_rf_ppo_loc_rt_CI_in_I.\n"},{"statement":"Lemma ar_rt_C_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar＊ ⨾ ⦗C⦘) ⊆₁ I.","proof":"unfolder.\nins.\ndesf.\napply clos_rt_rtn1 in H0.\ninduction H0.\n{\neapply w_covered_issued; basic_solver.\n}\napply clos_rtn1_rt in H2.\ndestruct H0 as [[AA|AA]|AA].\n3: {\napply ar_int_in_sb in AA; auto.\napply IHclos_refl_trans_n1.\neapply dom_sb_covered; basic_solver 10.\n}\n{\napply IHclos_refl_trans_n1.\neapply dom_sc_covered; basic_solver 10.\n}\napply ar_rt_I_in_I; auto.\nexists y.\nunfolder; splits; auto.\napply dom_rf_covered; auto.\neexists.\napply seq_eqv_r.\nby split; [apply AA|].\n"},{"statement":"Lemma ar_rt_CI_in_I  :\n    dom_rel (⦗W⦘ ⨾ ar＊ ⨾ ⦗C ∪₁ I⦘) ⊆₁ I.","proof":"rewrite id_union, !seq_union_r, dom_union; unionL.\n{\nby apply ar_rt_C_in_I.\n}\nby apply ar_rt_I_in_I.\n"},{"statement":"Lemma sbCsbI_CsbI   :\n    sb ⨾ ⦗C ∪₁ dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⊆\n    ⦗C ∪₁ dom_rel (sb^? ⨾ ⦗I⦘)⦘ ⨾ sb.","proof":"rewrite id_union, !seq_union_r, !seq_union_l.\napply union_mori.\n{\nrewrite sb_covered; eauto.\nbasic_solver.\n}\ngeneralize (@sb_trans G).\nbasic_solver 10.\n"},{"statement":"Lemma dom_rfe_ppo_issuable_in_I :\n    dom_rel (rfe ⨾ ppo ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable.\nrewrite id_inter.\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nrewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite wf_rfeE, ppo_in_sb, wf_sbE, no_sb_to_init; basic_solver.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nerewrite eqv_rel_mori with (x := _ ∩₁ _); [| intro; apply proj2].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nrewrite (dom_l (wf_rfeD WF)).\nhahn_frame.\nrewrite <- ct_unit, <- ct_step.\nunfold ar, ar_int.\napply seq_mori; basic_solver 10.\n"},{"statement":"Lemma dom_rfe_ppo_issued :\n    dom_rel (rfe ⨾ ppo ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply dom_rfe_ppo_issuable_in_I.\n"},{"statement":"Lemma dom_detour_ppo_issuable_in_I :\n    dom_rel (detour ⨾ ppo ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable.\nrewrite id_inter.\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; basic_solver.\n}\n2: {\nrewrite detour_in_sb, ppo_in_sb, wf_sbE, no_sb_to_init; basic_solver.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nerewrite eqv_rel_mori with (x := _ ∩₁ _); [| intro; apply proj2].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nrewrite (dom_l (wf_detourD WF)).\nhahn_frame.\nrewrite <- ct_unit, <- ct_step.\nunfold ar, ar_int.\napply seq_mori; basic_solver 10.\n"},{"statement":"Lemma dom_detour_rfe_ppo_issuable :\n    dom_rel ((detour ∪ rfe) ⨾ ppo ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"repeat case_union _ _.\nrewrite dom_union.\nrewrite dom_rfe_ppo_issuable_in_I, dom_detour_ppo_issuable_in_I.\nbasic_solver.\n"},{"statement":"Lemma dom_detour_rfe_ppo_issued :\n    dom_rel ((detour ∪ rfe) ⨾ ppo ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply dom_detour_rfe_ppo_issuable.\n"},{"statement":"Lemma dom_detour_rfe_acq_sb_issuable :\n    dom_rel ((detour ∪ rfe) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite detour_in_sb, wf_sbE, wf_rfeE, no_sb_to_init; basic_solver.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nrewrite (dom_l (wf_detourD WF)), (dom_l (wf_rfeD WF)), <- seq_union_r.\nhahn_frame.\nrewrite <- ct_unit, <- ct_step.\nunfold ar, ar_int, bob.\napply seq_mori; basic_solver 10.\n"},{"statement":"Lemma dom_detour_rfe_acq_sb_issued :\n    dom_rel ((detour ∪ rfe) ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply dom_detour_rfe_acq_sb_issuable.\n"},{"statement":"Lemma rfe_ar_int_issuable_in_I  :\n    dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G) ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite rfe_in_rf, wf_rfE, ar_int_in_sb, wf_sbE, no_sb_to_init, no_rf_to_init; basic_solver 10.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nunfold AR.\nhahn_frame.\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\napply map_rel_mori; [done|].\nhahn_frame.\nrewrite <- ct_step.\nunfold ar.\nbasic_solver.\n"},{"statement":"Lemma dom_detour_rfe_rmw_rfi_rmw_rt_issuable_in_I:\n    dom_rel ((((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊) ⨾ rmw) ⨾ ⦗issuable G sc T⦘) ⊆₁ issued T.","proof":"rewrite !seqA.\nseq_rewrite rt_seq_swap.\nrewrite seqA.\nassert (dom_rel ((rfi ⨾ rmw)＊ ⨾ ⦗issuable G sc T⦘) ⊆₁ (issuable G sc T)) as D2.\n{\napply dom_rel_clos_refl_trans_eqv.\ntransitivity (issued T); [| apply issued_in_issuable; auto].\nrewrite <- rf_ppo_loc_issuable_in_I; eauto.\nrewrite rfi_in_rf, rmw_in_ppo_loc; auto.\nbasic_solver.\n}\napply dom_rel_helper in D2.\nrewrite D2.\nrewrite <- !seqA.\ndo 2 rewrite dom_seq.\nrewrite seqA.\nunfold issuable.\nrewrite id_inter.\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite rmw_in_sb, detour_in_sb, wf_rfeE, wf_sbE, no_sb_to_init; basic_solver.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nrewrite (dom_l (wf_detourD WF)), (dom_l (wf_rfeD WF)), <- seq_union_r.\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\nhahn_frame.\nrewrite <- ct_unit, <- ct_step.\nunfold ar.\napply seq_mori.\n{\nunfold ar_int.\nbasic_solver 10.\n}\nrewrite rmw_in_ar_int; auto.\nbasic_solver 10.\n"},{"statement":"Lemma dom_detour_rfe_rmw_rfi_rmw_rt_I_in_I:\n    dom_rel ((((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊) ⨾ rmw) ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\nby apply dom_detour_rfe_rmw_rfi_rmw_rt_issuable_in_I.\n"},{"statement":"Lemma dom_detour_rmwrfi_rfe_acq_sb_issuable :\n    dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"remember (detour ∪ rfe) as DR.\nrewrite rtE.\nrepeat case_union _ _.\nrewrite dom_union.\nsubst DR.\napply set_subset_union_l.\nsplit.\n{\nrewrite seq_id_l.\napply dom_detour_rfe_acq_sb_issuable.\n}\nrewrite ct_end.\nrewrite AuxRel2.r_to_r_codom_rel_r with (r := rmw) at 2.\nrewrite !seqA.\nassert (dom_rel (⦗codom_rel rmw⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable G sc T⦘) ⊆₁ I) as D1.\n{\nunfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite wf_rfiE, wf_sbE, no_sb_to_init; basic_solver.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nunfold AR.\nhahn_frame.\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\napply map_rel_mori; [done|].\nrewrite <- seq_eqvK with (dom := codom_rel rmw), !seqA.\narewrite (codom_rel rmw ⊆₁ W) at 1 by (rewrite wf_rmwD; basic_solver).\nhahn_frame.\nrewrite <- seq_eqvK with (dom := R ∩₁ Acq), !seqA.\nrewrite <- ct_unit.\ndo 2 rewrite <- seqA.\napply seq_mori.\n{\nrewrite <- ct_step.\nunfold ar, ar_int.\nunfold W_ex.\nbasic_solver 10.\n}\nunfold ar, ar_int.\nunfold bob.\nbasic_solver 10.\n}\napply dom_rel_helper in D1.\nrewrite D1.\nrewrite <- !seqA.\ndo 5 rewrite dom_seq.\napply dom_detour_rfe_rmw_rfi_rmw_rt_I_in_I.\n"},{"statement":"Lemma dom_detour_rmwrfi_rfe_acq_sb_issued :\n    dom_rel ((detour ∪ rfe) ⨾ (rmw ⨾ rfi)＊ ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply dom_detour_rmwrfi_rfe_acq_sb_issuable.\n"},{"statement":"Lemma dom_rfe_acq_sb_issuable :\n    dom_rel (rfe ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"arewrite (rfe ⊆ detour ∪ rfe).\napply dom_detour_rfe_acq_sb_issuable.\n"},{"statement":"Lemma dom_rfe_acq_sb_issued :\n    dom_rel (rfe ⨾ ⦗R ∩₁ Acq⦘ ⨾ sb ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply dom_rfe_acq_sb_issuable.\n"},{"statement":"Lemma W_ex_acq_sb_in_ar_int_W:\n    ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ⦗W⦘ ⨾ ar_int G ⨾ ⦗W⦘.","proof":"rewrite <- seq_eqvK.\nrewrite <- seq_eqvK with (dom := W) at 1.\narewrite (W_ex_acq ⊆₁ W) at 1.\n{\nunfold W_ex.\nrewrite wf_rmwD; basic_solver.\n}\nhahn_frame.\nunfold ar_int.\nbasic_solver 10.\n"},{"statement":"Lemma dom_wex_sb_issuable :\n    dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"unfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite wf_sbE, no_sb_to_init; basic_solver.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\nrewrite W_ex_acq_sb_in_ar_int_W.\nrewrite <- ct_step.\nunfold ar.\nbasic_solver 10.\n"},{"statement":"Lemma dom_wex_sb_issued :\n    dom_rel (⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗I⦘) ⊆₁ I.","proof":"rewrite issued_in_issuable at 1; eauto.\napply dom_wex_sb_issuable.\n"},{"statement":"Lemma rf_rmw_issued_rfi_rmw_issued : \n    (rf ⨾ rmw)＊ ⨾ ⦗I⦘ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗I⦘ ⨾ (rf ⨾ rmw)＊.","proof":"assert (transitive sb) as SBT by apply sb_trans.\neapply rt_ind_left with (P:= fun r => r ⨾ ⦗I⦘).\n{\nby eauto with hahn.\n}\n{\nbasic_solver 12.\n}\nintros k H; rewrite !seqA.\nsin_rewrite H.\nrewrite rfi_union_rfe at 1; relsf; unionL.\nrewrite <- seqA; seq_rewrite <- ct_begin; basic_solver 12.\nrewrite rtE at 2.\nrelsf; unionR left.\narewrite (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗I⦘ ⊆                  ⦗I⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ ⦗I⦘).\n{\napply dom_rel_helper.\nrewrite <- dom_detour_rfe_rmw_rfi_rmw_rt_I_in_I at 2.\napply dom_rel_mori.\nhahn_frame_r.\nrewrite <- rt_seq_swap.\nbasic_solver 10.\n}\narewrite (rfe ⨾ rmw ⊆ rf ⨾ rmw).\narewrite (rfi ⊆ rf).\narewrite (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)⁺).\n{\nrewrite <- seqA.\napply ct_begin.\n}\narewrite_id ⦗I⦘ at 2.\nrewrite seq_id_l.\nrewrite ct_rt.\nby rewrite inclusion_t_rt.\n"},{"statement":"Lemma wex_rfi_rfe_rmw_issued_is_issued :\n    dom_rel ((⦗ W_ex_acq ⦘ ⨾ rfi ∪ rfe) ⨾ rmw ⨾ ⦗ I ⦘) ⊆₁ I.","proof":"rewrite seq_union_l.\nrewrite dom_union.\napply set_subset_union_l; split.\n{\nrewrite seqA.\nrewrite (rfi_in_sbloc' WF).\nrewrite (rmw_in_sb WF).\narewrite (sb ∩ same_loc ⨾ sb ⊆ sb).\n{\ngeneralize (@sb_trans G).\nbasic_solver.\n}\narewrite (⦗I⦘ ⊆ ⦗W⦘ ⨾ ⦗I⦘).\n{\ngeneralize issuedW.\nbasic_solver.\n}\narewrite (⦗W_ex_acq⦘ ⊆ ⦗W⦘ ⨾ ⦗W_ex_acq⦘).\n{\nrewrite <- seq_eqvK at 1.\nrewrite (W_ex_in_W WF) at 1.\nbasic_solver.\n}\nrewrite issued_in_issuable at 1; eauto.\nunfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite wf_sbE, no_sb_to_init; basic_solver.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done|].\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\nsin_rewrite W_ex_acq_sb_in_ar_int_W.\nunfold ar.\nrewrite <- ct_step.\nbasic_solver 10.\n}\nrewrite (rmw_in_ppo WF).\napply dom_rfe_ppo_issued.\n"},{"statement":"Lemma wex_rf_rmw_issued_is_issued :\n    dom_rel (⦗ W_ex_acq ⦘ ⨾ rf ⨾ rmw ⨾ ⦗ I ⦘) ⊆₁ I.","proof":"arewrite (⦗W_ex_acq⦘ ⨾ rf ⊆ (⦗ W_ex_acq ⦘ ⨾ rfi ∪ rfe)).\n{\nrewrite rfi_union_rfe.\nbasic_solver.\n}\nby apply wex_rfi_rfe_rmw_issued_is_issued.\n"},{"statement":"Lemma rf_rmw_issued :\n    (rf ⨾ rmw)＊ ⨾ ⦗I⦘ ⊆ (rf ⨾ rmw ⨾ ⦗I⦘)＊.","proof":"intros x y HH.\ndestruct_seq_r HH as II.\napply clos_rt_rtn1 in HH.\ninduction HH as [|y z TT].\n{\napply rt_refl.\n}\napply rt_end.\nright.\nexists y.\nsplit.\n2: apply seqA; basic_solver.\napply IHHH.\napply rfrmw_I_in_I.\nexists z.\napply seqA.\nbasic_solver 10.\n"},{"statement":"Lemma fwbob_issuable_in_C:\n    dom_rel (fwbob ⨾ ⦗issuable G sc T⦘) ⊆₁ C.","proof":"unfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_covered; eauto.\nbasic_solver.\n}\n2: {\nrewrite fwbob_in_sb, wf_sbE, no_sb_to_init; basic_solver.\n}\ntransitivity (FWBOB G); [| unfold iord_simpl; basic_solver 10].\nunfold FWBOB.\nhahn_frame.\nbasic_solver.\n"},{"statement":"Lemma fwbob_I_in_C:\n    dom_rel (fwbob ⨾ ⦗I⦘) ⊆₁ C.","proof":"rewrite issued_in_issuable at 1; eauto.\napply fwbob_issuable_in_C.\n"},{"statement":"Lemma dom_W_Rel_sb_loc_I_in_C :\n    dom_rel (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗I⦘) ⊆₁ C.","proof":"arewrite (I ⊆₁ dom_cond fwbob (C)).\n{\napply dom_rel_to_cond, fwbob_I_in_C.\n}\nrewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12.\n"},{"statement":"Lemma I_eq_EW_I : I ≡₁ E ∩₁ W ∩₁ I.","proof":"split; [|clear; basic_solver].\ngeneralize issuedW, issuedE.\nbasic_solver.\n"},{"statement":"Lemma W_rel_sb_loc_W_CI :\n    (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘) ⨾ ⦗C ∪₁ I⦘ ⊆\n    ⦗C ∪₁ I⦘ ⨾ (⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘).","proof":"rewrite !seqA.\narewrite (⦗W⦘ ⨾ ⦗C ∪₁ I⦘ ⊆ ⦗W⦘ ⨾ ⦗I⦘).\n{\nrewrite <- !id_inter.\napply eqv_rel_mori.\nrewrite set_inter_union_r.\nrewrite <- set_interK with (s := W), set_interA.\nerewrite w_covered_issued; eauto.\nbasic_solver.\n}\ngeneralize dom_W_Rel_sb_loc_I_in_C.\nbasic_solver 12.\n"},{"statement":"Lemma sb_W_rel_CI :\n    (sb ⨾ ⦗W ∩₁ Rel⦘) ⨾ ⦗C ∪₁ I⦘ ⊆ ⦗C ∪₁ I⦘ ⨾ (sb ⨾ ⦗W ∩₁ Rel⦘).","proof":"generalize RELCOV, dom_sb_covered.\nbasic_solver 12.\n"},{"statement":"Lemma W_Rel_sb_loc_I : dom_rel (⦗W ∩₁ Rel⦘ ⨾  (sb ∩ same_loc) ⨾ ⦗W ∩₁ I⦘) ⊆₁ I.","proof":"generalize dom_W_Rel_sb_loc_I_in_C, w_covered_issued.\nbasic_solver 21.\n"},{"statement":"Lemma sb_loc_issued  :\n    ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⨾ ⦗I⦘ ⊆ \n               ⦗C⦘ ⨾ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘.","proof":"seq_rewrite (dom_rel_helper dom_W_Rel_sb_loc_I_in_C).\nbasic_solver.\n"},{"statement":"Lemma dom_F_sb_I_in_C :\n    dom_rel (⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗I⦘) ⊆₁ C.","proof":"arewrite (I ⊆₁ dom_cond fwbob (C)).\n{\napply dom_rel_to_cond, fwbob_I_in_C.\n}\nrewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12.\n"},{"statement":"Lemma F_sb_I_in_C  :\n    ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⨾ ⦗I⦘ ⊆ ⦗C⦘ ⨾ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb.","proof":"seq_rewrite (dom_rel_helper dom_F_sb_I_in_C).\nbasic_solver.\n"},{"statement":"Lemma dom_F_Rel_sb_I_in_C :  dom_rel (⦗F ∩₁ Rel⦘ ⨾  sb ⨾ ⦗I⦘) ⊆₁ C.","proof":"etransitivity; [|apply dom_F_sb_I_in_C]; mode_solver 21.\n"},{"statement":"Lemma dom_F_Acq_sb_I_in_C :  dom_rel (⦗F ∩₁ Acq⦘ ⨾  sb ⨾ ⦗I⦘) ⊆₁ C.","proof":"etransitivity; [|apply dom_F_sb_I_in_C]; mode_solver 12.\n"},{"statement":"Lemma dom_release_issued :\n    dom_rel (release ⨾ ⦗ I ⦘) ⊆₁ C.","proof":"unfold imm_s_hb.release, imm_s_hb.rs.\nrewrite !seqA.\nsin_rewrite rf_rmw_issued_rfi_rmw_issued.\nrewrite (dom_r (wf_rmwD WF)) at 1.\narewrite (⦗W⦘ ⨾ (rfi ⨾ rmw ⨾ ⦗W⦘)＊ ⊆ (rfi ⨾ rmw)＊ ⨾ ⦗W⦘).\n{\nrewrite rtE; relsf; unionL; [basic_solver|].\nrewrite <- seqA; rewrite inclusion_ct_seq_eqv_r; basic_solver.\n}\nrewrite (rmw_in_sb_loc WF) at 1; rewrite (rfi_in_sbloc' WF).\ngeneralize (@sb_same_loc_trans G); ins; relsf.\nrewrite !crE; relsf; unionL; splits.\n{\nrevert RELCOV; basic_solver 21.\n}\n{\ngeneralize dom_W_Rel_sb_loc_I_in_C.\nbasic_solver 21.\n}\n2: generalize (@sb_trans G).\nall: generalize dom_F_Rel_sb_I_in_C; basic_solver 40.\n"},{"statement":"Lemma release_issued :\n    release ⨾ ⦗ I ⦘ ⊆ ⦗C⦘ ⨾ release.","proof":"seq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\n"},{"statement":"Lemma dom_release_rf_coverable :\n    dom_rel (release ⨾ rf ⨾ ⦗ coverable G sc T ⦘) ⊆₁ C.","proof":"generalize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21.\n"},{"statement":"Lemma dom_release_rf_covered :\n    dom_rel (release ⨾ rf ⨾ ⦗ C ⦘) ⊆₁ C.","proof":"rewrite covered_in_coverable at 1; eauto.\nby apply dom_release_rf_coverable.\n"},{"statement":"Lemma release_rf_covered :\n    release ⨾ rf ⨾ ⦗ C ⦘ ⊆ ⦗ C ⦘ ⨾ release ⨾ rf.","proof":"seq_rewrite (dom_rel_helper dom_release_rf_covered).\nbasic_solver.\n"},{"statement":"Lemma dom_sb_W_rel_issued  :\n    dom_rel (sb ⨾ ⦗W ∩₁ Rel⦘ ⨾ ⦗I⦘) ⊆₁ C.","proof":"arewrite (I ⊆₁ dom_cond fwbob (C)).\n{\napply dom_rel_to_cond, fwbob_I_in_C.\n}\nrewrite <- !seqA.\nrewrite dom_cond_elim1; [basic_solver 21|].\nunfold imm_bob.fwbob.\nbasic_solver 12.\n"},{"statement":"Lemma sb_W_rel_issued  :\n    sb ⨾ ⦗W ∩₁ Rel⦘ ⨾ ⦗I⦘ ⊆ ⦗C⦘ ⨾ sb ⨾ ⦗W ∩₁ Rel⦘.","proof":"seq_rewrite (dom_rel_helper dom_sb_W_rel_issued).\nbasic_solver.\n"},{"statement":"Lemma dom_sw_coverable :\n    dom_rel (sw ⨾ ⦗ coverable G sc T ⦘) ⊆₁ C.","proof":"unfold imm_s_hb.sw.\ngeneralize dom_sb_coverable, dom_release_rf_coverable.\ngeneralize covered_in_coverable.\nbasic_solver 21.\n"},{"statement":"Lemma dom_sw_covered :\n    dom_rel (sw ⨾ ⦗ C ⦘) ⊆₁ C.","proof":"by_similar dom_sw_coverable.\n"},{"statement":"Lemma sw_coverable : sw ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗C⦘ ⨾ sw.","proof":"seq_rewrite (dom_rel_helper dom_sw_coverable).\nbasic_solver.\n"},{"statement":"Lemma sw_covered : sw ⨾ ⦗ C ⦘ ⊆ ⦗C⦘ ⨾ sw.","proof":"by_similar sw_coverable.\n"},{"statement":"Lemma hb_coverable :\n    hb ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗C⦘ ⨾ hb.","proof":"unfold imm_s_hb.hb.\nassert (A: (sb ∪ sw) ⨾ ⦗coverable G sc T⦘ ⊆ ⦗C⦘ ⨾ (sb ∪ sw)⁺).\n{\nrelsf.\nrewrite sb_coverable, sw_coverable.\nrewrite <- ct_step; basic_solver.\n}\nunfold imm_s_hb.hb.\neapply ct_ind_left with (P:= fun r => r ⨾ ⦗coverable G sc T⦘); eauto with hahn.\nintros k H; rewrite !seqA, H.\nrewrite covered_in_coverable at 1; eauto.\nsin_rewrite A.\narewrite ((sb ∪ sw)⁺ ⊆ (sb ∪ sw)＊) at 1.\nrelsf.\n"},{"statement":"Lemma hb_covered :\n    hb ⨾ ⦗ C ⦘ ⊆ ⦗C⦘ ⨾ hb.","proof":"by_similar hb_coverable.\n"},{"statement":"Lemma dom_hb_coverable :\n    dom_rel (hb ⨾ ⦗ coverable G sc T ⦘) ⊆₁ C.","proof":"rewrite hb_coverable; basic_solver 10.\n"},{"statement":"Lemma dom_hb_covered :\n    dom_rel (hb ⨾ ⦗ C ⦘) ⊆₁ C.","proof":"by_similar dom_hb_coverable.\n"},{"statement":"Lemma dom_urr_coverable l:\n    dom_rel (urr l ⨾ ⦗ coverable G sc T ⦘) ⊆₁ I.","proof":"unfold CombRelations.urr.\nunfold CombRelations.urr.\ngeneralize dom_hb_coverable.\ngeneralize dom_sc_coverable.\ngeneralize dom_rf_coverable.\ngeneralize covered_in_coverable.\ngeneralize w_coverable_issued.\nbasic_solver 21.\n"},{"statement":"Lemma dom_urr_covered l:\n    dom_rel (urr l ⨾ ⦗ C ⦘) ⊆₁ I.","proof":"by_similar dom_urr_coverable.\n"},{"statement":"Lemma urr_coverable l:\n    urr l ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗I⦘ ⨾ urr l.","proof":"rewrite (dom_rel_helper (@dom_urr_coverable l)).\nbasic_solver.\n"},{"statement":"Lemma urr_covered l:\n    urr l ⨾ ⦗ C ⦘ ⊆ ⦗I⦘ ⨾ urr l.","proof":"by_similar urr_coverable.\n"},{"statement":"Lemma dom_c_acq_coverable i l A:\n    dom_rel (c_acq i l A ⨾ ⦗ coverable G sc T ⦘) ⊆₁ I.","proof":"unfold CombRelations.c_acq.\ngeneralize (@dom_urr_coverable l).\ngeneralize covered_in_coverable.\ngeneralize dom_release_issued.\ngeneralize dom_rf_coverable.\nbasic_solver 21.\n"},{"statement":"Lemma dom_c_acq_covered i l A:\n    dom_rel (c_acq i l A ⨾ ⦗ C ⦘) ⊆₁ I.","proof":"by_similar dom_c_acq_coverable.\n"},{"statement":"Lemma c_acq_coverable i l A:\n    c_acq i l A ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗I⦘ ⨾ c_acq i l A.","proof":"rewrite (dom_rel_helper (@dom_c_acq_coverable i l A)).\nbasic_solver.\n"},{"statement":"Lemma c_acq_covered i l A:\n    c_acq i l A ⨾ ⦗ C ⦘ ⊆ ⦗I⦘ ⨾ c_acq i l A.","proof":"by_similar c_acq_coverable.\n"},{"statement":"Lemma dom_c_cur_coverable i l A:\n    dom_rel (c_cur i l A ⨾ ⦗ coverable G sc T ⦘) ⊆₁ I.","proof":"unfold CombRelations.c_cur.\ngeneralize (@dom_urr_coverable l).\nbasic_solver 21.\n"},{"statement":"Lemma dom_c_cur_covered i l A:\n    dom_rel (c_cur i l A ⨾ ⦗ C ⦘) ⊆₁ I.","proof":"by_similar dom_c_cur_coverable.\n"},{"statement":"Lemma c_cur_coverable i l A:\n    c_cur i l A ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗I⦘ ⨾ c_cur i l A.","proof":"seq_rewrite (dom_rel_helper (@dom_c_cur_coverable i l A)).\nbasic_solver.\n"},{"statement":"Lemma c_cur_covered i l A:\n    c_cur i l A ⨾ ⦗ C ⦘ ⊆ ⦗I⦘ ⨾ c_cur i l A.","proof":"by_similar c_cur_coverable.\n"},{"statement":"Lemma dom_c_rel_coverable i l l' A:\n    dom_rel (c_rel i l l' A ⨾ ⦗ coverable G sc T ⦘) ⊆₁ I.","proof":"unfold CombRelations.c_rel.\ngeneralize (@dom_urr_coverable l).\nbasic_solver 21.\n"},{"statement":"Lemma dom_c_rel_covered i l l' A:\n    dom_rel (c_rel i l l' A ⨾ ⦗ C ⦘) ⊆₁ I.","proof":"by_similar dom_c_rel_coverable.\n"},{"statement":"Lemma c_rel_coverable i l l' A:\n    c_rel i l l' A ⨾ ⦗ coverable G sc T ⦘ ⊆ ⦗I⦘ ⨾ c_rel i l l' A.","proof":"seq_rewrite (dom_rel_helper (@dom_c_rel_coverable i l l' A)).\nbasic_solver.\n"},{"statement":"Lemma c_rel_covered i l l' A:\n    c_rel i l l' A ⨾ ⦗ C ⦘ ⊆ ⦗I⦘ ⨾ c_rel i l l' A.","proof":"by_similar c_rel_coverable.\n"},{"statement":"Lemma t_acq_coverable l thread:\n    t_acq thread l (coverable G sc T) ⊆₁ I.","proof":"unfold CombRelations.t_acq.\nrewrite (dom_r (wf_c_acqD G sc thread l (coverable G sc T))).\narewrite (⦗(Tid_ thread ∪₁ Init) ∩₁ coverable G sc  T⦘ ⊆ ⦗coverable G sc T⦘) by basic_solver.\nrewrite c_acq_coverable.\nbasic_solver.\n"},{"statement":"Lemma t_acq_covered l thread:\n    t_acq thread l (C) ⊆₁ I.","proof":"by_similar t_acq_coverable.\n"},{"statement":"Lemma t_cur_coverable l thread:\n    t_cur thread l (coverable G sc T) ⊆₁ I.","proof":"etransitivity; [by apply t_cur_in_t_acq|].\nby apply t_acq_coverable.\n"},{"statement":"Lemma t_cur_covered l thread:\n    t_cur thread l (C) ⊆₁ I.","proof":"by_similar t_cur_coverable.\n"},{"statement":"Lemma t_rel_coverable l l' thread:\n    t_rel thread l l' (coverable G sc T) ⊆₁ I.","proof":"etransitivity; [by apply t_rel_in_t_cur|].\nby apply t_cur_coverable.\n"},{"statement":"Lemma t_rel_covered l l' thread:\n    t_rel thread l l' (C) ⊆₁ I.","proof":"by_similar t_rel_coverable.\n"},{"statement":"Lemma S_tm_coverable l :\n    S_tm l (coverable G sc T) ⊆₁ I.","proof":"unfold CombRelations.S_tm, CombRelations.S_tmr.\ngeneralize dom_hb_coverable.\ngeneralize w_coverable_issued.\ngeneralize dom_release_issued.\ngeneralize dom_rf_coverable.\ngeneralize covered_in_coverable.\nbasic_solver 21.\n"},{"statement":"Lemma S_tm_covered l :\n    S_tm l (C) ⊆₁ I.","proof":"by_similar S_tm_coverable.\n"},{"statement":"Lemma msg_rel_issued l:\n    dom_rel (msg_rel l ⨾ ⦗ I ⦘) ⊆₁ I.","proof":"unfold CombRelations.msg_rel.\ngeneralize dom_release_issued.\ngeneralize (@dom_urr_covered l).\nbasic_solver 21.\n"},{"statement":"Lemma rfe_ar_int_ct_issuable_in_I:\n  dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗issuable G sc T⦘) ⊆₁ I.","proof":"rewrite unionC.\nrewrite path_ut_first.\nrepeat case_union _ _ .\nrewrite dom_union.\napply set_subset_union_l.\nsplit.\n{\napply ar_int_ct_issuable_in_I.\n}\nrewrite !seqA.\nassert (dom_rel (rfe ⨾ (ar_int G ∪ rfe)＊ ⨾ ⦗issuable G sc T⦘) ⊆₁ (I)) as D.\n{\nunfold issuable.\nrewrite id_inter with (s := _ ∩₁ _).\nrewrite <- !seqA.\napply dom_rel_iord_ext_parts.\n3: {\nerewrite init_issued; eauto.\nbasic_solver.\n}\n2: {\nrewrite ar_int_in_sb, rfe_in_rf, sb_E_ENI, rf_E_ENI, unionK, <- ct_begin, ct_of_trans; auto.\n{\nbasic_solver.\n}\napply E_ENI_trans.\n}\ntransitivity (AR G sc); [| unfold iord_simpl; basic_solver 10].\nunfold AR.\nhahn_frame.\napply map_rel_mori; [done| ].\nerewrite eqv_rel_mori with (x := _ ∩₁ W); [| intro; apply proj2].\nrewrite (dom_l (wf_rfeD WF)) at 1.\nhahn_frame.\narewrite (rfe ⊆ ar_int G ∪ rfe) at 1.\nrewrite <- ct_begin.\napply clos_trans_mori.\nunfold ar.\nbasic_solver.\n}\napply dom_rel_helper in D.\nrewrite D.\nrewrite <- !seqA.\ndo 3 rewrite dom_seq.\nrewrite !seqA.\nrewrite rtE.\nrepeat case_union _ _.\nrewrite dom_union.\napply set_subset_union_l.\nsplit; [basic_solver| ].\nrewrite issued_in_issuable at 1; eauto.\napply ar_int_ct_issuable_in_I.\n"},{"statement":"Lemma sw_in_Csw_sb :\n  sw ⨾ ⦗C ∪₁ dom_rel (sb^? ⨾ ⦗ I ⦘)⦘ ⊆ ⦗ C ⦘ ⨾ sw ∪ sb.","proof":"rewrite !id_union.\nrewrite seq_union_r.\nunionL.\n{\nrewrite sw_covered; eauto.\nbasic_solver.\n}\nassert (forall (s : actid -> Prop), s ∪₁ set_compl s ≡₁ fun _ => True) as AA.\n{\nsplit; [basic_solver|].\nunfolder.\nins.\napply classic.\n}\narewrite (sw ⊆ ⦗ C ∪₁ set_compl C ⦘ ⨾ sw) at 1.\n{\nrewrite AA.\nby rewrite seq_id_l.\n}\nrewrite id_union, !seq_union_l.\napply union_mori; [basic_solver|].\nrewrite (dom_r (wf_swD WF)).\nrewrite sw_in_ar0; auto.\nremember (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺) as ax.\nrewrite !seq_union_l, !seq_union_r.\nunionL; [|basic_solver].\nsubst ax.\nrewrite !seqA.\narewrite ((sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ⦗W⦘) by basic_solver.\narewrite (⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⊆ release).\n{\nunfold imm_s_hb.release, imm_s_hb.rs.\nby rewrite <- inclusion_id_rt, seq_id_r.\n}\nenough (dom_rel (⦗W⦘ ⨾ (rfe ∪ ar_int G)⁺ ⨾ ⦗FR ∩₁ Acq⦘ ⨾ ⦗dom_rel (sb^? ⨾ ⦗I⦘)⦘) ⊆₁ I) as BB.\n{\nrewrite (dom_rel_helper BB).\nseq_rewrite (dom_rel_helper dom_release_issued).\nbasic_solver.\n}\nrewrite <- !seqA.\nrewrite dom_rel_eqv_dom_rel.\nrewrite !seqA.\narewrite (⦗FR ∩₁ Acq⦘ ⨾ sb^? ⊆ (rfe ∪ ar_int G)^?).\n{\nrewrite !crE, !seq_union_r.\napply union_mori; [basic_solver|].\nunionR right.\nrewrite set_inter_union_l, id_union, seq_union_l.\nrewrite sb_from_r_acq_in_bob.\narewrite (Acq ⊆₁ Acq/Rel) by mode_solver.\nrewrite sb_from_f_in_bob.\nrewrite bob_in_ar_int.\neauto with hahn.\n}\nseq_rewrite ct_cr.\nrewrite issued_in_issuable at 1; eauto.\napply rfe_ar_int_ct_issuable_in_I.\n"},{"statement":"Lemma hb_in_Chb_sb :\n  hb ⨾ ⦗C ∪₁ dom_rel (sb^? ⨾ ⦗ I ⦘)⦘ ⊆ ⦗ C ⦘ ⨾ hb ∪ sb.","proof":"unfold imm_s_hb.hb.\nintros x y HH.\ndestruct_seq_r HH as DOM.\napply clos_trans_tn1 in HH.\ninduction HH as [y [HH|HH]|y z AA].\n{\nby right.\n}\n{\nassert ((⦗C⦘ ⨾ sw ∪ sb) x y) as [ZZ|ZZ].\n3: by right.\n2: {\ndestruct_seq_l ZZ as CX.\nleft.\napply seq_eqv_l.\nsplit; auto.\napply ct_step.\nby right.\n}\napply sw_in_Csw_sb; auto.\napply seq_eqv_r.\nsplits; auto.\n}\nassert (sb y z -> (C ∪₁ dom_rel (sb^? ⨾ ⦗I⦘)) y) as DOMY.\n{\nintros SB.\ndestruct DOM as [DOM|DOM].\n2: {\nright.\ngeneralize (@sb_trans G) SB DOM.\nbasic_solver 10.\n}\nleft.\neapply dom_sb_covered; eauto.\neexists.\napply seq_eqv_r.\nsplit; eauto.\n}\nassert ((C ∪₁ dom_rel (sb^? ⨾ ⦗I⦘)) y) as BB.\n2: {\nset (CC:=BB).\napply IHHH in CC.\ndestruct CC as [CC|CC].\n{\nleft.\ndestruct_seq_l CC as XX.\napply seq_eqv_l.\nsplit; auto.\napply ct_ct.\nexists y.\nsplit; eauto; try by apply ct_step.\n}\ndestruct AA as [AA|AA].\n{\nright.\neapply (@sb_trans G); eauto.\n}\nassert ((sw ⨾ ⦗C ∪₁ dom_rel (sb^? ⨾ ⦗I⦘)⦘) y z) as DD.\n{\napply seq_eqv_r.\nby split.\n}\neapply sw_in_Csw_sb in DD; auto.\ndestruct DD as [DD|DD].\n2: {\nright.\neapply (@sb_trans G); eauto.\n}\nleft.\napply seq_eqv_l.\nsplit.\n2: {\napply ct_ct.\neexists.\nsplit; apply ct_step; [left|right]; eauto.\n}\nassert (C y) as CY.\n{\nby destruct_seq_l DD as XX.\n}\neapply dom_sb_covered; eauto.\neexists.\napply seq_eqv_r.\nsplit; eauto.\n}\ndestruct AA as [|AA]; [by intuition|].\nassert ((sw ⨾ ⦗C ∪₁ dom_rel (sb^? ⨾ ⦗I⦘)⦘) y z) as DD.\n{\napply seq_eqv_r.\nby split.\n}\neapply sw_in_Csw_sb in DD; auto.\ndestruct DD as [DD|]; [|by intuition].\nleft.\nby destruct_seq_l DD as CY.\n"},{"statement":"Lemma dom_sb_sc_ct_coverable :\n  dom_rel ((sb ∪ sc)^+ ⨾ ⦗coverable G sc T⦘) ⊆₁ covered T.","proof":"unfold coverable, covered.\nrewrite id_inter, <- seqA.\napply dom_rel_iord_ext_parts.\n{\ntransitivity (SB G sc); [| unfold iord_simpl; basic_solver 10].\nunfold SB.\nbasic_solver.\n}\n2: {\nrewrite init_covered; eauto.\nbasic_solver.\n}\nrewrite inclusion_seq_eqv_r.\nrewrite <- ct_of_trans with (r := _ × _); [| basic_solver].\napply clos_trans_mori.\nrewrite (wf_scE WFSC), (no_sc_to_init WF WFSC), wf_sbE, no_sb_to_init; eauto.\nbasic_solver.\n"},{"statement":"Lemma dom_sb_sc_ct_covered :\n  dom_rel ((sb ∪ sc)^+ ⨾ ⦗covered T⦘) ⊆₁ covered T.","proof":"rewrite covered_in_coverable at 1; eauto.\nby apply dom_sb_sc_ct_coverable.\n"}]