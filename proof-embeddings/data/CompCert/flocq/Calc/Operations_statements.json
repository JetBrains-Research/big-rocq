{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/flocq/Calc/Operations.v","fileSamples":[{"statement":"(m1 e1 m2 e2 : Z) (He : (e1 > e2)%Z) : (e2 <= e1)%Z.","proofString":"lia."},{"statement":"(m1 e1 m2 e2 : Z) : snd\n  (if (e1 <=? e2)%Z\n   then (m1, (m2 * beta ^ (e2 - e1))%Z, e1)\n   else ((m1 * beta ^ (e1 - e2))%Z, m2, e2)) = Z.min e1 e2.","proofString":"generalize (Zle_cases e1 e2);case (Zle_bool e1 e2); intros He.\ncase (Zmin_spec e1 e2); intros (H1,H2); easy.\ncase (Zmin_spec e1 e2); intros (H1,H2); easy."},{"statement":"(m1 e1 m2 e2 : Z) (He : (e1 <= e2)%Z) : snd (m1, (m2 * beta ^ (e2 - e1))%Z, e1) = Z.min e1 e2.","proofString":"case (Zmin_spec e1 e2); intros (H1,H2); easy."},{"statement":"(m1 e1 m2 e2 : Z) (He : (e1 > e2)%Z) : snd ((m1 * beta ^ (e1 - e2))%Z, m2, e2) = Z.min e1 e2.","proofString":"case (Zmin_spec e1 e2); intros (H1,H2); easy."},{"statement":"(f1 f2 : float beta) : F2R (Fplus f1 f2) = (F2R f1 + F2R f2)%R.","proofString":"unfold Fplus.\ngeneralize (Falign_spec f1 f2).\ndestruct (Falign f1 f2) as ((m1, m2), e).\nintros (H1, H2).\nrewrite H1, H2.\nunfold F2R.\nsimpl.\nrewrite plus_IZR.\napply Rmult_plus_distr_r."},{"statement":"(m1 m2 e : Z) : Fplus {| Fnum := m1; Fexp := e |} {| Fnum := m2; Fexp := e |} =\n{| Fnum := m1 + m2; Fexp := e |}.","proofString":"unfold Fplus.\nsimpl.\nnow rewrite Zle_bool_refl, Zminus_diag, Zmult_1_r."},{"statement":"(f1 f2 : float beta) : Fexp (Fplus f1 f2) = Z.min (Fexp f1) (Fexp f2).","proofString":"unfold Fplus.\nrewrite <- Falign_spec_exp.\nnow destruct (Falign f1 f2) as ((p,q),e)."},{"statement":"(f1 f2 : float beta) : F2R (Fplus f1 (Fopp f2)) = (F2R f1 - F2R f2)%R.","proofString":"rewrite F2R_plus, F2R_opp.\nring."},{"statement":"(f1 f2 : float beta) : (F2R f1 + - F2R f2)%R = (F2R f1 - F2R f2)%R.","proofString":"ring."},{"statement":"(m1 m2 e : Z) : Fminus {| Fnum := m1; Fexp := e |} {| Fnum := m2; Fexp := e |} =\n{| Fnum := m1 - m2; Fexp := e |}.","proofString":"unfold Fminus.\napply Fplus_same_exp."},{"statement":"(m1 m2 e : Z) : Fplus {| Fnum := m1; Fexp := e |} (Fopp {| Fnum := m2; Fexp := e |}) =\n{| Fnum := m1 - m2; Fexp := e |}.","proofString":"apply Fplus_same_exp."},{"statement":"(m1 e1 m2 e2 : Z) : (IZR (m1 * m2) * bpow (e1 + e2))%R =\n(IZR m1 * bpow e1 * (IZR m2 * bpow e2))%R.","proofString":"rewrite mult_IZR, bpow_plus.\nring."},{"statement":"(m1 e1 m2 e2 : Z) : (IZR m1 * IZR m2 * (bpow e1 * bpow e2))%R =\n(IZR m1 * bpow e1 * (IZR m2 * bpow e2))%R.","proofString":"ring."}]}