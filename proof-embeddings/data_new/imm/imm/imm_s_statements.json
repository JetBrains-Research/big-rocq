{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/imm/src/imm/imm_s.v","fileSamples":[{"statement":"psc ⊆ ⦗E⦘ ⨾ psc ⨾ ⦗E⦘.","conclusion":"psc ⊆ ⦗E⦘ ⨾ psc ⨾ ⦗E⦘","hypotheses":"","proofString":"unfold psc; rewrite (wf_hbE WF) at 1 2.\nbasic_solver 42."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ hb ⨾ ⦗E⦘) ⨾ eco ⨾ (⦗E⦘ ⨾ hb ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘\n⊆ ⦗E⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗E⦘.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ hb ⨾ ⦗E⦘) ⨾ eco ⨾ (⦗E⦘ ⨾ hb ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘\n⊆ ⦗E⦘ ⨾ (⦗F ∩₁ Sc⦘ ⨾ hb ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗E⦘","hypotheses":"","proofString":"basic_solver 42."},{"statement":"ar sc ⊆ ⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘.","conclusion":"ar sc ⊆ ⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘","hypotheses":"","proofString":"unfold ar.\nrewrite (wf_scE WF_SC), (wf_ar_intE WF), (wf_rfeE WF) at 1.\nbasic_solver 42."},{"statement":"sc ∪ rfe ∪ ar_int ⊆ ⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int) ⨾ ⦗E⦘.","conclusion":"sc ∪ rfe ∪ ar_int ⊆ ⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int) ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite (wf_scE WF_SC), (wf_ar_intE WF), (wf_rfeE WF) at 1.\nbasic_solver 42."},{"statement":"⦗E⦘ ⨾ sc ⨾ ⦗E⦘ ∪ ⦗E⦘ ⨾ rfe ⨾ ⦗E⦘ ∪ ⦗E⦘ ⨾ ar_int ⨾ ⦗E⦘\n⊆ ⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int) ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ sc ⨾ ⦗E⦘ ∪ ⦗E⦘ ⨾ rfe ⨾ ⦗E⦘ ∪ ⦗E⦘ ⨾ ar_int ⨾ ⦗E⦘\n⊆ ⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int) ⨾ ⦗E⦘","hypotheses":"","proofString":"basic_solver 42."},{"statement":"psc ⊆ ⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘.","conclusion":"psc ⊆ ⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘","hypotheses":"","proofString":"unfold psc; basic_solver 42."},{"statement":"psc ⊆ psc ⨾ ⦗fun x : actid => ~ is_init x⦘.","conclusion":"psc ⊆ psc ⨾ ⦗fun x : actid => ~ is_init x⦘","hypotheses":"","proofString":"rewrite wf_pscD at 1.\ngeneralize (read_or_fence_is_not_init WF).\nbasic_solver 42."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc ⨾ ⦗fun x : actid => ~ is_init x⦘.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc ⨾ ⦗fun x : actid => ~ is_init x⦘","hypotheses":"","proofString":"generalize (read_or_fence_is_not_init WF).\nbasic_solver 42."},{"statement":"(forall a : actid, is_r lab a \\/ is_f lab a -> ~ is_init a) ->\n⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc ⨾ ⦗fun x : actid => ~ is_init x⦘.","conclusion":"(forall a : actid, is_r lab a \\/ is_f lab a -> ~ is_init a) ->\n⦗F ∩₁ Sc⦘ ⨾ psc ⨾ ⦗F ∩₁ Sc⦘ ⊆ psc ⨾ ⦗fun x : actid => ~ is_init x⦘","hypotheses":"","proofString":"basic_solver 42."},{"statement":"sc\n⊆ set_compl (fun a : actid => is_init a)\n  × set_compl (fun a : actid => is_init a).","conclusion":"sc\n⊆ set_compl (fun a : actid => is_init a)\n  × set_compl (fun a : actid => is_init a)","hypotheses":"","proofString":"rewrite wf_scD, init_pln; eauto.\nmode_solver."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ set_compl Pln × set_compl Pln.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ set_compl Pln × set_compl Pln","hypotheses":"","proofString":"mode_solver."},{"statement":"⦗set_compl (fun a : actid => is_init a)⦘\n⨾ sc ⨾ ⦗set_compl (fun a : actid => is_init a)⦘\n≡ (⦗set_compl (fun a : actid => is_init a)⦘\n   ⨾ sc ⨾ ⦗set_compl (fun a : actid => is_init a)⦘)\n  ⨾ ⦗fun x : actid => ~ is_init x⦘.","conclusion":"⦗set_compl (fun a : actid => is_init a)⦘\n⨾ sc ⨾ ⦗set_compl (fun a : actid => is_init a)⦘\n≡ (⦗set_compl (fun a : actid => is_init a)⦘\n   ⨾ sc ⨾ ⦗set_compl (fun a : actid => is_init a)⦘)\n  ⨾ ⦗fun x : actid => ~ is_init x⦘","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗set_compl W_ex⦘ ⨾ co ⨾ ((rf ⨾ rmw)＊)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co ⨾ ((rf ⨾ rmw)＊)⁻¹ ⊆ co^?","hypotheses":"","proofString":"rewrite transp_rt.\neapply rt_ind_right with (P:= fun r => ⦗set_compl W_ex⦘ ⨾ co ⨾ r).\nby eauto with hahn.\nbasic_solver.\nins.\narewrite (⦗set_compl W_ex⦘ ⊆ ⦗set_compl W_ex⦘ ⨾ ⦗set_compl W_ex⦘) by basic_solver.\nsin_rewrite H.\nrewrite crE at 1.\nrelsf.\nunionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"⦗set_compl W_ex⦘ ⨾ co ⨾ ((rf ⨾ rmw)⁻¹)＊ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co ⨾ ((rf ⨾ rmw)⁻¹)＊ ⊆ co^?","hypotheses":"","proofString":"eapply rt_ind_right with (P:= fun r => ⦗set_compl W_ex⦘ ⨾ co ⨾ r).\nby eauto with hahn.\nbasic_solver.\nins.\narewrite (⦗set_compl W_ex⦘ ⊆ ⦗set_compl W_ex⦘ ⨾ ⦗set_compl W_ex⦘) by basic_solver.\nsin_rewrite H.\nrewrite crE at 1.\nrelsf.\nunionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"good_ctx (fun r : relation actid => ⦗set_compl W_ex⦘ ⨾ co ⨾ r).","conclusion":"good_ctx (fun r : relation actid => ⦗set_compl W_ex⦘ ⨾ co ⨾ r)","hypotheses":"","proofString":"by eauto with hahn."},{"statement":"⦗set_compl W_ex⦘ ⨾ co ⨾ ⦗fun _ : actid => True⦘ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co ⨾ ⦗fun _ : actid => True⦘ ⊆ co^?","hypotheses":"","proofString":"basic_solver."},{"statement":"forall k : relation actid,\n⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^? ->\n⦗set_compl W_ex⦘ ⨾ co ⨾ k ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"forall k : relation actid,\n⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^? ->\n⦗set_compl W_ex⦘ ⨾ co ⨾ k ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"","proofString":"ins.\narewrite (⦗set_compl W_ex⦘ ⊆ ⦗set_compl W_ex⦘ ⨾ ⦗set_compl W_ex⦘) by basic_solver.\nsin_rewrite H.\nrewrite crE at 1.\nrelsf.\nunionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co ⨾ k ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"arewrite (⦗set_compl W_ex⦘ ⊆ ⦗set_compl W_ex⦘ ⨾ ⦗set_compl W_ex⦘) by basic_solver.\nsin_rewrite H.\nrewrite crE at 1.\nrelsf.\nunionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"sin_rewrite H.\nrewrite crE at 1.\nrelsf.\nunionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ co^? ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co^? ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"rewrite crE at 1.\nrelsf.\nunionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ co) ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ co) ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"relsf.\nunionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ (rf ⨾ rmw)⁻¹ ∪ ⦗set_compl W_ex⦘ ⨾ co ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ (rf ⨾ rmw)⁻¹ ∪ ⦗set_compl W_ex⦘ ⨾ co ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"unionL.\nrewrite rmw_W_ex.\nbasic_solver.\nrewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"rewrite rmw_W_ex.\nbasic_solver."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ (rf ⨾ rmw ⨾ ⦗W_ex⦘)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ (rf ⨾ rmw ⨾ ⦗W_ex⦘)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"basic_solver."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ co ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co ⨾ (rf ⨾ rmw)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"rewrite rf_rmw_in_coimm; auto; try apply IMMCON.\nrewrite co_immediate_co_in_co_cr; auto.\nbasic_solver.\napply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ co ⨾ (immediate co)⁻¹ ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co ⨾ (immediate co)⁻¹ ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"rewrite co_immediate_co_in_co_cr; auto.\nbasic_solver."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : ⦗set_compl W_ex⦘ ⨾ co^? ⊆ co^?.","conclusion":"⦗set_compl W_ex⦘ ⨾ co^? ⊆ co^?","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"basic_solver."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : sc_per_loc G.","conclusion":"sc_per_loc G","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"apply coherence_sc_per_loc.\napply IMMCON."},{"statement":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?) : coherence G.","conclusion":"coherence G","hypotheses":"(k : relation actid) (H : ⦗set_compl W_ex⦘ ⨾ co ⨾ k ⊆ co^?)","proofString":"apply IMMCON."},{"statement":"sc⁺ ∪ (sc＊ ⨾ rfe)⁺ ⨾ sc＊ ⊆ sc ∪ rfe.","conclusion":"sc⁺ ∪ (sc＊ ⨾ rfe)⁺ ⨾ sc＊ ⊆ sc ∪ rfe","hypotheses":"","proofString":"generalize (sc_trans WF_SC); ins; relsf; unionL; [basic_solver|].\nrewrite crE at 2; relsf; unionL.\narewrite (sc^? ⨾ rfe ⊆ rfe).\nrewrite crE; relsf; unionL; [basic_solver|].\nrewrite (dom_l (wf_rfeD WF)) at 1.\nrewrite (dom_r (wf_scD WF_SC)) at 1.\ntype_solver.\nrewrite ct_begin, rtE; relsf; unionL; [basic_solver|].\nrewrite ct_begin.\nrewrite (wf_rfeD WF).\ntype_solver.\nrewrite (dom_r (wf_rfeD WF)).\nrewrite <- !seqA.\nrewrite inclusion_ct_seq_eqv_r, !seqA.\nrewrite (dom_l (wf_scD WF_SC)) at 2.\ntype_solver."},{"statement":"(H : transitive sc) : (sc^? ⨾ rfe)⁺ ⨾ sc^? ⊆ sc ∪ rfe.","conclusion":"(sc^? ⨾ rfe)⁺ ⨾ sc^? ⊆ sc ∪ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite crE at 2; relsf; unionL.\narewrite (sc^? ⨾ rfe ⊆ rfe).\nrewrite crE; relsf; unionL; [basic_solver|].\nrewrite (dom_l (wf_rfeD WF)) at 1.\nrewrite (dom_r (wf_scD WF_SC)) at 1.\ntype_solver.\nrewrite ct_begin, rtE; relsf; unionL; [basic_solver|].\nrewrite ct_begin.\nrewrite (wf_rfeD WF).\ntype_solver.\nrewrite (dom_r (wf_rfeD WF)).\nrewrite <- !seqA.\nrewrite inclusion_ct_seq_eqv_r, !seqA.\nrewrite (dom_l (wf_scD WF_SC)) at 2.\ntype_solver."},{"statement":"(H : transitive sc) : (sc^? ⨾ rfe)⁺ ⊆ sc ∪ rfe.","conclusion":"(sc^? ⨾ rfe)⁺ ⊆ sc ∪ rfe","hypotheses":"(H : transitive sc)","proofString":"arewrite (sc^? ⨾ rfe ⊆ rfe).\nrewrite crE; relsf; unionL; [basic_solver|].\nrewrite (dom_l (wf_rfeD WF)) at 1.\nrewrite (dom_r (wf_scD WF_SC)) at 1.\ntype_solver.\nrewrite ct_begin, rtE; relsf; unionL; [basic_solver|].\nrewrite ct_begin.\nrewrite (wf_rfeD WF).\ntype_solver."},{"statement":"(H : transitive sc) : sc^? ⨾ rfe ⊆ rfe.","conclusion":"sc^? ⨾ rfe ⊆ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite crE; relsf; unionL; [basic_solver|].\nrewrite (dom_l (wf_rfeD WF)) at 1.\nrewrite (dom_r (wf_scD WF_SC)) at 1.\ntype_solver."},{"statement":"(H : transitive sc) : sc ⨾ rfe ⊆ rfe.","conclusion":"sc ⨾ rfe ⊆ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite (dom_l (wf_rfeD WF)) at 1.\nrewrite (dom_r (wf_scD WF_SC)) at 1.\ntype_solver."},{"statement":"(H : transitive sc) : sc ⨾ ⦗W⦘ ⨾ rfe ⊆ rfe.","conclusion":"sc ⨾ ⦗W⦘ ⨾ rfe ⊆ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite (dom_r (wf_scD WF_SC)) at 1.\ntype_solver."},{"statement":"(H : transitive sc) : (sc ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗W⦘ ⨾ rfe ⊆ rfe.","conclusion":"(sc ⨾ ⦗F ∩₁ Sc⦘) ⨾ ⦗W⦘ ⨾ rfe ⊆ rfe","hypotheses":"(H : transitive sc)","proofString":"type_solver."},{"statement":"(H : transitive sc) : rfe⁺ ⊆ sc ∪ rfe.","conclusion":"rfe⁺ ⊆ sc ∪ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite ct_begin, rtE; relsf; unionL; [basic_solver|].\nrewrite ct_begin.\nrewrite (wf_rfeD WF).\ntype_solver."},{"statement":"(H : transitive sc) : rfe ⨾ rfe⁺ ⊆ sc ∪ rfe.","conclusion":"rfe ⨾ rfe⁺ ⊆ sc ∪ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite ct_begin.\nrewrite (wf_rfeD WF).\ntype_solver."},{"statement":"(H : transitive sc) : rfe ⨾ rfe ⨾ rfe＊ ⊆ sc ∪ rfe.","conclusion":"rfe ⨾ rfe ⨾ rfe＊ ⊆ sc ∪ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite (wf_rfeD WF).\ntype_solver."},{"statement":"(H : transitive sc) : (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘)＊\n⊆ sc ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘.","conclusion":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ (⦗W⦘ ⨾ rfe ⨾ ⦗R⦘)＊\n⊆ sc ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘","hypotheses":"(H : transitive sc)","proofString":"type_solver."},{"statement":"(H : transitive sc) : (sc^? ⨾ rfe)⁺ ⨾ sc ⊆ sc ∪ rfe.","conclusion":"(sc^? ⨾ rfe)⁺ ⨾ sc ⊆ sc ∪ rfe","hypotheses":"(H : transitive sc)","proofString":"rewrite (dom_r (wf_rfeD WF)).\nrewrite <- !seqA.\nrewrite inclusion_ct_seq_eqv_r, !seqA.\nrewrite (dom_l (wf_scD WF_SC)) at 2.\ntype_solver."},{"statement":"(H : transitive sc) : (sc^? ⨾ rfe ⨾ ⦗R⦘)⁺ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘.","conclusion":"(sc^? ⨾ rfe ⨾ ⦗R⦘)⁺ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘","hypotheses":"(H : transitive sc)","proofString":"rewrite <- !seqA.\nrewrite inclusion_ct_seq_eqv_r, !seqA.\nrewrite (dom_l (wf_scD WF_SC)) at 2.\ntype_solver."},{"statement":"(H : transitive sc) : ((sc^? ⨾ rfe) ⨾ ⦗R⦘)⁺ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘.","conclusion":"((sc^? ⨾ rfe) ⨾ ⦗R⦘)⁺ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘","hypotheses":"(H : transitive sc)","proofString":"rewrite inclusion_ct_seq_eqv_r, !seqA.\nrewrite (dom_l (wf_scD WF_SC)) at 2.\ntype_solver."},{"statement":"(H : transitive sc) : (sc^? ⨾ rfe)⁺ ⨾ ⦗R⦘ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘.","conclusion":"(sc^? ⨾ rfe)⁺ ⨾ ⦗R⦘ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘","hypotheses":"(H : transitive sc)","proofString":"rewrite (dom_l (wf_scD WF_SC)) at 2.\ntype_solver."},{"statement":"(H : transitive sc) : (sc^? ⨾ rfe)⁺ ⨾ ⦗R⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘.","conclusion":"(sc^? ⨾ rfe)⁺ ⨾ ⦗R⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⊆ sc ∪ rfe ⨾ ⦗R⦘","hypotheses":"(H : transitive sc)","proofString":"type_solver."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘)⁺ ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘)⁺ ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"rewrite inclusion_ct_seq_eqv_l, inclusion_ct_seq_eqv_r.\nunfold ar.\ndestruct WF_SC.\nunfolder; ins; desf.\neapply tot_ex; eauto; try basic_solver.\nintro; eapply ACYC_EXT.\neapply t_trans; unfold ar; [basic_solver| apply t_step; basic_solver].\nintro; eapply ACYC_EXT; unfold ar; basic_solver."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ (ar sc)⁺ ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ (ar sc)⁺ ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"unfold ar.\ndestruct WF_SC.\nunfolder; ins; desf.\neapply tot_ex; eauto; try basic_solver.\nintro; eapply ACYC_EXT.\neapply t_trans; unfold ar; [basic_solver| apply t_step; basic_solver].\nintro; eapply ACYC_EXT; unfold ar; basic_solver."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int)⁺ ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int)⁺ ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"destruct WF_SC.\nunfolder; ins; desf.\neapply tot_ex; eauto; try basic_solver.\nintro; eapply ACYC_EXT.\neapply t_trans; unfold ar; [basic_solver| apply t_step; basic_solver].\nintro; eapply ACYC_EXT; unfold ar; basic_solver."},{"statement":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc) : ⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int)⁺ ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ (sc ∪ rfe ∪ ar_int)⁺ ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc)","proofString":"unfolder; ins; desf.\neapply tot_ex; eauto; try basic_solver.\nintro; eapply ACYC_EXT.\neapply t_trans; unfold ar; [basic_solver| apply t_step; basic_solver].\nintro; eapply ACYC_EXT; unfold ar; basic_solver."},{"statement":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc) (x y : actid) (H : is_f lab x) (H5 : is_sc lab x) (H4 : E x) (H0 : (fun x0 y0 : actid => (sc x0 y0 \\/ rfe x0 y0) \\/ ar_int x0 y0)⁺ x y) (H1 : E y) (H2 : is_f lab y) (H3 : is_sc lab y) : sc x y.","conclusion":"sc x y","hypotheses":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc) (x y : actid) (H : is_f lab x) (H5 : is_sc lab x) (H4 : E x) (H0 : (fun x0 y0 : actid => (sc x0 y0 \\/ rfe x0 y0) \\/ ar_int x0 y0)⁺ x y) (H1 : E y) (H2 : is_f lab y) (H3 : is_sc lab y)","proofString":"eapply tot_ex; eauto; try basic_solver.\nintro; eapply ACYC_EXT.\neapply t_trans; unfold ar; [basic_solver| apply t_step; basic_solver].\nintro; eapply ACYC_EXT; unfold ar; basic_solver."},{"statement":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc) (x y : actid) (H : is_f lab x) (H5 : is_sc lab x) (H4 : E x) (H0 : (fun x0 y0 : actid => (sc x0 y0 \\/ rfe x0 y0) \\/ ar_int x0 y0)⁺ x y) (H1 : E y) (H2 : is_f lab y) (H3 : is_sc lab y) : ~ sc y x.","conclusion":"~ sc y x","hypotheses":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc) (x y : actid) (H : is_f lab x) (H5 : is_sc lab x) (H4 : E x) (H0 : (fun x0 y0 : actid => (sc x0 y0 \\/ rfe x0 y0) \\/ ar_int x0 y0)⁺ x y) (H1 : E y) (H2 : is_f lab y) (H3 : is_sc lab y)","proofString":"intro; eapply ACYC_EXT.\neapply t_trans; unfold ar; [basic_solver| apply t_step; basic_solver]."},{"statement":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc) (x y : actid) (H : is_f lab x) (H5 : is_sc lab x) (H4 : E x) (H0 : (fun x0 y0 : actid => (sc x0 y0 \\/ rfe x0 y0) \\/ ar_int x0 y0)⁺ x y) (H1 : E y) (H2 : is_f lab y) (H3 : is_sc lab y) : y <> x.","conclusion":"y <> x","hypotheses":"(wf_scE0 : sc ≡ ⦗E⦘ ⨾ sc ⨾ ⦗E⦘) (wf_scD0 : sc ≡ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) (sc_trans0 : transitive sc) (wf_sc_total0 : is_total (E ∩₁ F ∩₁ Sc) sc) (sc_irr0 : irreflexive sc) (x y : actid) (H : is_f lab x) (H5 : is_sc lab x) (H4 : E x) (H0 : (fun x0 y0 : actid => (sc x0 y0 \\/ rfe x0 y0) \\/ ar_int x0 y0)⁺ x y) (H1 : E y) (H2 : is_f lab y) (H3 : is_sc lab y)","proofString":"intro; eapply ACYC_EXT; unfold ar; basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfi ⨾ rmw)＊ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfi ⨾ rmw)＊ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite (dom_r (wf_rmwD WF)).\nsin_rewrite (rfi_rmw_in_sb_loc WF).\nrewrite rtE.\nrewrite inclusion_ct_seq_eqv_r.\ngeneralize (@sb_same_loc_trans G); intros HH.\nrewrite ct_of_trans; auto.\ngeneralize HH; basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfi ⨾ rmw ⨾ ⦗W⦘)＊ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfi ⨾ rmw ⨾ ⦗W⦘)＊ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"sin_rewrite (rfi_rmw_in_sb_loc WF).\nrewrite rtE.\nrewrite inclusion_ct_seq_eqv_r.\ngeneralize (@sb_same_loc_trans G); intros HH.\nrewrite ct_of_trans; auto.\ngeneralize HH; basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)＊ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)＊ ⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite rtE.\nrewrite inclusion_ct_seq_eqv_r.\ngeneralize (@sb_same_loc_trans G); intros HH.\nrewrite ct_of_trans; auto.\ngeneralize HH; basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ∩ same_loc ⨾ ⦗W⦘)⁺)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ∩ same_loc ⨾ ⦗W⦘)⁺)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite inclusion_ct_seq_eqv_r.\ngeneralize (@sb_same_loc_trans G); intros HH.\nrewrite ct_of_trans; auto.\ngeneralize HH; basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ∩ same_loc)⁺ ⨾ ⦗W⦘)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ∩ same_loc)⁺ ⨾ ⦗W⦘)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"generalize (@sb_same_loc_trans G); intros HH.\nrewrite ct_of_trans; auto.\ngeneralize HH; basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (HH : transitive (sb ∩ same_loc)) : (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ∩ same_loc)⁺ ⨾ ⦗W⦘)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (sb ∩ same_loc)⁺ ⨾ ⦗W⦘)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (HH : transitive (sb ∩ same_loc))","proofString":"rewrite ct_of_trans; auto.\ngeneralize HH; basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (HH : transitive (sb ∩ same_loc)) : (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ sb ∩ same_loc ⨾ ⦗W⦘)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘.","conclusion":"(sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ sb ∩ same_loc ⨾ ⦗W⦘)\n⊆ (sb ∩ same_loc)^? ⨾ ⦗W⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (HH : transitive (sb ∩ same_loc))","proofString":"generalize HH; basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ ⦗W⦘ ⨾ (ax⁺ ⨾ ⦗W_ex⦘)^?.","conclusion":"⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ ⦗W⦘ ⨾ (ax⁺ ⨾ ⦗W_ex⦘)^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite crE.\nrewrite rtE at 1.\nrewrite seq_union_r.\nunionL.\nbasic_solver.\nrewrite ct_begin, !seqA.\nrewrite rmw_W_ex at 1.\nrewrite !seqA.\nsin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite rtE at 1.\nrewrite seq_union_r.\nunionL.\nbasic_solver.\nrewrite ct_begin, !seqA.\nrewrite rmw_W_ex at 1.\nrewrite !seqA.\nsin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)⁺)\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)⁺)\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite seq_union_r.\nunionL.\nbasic_solver.\nrewrite ct_begin, !seqA.\nrewrite rmw_W_ex at 1.\nrewrite !seqA.\nsin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ ⦗fun _ : actid => True⦘ ∪ ⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)⁺\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ ⦗fun _ : actid => True⦘ ∪ ⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)⁺\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"unionL.\nbasic_solver.\nrewrite ct_begin, !seqA.\nrewrite rmw_W_ex at 1.\nrewrite !seqA.\nsin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ ⦗fun _ : actid => True⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ ⦗fun _ : actid => True⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)⁺\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)⁺\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite ct_begin, !seqA.\nrewrite rmw_W_ex at 1.\nrewrite !seqA.\nsin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite rmw_W_ex at 1.\nrewrite !seqA.\nsin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ rfe ⨾ (rmw ⨾ ⦗W_ex⦘) ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ rfe ⨾ (rmw ⨾ ⦗W_ex⦘) ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite !seqA.\nsin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ rfe ⨾ rmw ⨾ ⦗W_ex⦘ ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ rfe ⨾ rmw ⨾ ⦗W_ex⦘ ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"sin_rewrite rfe_rmw_in_rfe_ar_int_ct; auto.\narewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘ ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘ ⨾ (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"arewrite ((rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊).\narewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt.\narewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊.","conclusion":"(rfi ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rfi ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"arewrite (rfi ⊆ rf).\narewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (rf ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rf ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊.","conclusion":"(rf ⨾ rmw)＊ ⨾ (rfe ⨾ rmw ⨾ (rf ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"arewrite (rfe ⊆ rf).\nrewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (rf ⨾ rmw)＊ ⨾ (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊.","conclusion":"(rf ⨾ rmw)＊ ⨾ (rf ⨾ rmw ⨾ (rf ⨾ rmw)＊)＊ ⊆ (rf ⨾ rmw)＊","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite <- seqA, <- ct_begin.\nrewrite rt_of_ct.\napply rt_rt."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (rf ⨾ rmw)＊ ⨾ ((rf ⨾ rmw)⁺)＊ ⊆ (rf ⨾ rmw)＊.","conclusion":"(rf ⨾ rmw)＊ ⨾ ((rf ⨾ rmw)⁺)＊ ⊆ (rf ⨾ rmw)＊","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite rt_of_ct.\napply rt_rt."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (rf ⨾ rmw)＊ ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)＊.","conclusion":"(rf ⨾ rmw)＊ ⨾ (rf ⨾ rmw)＊ ⊆ (rf ⨾ rmw)＊","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"apply rt_rt."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"arewrite (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾  ⦗W_ex⦘).\nrewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver.\narewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘.","conclusion":"⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite <- seqA.\napply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊) ⨾ ⦗W_ex⦘.","conclusion":"⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⊆ (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊) ⨾ ⦗W_ex⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"apply codom_rel_helper.\nrewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊) ⊆₁ W_ex.","conclusion":"codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊) ⊆₁ W_ex","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite rtE, seq_union_r, codom_union.\nunionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : codom_rel (⦗W_ex⦘ ⨾ ⦗fun _ : actid => True⦘)\n∪₁ codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)⁺) ⊆₁ W_ex.","conclusion":"codom_rel (⦗W_ex⦘ ⨾ ⦗fun _ : actid => True⦘)\n∪₁ codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)⁺) ⊆₁ W_ex","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"unionL; [basic_solver|].\nrewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)⁺) ⊆₁ W_ex.","conclusion":"codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)⁺) ⊆₁ W_ex","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite rmw_W_ex at 1.\nrewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw ⨾ ⦗W_ex⦘)⁺) ⊆₁ W_ex.","conclusion":"codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw ⨾ ⦗W_ex⦘)⁺) ⊆₁ W_ex","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite <- seqA.\nrewrite inclusion_ct_seq_eqv_r.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : codom_rel (⦗W_ex⦘ ⨾ ((rf ⨾ rmw) ⨾ ⦗W_ex⦘)⁺) ⊆₁ W_ex.","conclusion":"codom_rel (⦗W_ex⦘ ⨾ ((rf ⨾ rmw) ⨾ ⦗W_ex⦘)⁺) ⊆₁ W_ex","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite inclusion_ct_seq_eqv_r.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)⁺ ⨾ ⦗W_ex⦘) ⊆₁ W_ex.","conclusion":"codom_rel (⦗W_ex⦘ ⨾ (rf ⨾ rmw)⁺ ⨾ ⦗W_ex⦘) ⊆₁ W_ex","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"arewrite_id ⦗W_ex⦘ at 1.\nrewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗fun _ : actid => True⦘ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗fun _ : actid => True⦘ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite seq_id_l.\nsin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ (rf ⨾ rmw)＊ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"sin_rewrite ar_int_rfe_ct_rfrmw_rt_in_ar_int_rfe_ct; auto.\nsubst ax.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ ax⁺ ⨾ ⦗W_ex⦘)","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"subst ax.\nbasic_solver."},{"statement":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘).","conclusion":"⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘\n⊆ ⦗W⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ (rfe ∪ ar_int)⁺ ⨾ ⦗W_ex⦘)","hypotheses":"","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺\n∪ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ sb\n⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺ ∪ sb.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺\n∪ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ sb\n⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"unionL; eauto with hahn.\ngeneralize (@sb_trans G).\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ sb\n⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺ ∪ sb.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ sb\n⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"generalize (@sb_trans G).\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : transitive sb ->\n⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ sb\n⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺ ∪ sb.","conclusion":"transitive sb ->\n⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ sb\n⊆ ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘.","conclusion":"(sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite !crE, !seq_union_l.\napply union_mori; [done|].\narewrite (⦗Acq⦘ ⊆ ⦗Acq/Rel⦘ ⨾ ⦗Acq⦘) at 1 by mode_solver.\nhahn_frame_r.\nrewrite <- id_inter.\nrewrite sb_to_f_in_bob.\nrewrite bob_in_ar_int.\nsubst ax.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ (sb ⨾ ⦗F⦘) ⨾ ⦗Acq⦘\n⊆ ⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ ax ⨾ ⦗Acq⦘.","conclusion":"⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ (sb ⨾ ⦗F⦘) ⨾ ⦗Acq⦘\n⊆ ⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ ax ⨾ ⦗Acq⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"apply union_mori; [done|].\narewrite (⦗Acq⦘ ⊆ ⦗Acq/Rel⦘ ⨾ ⦗Acq⦘) at 1 by mode_solver.\nhahn_frame_r.\nrewrite <- id_inter.\nrewrite sb_to_f_in_bob.\nrewrite bob_in_ar_int.\nsubst ax.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : (sb ⨾ ⦗F⦘) ⨾ ⦗Acq⦘ ⊆ ax ⨾ ⦗Acq⦘.","conclusion":"(sb ⨾ ⦗F⦘) ⨾ ⦗Acq⦘ ⊆ ax ⨾ ⦗Acq⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"arewrite (⦗Acq⦘ ⊆ ⦗Acq/Rel⦘ ⨾ ⦗Acq⦘) at 1 by mode_solver.\nhahn_frame_r.\nrewrite <- id_inter.\nrewrite sb_to_f_in_bob.\nrewrite bob_in_ar_int.\nsubst ax.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : sb ⨾ ⦗F⦘ ⨾ ⦗Acq/Rel⦘ ⨾ ⦗Acq⦘ ⊆ ax ⨾ ⦗Acq⦘.","conclusion":"sb ⨾ ⦗F⦘ ⨾ ⦗Acq/Rel⦘ ⨾ ⦗Acq⦘ ⊆ ax ⨾ ⦗Acq⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"hahn_frame_r.\nrewrite <- id_inter.\nrewrite sb_to_f_in_bob.\nrewrite bob_in_ar_int.\nsubst ax.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : sb ⨾ ⦗F⦘ ⨾ ⦗Acq/Rel⦘ ⊆ ax.","conclusion":"sb ⨾ ⦗F⦘ ⨾ ⦗Acq/Rel⦘ ⊆ ax","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite <- id_inter.\nrewrite sb_to_f_in_bob.\nrewrite bob_in_ar_int.\nsubst ax.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⊆ ax.","conclusion":"sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ⊆ ax","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite sb_to_f_in_bob.\nrewrite bob_in_ar_int.\nsubst ax.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : bob ⊆ ax.","conclusion":"bob ⊆ ax","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite bob_in_ar_int.\nsubst ax.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ar_int ⊆ ax.","conclusion":"ar_int ⊆ ax","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"subst ax.\neauto with hahn."},{"statement":"ar_int ⊆ rfe ∪ ar_int.","conclusion":"ar_int ⊆ rfe ∪ ar_int","hypotheses":"","proofString":"eauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : (ax⁺ ⨾ ⦗W_ex⦘)^? ⨾ ax ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"(ax⁺ ⨾ ⦗W_ex⦘)^? ⨾ ax ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"rewrite AA.\narewrite_id ⦗W_ex⦘.\nrewrite seq_id_r.\nrewrite cr_of_ct.\nseq_rewrite <- ct_end.\nseq_rewrite ct_cr.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : (ax⁺ ⨾ ⦗W_ex⦘)^? ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"(ax⁺ ⨾ ⦗W_ex⦘)^? ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"arewrite_id ⦗W_ex⦘.\nrewrite seq_id_r.\nrewrite cr_of_ct.\nseq_rewrite <- ct_end.\nseq_rewrite ct_cr.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : (ax⁺ ⨾ ⦗fun _ : actid => True⦘)^? ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"(ax⁺ ⨾ ⦗fun _ : actid => True⦘)^? ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"rewrite seq_id_r.\nrewrite cr_of_ct.\nseq_rewrite <- ct_end.\nseq_rewrite ct_cr.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : (ax⁺)^? ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"(ax⁺)^? ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"rewrite cr_of_ct.\nseq_rewrite <- ct_end.\nseq_rewrite ct_cr.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ax＊ ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"ax＊ ⨾ ax ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"seq_rewrite <- ct_end.\nseq_rewrite ct_cr.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ax⁺ ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"ax⁺ ⨾ ax^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"seq_rewrite ct_cr.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ax⁺ ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"ax⁺ ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : rfi ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"rfi ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"arewrite (rfi ⊆ sb).\ngeneralize (@sb_trans G).\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : sb ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"sb ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"generalize (@sb_trans G).\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : transitive sb -> sb ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb.","conclusion":"transitive sb -> sb ⨾ (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ⦗W_ex⦘ ⨾ rfi ⨾ ⦗Acq⦘ ⊆ ax.","conclusion":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗Acq⦘ ⊆ ax","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"subst ax.\nunfold imm_s_ppo.ar_int.\nrewrite (dom_r (wf_rfiD WF)) at 1.\nbasic_solver 10."},{"statement":"(AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ (rfe ∪ ar_int)^? ⨾ ⦗Acq⦘) : ⦗W_ex⦘ ⨾ rfi ⨾ ⦗Acq⦘ ⊆ rfe ∪ ar_int.","conclusion":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗Acq⦘ ⊆ rfe ∪ ar_int","hypotheses":"(AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ (rfe ∪ ar_int)^? ⨾ ⦗Acq⦘)","proofString":"unfold imm_s_ppo.ar_int.\nrewrite (dom_r (wf_rfiD WF)) at 1.\nbasic_solver 10."},{"statement":"(AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ (rfe ∪ ar_int)^? ⨾ ⦗Acq⦘) : ⦗W_ex⦘ ⨾ rfi ⨾ ⦗Acq⦘\n⊆ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","conclusion":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗Acq⦘\n⊆ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)","hypotheses":"(AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ (rfe ∪ ar_int)^? ⨾ ⦗Acq⦘)","proofString":"rewrite (dom_r (wf_rfiD WF)) at 1.\nbasic_solver 10."},{"statement":"(AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ (rfe ∪ ar_int)^? ⨾ ⦗Acq⦘) : ⦗W_ex⦘ ⨾ (rfi ⨾ ⦗R⦘) ⨾ ⦗Acq⦘\n⊆ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","conclusion":"⦗W_ex⦘ ⨾ (rfi ⨾ ⦗R⦘) ⨾ ⦗Acq⦘\n⊆ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)","hypotheses":"(AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ (rfe ∪ ar_int)^? ⨾ ⦗Acq⦘)","proofString":"basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ax⁺ ∪ ax⁺ ⨾ bob ⊆ ax⁺ ∪ sb.","conclusion":"ax⁺ ∪ ax⁺ ⨾ bob ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"rewrite bob_in_ar_int.\narewrite (ar_int ⊆ ax) by subst ax; eauto with hahn.\nrewrite ct_unit.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ax⁺ ∪ ax⁺ ⨾ ar_int ⊆ ax⁺ ∪ sb.","conclusion":"ax⁺ ∪ ax⁺ ⨾ ar_int ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"arewrite (ar_int ⊆ ax) by subst ax; eauto with hahn.\nrewrite ct_unit.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ax⁺ ∪ ax⁺ ⨾ ax ⊆ ax⁺ ∪ sb.","conclusion":"ax⁺ ∪ ax⁺ ⨾ ax ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"rewrite ct_unit.\neauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : ax⁺ ∪ ax⁺ ⊆ ax⁺ ∪ sb.","conclusion":"ax⁺ ∪ ax⁺ ⊆ ax⁺ ∪ sb","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"eauto with hahn."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : sb ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acq⦘ ⊆ sb ⨾ ⦗F ∩₁ Acq/Rel⦘.","conclusion":"sb ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acq⦘ ⊆ sb ⨾ ⦗F ∩₁ Acq/Rel⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"generalize (@sb_trans G).\nmode_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘) : transitive sb -> sb ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acq⦘ ⊆ sb ⨾ ⦗F ∩₁ Acq/Rel⦘.","conclusion":"transitive sb -> sb ⨾ sb ⨾ ⦗F⦘ ⨾ ⦗Acq⦘ ⊆ sb ⨾ ⦗F ∩₁ Acq/Rel⦘","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (AA : (sb ⨾ ⦗F⦘)^? ⨾ ⦗Acq⦘ ⊆ ax^? ⨾ ⦗Acq⦘)","proofString":"mode_solver 10."},{"statement":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ∪ sb\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?)\n  ⨾ (rfe ∪ ar_int)⁺ ⨾ sb^? ∪ sb.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺ ∪ sb\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?)\n  ⨾ (rfe ∪ ar_int)⁺ ⨾ sb^? ∪ sb","hypotheses":"","proofString":"apply union_mori; [|done].\nassert (⦗fun _ => True⦘ ⊆ sb^?) as HH by basic_solver.\nrewrite <- HH, seq_id_r.\nhahn_frame_r.\ngeneralize (@sb_trans G).\nbasic_solver 10."},{"statement":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?)\n  ⨾ (rfe ∪ ar_int)⁺ ⨾ sb^?.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?)\n  ⨾ (rfe ∪ ar_int)⁺ ⨾ sb^?","hypotheses":"","proofString":"assert (⦗fun _ => True⦘ ⊆ sb^?) as HH by basic_solver.\nrewrite <- HH, seq_id_r.\nhahn_frame_r.\ngeneralize (@sb_trans G).\nbasic_solver 10."},{"statement":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?) : ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?)\n  ⨾ (rfe ∪ ar_int)⁺ ⨾ sb^?.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?)\n  ⨾ (rfe ∪ ar_int)⁺ ⨾ sb^?","hypotheses":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?)","proofString":"rewrite <- HH, seq_id_r.\nhahn_frame_r.\ngeneralize (@sb_trans G).\nbasic_solver 10."},{"statement":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?) : ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?) ⨾ (rfe ∪ ar_int)⁺.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘ ⨾ (rfe ∪ ar_int)⁺\n⊆ (⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?) ⨾ (rfe ∪ ar_int)⁺","hypotheses":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?)","proofString":"hahn_frame_r.\ngeneralize (@sb_trans G).\nbasic_solver 10."},{"statement":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?) : ⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ ⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?.","conclusion":"⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ ⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?","hypotheses":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?)","proofString":"generalize (@sb_trans G).\nbasic_solver 10."},{"statement":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?) : transitive sb ->\n⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ ⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?.","conclusion":"transitive sb ->\n⦗Rel⦘ ⨾ (⦗F⦘ ⨾ sb)^? ⨾ ⦗W⦘ ⨾ (sb ∩ same_loc)^? ⨾ ⦗W⦘\n⊆ ⦗F ∩₁ Rel⦘ ⨾ sb ∪ ⦗W ∩₁ Rel⦘ ⨾ (sb ∩ same_loc ⨾ ⦗W⦘)^?","hypotheses":"(HH : ⦗fun _ : actid => True⦘ ⊆ sb^?)","proofString":"basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗F ∩₁ Sc⦘ ⨾ sb⁺ ⨾ ⦗F ∩₁ Sc⦘ ⊆ ax⁺.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb⁺ ⨾ ⦗F ∩₁ Sc⦘ ⊆ ax⁺","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"rewrite ct_of_trans; [|by apply sb_trans].\ndesf.\nrewrite <- ct_step; unfold imm_s_ppo.ar_int, imm_bob.bob, imm_bob.fwbob.\nmode_solver 21."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ax⁺.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ ax⁺","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"desf.\nrewrite <- ct_step; unfold imm_s_ppo.ar_int, imm_bob.bob, imm_bob.fwbob.\nmode_solver 21."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ (rfe ∪ ar_int)⁺.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ (rfe ∪ ar_int)⁺","hypotheses":"","proofString":"rewrite <- ct_step; unfold imm_s_ppo.ar_int, imm_bob.bob, imm_bob.fwbob.\nmode_solver 21."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ rfe\n  ∪ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n     ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb ∪ ppo ∪ detour\n     ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ rfe\n  ∪ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n     ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ∪ ⦗R ∩₁ Acq⦘ ⨾ sb ∪ ppo ∪ detour\n     ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)","hypotheses":"","proofString":"mode_solver 21."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : sb^? ⨾ sb^? ⊆ sb^?.","conclusion":"sb^? ⨾ sb^? ⊆ sb^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"generalize (@sb_trans G).\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : transitive sb -> sb^? ⨾ sb^? ⊆ sb^?.","conclusion":"transitive sb -> sb^? ⨾ sb^? ⊆ sb^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?.","conclusion":"sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int)","proofString":"desf.\nrewrite <- bob_in_ar_int, <- fwbob_in_bob.\nunfold imm_bob.fwbob.\nmode_solver 12."},{"statement":"sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?.","conclusion":"sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?","hypotheses":"","proofString":"rewrite <- bob_in_ar_int, <- fwbob_in_bob.\nunfold imm_bob.fwbob.\nmode_solver 12."},{"statement":"sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ fwbob G)^?.","conclusion":"sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ fwbob G)^?","hypotheses":"","proofString":"unfold imm_bob.fwbob.\nmode_solver 12."},{"statement":"sb^? ⨾ ⦗FW ∩₁ Rel⦘\n⊆ (rfe\n   ∪ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘\n      ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb))^?.","conclusion":"sb^? ⨾ ⦗FW ∩₁ Rel⦘\n⊆ (rfe\n   ∪ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘\n      ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb))^?","hypotheses":"","proofString":"mode_solver 12."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ ax^?.","conclusion":"sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"desf.\nrewrite <- bob_in_ar_int, <- fwbob_in_bob.\nunfold imm_bob.fwbob.\nmode_solver 12."},{"statement":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?) : sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ (rfe ∪ ar_int)^?.","conclusion":"sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ (rfe ∪ ar_int)^?","hypotheses":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?)","proofString":"rewrite <- bob_in_ar_int, <- fwbob_in_bob.\nunfold imm_bob.fwbob.\nmode_solver 12."},{"statement":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?) : sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ (rfe ∪ fwbob G)^?.","conclusion":"sb^? ⨾ ⦗F ∩₁ Sc⦘ ⊆ (rfe ∪ fwbob G)^?","hypotheses":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?)","proofString":"unfold imm_bob.fwbob.\nmode_solver 12."},{"statement":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?) : sb^? ⨾ ⦗F ∩₁ Sc⦘\n⊆ (rfe\n   ∪ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘\n      ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb))^?.","conclusion":"sb^? ⨾ ⦗F ∩₁ Sc⦘\n⊆ (rfe\n   ∪ (sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘\n      ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘ ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb))^?","hypotheses":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?)","proofString":"mode_solver 12."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : ⦗W ∩₁ Rel⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ sb ∩ same_loc ⨾ ⦗W⦘) ⊆ ax^?.","conclusion":"⦗W ∩₁ Rel⦘ ⨾ (⦗fun _ : actid => True⦘ ∪ sb ∩ same_loc ⨾ ⦗W⦘) ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"rewrite seq_union_r.\nunionL.\nbasic_solver.\nrewrite sb_from_w_rel_in_bob.\nsubst.\nunfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : ⦗W ∩₁ Rel⦘ ⨾ ⦗fun _ : actid => True⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘\n⊆ ax^?.","conclusion":"⦗W ∩₁ Rel⦘ ⨾ ⦗fun _ : actid => True⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘\n⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"unionL.\nbasic_solver.\nrewrite sb_from_w_rel_in_bob.\nsubst.\nunfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : ⦗W ∩₁ Rel⦘ ⨾ ⦗fun _ : actid => True⦘ ⊆ ax^?.","conclusion":"⦗W ∩₁ Rel⦘ ⨾ ⦗fun _ : actid => True⦘ ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"basic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⊆ ax^?.","conclusion":"⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"rewrite sb_from_w_rel_in_bob.\nsubst.\nunfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : bob ⊆ ax^?.","conclusion":"bob ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"subst.\nunfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?) : bob ⊆ (rfe ∪ ar_int)^?.","conclusion":"bob ⊆ (rfe ∪ ar_int)^?","hypotheses":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?)","proofString":"unfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?) : bob\n⊆ (rfe\n   ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘))^?.","conclusion":"bob\n⊆ (rfe\n   ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘))^?","hypotheses":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?)","proofString":"basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : ⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ ax^?.","conclusion":"⦗F ∩₁ Acq/Rel⦘ ⨾ sb ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"rewrite sb_from_f_in_fwbob.\nrewrite fwbob_in_bob.\nsubst.\nunfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : fwbob G ⊆ ax^?.","conclusion":"fwbob G ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"rewrite fwbob_in_bob.\nsubst.\nunfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : bob ⊆ ax^?.","conclusion":"bob ⊆ ax^?","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"subst.\nunfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?) : bob ⊆ (rfe ∪ ar_int)^?.","conclusion":"bob ⊆ (rfe ∪ ar_int)^?","hypotheses":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?)","proofString":"unfold imm_s_ppo.ar_int.\nbasic_solver 10."},{"statement":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?) : bob\n⊆ (rfe\n   ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘))^?.","conclusion":"bob\n⊆ (rfe\n   ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘))^?","hypotheses":"(BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ (rfe ∪ ar_int)^?)","proofString":"basic_solver 10."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : ⦗F ∩₁ Sc⦘ ⨾ ax^? ⨾ (ax^? ⨾ ax⁺)⁺ ⊆ ax⁺.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ ax^? ⨾ (ax^? ⨾ ax⁺)⁺ ⊆ ax⁺","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"rels.\nbasic_solver."},{"statement":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?) : ⦗F ∩₁ Sc⦘ ⨾ ax⁺ ⊆ ax⁺.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ ax⁺ ⊆ ax⁺","hypotheses":"(ax : actid -> actid -> Prop) (Heqax : ax = rfe ∪ ar_int) (BB : sb^? ⨾ ⦗FW ∩₁ Rel⦘ ⊆ ax^?)","proofString":"basic_solver."},{"statement":"(rfe ∪ ar_int)⁺ ⊆ (ar sc)⁺.","conclusion":"(rfe ∪ ar_int)⁺ ⊆ (ar sc)⁺","hypotheses":"","proofString":"unfold ar.\napply clos_trans_mori.\neauto with hahn."},{"statement":"(rfe ∪ ar_int)⁺ ⊆ (sc ∪ rfe ∪ ar_int)⁺.","conclusion":"(rfe ∪ ar_int)⁺ ⊆ (sc ∪ rfe ∪ ar_int)⁺","hypotheses":"","proofString":"apply clos_trans_mori.\neauto with hahn."},{"statement":"rfe ∪ ar_int ⊆ sc ∪ rfe ∪ ar_int.","conclusion":"rfe ∪ ar_int ⊆ sc ∪ rfe ∪ ar_int","hypotheses":"","proofString":"eauto with hahn."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"sin_rewrite f_sc_hb_f_sc_in_ar.\napply F_sc_ar_F_sc; done."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (ar sc)⁺ ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (ar sc)⁺ ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"apply F_sc_ar_F_sc; done."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"apply f_sc_hb_f_sc_in_sc; auto."},{"statement":"transitive sc.","conclusion":"transitive sc","hypotheses":"","proofString":"now apply WF_SC."},{"statement":"(TSC : transitive sc) : sc ⨾ sb ⨾ sc ⊆ sc.","conclusion":"sc ⨾ sb ⨾ sc ⊆ sc","hypotheses":"(TSC : transitive sc)","proofString":"rewrite (wf_scD WF_SC) at 1 2.\nrewrite !seqA.\nsin_rewrite f_sc_sb_f_sc_in_sc; auto.\nsin_rewrite !rewrite_trans; auto.\nclear; basic_solver 1."},{"statement":"(TSC : transitive sc) : (⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘) ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"(TSC : transitive sc)","proofString":"rewrite !seqA.\nsin_rewrite f_sc_sb_f_sc_in_sc; auto.\nsin_rewrite !rewrite_trans; auto.\nclear; basic_solver 1."},{"statement":"(TSC : transitive sc) : ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"(TSC : transitive sc)","proofString":"sin_rewrite f_sc_sb_f_sc_in_sc; auto.\nsin_rewrite !rewrite_trans; auto.\nclear; basic_solver 1."},{"statement":"(TSC : transitive sc) : ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ sc ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sc ⨾ sc ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"(TSC : transitive sc)","proofString":"sin_rewrite !rewrite_trans; auto.\nclear; basic_solver 1."},{"statement":"(TSC : transitive sc) : ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"(TSC : transitive sc)","proofString":"clear; basic_solver 1."},{"statement":"transitive sc.","conclusion":"transitive sc","hypotheses":"","proofString":"now apply WF_SC."},{"statement":"(TSC : transitive sc) : acyclic (sb ∪ sc).","conclusion":"acyclic (sb ∪ sc)","hypotheses":"(TSC : transitive sc)","proofString":"assert (transitive sb) as TSB.\napply sb_trans.\napply acyclic_utt; auto.\nsplits.\napply sb_irr.\napply WF_SC.\nrewrite (wf_scD WF_SC).\nrewrite <- !seqA, acyclic_rotl, !seqA.\nsin_rewrite f_sc_sb_f_sc_in_sc; auto.\nrewrite rewrite_trans; auto.\nred.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) : transitive sb.","conclusion":"transitive sb","hypotheses":"(TSC : transitive sc)","proofString":"apply sb_trans."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : acyclic (sb ∪ sc).","conclusion":"acyclic (sb ∪ sc)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"apply acyclic_utt; auto.\nsplits.\napply sb_irr.\napply WF_SC.\nrewrite (wf_scD WF_SC).\nrewrite <- !seqA, acyclic_rotl, !seqA.\nsin_rewrite f_sc_sb_f_sc_in_sc; auto.\nrewrite rewrite_trans; auto.\nred.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : irreflexive sb /\\ irreflexive sc /\\ acyclic (sb ⨾ sc).","conclusion":"irreflexive sb /\\ irreflexive sc /\\ acyclic (sb ⨾ sc)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"splits.\napply sb_irr.\napply WF_SC.\nrewrite (wf_scD WF_SC).\nrewrite <- !seqA, acyclic_rotl, !seqA.\nsin_rewrite f_sc_sb_f_sc_in_sc; auto.\nrewrite rewrite_trans; auto.\nred.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : irreflexive sb.","conclusion":"irreflexive sb","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"apply sb_irr."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : irreflexive sc.","conclusion":"irreflexive sc","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"apply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : acyclic (sb ⨾ sc).","conclusion":"acyclic (sb ⨾ sc)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"rewrite (wf_scD WF_SC).\nrewrite <- !seqA, acyclic_rotl, !seqA.\nsin_rewrite f_sc_sb_f_sc_in_sc; auto.\nrewrite rewrite_trans; auto.\nred.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘).","conclusion":"acyclic (sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"rewrite <- !seqA, acyclic_rotl, !seqA.\nsin_rewrite f_sc_sb_f_sc_in_sc; auto.\nrewrite rewrite_trans; auto.\nred.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : acyclic (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc).","conclusion":"acyclic (⦗F ∩₁ Sc⦘ ⨾ sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"sin_rewrite f_sc_sb_f_sc_in_sc; auto.\nrewrite rewrite_trans; auto.\nred.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : acyclic (sc ⨾ sc).","conclusion":"acyclic (sc ⨾ sc)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"rewrite rewrite_trans; auto.\nred.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : acyclic sc.","conclusion":"acyclic sc","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"red.\nrewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : irreflexive sc⁺.","conclusion":"irreflexive sc⁺","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"rewrite ct_of_trans; auto.\napply WF_SC."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : irreflexive sc.","conclusion":"irreflexive sc","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"apply WF_SC."},{"statement":"transitive sc.","conclusion":"transitive sc","hypotheses":"","proofString":"now apply WF_SC."},{"statement":"(TSC : transitive sc) : transitive sb.","conclusion":"transitive sb","hypotheses":"(TSC : transitive sc)","proofString":"apply sb_trans."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : transitive (sb ⨾ sc).","conclusion":"transitive (sb ⨾ sc)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"apply transitiveI.\nrewrite seqA.\nnow rewrite sc_sb_sc_in_sc; auto."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : (sb ⨾ sc) ⨾ sb ⨾ sc ⊆ sb ⨾ sc.","conclusion":"(sb ⨾ sc) ⨾ sb ⨾ sc ⊆ sb ⨾ sc","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"rewrite seqA.\nnow rewrite sc_sb_sc_in_sc; auto."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) : sb ⨾ sc ⨾ sb ⨾ sc ⊆ sb ⨾ sc.","conclusion":"sb ⨾ sc ⨾ sb ⨾ sc ⊆ sb ⨾ sc","hypotheses":"(TSC : transitive sc) (TSB : transitive sb)","proofString":"now rewrite sc_sb_sc_in_sc; auto."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : (sb ∪ sc)＊ ⨾ sc^? ⨾ (sb ∪ sc)＊ ⊆ (sb ∪ sc)＊.","conclusion":"(sb ∪ sc)＊ ⨾ sc^? ⨾ (sb ∪ sc)＊ ⊆ (sb ∪ sc)＊","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"arewrite (sc^? ⊆ (sb ∪ sc)＊).\nnow rewrite !rt_rt."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : (sb ∪ sc)＊ ⨾ (sb ∪ sc)＊ ⨾ (sb ∪ sc)＊ ⊆ (sb ∪ sc)＊.","conclusion":"(sb ∪ sc)＊ ⨾ (sb ∪ sc)＊ ⨾ (sb ∪ sc)＊ ⊆ (sb ∪ sc)＊","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"now rewrite !rt_rt."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : (sc ∪ sb)＊ ⊆ sb^? ⨾ sc^? ⨾ sb^?.","conclusion":"(sc ∪ sb)＊ ⊆ sb^? ⨾ sc^? ⨾ sb^?","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite path_ut; auto.\nrewrite ct_of_trans; auto.\nrewrite rt_of_trans; auto.\nrewrite rt_of_trans; auto.\nrewrite !crE.\nrewrite !seq_union_l, !seq_id_l, !seq_union_r, !seqA.\nrewrite !seq_id_r.\nrewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : sc＊ ⨾ (sb ⨾ sc⁺)＊ ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?.","conclusion":"sc＊ ⨾ (sb ⨾ sc⁺)＊ ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite ct_of_trans; auto.\nrewrite rt_of_trans; auto.\nrewrite rt_of_trans; auto.\nrewrite !crE.\nrewrite !seq_union_l, !seq_id_l, !seq_union_r, !seqA.\nrewrite !seq_id_r.\nrewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : sc＊ ⨾ (sb ⨾ sc)＊ ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?.","conclusion":"sc＊ ⨾ (sb ⨾ sc)＊ ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite rt_of_trans; auto.\nrewrite rt_of_trans; auto.\nrewrite !crE.\nrewrite !seq_union_l, !seq_id_l, !seq_union_r, !seqA.\nrewrite !seq_id_r.\nrewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : sc^? ⨾ (sb ⨾ sc)＊ ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?.","conclusion":"sc^? ⨾ (sb ⨾ sc)＊ ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite rt_of_trans; auto.\nrewrite !crE.\nrewrite !seq_union_l, !seq_id_l, !seq_union_r, !seqA.\nrewrite !seq_id_r.\nrewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : sc^? ⨾ (sb ⨾ sc)^? ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?.","conclusion":"sc^? ⨾ (sb ⨾ sc)^? ⨾ sb^? ⊆ sb^? ⨾ sc^? ⨾ sb^?","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite !crE.\nrewrite !seq_union_l, !seq_id_l, !seq_union_r, !seqA.\nrewrite !seq_id_r.\nrewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : (⦗fun _ : actid => True⦘ ∪ sc)\n⨾ (⦗fun _ : actid => True⦘ ∪ sb ⨾ sc) ⨾ (⦗fun _ : actid => True⦘ ∪ sb)\n⊆ (⦗fun _ : actid => True⦘ ∪ sb)\n  ⨾ (⦗fun _ : actid => True⦘ ∪ sc) ⨾ (⦗fun _ : actid => True⦘ ∪ sb).","conclusion":"(⦗fun _ : actid => True⦘ ∪ sc)\n⨾ (⦗fun _ : actid => True⦘ ∪ sb ⨾ sc) ⨾ (⦗fun _ : actid => True⦘ ∪ sb)\n⊆ (⦗fun _ : actid => True⦘ ∪ sb)\n  ⨾ (⦗fun _ : actid => True⦘ ∪ sc) ⨾ (⦗fun _ : actid => True⦘ ∪ sb)","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite !seq_union_l, !seq_id_l, !seq_union_r, !seqA.\nrewrite !seq_id_r.\nrewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : ⦗fun _ : actid => True⦘ ∪ sb\n∪ (sb ⨾ sc ⨾ ⦗fun _ : actid => True⦘ ∪ sb ⨾ sc ⨾ sb)\n∪ (sc ⨾ ⦗fun _ : actid => True⦘ ∪ sc ⨾ sb\n   ∪ (sc ⨾ sb ⨾ sc ⨾ ⦗fun _ : actid => True⦘ ∪ sc ⨾ sb ⨾ sc ⨾ sb))\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ⨾ ⦗fun _ : actid => True⦘ ∪ sc ⨾ sb)\n  ∪ (sb ⨾ ⦗fun _ : actid => True⦘ ∪ sb ⨾ sb\n     ∪ (sb ⨾ sc ⨾ ⦗fun _ : actid => True⦘ ∪ sb ⨾ sc ⨾ sb)).","conclusion":"⦗fun _ : actid => True⦘ ∪ sb\n∪ (sb ⨾ sc ⨾ ⦗fun _ : actid => True⦘ ∪ sb ⨾ sc ⨾ sb)\n∪ (sc ⨾ ⦗fun _ : actid => True⦘ ∪ sc ⨾ sb\n   ∪ (sc ⨾ sb ⨾ sc ⨾ ⦗fun _ : actid => True⦘ ∪ sc ⨾ sb ⨾ sc ⨾ sb))\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ⨾ ⦗fun _ : actid => True⦘ ∪ sc ⨾ sb)\n  ∪ (sb ⨾ ⦗fun _ : actid => True⦘ ∪ sb ⨾ sb\n     ∪ (sb ⨾ sc ⨾ ⦗fun _ : actid => True⦘ ∪ sb ⨾ sc ⨾ sb))","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite !seq_id_r.\nrewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : ⦗fun _ : actid => True⦘ ∪ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)\n∪ (sc ∪ sc ⨾ sb ∪ (sc ⨾ sb ⨾ sc ∪ sc ⨾ sb ⨾ sc ⨾ sb))\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)).","conclusion":"⦗fun _ : actid => True⦘ ∪ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)\n∪ (sc ∪ sc ⨾ sb ∪ (sc ⨾ sb ⨾ sc ∪ sc ⨾ sb ⨾ sc ⨾ sb))\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb))","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"rewrite sc_sb_sc_in_sc; auto.\nunionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : ⦗fun _ : actid => True⦘ ∪ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)\n∪ (sc ∪ sc ⨾ sb ∪ (sc ∪ sc ⨾ sb ⨾ sc ⨾ sb))\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)).","conclusion":"⦗fun _ : actid => True⦘ ∪ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)\n∪ (sc ∪ sc ⨾ sb ∪ (sc ∪ sc ⨾ sb ⨾ sc ⨾ sb))\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb))","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"unionL; eauto with hahn.\nsin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : sc ⨾ sb ⨾ sc ⨾ sb\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)).","conclusion":"sc ⨾ sb ⨾ sc ⨾ sb\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb))","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"sin_rewrite sc_sb_sc_in_sc; auto.\neauto with hahn."},{"statement":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc)) : sc ⨾ sb\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb)).","conclusion":"sc ⨾ sb\n⊆ ⦗fun _ : actid => True⦘ ∪ sb ∪ (sc ∪ sc ⨾ sb)\n  ∪ (sb ∪ sb ⨾ sb ∪ (sb ⨾ sc ∪ sb ⨾ sc ⨾ sb))","hypotheses":"(TSC : transitive sc) (TSB : transitive sb) (TSBSC : transitive (sb ⨾ sc))","proofString":"eauto with hahn."},{"statement":"ar_int ⊆ sc ∪ rfe ∪ ar_int.","conclusion":"ar_int ⊆ sc ∪ rfe ∪ ar_int","hypotheses":"","proofString":"basic_solver."},{"statement":"ppo ⊆ ar_int.","conclusion":"ppo ⊆ ar_int","hypotheses":"","proofString":"apply ppo_in_ar_int."},{"statement":"bob ⊆ ar_int.","conclusion":"bob ⊆ ar_int","hypotheses":"","proofString":"apply bob_in_ar_int."},{"statement":"detour ⊆ ar_int.","conclusion":"detour ⊆ ar_int","hypotheses":"","proofString":"apply detour_in_ar_int."},{"statement":"rfe ⊆ sc ∪ rfe ∪ ar_int.","conclusion":"rfe ⊆ sc ∪ rfe ∪ ar_int","hypotheses":"","proofString":"basic_solver."},{"statement":"sc ⊆ sc ∪ rfe ∪ ar_int.","conclusion":"sc ⊆ sc ∪ rfe ∪ ar_int","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar_int.","conclusion":"⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ⊆ ar_int","hypotheses":"","proofString":"apply w_ex_acq_sb_w_in_ar_int."},{"statement":"⦗W_ex⦘ ⨾ ar sc ⨾ ⦗Acq⦘ ⊆ ar sc.","conclusion":"⦗W_ex⦘ ⨾ ar sc ⨾ ⦗Acq⦘ ⊆ ar sc","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗R⦘ ⨾ ⦗Acq⦘ ⊆ ar sc.","conclusion":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗R⦘ ⨾ ⦗Acq⦘ ⊆ ar sc","hypotheses":"","proofString":"rewrite <- id_inter.\nunfold ar, imm_s_ppo.ar_int.\neauto with hahn."},{"statement":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘ ⊆ ar sc.","conclusion":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘ ⊆ ar sc","hypotheses":"","proofString":"unfold ar, imm_s_ppo.ar_int.\neauto with hahn."},{"statement":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘\n⊆ sc ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘).","conclusion":"⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘\n⊆ sc ∪ rfe\n  ∪ (bob ∪ ppo ∪ detour ∪ ⦗W_ex_acq⦘ ⨾ sb ⨾ ⦗W⦘ ∪ ⦗W_ex⦘ ⨾ rfi ⨾ ⦗R ∩₁ Acq⦘)","hypotheses":"","proofString":"eauto with hahn."},{"statement":"rmw ⨾ (⦗W_ex⦘ ⨾ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"rmw ⨾ (⦗W_ex⦘ ⨾ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"rewrite (rmw_in_ar_int WF) at 1.\nrewrite ar_int_in_ar.\narewrite (⦗W_ex⦘ ⨾ rf ⨾ rmw ⊆ ar sc ∪ rf ⨾ rmw).\narewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 1.\narewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 3.\nrewrite <- ct_end.\nrewrite ct_step with (r:=ar sc ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"ar_int ⨾ (⦗W_ex⦘ ⨾ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"ar_int ⨾ (⦗W_ex⦘ ⨾ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"rewrite ar_int_in_ar.\narewrite (⦗W_ex⦘ ⨾ rf ⨾ rmw ⊆ ar sc ∪ rf ⨾ rmw).\narewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 1.\narewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 3.\nrewrite <- ct_end.\nrewrite ct_step with (r:=ar sc ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"ar sc ⨾ (⦗W_ex⦘ ⨾ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"ar sc ⨾ (⦗W_ex⦘ ⨾ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"arewrite (⦗W_ex⦘ ⨾ rf ⨾ rmw ⊆ ar sc ∪ rf ⨾ rmw).\narewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 1.\narewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 3.\nrewrite <- ct_end.\nrewrite ct_step with (r:=ar sc ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"ar sc ⨾ (ar sc ∪ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"ar sc ⨾ (ar sc ∪ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"arewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 1.\narewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 3.\nrewrite <- ct_end.\nrewrite ct_step with (r:=ar sc ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"(ar sc ∪ rf ⨾ rmw) ⨾ (ar sc ∪ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"(ar sc ∪ rf ⨾ rmw) ⨾ (ar sc ∪ rf ⨾ rmw)＊ ⨾ ar sc ⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"arewrite (ar sc ⊆ ar sc ∪ rf ⨾ rmw) at 3.\nrewrite <- ct_end.\nrewrite ct_step with (r:=ar sc ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"(ar sc ∪ rf ⨾ rmw) ⨾ (ar sc ∪ rf ⨾ rmw)＊ ⨾ (ar sc ∪ rf ⨾ rmw)\n⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"(ar sc ∪ rf ⨾ rmw) ⨾ (ar sc ∪ rf ⨾ rmw)＊ ⨾ (ar sc ∪ rf ⨾ rmw)\n⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"rewrite <- ct_end.\nrewrite ct_step with (r:=ar sc ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"(ar sc ∪ rf ⨾ rmw) ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"(ar sc ∪ rf ⨾ rmw) ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"rewrite ct_step with (r:=ar sc ∪ rf ⨾ rmw) at 1.\napply ct_ct."},{"statement":"(ar sc ∪ rf ⨾ rmw)⁺ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⊆ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"(ar sc ∪ rf ⨾ rmw)⁺ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⊆ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"apply ct_ct."},{"statement":"⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ (rmw ⨾ rf)⁺ ⨾ ⦗Acq⦘\n⊆ ⦗fun _ : actid => True⦘ ∪ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ (rmw ⨾ rf)⁺ ⨾ ⦗Acq⦘\n⊆ ⦗fun _ : actid => True⦘ ∪ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"rewrite rmwrf_ct_Acq_in_ar_rfrmw_ct.\nbasic_solver."},{"statement":"⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ (ar sc ∪ rf ⨾ rmw)⁺\n⊆ ⦗fun _ : actid => True⦘ ∪ (ar sc ∪ rf ⨾ rmw)⁺.","conclusion":"⦗fun _ : actid => True⦘ ⨾ ⦗Acq⦘ ∪ (ar sc ∪ rf ⨾ rmw)⁺\n⊆ ⦗fun _ : actid => True⦘ ∪ (ar sc ∪ rf ⨾ rmw)⁺","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ hb) ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ hb) ⨾ eco ⨾ hb ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"rewrite (dom_r (wf_hbE WF)) at 2.\nunfolder; ins; desf.\neapply tot_ex.\napply WF_SC.\nbasic_solver.\nbasic_solver.\nintro; eapply CSC; basic_solver 10.\nintro; subst.\neapply COH.\neexists; splits; [ | eby right].\neapply hb_trans; eauto."},{"statement":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ hb) ⨾ eco ⨾ (hb ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc.","conclusion":"⦗F ∩₁ Sc⦘ ⨾ (⦗E⦘ ⨾ hb) ⨾ eco ⨾ (hb ⨾ ⦗E⦘) ⨾ ⦗F ∩₁ Sc⦘ ⊆ sc","hypotheses":"","proofString":"unfolder; ins; desf.\neapply tot_ex.\napply WF_SC.\nbasic_solver.\nbasic_solver.\nintro; eapply CSC; basic_solver 10.\nintro; subst.\neapply COH.\neexists; splits; [ | eby right].\neapply hb_trans; eauto."},{"statement":"(x y : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H2 : hb z0 y) (H3 : E y) (H4 : is_f lab y) (H5 : is_sc lab y) : sc x y.","conclusion":"sc x y","hypotheses":"(x y : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H2 : hb z0 y) (H3 : E y) (H4 : is_f lab y) (H5 : is_sc lab y)","proofString":"eapply tot_ex.\napply WF_SC.\nbasic_solver.\nbasic_solver.\nintro; eapply CSC; basic_solver 10.\nintro; subst.\neapply COH.\neexists; splits; [ | eby right].\neapply hb_trans; eauto."},{"statement":"(x y : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H2 : hb z0 y) (H3 : E y) (H4 : is_f lab y) (H5 : is_sc lab y) : ~ sc y x.","conclusion":"~ sc y x","hypotheses":"(x y : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H2 : hb z0 y) (H3 : E y) (H4 : is_f lab y) (H5 : is_sc lab y)","proofString":"intro; eapply CSC; basic_solver 10."},{"statement":"(x y : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H2 : hb z0 y) (H3 : E y) (H4 : is_f lab y) (H5 : is_sc lab y) : y <> x.","conclusion":"y <> x","hypotheses":"(x y : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H2 : hb z0 y) (H3 : E y) (H4 : is_f lab y) (H5 : is_sc lab y)","proofString":"intro; subst.\neapply COH.\neexists; splits; [ | eby right].\neapply hb_trans; eauto."},{"statement":"(x : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H5 : is_sc lab x) (H4 : is_f lab x) (H3 : E x) (H2 : hb z0 x) : False.","conclusion":"False","hypotheses":"(x : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H5 : is_sc lab x) (H4 : is_f lab x) (H3 : E x) (H2 : hb z0 x)","proofString":"eapply COH.\neexists; splits; [ | eby right].\neapply hb_trans; eauto."},{"statement":"(x : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H5 : is_sc lab x) (H4 : is_f lab x) (H3 : E x) (H2 : hb z0 x) : hb z0 z.","conclusion":"hb z0 z","hypotheses":"(x : actid) (H : is_f lab x) (H7 : is_sc lab x) (H6 : E x) (z : actid) (H0 : hb x z) (z0 : actid) (H1 : eco z z0) (H5 : is_sc lab x) (H4 : is_f lab x) (H3 : E x) (H2 : hb z0 x)","proofString":"eapply hb_trans; eauto."},{"statement":"(e e' : actid) (INIT : is_init e) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (SL : same_loc e e') (l : location) (LOC : loc e' = Some l) : co e e'.","conclusion":"co e e'","hypotheses":"(e e' : actid) (INIT : is_init e) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (SL : same_loc e e') (l : location) (LOC : loc e' = Some l)","proofString":"red in SL.\nrewrite LOC in SL.\nunfold is_init in INIT.\nunfold Events.loc in SL.\ndestruct e; [|done].\nrewrite (wf_init_lab WF) in SL.\ninv SL.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e e' : actid) (INIT : is_init e) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (SL : loc e = loc e') (l : location) (LOC : loc e' = Some l) : co e e'.","conclusion":"co e e'","hypotheses":"(e e' : actid) (INIT : is_init e) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (SL : loc e = loc e') (l : location) (LOC : loc e' = Some l)","proofString":"rewrite LOC in SL.\nunfold is_init in INIT.\nunfold Events.loc in SL.\ndestruct e; [|done].\nrewrite (wf_init_lab WF) in SL.\ninv SL.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e e' : actid) (INIT : is_init e) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : loc e = Some l) (LOC : loc e' = Some l) : co e e'.","conclusion":"co e e'","hypotheses":"(e e' : actid) (INIT : is_init e) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : loc e = Some l) (LOC : loc e' = Some l)","proofString":"unfold is_init in INIT.\nunfold Events.loc in SL.\ndestruct e; [|done].\nrewrite (wf_init_lab WF) in SL.\ninv SL.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e e' : actid) (INIT : match e with\n| InitEvent _ => true\n| ThreadEvent _ _ => false\nend) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : loc e = Some l) (LOC : loc e' = Some l) : co e e'.","conclusion":"co e e'","hypotheses":"(e e' : actid) (INIT : match e with\n| InitEvent _ => true\n| ThreadEvent _ _ => false\nend) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : loc e = Some l) (LOC : loc e' = Some l)","proofString":"unfold Events.loc in SL.\ndestruct e; [|done].\nrewrite (wf_init_lab WF) in SL.\ninv SL.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e e' : actid) (INIT : match e with\n| InitEvent _ => true\n| ThreadEvent _ _ => false\nend) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : match lab e with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend = Some l) (LOC : loc e' = Some l) : co e e'.","conclusion":"co e e'","hypotheses":"(e e' : actid) (INIT : match e with\n| InitEvent _ => true\n| ThreadEvent _ _ => false\nend) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : match lab e with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend = Some l) (LOC : loc e' = Some l)","proofString":"destruct e; [|done].\nrewrite (wf_init_lab WF) in SL.\ninv SL.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(l0 : location) (e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : match lab (InitEvent l0) with\n| Aload _ _ l1 _ | Astore _ _ l1 _ => Some l1\n| Afence _ => None\nend = Some l) (LOC : loc e' = Some l) : co (InitEvent l0) e'.","conclusion":"co (InitEvent l0) e'","hypotheses":"(l0 : location) (e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : match lab (InitEvent l0) with\n| Aload _ _ l1 _ | Astore _ _ l1 _ => Some l1\n| Afence _ => None\nend = Some l) (LOC : loc e' = Some l)","proofString":"rewrite (wf_init_lab WF) in SL.\ninv SL.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(l0 : location) (e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l0 = Some l) (LOC : loc e' = Some l) : co (InitEvent l0) e'.","conclusion":"co (InitEvent l0) e'","hypotheses":"(l0 : location) (e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l0 = Some l) (LOC : loc e' = Some l)","proofString":"inv SL.\nassert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l) : co (InitEvent l) e'.","conclusion":"co (InitEvent l) e'","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l)","proofString":"assert (E (InitEvent l)) as EL.\napply (wf_init WF).\neexists.\neauto.\nedestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l) : E (InitEvent l).","conclusion":"E (InitEvent l)","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l)","proofString":"apply (wf_init WF).\neexists.\neauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l) : exists b : actid, E b /\\ loc b = Some l.","conclusion":"exists b : actid, E b /\\ loc b = Some l","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l)","proofString":"eexists.\neauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l) (EL : E (InitEvent l)) : co (InitEvent l) e'.","conclusion":"co (InitEvent l) e'","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (SL : Some l = Some l) (LOC : loc e' = Some l) (EL : E (InitEvent l))","proofString":"edestruct (wf_co_total WF) as [CO|CO]; eauto; desf.\nsplit; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF).\nintros H.\nsubst.\ndesf.\nexfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) : (E ∩₁ W ∩₁ (fun x : actid => loc x = loc e')) (InitEvent l).","conclusion":"(E ∩₁ W ∩₁ (fun x : actid => loc x = loc e')) (InitEvent l)","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l))","proofString":"split; [split|]; auto.\nby apply init_w.\nunfold Events.loc at 1.\nby rewrite (wf_init_lab WF)."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) : is_w lab (InitEvent l).","conclusion":"is_w lab (InitEvent l)","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l))","proofString":"by apply init_w."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) : loc (InitEvent l) = loc e'.","conclusion":"loc (InitEvent l) = loc e'","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l))","proofString":"unfold Events.loc at 1.\nby rewrite (wf_init_lab WF)."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) : match lab (InitEvent l) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend = loc e'.","conclusion":"match lab (InitEvent l) with\n| Aload _ _ l0 _ | Astore _ _ l0 _ => Some l0\n| Afence _ => None\nend = loc e'","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l))","proofString":"by rewrite (wf_init_lab WF)."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) : InitEvent l <> e'.","conclusion":"InitEvent l <> e'","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l))","proofString":"intros H.\nsubst.\ndesf."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (H : InitEvent l = e') : False.","conclusion":"False","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (H : InitEvent l = e')","proofString":"subst.\ndesf."},{"statement":"(INIT : true) (l : location) (LOC : loc (InitEvent l) = Some l) (WW : is_w lab (InitEvent l)) (EE : E (InitEvent l)) (NINIT : ~ is_init (InitEvent l)) (EL : E (InitEvent l)) : False.","conclusion":"False","hypotheses":"(INIT : true) (l : location) (LOC : loc (InitEvent l) = Some l) (WW : is_w lab (InitEvent l)) (EE : E (InitEvent l)) (NINIT : ~ is_init (InitEvent l)) (EL : E (InitEvent l))","proofString":"desf."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l)) : co (InitEvent l) e'.","conclusion":"co (InitEvent l) e'","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l))","proofString":"exfalso.\ncdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l)) : False.","conclusion":"False","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l))","proofString":"cdes IMMCON.\neapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l)) (Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G) : False.","conclusion":"False","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l)) (Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G)","proofString":"eapply Cint.\neexists.\nsplit.\napply sb_in_hb.\nby apply init_ninit_sb with (y:=e'); eauto.\napply r_step.\napply Execution_eco.co_in_eco; eauto."},{"statement":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l)) (Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G) : eco e' (InitEvent l).","conclusion":"eco e' (InitEvent l)","hypotheses":"(e' : actid) (INIT : true) (NINIT : ~ is_init e') (EE : E e') (WW : W e') (l : location) (LOC : loc e' = Some l) (EL : E (InitEvent l)) (CO : co e' (InitEvent l)) (Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G)","proofString":"apply Execution_eco.co_in_eco; eauto."},{"statement":"rmw ⊆ sb.","conclusion":"rmw ⊆ sb","hypotheses":"","proofString":"rewrite (wf_rmwi WF).\nbasic_solver."},{"statement":"immediate sb ⊆ sb.","conclusion":"immediate sb ⊆ sb","hypotheses":"","proofString":"basic_solver."},{"statement":"irreflexive (rf ⨾ sb).","conclusion":"irreflexive (rf ⨾ sb)","hypotheses":"","proofString":"rewrite Execution_eco.rf_in_eco.\nrewrite sb_in_hb.\ncdes IMMCON.\nred in Cint.\ngeneralize Cint.\nbasic_solver 10."},{"statement":"irreflexive (eco ⨾ sb).","conclusion":"irreflexive (eco ⨾ sb)","hypotheses":"","proofString":"rewrite sb_in_hb.\ncdes IMMCON.\nred in Cint.\ngeneralize Cint.\nbasic_solver 10."},{"statement":"irreflexive (eco ⨾ hb).","conclusion":"irreflexive (eco ⨾ hb)","hypotheses":"","proofString":"cdes IMMCON.\nred in Cint.\ngeneralize Cint.\nbasic_solver 10."},{"statement":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G) : irreflexive (eco ⨾ hb).","conclusion":"irreflexive (eco ⨾ hb)","hypotheses":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G)","proofString":"red in Cint.\ngeneralize Cint.\nbasic_solver 10."},{"statement":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : irreflexive (hb ⨾ eco^?)) (Cext : acyc_ext sc) (Cat : rmw_atomicity G) : irreflexive (eco ⨾ hb).","conclusion":"irreflexive (eco ⨾ hb)","hypotheses":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : irreflexive (hb ⨾ eco^?)) (Cext : acyc_ext sc) (Cat : rmw_atomicity G)","proofString":"generalize Cint.\nbasic_solver 10."},{"statement":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : irreflexive (hb ⨾ eco^?)) (Cext : acyc_ext sc) (Cat : rmw_atomicity G) : irreflexive (hb ⨾ eco^?) -> irreflexive (eco ⨾ hb).","conclusion":"irreflexive (hb ⨾ eco^?) -> irreflexive (eco ⨾ hb)","hypotheses":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : irreflexive (hb ⨾ eco^?)) (Cext : acyc_ext sc) (Cat : rmw_atomicity G)","proofString":"basic_solver 10."},{"statement":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G) : rf ⨾ rmw ⊆ immediate co.","conclusion":"rf ⨾ rmw ⊆ immediate co","hypotheses":"(Wf_sc : wf_sc sc) (Csc : coh_sc sc) (Comp : complete G) (Cint : coherence G) (Cext : acyc_ext sc) (Cat : rmw_atomicity G)","proofString":"apply rf_rmw_in_coimm; auto using coherence_sc_per_loc."},{"statement":"functional (immediate co).","conclusion":"functional (immediate co)","hypotheses":"","proofString":"apply wf_immcof; auto."},{"statement":"functional (rf ⨾ rmw).","conclusion":"functional (rf ⨾ rmw)","hypotheses":"","proofString":"eapply wf_rfrmwsf; eauto."},{"statement":"(x y : actid) (RMW : rmw y x) : codom_rel (rf ⨾ rmw) x.","conclusion":"codom_rel (rf ⨾ rmw) x","hypotheses":"(x y : actid) (RMW : rmw y x)","proofString":"enough (exists z, rf z y) as [z RF].\nexists z.\neexists.\neauto.\napply IMMCON.\napply (dom_l (wf_rmwE WF)) in RMW.\ndestruct_seq_l RMW as AA.\nsplit; auto.\napply (dom_l (wf_rmwD WF)) in RMW.\ndestruct_seq_l RMW as BB.\ntype_solver."},{"statement":"(x y : actid) (RMW : rmw y x) (z : actid) (RF : rf z y) : codom_rel (rf ⨾ rmw) x.","conclusion":"codom_rel (rf ⨾ rmw) x","hypotheses":"(x y : actid) (RMW : rmw y x) (z : actid) (RF : rf z y)","proofString":"exists z.\neexists.\neauto."},{"statement":"(x y : actid) (RMW : rmw y x) (z : actid) (RF : rf z y) : (rf ⨾ rmw) z x.","conclusion":"(rf ⨾ rmw) z x","hypotheses":"(x y : actid) (RMW : rmw y x) (z : actid) (RF : rf z y)","proofString":"eexists.\neauto."},{"statement":"(x y : actid) (RMW : rmw y x) : exists z : actid, rf z y.","conclusion":"exists z : actid, rf z y","hypotheses":"(x y : actid) (RMW : rmw y x)","proofString":"apply IMMCON.\napply (dom_l (wf_rmwE WF)) in RMW.\ndestruct_seq_l RMW as AA.\nsplit; auto.\napply (dom_l (wf_rmwD WF)) in RMW.\ndestruct_seq_l RMW as BB.\ntype_solver."},{"statement":"(x y : actid) (RMW : rmw y x) : (E ∩₁ R) y.","conclusion":"(E ∩₁ R) y","hypotheses":"(x y : actid) (RMW : rmw y x)","proofString":"apply (dom_l (wf_rmwE WF)) in RMW.\ndestruct_seq_l RMW as AA.\nsplit; auto.\napply (dom_l (wf_rmwD WF)) in RMW.\ndestruct_seq_l RMW as BB.\ntype_solver."},{"statement":"(x y : actid) (RMW : (⦗E⦘ ⨾ rmw) y x) : (E ∩₁ R) y.","conclusion":"(E ∩₁ R) y","hypotheses":"(x y : actid) (RMW : (⦗E⦘ ⨾ rmw) y x)","proofString":"destruct_seq_l RMW as AA.\nsplit; auto.\napply (dom_l (wf_rmwD WF)) in RMW.\ndestruct_seq_l RMW as BB.\ntype_solver."},{"statement":"(x y : actid) (AA : E y) (RMW : rmw y x) : (E ∩₁ R) y.","conclusion":"(E ∩₁ R) y","hypotheses":"(x y : actid) (AA : E y) (RMW : rmw y x)","proofString":"split; auto.\napply (dom_l (wf_rmwD WF)) in RMW.\ndestruct_seq_l RMW as BB.\ntype_solver."},{"statement":"(x y : actid) (AA : E y) (RMW : rmw y x) : is_r lab y.","conclusion":"is_r lab y","hypotheses":"(x y : actid) (AA : E y) (RMW : rmw y x)","proofString":"apply (dom_l (wf_rmwD WF)) in RMW.\ndestruct_seq_l RMW as BB.\ntype_solver."},{"statement":"(x y : actid) (AA : E y) (RMW : (⦗R⦘ ⨾ rmw) y x) : is_r lab y.","conclusion":"is_r lab y","hypotheses":"(x y : actid) (AA : E y) (RMW : (⦗R⦘ ⨾ rmw) y x)","proofString":"destruct_seq_l RMW as BB.\ntype_solver."},{"statement":"(x y : actid) (AA : E y) (BB : is_r lab y) (RMW : rmw y x) : is_r lab y.","conclusion":"is_r lab y","hypotheses":"(x y : actid) (AA : E y) (BB : is_r lab y) (RMW : rmw y x)","proofString":"type_solver."},{"statement":"(SPL : sc_per_loc G) (COMP : complete G) : eco ⨾ rmw ⊆ eco.","conclusion":"eco ⨾ rmw ⊆ eco","hypotheses":"(SPL : sc_per_loc G) (COMP : complete G)","proofString":"rewrite rmw_in_fr; auto.\nrewrite fr_in_eco.\napply transitiveI.\nby apply eco_trans."},{"statement":"(SPL : sc_per_loc G) (COMP : complete G) : eco ⨾ fr ⊆ eco.","conclusion":"eco ⨾ fr ⊆ eco","hypotheses":"(SPL : sc_per_loc G) (COMP : complete G)","proofString":"rewrite fr_in_eco.\napply transitiveI.\nby apply eco_trans."},{"statement":"(SPL : sc_per_loc G) (COMP : complete G) : eco ⨾ eco ⊆ eco.","conclusion":"eco ⨾ eco ⊆ eco","hypotheses":"(SPL : sc_per_loc G) (COMP : complete G)","proofString":"apply transitiveI.\nby apply eco_trans."},{"statement":"(SPL : sc_per_loc G) (COMP : complete G) : transitive eco.","conclusion":"transitive eco","hypotheses":"(SPL : sc_per_loc G) (COMP : complete G)","proofString":"by apply eco_trans."},{"statement":"rfe ⨾ rmw ⊆ (ar sc)⁺ ⨾ (ar sc)⁺.","conclusion":"rfe ⨾ rmw ⊆ (ar sc)⁺ ⨾ (ar sc)⁺","hypotheses":"","proofString":"rewrite rfe_in_ar, (rmw_in_ppo WF), ppo_in_ar.\neby rewrite <- ct_step."},{"statement":"ar sc ⨾ ar sc ⊆ (ar sc)⁺ ⨾ (ar sc)⁺.","conclusion":"ar sc ⨾ ar sc ⊆ (ar sc)⁺ ⨾ (ar sc)⁺","hypotheses":"","proofString":"eby rewrite <- ct_step."},{"statement":"rfe ⨾ ppo ⊆ (ar sc)⁺ ⨾ (ar sc)⁺.","conclusion":"rfe ⨾ ppo ⊆ (ar sc)⁺ ⨾ (ar sc)⁺","hypotheses":"","proofString":"rewrite rfe_in_ar, ppo_in_ar.\neby rewrite <- ct_step."},{"statement":"ar sc ⨾ ar sc ⊆ (ar sc)⁺ ⨾ (ar sc)⁺.","conclusion":"ar sc ⨾ ar sc ⊆ (ar sc)⁺ ⨾ (ar sc)⁺","hypotheses":"","proofString":"eby rewrite <- ct_step."},{"statement":"rf^? ⊆ rfe^? ⨾ sb^?.","conclusion":"rf^? ⊆ rfe^? ⨾ sb^?","hypotheses":"","proofString":"rewrite rfi_union_rfe, cr_union_r.\nrewrite rfi_in_sb.\nclear.\nbasic_solver 10."},{"statement":"rfi ∪ rfe^? ⊆ rfe^? ⨾ sb^?.","conclusion":"rfi ∪ rfe^? ⊆ rfe^? ⨾ sb^?","hypotheses":"","proofString":"rewrite rfi_in_sb.\nclear.\nbasic_solver 10."},{"statement":"sb ∪ rfe^? ⊆ rfe^? ⨾ sb^?.","conclusion":"sb ∪ rfe^? ⊆ rfe^? ⨾ sb^?","hypotheses":"","proofString":"clear.\nbasic_solver 10."},{"statement":"sb ∪ rfe^? ⊆ rfe^? ⨾ sb^?.","conclusion":"sb ∪ rfe^? ⊆ rfe^? ⨾ sb^?","hypotheses":"","proofString":"basic_solver 10."},{"statement":"rfe^? ⨾ sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"rfe^? ⨾ sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"","proofString":"rewrite <- cr_ct.\nrewrite rfe_in_ar.\nhahn_frame_l.\nassert (sb^? ⨾ sb^? ⊆ sb^?) as SBSB.\napply transitiveI.\napply transitive_cr.\napply sb_trans.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ;; sc^?).\nrewrite !crE, !seq_union_l, !seq_union_r, !seq_id_l, !seq_id_r.\nunionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10.\nrewrite !seq_union_l.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"rfe^? ⨾ sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)^? ⨾ (ar sc)⁺.","conclusion":"rfe^? ⨾ sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)^? ⨾ (ar sc)⁺","hypotheses":"","proofString":"rewrite rfe_in_ar.\nhahn_frame_l.\nassert (sb^? ⨾ sb^? ⊆ sb^?) as SBSB.\napply transitiveI.\napply transitive_cr.\napply sb_trans.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ;; sc^?).\nrewrite !crE, !seq_union_l, !seq_union_r, !seq_id_l, !seq_id_r.\nunionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10.\nrewrite !seq_union_l.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(ar sc)^? ⨾ sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)^? ⨾ (ar sc)⁺.","conclusion":"(ar sc)^? ⨾ sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)^? ⨾ (ar sc)⁺","hypotheses":"","proofString":"hahn_frame_l.\nassert (sb^? ⨾ sb^? ⊆ sb^?) as SBSB.\napply transitiveI.\napply transitive_cr.\napply sb_trans.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ;; sc^?).\nrewrite !crE, !seq_union_l, !seq_union_r, !seq_id_l, !seq_id_r.\nunionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10.\nrewrite !seq_union_l.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"","proofString":"assert (sb^? ⨾ sb^? ⊆ sb^?) as SBSB.\napply transitiveI.\napply transitive_cr.\napply sb_trans.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ;; sc^?).\nrewrite !crE, !seq_union_l, !seq_union_r, !seq_id_l, !seq_id_r.\nunionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10.\nrewrite !seq_union_l.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"sb^? ⨾ sb^? ⊆ sb^?.","conclusion":"sb^? ⨾ sb^? ⊆ sb^?","hypotheses":"","proofString":"apply transitiveI.\napply transitive_cr.\napply sb_trans."},{"statement":"transitive sb^?.","conclusion":"transitive sb^?","hypotheses":"","proofString":"apply transitive_cr.\napply sb_trans."},{"statement":"transitive sb.","conclusion":"transitive sb","hypotheses":"","proofString":"apply sb_trans."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"sb^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"sin_rewrite SBSB.\narewrite (sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ;; sc^?).\nrewrite !crE, !seq_union_l, !seq_union_r, !seq_id_l, !seq_id_r.\nunionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10.\nrewrite !seq_union_l.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"arewrite (sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ;; sc^?).\nrewrite !crE, !seq_union_l, !seq_union_r, !seq_id_l, !seq_id_r.\nunionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10.\nrewrite !seq_union_l.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ⨾ sc^?.","conclusion":"sb^? ⨾ sc^? ⊆ sb^? ∪ (fwbob G)^? ⨾ sc^?","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite !crE, !seq_union_l, !seq_union_r, !seq_id_l, !seq_id_r.\nunionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : ⦗fun _ : actid => True⦘ ∪ sc ∪ (sb ∪ sb ⨾ sc)\n⊆ ⦗fun _ : actid => True⦘ ∪ sb\n  ∪ (⦗fun _ : actid => True⦘ ∪ sc ∪ (fwbob G ∪ fwbob G ⨾ sc)).","conclusion":"⦗fun _ : actid => True⦘ ∪ sc ∪ (sb ∪ sb ⨾ sc)\n⊆ ⦗fun _ : actid => True⦘ ∪ sb\n  ∪ (⦗fun _ : actid => True⦘ ∪ sc ∪ (fwbob G ∪ fwbob G ⨾ sc))","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"unionL; eauto with hahn.\ntransitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb ⨾ sc\n⊆ ⦗fun _ : actid => True⦘ ∪ sb\n  ∪ (⦗fun _ : actid => True⦘ ∪ sc ∪ (fwbob G ∪ fwbob G ⨾ sc)).","conclusion":"sb ⨾ sc\n⊆ ⦗fun _ : actid => True⦘ ∪ sb\n  ∪ (⦗fun _ : actid => True⦘ ∪ sc ∪ (fwbob G ∪ fwbob G ⨾ sc))","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"transitivity (fwbob G ⨾ sc); eauto with hahn.\nrewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb ⨾ sc ⊆ fwbob G ⨾ sc.","conclusion":"sb ⨾ sc ⊆ fwbob G ⨾ sc","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite (dom_l (wf_scD WF_SC)) at 1.\nhahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⊆ fwbob G ⨾ sc.","conclusion":"sb ⨾ ⦗F ∩₁ Sc⦘ ⨾ sc ⊆ fwbob G ⨾ sc","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"hahn_frame.\nunfold imm_bob.fwbob.\nclear.\nmode_solver 10."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ fwbob G.","conclusion":"sb ⨾ ⦗F ∩₁ Sc⦘ ⊆ fwbob G","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"unfold imm_bob.fwbob.\nclear.\nmode_solver 10."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb.","conclusion":"sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"clear.\nmode_solver 10."},{"statement":"sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb.","conclusion":"sb ⨾ ⦗F ∩₁ Sc⦘\n⊆ sb ⨾ ⦗W ∩₁ Rel⦘ ∪ ⦗W ∩₁ Rel⦘ ⨾ sb ∩ same_loc ⨾ ⦗W⦘ ∪ sb ⨾ ⦗F ∩₁ Acq/Rel⦘\n  ∪ ⦗F ∩₁ Acq/Rel⦘ ⨾ sb","hypotheses":"","proofString":"mode_solver 10."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : (sb^? ∪ (fwbob G)^? ⨾ sc^?) ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"(sb^? ∪ (fwbob G)^? ⨾ sc^?) ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite !seq_union_l.\nsin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb^? ⨾ sb^? ⨾ fwbob G ∪ ((fwbob G)^? ⨾ sc^?) ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"sb^? ⨾ sb^? ⨾ fwbob G ∪ ((fwbob G)^? ⨾ sc^?) ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"sin_rewrite SBSB.\narewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb^? ⨾ fwbob G ∪ ((fwbob G)^? ⨾ sc^?) ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"sb^? ⨾ fwbob G ∪ ((fwbob G)^? ⨾ sc^?) ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"arewrite (sb^? ⨾ (fwbob G) ⊆ (ar sc)⁺).\nrewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn.\nrewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite crE, !seq_union_l, seq_id_l.\nrewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : fwbob G ∪ sb ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"fwbob G ∪ sb ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite sb_fwbob_in_fwbob.\nrewrite fwbob_in_bob, bob_in_ar.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : fwbob G ∪ (fwbob G)⁺ ⊆ (ar sc)⁺.","conclusion":"fwbob G ∪ (fwbob G)⁺ ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite fwbob_in_bob, bob_in_ar.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : ar sc ∪ (ar sc)⁺ ⊆ (ar sc)⁺.","conclusion":"ar sc ∪ (ar sc)⁺ ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"eauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : (ar sc)⁺ ∪ (fwbob G)^? ⨾ sc^? ⨾ (ar sc)⁺ ⊆ (ar sc)⁺.","conclusion":"(ar sc)⁺ ∪ (fwbob G)^? ⨾ sc^? ⨾ (ar sc)⁺ ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite fwbob_in_bob, bob_in_ar.\narewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : (ar sc)⁺ ∪ (ar sc)^? ⨾ sc^? ⨾ (ar sc)⁺ ⊆ (ar sc)⁺.","conclusion":"(ar sc)⁺ ∪ (ar sc)^? ⨾ sc^? ⨾ (ar sc)⁺ ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"arewrite (sc^? ⊆ (ar sc)^?).\nrewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : (ar sc)⁺ ∪ (ar sc)^? ⨾ (ar sc)^? ⨾ (ar sc)⁺ ⊆ (ar sc)⁺.","conclusion":"(ar sc)⁺ ∪ (ar sc)^? ⨾ (ar sc)^? ⨾ (ar sc)⁺ ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"rewrite !cr_ct.\neauto with hahn."},{"statement":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?) : (ar sc)⁺ ∪ (ar sc)⁺ ⊆ (ar sc)⁺.","conclusion":"(ar sc)⁺ ∪ (ar sc)⁺ ⊆ (ar sc)⁺","hypotheses":"(SBSB : sb^? ⨾ sb^? ⊆ sb^?)","proofString":"eauto with hahn."},{"statement":"rf^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺.","conclusion":"rf^? ⨾ sb^? ⨾ sc^? ⨾ sb^? ⨾ fwbob G ⊆ (ar sc)⁺","hypotheses":"","proofString":"now apply rf_sb_sc_sb_fwbob_in_ar."},{"statement":"ar sc ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"ar sc ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"unfold ar.\nrewrite (ar_int_in_sb WF).\nrewrite no_sb_to_init.\nrewrite wf_scD with (sc:=sc); [|by apply IMMCON].\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(sc ∪ rfe ∪ ar_int) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(sc ∪ rfe ∪ ar_int) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite (ar_int_in_sb WF).\nrewrite no_sb_to_init.\nrewrite wf_scD with (sc:=sc); [|by apply IMMCON].\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(sc ∪ rfe ∪ sb) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(sc ∪ rfe ∪ sb) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite no_sb_to_init.\nrewrite wf_scD with (sc:=sc); [|by apply IMMCON].\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(sc ∪ rfe ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘)\n⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(sc ∪ rfe ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘)\n⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite wf_scD with (sc:=sc); [|by apply IMMCON].\nrewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ rfe ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘)\n⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ rfe ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘)\n⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite (wf_rfeD WF).\nrewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘\n ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘\n ∪ sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite seq_union_l.\nunionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗fun a : actid => is_init a⦘\n∪ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗fun a : actid => is_init a⦘\n∪ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"unionL; [|basic_solver].\nrewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗fun a : actid => is_init a⦘\n⊆ ∅₂.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗fun a : actid => is_init a⦘\n⊆ ∅₂","hypotheses":"","proofString":"rewrite (init_w WF).\ntype_solver 10."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗W⦘ ⊆ ∅₂.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ⨾ ⦗W⦘ ⊆ ∅₂","hypotheses":"","proofString":"type_solver 10."},{"statement":"(ar sc ∪ rf ⨾ rmw) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(ar sc ∪ rf ⨾ rmw) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite seq_union_l, seqA, no_ar_to_init; auto.\nrewrite (rmw_in_sb WF).\nrewrite no_sb_to_init.\nbasic_solver."},{"statement":"∅₂ ∪ rf ⨾ rmw ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"∅₂ ∪ rf ⨾ rmw ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite (rmw_in_sb WF).\nrewrite no_sb_to_init.\nbasic_solver."},{"statement":"∅₂ ∪ rf ⨾ sb ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"∅₂ ∪ rf ⨾ sb ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite no_sb_to_init.\nbasic_solver."},{"statement":"∅₂\n∪ rf ⨾ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘\n⊆ ∅₂.","conclusion":"∅₂\n∪ rf ⨾ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘\n⊆ ∅₂","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ rf ⨾ rmw ≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ rf ⨾ rmw ≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite (dom_l (wf_rfE WF)) at 1.\nrewrite (dom_r (wf_rmwE WF)) at 1.\nbasic_solver 10."},{"statement":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ rmw ≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ rmw ≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite (dom_r (wf_rmwE WF)) at 1.\nbasic_solver 10."},{"statement":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ rmw ⨾ ⦗E⦘ ≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ rmw ⨾ ⦗E⦘ ≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘","hypotheses":"","proofString":"basic_solver 10."},{"statement":"(ar sc ∪ rf ⨾ rmw)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⨾ ⦗E⦘.","conclusion":"(ar sc ∪ rf ⨾ rmw)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite wf_ar_rfrmwE at 1; auto.\nrewrite inclusion_ct_seq_eqv_l.\nby rewrite inclusion_ct_seq_eqv_r."},{"statement":"(⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⨾ ⦗E⦘.","conclusion":"(⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite inclusion_ct_seq_eqv_l.\nby rewrite inclusion_ct_seq_eqv_r."},{"statement":"⦗E⦘ ⨾ ((ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ((ar sc ∪ rf ⨾ rmw) ⨾ ⦗E⦘)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ rmw)⁺ ⨾ ⦗E⦘","hypotheses":"","proofString":"by rewrite inclusion_ct_seq_eqv_r."},{"statement":"(ar sc)⁺ ⨾ (ar sc)⁺ ⊆ (ar sc)⁺.","conclusion":"(ar sc)⁺ ⨾ (ar sc)⁺ ⊆ (ar sc)⁺","hypotheses":"","proofString":"apply ct_ct."},{"statement":"(ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"(ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite seq_union_l, seqA, no_ar_to_init; auto.\narewrite (ppo ∩ same_loc ⊆ ppo).\nrewrite (ppo_in_sb WF).\nrewrite no_sb_to_init.\nbasic_solver."},{"statement":"∅₂ ∪ rf ⨾ ppo ∩ same_loc ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"∅₂ ∪ rf ⨾ ppo ∩ same_loc ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"arewrite (ppo ∩ same_loc ⊆ ppo).\nrewrite (ppo_in_sb WF).\nrewrite no_sb_to_init.\nbasic_solver."},{"statement":"∅₂ ∪ rf ⨾ ppo ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"∅₂ ∪ rf ⨾ ppo ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite (ppo_in_sb WF).\nrewrite no_sb_to_init.\nbasic_solver."},{"statement":"∅₂ ∪ rf ⨾ sb ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂.","conclusion":"∅₂ ∪ rf ⨾ sb ⨾ ⦗fun a : actid => is_init a⦘ ⊆ ∅₂","hypotheses":"","proofString":"rewrite no_sb_to_init.\nbasic_solver."},{"statement":"∅₂\n∪ rf ⨾ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘\n⊆ ∅₂.","conclusion":"∅₂\n∪ rf ⨾ (sb ⨾ ⦗fun x : actid => ~ is_init x⦘) ⨾ ⦗fun a : actid => is_init a⦘\n⊆ ∅₂","hypotheses":"","proofString":"basic_solver."},{"statement":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ rf ⨾ ppo ∩ same_loc\n≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ rf ⨾ ppo ∩ same_loc\n≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite (dom_l (wf_rfE WF)) at 1.\nrewrite (dom_r (wf_ppoE WF)) at 1.\nbasic_solver 10."},{"statement":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ ppo ∩ same_loc\n≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ ppo ∩ same_loc\n≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite (dom_r (wf_ppoE WF)) at 1.\nbasic_solver 10."},{"statement":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ (ppo ⨾ ⦗E⦘) ∩ same_loc\n≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ar sc ⨾ ⦗E⦘ ∪ (⦗E⦘ ⨾ rf) ⨾ (ppo ⨾ ⦗E⦘) ∩ same_loc\n≡ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘","hypotheses":"","proofString":"basic_solver 10."},{"statement":"(ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗E⦘.","conclusion":"(ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite wf_ar_rf_ppo_locE at 1; auto.\nrewrite inclusion_ct_seq_eqv_l.\nby rewrite inclusion_ct_seq_eqv_r."},{"statement":"(⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘)⁺\n⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗E⦘.","conclusion":"(⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘)⁺\n⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗E⦘","hypotheses":"","proofString":"rewrite inclusion_ct_seq_eqv_l.\nby rewrite inclusion_ct_seq_eqv_r."},{"statement":"⦗E⦘ ⨾ ((ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘)⁺\n⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗E⦘.","conclusion":"⦗E⦘ ⨾ ((ar sc ∪ rf ⨾ ppo ∩ same_loc) ⨾ ⦗E⦘)⁺\n⊆ ⦗E⦘ ⨾ (ar sc ∪ rf ⨾ ppo ∩ same_loc)⁺ ⨾ ⦗E⦘","hypotheses":"","proofString":"by rewrite inclusion_ct_seq_eqv_r."},{"statement":"rfe ∩ same_tid ⊆ rfe ∩ (⦗E⦘ ⨾ same_tid ⨾ ⦗E⦘).","conclusion":"rfe ∩ same_tid ⊆ rfe ∩ (⦗E⦘ ⨾ same_tid ⨾ ⦗E⦘)","hypotheses":"","proofString":"rewrite (wf_rfeE WF) at 1.\nbasic_solver."},{"statement":"(⦗E⦘ ⨾ rfe ⨾ ⦗E⦘) ∩ same_tid ⊆ rfe ∩ (⦗E⦘ ⨾ same_tid ⨾ ⦗E⦘).","conclusion":"(⦗E⦘ ⨾ rfe ⨾ ⦗E⦘) ∩ same_tid ⊆ rfe ∩ (⦗E⦘ ⨾ same_tid ⨾ ⦗E⦘)","hypotheses":"","proofString":"basic_solver."},{"statement":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘)\n∩ (same_tid ∩ (fun a : actid => is_init a) × (fun a : actid => is_init a))\n⊆ ∅₂.","conclusion":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘)\n∩ (same_tid ∩ (fun a : actid => is_init a) × (fun a : actid => is_init a))\n⊆ ∅₂","hypotheses":"","proofString":"rewrite init_w; eauto.\ntype_solver."},{"statement":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ∩ (same_tid ∩ W × W) ⊆ ∅₂.","conclusion":"(⦗W⦘ ⨾ rfe ⨾ ⦗R⦘) ∩ (same_tid ∩ W × W) ⊆ ∅₂","hypotheses":"","proofString":"type_solver."},{"statement":"rfe ∩ (same_tid ∩ sb⁻¹) ⊆ ∅₂.","conclusion":"rfe ∩ (same_tid ∩ sb⁻¹) ⊆ ∅₂","hypotheses":"","proofString":"unfolder.\nins.\ndesf.\neapply COH.\neexists.\nsplit.\neby apply sb_in_hb.\nright.\napply rf_in_eco.\nmatch goal with       | H : rfe _ _ |- _ => apply H       end."},{"statement":"forall x y : actid, rfe x y /\\ same_tid x y /\\ sb y x -> False.","conclusion":"forall x y : actid, rfe x y /\\ same_tid x y /\\ sb y x -> False","hypotheses":"","proofString":"ins.\ndesf.\neapply COH.\neexists.\nsplit.\neby apply sb_in_hb.\nright.\napply rf_in_eco.\nmatch goal with       | H : rfe _ _ |- _ => apply H       end."},{"statement":"(x y : actid) (H : rfe x y /\\ same_tid x y /\\ sb y x) : False.","conclusion":"False","hypotheses":"(x y : actid) (H : rfe x y /\\ same_tid x y /\\ sb y x)","proofString":"desf.\neapply COH.\neexists.\nsplit.\neby apply sb_in_hb.\nright.\napply rf_in_eco.\nmatch goal with       | H : rfe _ _ |- _ => apply H       end."},{"statement":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb y x) : False.","conclusion":"False","hypotheses":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb y x)","proofString":"eapply COH.\neexists.\nsplit.\neby apply sb_in_hb.\nright.\napply rf_in_eco.\nmatch goal with       | H : rfe _ _ |- _ => apply H       end."},{"statement":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb y x) : eco x y.","conclusion":"eco x y","hypotheses":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb y x)","proofString":"apply rf_in_eco.\nmatch goal with       | H : rfe _ _ |- _ => apply H       end."},{"statement":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb y x) : rf x y.","conclusion":"rf x y","hypotheses":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb y x)","proofString":"match goal with       | H : rfe _ _ |- _ => apply H       end."},{"statement":"forall x y : actid, rfe x y /\\ same_tid x y /\\ (x = y \\/ sb x y) -> False.","conclusion":"forall x y : actid, rfe x y /\\ same_tid x y /\\ (x = y \\/ sb x y) -> False","hypotheses":"","proofString":"ins.\ndesf.\neapply eco_irr; eauto.\napply rf_in_eco.\nmatch goal with    | H : rfe _ _ |- _ => apply H    end.\neapply (thread_rfe_sb WF (coherence_sc_per_loc COH)).\nbasic_solver 10."},{"statement":"(x y : actid) (H : rfe x y /\\ same_tid x y /\\ (x = y \\/ sb x y)) : False.","conclusion":"False","hypotheses":"(x y : actid) (H : rfe x y /\\ same_tid x y /\\ (x = y \\/ sb x y))","proofString":"desf.\neapply eco_irr; eauto.\napply rf_in_eco.\nmatch goal with    | H : rfe _ _ |- _ => apply H    end.\neapply (thread_rfe_sb WF (coherence_sc_per_loc COH)).\nbasic_solver 10."},{"statement":"(y : actid) (H0 : same_tid y y) (H : rfe y y) : False.","conclusion":"False","hypotheses":"(y : actid) (H0 : same_tid y y) (H : rfe y y)","proofString":"eapply eco_irr; eauto.\napply rf_in_eco.\nmatch goal with    | H : rfe _ _ |- _ => apply H    end."},{"statement":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb x y) : False.","conclusion":"False","hypotheses":"(x y : actid) (H : rfe x y) (H0 : same_tid x y) (H1 : sb x y)","proofString":"eapply (thread_rfe_sb WF (coherence_sc_per_loc COH)).\nbasic_solver 10."},{"statement":"(sc ∪ rfe ∪ ar_int) ⨾ ⦗W⦘ ⊆ ar_int.","conclusion":"(sc ∪ rfe ∪ ar_int) ⨾ ⦗W⦘ ⊆ ar_int","hypotheses":"","proofString":"erewrite wf_scD with (sc:=sc); [|by apply IMMCON].\nrewrite (wf_rfeD WF).\ntype_solver."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ rfe ∪ ar_int) ⨾ ⦗W⦘ ⊆ ar_int.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ rfe ∪ ar_int) ⨾ ⦗W⦘ ⊆ ar_int","hypotheses":"","proofString":"rewrite (wf_rfeD WF).\ntype_solver."},{"statement":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ∪ ar_int) ⨾ ⦗W⦘ ⊆ ar_int.","conclusion":"(⦗F ∩₁ Sc⦘ ⨾ sc ⨾ ⦗F ∩₁ Sc⦘ ∪ ⦗W⦘ ⨾ rfe ⨾ ⦗R⦘ ∪ ar_int) ⨾ ⦗W⦘ ⊆ ar_int","hypotheses":"","proofString":"type_solver."},{"statement":"good_ctx (fun r : relation actid => r).","conclusion":"good_ctx (fun r : relation actid => r)","hypotheses":"","proofString":"by eauto with hahn."},{"statement":"psc ∪ rfe ⊆ psc⁺ ∪ rfe.","conclusion":"psc ∪ rfe ⊆ psc⁺ ∪ rfe","hypotheses":"","proofString":"by unionL; vauto."},{"statement":"forall k : relation actid, k ⊆ psc⁺ ∪ rfe -> (psc ∪ rfe) ⨾ k ⊆ psc⁺ ∪ rfe.","conclusion":"forall k : relation actid, k ⊆ psc⁺ ∪ rfe -> (psc ∪ rfe) ⨾ k ⊆ psc⁺ ∪ rfe","hypotheses":"","proofString":"ins; rewrite H; relsf; unionL.\narewrite (psc ⊆ psc＊); relsf.\nrewrite ct_begin.\nrewrite (dom_l wf_pscD) at 1; rewrite (dom_r (wf_rfeD WF)); type_solver 12.\nrewrite (dom_r wf_pscD) at 1; rewrite (dom_l (wf_rfeD WF)); type_solver 12.\nrewrite (dom_r (wf_rfeD WF)) at 1; rewrite (dom_l (wf_rfeD WF)); type_solver 12."},{"statement":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe) : psc ⨾ psc⁺ ⊆ psc⁺ ∪ rfe.","conclusion":"psc ⨾ psc⁺ ⊆ psc⁺ ∪ rfe","hypotheses":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe)","proofString":"arewrite (psc ⊆ psc＊); relsf."},{"statement":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe) : rfe ⨾ psc⁺ ⊆ psc⁺ ∪ rfe.","conclusion":"rfe ⨾ psc⁺ ⊆ psc⁺ ∪ rfe","hypotheses":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe)","proofString":"rewrite ct_begin.\nrewrite (dom_l wf_pscD) at 1; rewrite (dom_r (wf_rfeD WF)); type_solver 12."},{"statement":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe) : rfe ⨾ psc ⨾ psc＊ ⊆ psc ⨾ psc＊ ∪ rfe.","conclusion":"rfe ⨾ psc ⨾ psc＊ ⊆ psc ⨾ psc＊ ∪ rfe","hypotheses":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe)","proofString":"rewrite (dom_l wf_pscD) at 1; rewrite (dom_r (wf_rfeD WF)); type_solver 12."},{"statement":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe) : psc ⨾ rfe ⊆ psc⁺ ∪ rfe.","conclusion":"psc ⨾ rfe ⊆ psc⁺ ∪ rfe","hypotheses":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe)","proofString":"rewrite (dom_r wf_pscD) at 1; rewrite (dom_l (wf_rfeD WF)); type_solver 12."},{"statement":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe) : rfe ⨾ rfe ⊆ psc⁺ ∪ rfe.","conclusion":"rfe ⨾ rfe ⊆ psc⁺ ∪ rfe","hypotheses":"(k : relation actid) (H : k ⊆ psc⁺ ∪ rfe)","proofString":"rewrite (dom_r (wf_rfeD WF)) at 1; rewrite (dom_l (wf_rfeD WF)); type_solver 12."}]}