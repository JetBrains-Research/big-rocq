{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/imm/src/basic/ProgToExecutionProperties.v","fileSamples":[{"statement":"sb ⊆ ⦗E⦘ ⨾ sb ⨾ ⦗E⦘.","conclusion":"sb ⊆ ⦗E⦘ ⨾ sb ⨾ ⦗E⦘","hypotheses":"","proofString":"unfold Execution.sb; basic_solver 42."},{"statement":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e) : lab (G s') e = lab (G s) e.","conclusion":"lab (G s') e = lab (G s) e","hypotheses":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e)","proofString":"rewrite UG.\nsimpls.\nrewrite updo; auto.\nintros HH; subst.\nred in ACT.\napply WF in ACT.\ndesc.\ninv REP.\nlia."},{"statement":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e) : lab\n  {|\n    acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n    threads_set := eq thread ∪₁ threads_set (G s);\n    lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n    rmw := rmw (G s);\n    data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n    addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n    ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n    rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n    rf := ∅₂;\n    co := ∅₂\n  |} e = lab (G s) e.","conclusion":"lab\n  {|\n    acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n    threads_set := eq thread ∪₁ threads_set (G s);\n    lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n    rmw := rmw (G s);\n    data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n    addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n    ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n    rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n    rf := ∅₂;\n    co := ∅₂\n  |} e = lab (G s) e","hypotheses":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e)","proofString":"simpls.\nrewrite updo; auto.\nintros HH; subst.\nred in ACT.\napply WF in ACT.\ndesc.\ninv REP.\nlia."},{"statement":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e) : upd (lab (G s)) (ThreadEvent thread (eindex s)) hl e = lab (G s) e.","conclusion":"upd (lab (G s)) (ThreadEvent thread (eindex s)) hl e = lab (G s) e","hypotheses":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e)","proofString":"rewrite updo; auto.\nintros HH; subst.\nred in ACT.\napply WF in ACT.\ndesc.\ninv REP.\nlia."},{"statement":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e) : e <> ThreadEvent thread (eindex s).","conclusion":"e <> ThreadEvent thread (eindex s)","hypotheses":"(thread : thread_id) (s s' : state) (e : actid) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) e)","proofString":"intros HH; subst.\nred in ACT.\napply WF in ACT.\ndesc.\ninv REP.\nlia."},{"statement":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) (ThreadEvent thread (eindex s))) : False.","conclusion":"False","hypotheses":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : acts_set (G s) (ThreadEvent thread (eindex s)))","proofString":"red in ACT.\napply WF in ACT.\ndesc.\ninv REP.\nlia."},{"statement":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : (let (acts_set, _, _, _, _, _, _, _, _, _) := G s in acts_set)\n  (ThreadEvent thread (eindex s))) : False.","conclusion":"False","hypotheses":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (ACT : (let (acts_set, _, _, _, _, _, _, _, _, _) := G s in acts_set)\n  (ThreadEvent thread (eindex s)))","proofString":"apply WF in ACT.\ndesc.\ninv REP.\nlia."},{"statement":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (index : nat) (REP : ThreadEvent thread (eindex s) = ThreadEvent thread index) (LE : index < eindex s) : False.","conclusion":"False","hypotheses":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (index : nat) (REP : ThreadEvent thread (eindex s) = ThreadEvent thread index) (LE : index < eindex s)","proofString":"inv REP.\nlia."},{"statement":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (LE : eindex s < eindex s) (REP : ThreadEvent thread (eindex s) = ThreadEvent thread (eindex s)) : False.","conclusion":"False","hypotheses":"(thread : thread_id) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (UG : G s' =\n{|\n  acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n  threads_set := eq thread ∪₁ threads_set (G s);\n  lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n  rmw := rmw (G s);\n  data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n  addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n  ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n  rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n  rf := ∅₂;\n  co := ∅₂\n|}) (LE : eindex s < eindex s) (REP : ThreadEvent thread (eindex s) = ThreadEvent thread (eindex s))","proofString":"lia."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) : forall n : nat,\nn < eindex s + 1 ->\nacts_set\n  {|\n    acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n    threads_set := eq thread ∪₁ threads_set (G s);\n    lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n    rmw := rmw (G s);\n    data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n    addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n    ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n    rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n    rf := ∅₂;\n    co := ∅₂\n  |} (ThreadEvent thread n).","conclusion":"forall n : nat,\nn < eindex s + 1 ->\nacts_set\n  {|\n    acts_set := eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n    threads_set := eq thread ∪₁ threads_set (G s);\n    lab := upd (lab (G s)) (ThreadEvent thread (eindex s)) hl;\n    rmw := rmw (G s);\n    data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s));\n    addr := addr (G s) ∪ s2 × eq (ThreadEvent thread (eindex s));\n    ctrl := ctrl (G s) ∪ s3 × eq (ThreadEvent thread (eindex s));\n    rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n    rf := ∅₂;\n    co := ∅₂\n  |} (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1)","proofString":"simpls.\nins.\nassert (n <= eindex s) as NS by lia.\napply Const.le_lteq in NS.\ndestruct NS as [LT|LT]; [right|left].\napply (acts_clos WF).\nlia.\ndesf."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) : forall n : nat,\nn < eindex s + 1 ->\n(eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"forall n : nat,\nn < eindex s + 1 ->\n(eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1)","proofString":"ins.\nassert (n <= eindex s) as NS by lia.\napply Const.le_lteq in NS.\ndestruct NS as [LT|LT]; [right|left].\napply (acts_clos WF).\nlia.\ndesf."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) : (eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1)","proofString":"assert (n <= eindex s) as NS by lia.\napply Const.le_lteq in NS.\ndestruct NS as [LT|LT]; [right|left].\napply (acts_clos WF).\nlia.\ndesf."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (NS : n <= eindex s) : (eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (NS : n <= eindex s)","proofString":"apply Const.le_lteq in NS.\ndestruct NS as [LT|LT]; [right|left].\napply (acts_clos WF).\nlia.\ndesf."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (NS : n < eindex s \\/ n = eindex s) : (eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (NS : n < eindex s \\/ n = eindex s)","proofString":"destruct NS as [LT|LT]; [right|left].\napply (acts_clos WF).\nlia.\ndesf."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (LT : n < eindex s) : acts_set (G s) (ThreadEvent thread n).","conclusion":"acts_set (G s) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (LT : n < eindex s)","proofString":"apply (acts_clos WF).\nlia."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (LT : n < eindex s) : n < eindex s.","conclusion":"n < eindex s","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (LT : n < eindex s)","proofString":"lia."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (LT : n = eindex s) : ThreadEvent thread (eindex s) = ThreadEvent thread n.","conclusion":"ThreadEvent thread (eindex s) = ThreadEvent thread n","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (hl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [hl]) (UG : G s' = add (G s) thread (eindex s) hl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 1) (n : nat) (H : n < eindex s + 1) (LT : n = eindex s)","proofString":"desf."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) : forall n : nat,\nn < eindex s + 2 ->\nacts_set\n  {|\n    acts_set :=\n      eq (ThreadEvent thread (eindex s + 1))\n      ∪₁ eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n    threads_set := eq thread ∪₁ threads_set (G s);\n    lab :=\n      upd (upd (lab (G s)) (ThreadEvent thread (eindex s)) rl)\n        (ThreadEvent thread (eindex s + 1)) wl;\n    rmw :=\n      singl_rel (ThreadEvent thread (eindex s))\n        (ThreadEvent thread (eindex s + 1)) ∪ rmw (G s);\n    data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s + 1));\n    addr :=\n      addr (G s)\n      ∪ s2\n        × (eq (ThreadEvent thread (eindex s))\n           ∪₁ eq (ThreadEvent thread (eindex s + 1)));\n    ctrl :=\n      ctrl (G s)\n      ∪ s3\n        × (eq (ThreadEvent thread (eindex s))\n           ∪₁ eq (ThreadEvent thread (eindex s + 1)));\n    rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n    rf := ∅₂;\n    co := ∅₂\n  |} (ThreadEvent thread n).","conclusion":"forall n : nat,\nn < eindex s + 2 ->\nacts_set\n  {|\n    acts_set :=\n      eq (ThreadEvent thread (eindex s + 1))\n      ∪₁ eq (ThreadEvent thread (eindex s)) ∪₁ acts_set (G s);\n    threads_set := eq thread ∪₁ threads_set (G s);\n    lab :=\n      upd (upd (lab (G s)) (ThreadEvent thread (eindex s)) rl)\n        (ThreadEvent thread (eindex s + 1)) wl;\n    rmw :=\n      singl_rel (ThreadEvent thread (eindex s))\n        (ThreadEvent thread (eindex s + 1)) ∪ rmw (G s);\n    data := data (G s) ∪ s1 × eq (ThreadEvent thread (eindex s + 1));\n    addr :=\n      addr (G s)\n      ∪ s2\n        × (eq (ThreadEvent thread (eindex s))\n           ∪₁ eq (ThreadEvent thread (eindex s + 1)));\n    ctrl :=\n      ctrl (G s)\n      ∪ s3\n        × (eq (ThreadEvent thread (eindex s))\n           ∪₁ eq (ThreadEvent thread (eindex s + 1)));\n    rmw_dep := rmw_dep (G s) ∪ s4 × eq (ThreadEvent thread (eindex s));\n    rf := ∅₂;\n    co := ∅₂\n  |} (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2)","proofString":"simpls.\nins.\nassert (n <= eindex s + 1) as NS by lia.\napply Const.le_lteq in NS.\ndestruct NS as [LT|LT].\napply Const.le_lteq in LT.\ndestruct LT as [LT|LT].\nright.\napply (acts_clos WF).\nlia.\nrewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right.\nrewrite Const.add_comm in LT.\ninv LT.\nrewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) : forall n : nat,\nn < eindex s + 2 ->\n(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"forall n : nat,\nn < eindex s + 2 ->\n(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2)","proofString":"ins.\nassert (n <= eindex s + 1) as NS by lia.\napply Const.le_lteq in NS.\ndestruct NS as [LT|LT].\napply Const.le_lteq in LT.\ndestruct LT as [LT|LT].\nright.\napply (acts_clos WF).\nlia.\nrewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right.\nrewrite Const.add_comm in LT.\ninv LT.\nrewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2)","proofString":"assert (n <= eindex s + 1) as NS by lia.\napply Const.le_lteq in NS.\ndestruct NS as [LT|LT].\napply Const.le_lteq in LT.\ndestruct LT as [LT|LT].\nright.\napply (acts_clos WF).\nlia.\nrewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right.\nrewrite Const.add_comm in LT.\ninv LT.\nrewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (NS : n <= eindex s + 1) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (NS : n <= eindex s + 1)","proofString":"apply Const.le_lteq in NS.\ndestruct NS as [LT|LT].\napply Const.le_lteq in LT.\ndestruct LT as [LT|LT].\nright.\napply (acts_clos WF).\nlia.\nrewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right.\nrewrite Const.add_comm in LT.\ninv LT.\nrewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (NS : n < eindex s + 1 \\/ n = eindex s + 1) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (NS : n < eindex s + 1 \\/ n = eindex s + 1)","proofString":"destruct NS as [LT|LT].\napply Const.le_lteq in LT.\ndestruct LT as [LT|LT].\nright.\napply (acts_clos WF).\nlia.\nrewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right.\nrewrite Const.add_comm in LT.\ninv LT.\nrewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : n < eindex s + 1) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : n < eindex s + 1)","proofString":"apply Const.le_lteq in LT.\ndestruct LT as [LT|LT].\nright.\napply (acts_clos WF).\nlia.\nrewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1 \\/ S n = eindex s + 1) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1 \\/ S n = eindex s + 1)","proofString":"destruct LT as [LT|LT].\nright.\napply (acts_clos WF).\nlia.\nrewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1)","proofString":"right.\napply (acts_clos WF).\nlia."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1) : acts_set (G s) (ThreadEvent thread n).","conclusion":"acts_set (G s) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1)","proofString":"apply (acts_clos WF).\nlia."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1) : n < eindex s.","conclusion":"n < eindex s","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n < eindex s + 1)","proofString":"lia."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n = eindex s + 1) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n = eindex s + 1)","proofString":"rewrite Const.add_comm in LT.\ninv LT.\nleft.\nby right."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n = 1 + eindex s) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : S n = 1 + eindex s)","proofString":"inv LT.\nleft.\nby right."},{"statement":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (LT : S (eindex s) = 1 + eindex s) (H : eindex s < eindex s + 2) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread (eindex s)).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread (eindex s))","hypotheses":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (LT : S (eindex s) = 1 + eindex s) (H : eindex s < eindex s + 2)","proofString":"left.\nby right."},{"statement":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (LT : S (eindex s) = 1 + eindex s) (H : eindex s < eindex s + 2) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s)))\n  (ThreadEvent thread (eindex s)).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s)))\n  (ThreadEvent thread (eindex s))","hypotheses":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (LT : S (eindex s) = 1 + eindex s) (H : eindex s < eindex s + 2)","proofString":"by right."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : n = eindex s + 1) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : n = eindex s + 1)","proofString":"rewrite Const.add_comm in LT.\ninv LT.\nrewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : n = 1 + eindex s) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread n)","hypotheses":"(thread : thread_id) (ll : list label) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread ll s s') (LABELS : ll = [wl; rl]) (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (n : nat) (H : n < eindex s + 2) (LT : n = 1 + eindex s)","proofString":"inv LT.\nrewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (H : 1 + eindex s < eindex s + 2) (H0 : 1 + eindex s = 1 + eindex s) : (eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread (1 + eindex s)).","conclusion":"(eq (ThreadEvent thread (eindex s + 1)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread (1 + eindex s))","hypotheses":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (H : 1 + eindex s < eindex s + 2) (H0 : 1 + eindex s = 1 + eindex s)","proofString":"rewrite Const.add_comm.\ndo 2 left.\neauto."},{"statement":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (H : 1 + eindex s < eindex s + 2) (H0 : 1 + eindex s = 1 + eindex s) : (eq (ThreadEvent thread (1 + eindex s)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread (1 + eindex s)).","conclusion":"(eq (ThreadEvent thread (1 + eindex s)) ∪₁ eq (ThreadEvent thread (eindex s))\n ∪₁ acts_set (G s)) (ThreadEvent thread (1 + eindex s))","hypotheses":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (H : 1 + eindex s < eindex s + 2) (H0 : 1 + eindex s = 1 + eindex s)","proofString":"do 2 left.\neauto."},{"statement":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (H : 1 + eindex s < eindex s + 2) (H0 : 1 + eindex s = 1 + eindex s) : ThreadEvent thread (1 + eindex s) = ThreadEvent thread (1 + eindex s).","conclusion":"ThreadEvent thread (1 + eindex s) = ThreadEvent thread (1 + eindex s)","hypotheses":"(thread : thread_id) (s s' : state) (rl wl : label) (s1 s2 s3 s4 : actid -> Prop) (WF : wf_thread_state thread s) (STEP : istep thread [wl; rl] s s') (UG : G s' = add_rmw (G s) thread (eindex s) rl wl s1 s2 s3 s4) (UINDEX : eindex s' = eindex s + 2) (H : 1 + eindex s < eindex s + 2) (H0 : 1 + eindex s = 1 + eindex s)","proofString":"eauto."},{"statement":"(thread : thread_id) (state state' : ProgToExecution.state) (STEP : step thread state state') (x : list label) (H : istep thread x state state') : instrs state' = instrs state.","conclusion":"instrs state' = instrs state","hypotheses":"(thread : thread_id) (state state' : ProgToExecution.state) (STEP : step thread state state') (x : list label) (H : istep thread x state state')","proofString":"inv H."},{"statement":"(thread : thread_id) (state state' : ProgToExecution.state) (STEPS : clos_refl_trans_n1 ProgToExecution.state (step thread) state state') : instrs state' = instrs state.","conclusion":"instrs state' = instrs state","hypotheses":"(thread : thread_id) (state state' : ProgToExecution.state) (STEPS : clos_refl_trans_n1 ProgToExecution.state (step thread) state state')","proofString":"induction STEPS; auto.\nrewrite <- IHSTEPS.\neapply step_preserves_instrs; eauto."},{"statement":"(thread : thread_id) (state y z : ProgToExecution.state) (H : step thread y z) (STEPS : clos_refl_trans_n1 ProgToExecution.state (step thread) state y) (IHSTEPS : instrs y = instrs state) : instrs z = instrs state.","conclusion":"instrs z = instrs state","hypotheses":"(thread : thread_id) (state y z : ProgToExecution.state) (H : step thread y z) (STEPS : clos_refl_trans_n1 ProgToExecution.state (step thread) state y) (IHSTEPS : instrs y = instrs state)","proofString":"rewrite <- IHSTEPS.\neapply step_preserves_instrs; eauto."},{"statement":"(thread : thread_id) (state y z : ProgToExecution.state) (H : step thread y z) (STEPS : clos_refl_trans_n1 ProgToExecution.state (step thread) state y) (IHSTEPS : instrs y = instrs state) : instrs z = instrs y.","conclusion":"instrs z = instrs y","hypotheses":"(thread : thread_id) (state y z : ProgToExecution.state) (H : step thread y z) (STEPS : clos_refl_trans_n1 ProgToExecution.state (step thread) state y) (IHSTEPS : instrs y = instrs state)","proofString":"eapply step_preserves_instrs; eauto."},{"statement":"(tid : thread_id) (s s' : state) (x : list label) (H : istep tid x s s') : ectrl s ⊆₁ ectrl s'.","conclusion":"ectrl s ⊆₁ ectrl s'","hypotheses":"(tid : thread_id) (s s' : state) (x : list label) (H : istep tid x s s')","proofString":"red in H; desc.\ndestruct ISTEP0; rewrite UECTRL; try done.\nbasic_solver."},{"statement":"(tid : thread_id) (s s' : state) (x : list label) (INSTRS : instrs s = instrs s') (instr : Instr.t) (ISTEP : Some instr = nth_error (instrs s) (pc s)) (ISTEP0 : istep_ tid x s s' instr) : ectrl s ⊆₁ ectrl s'.","conclusion":"ectrl s ⊆₁ ectrl s'","hypotheses":"(tid : thread_id) (s s' : state) (x : list label) (INSTRS : instrs s = instrs s') (instr : Instr.t) (ISTEP : Some instr = nth_error (instrs s) (pc s)) (ISTEP0 : istep_ tid x s s' instr)","proofString":"destruct ISTEP0; rewrite UECTRL; try done.\nbasic_solver."},{"statement":"(tid : thread_id) (s s' : state) (x : list label) (INSTRS : instrs s = instrs s') (instr : Instr.t) (ISTEP : Some instr = nth_error (instrs s) (pc s)) (expr : Instr.expr) (shift : nat) (LABELS : x = []) (II : instr = Instr.ifgoto expr shift) (UPC : if Const.eq_dec (RegFile.eval_expr (regf s) expr) 0\nthen pc s' = pc s + 1\nelse pc s' = shift) (UG : G s' = G s) (UINDEX : eindex s' = eindex s) (UREGS : regf s' = regf s) (UDEPS : depf s' = depf s) (UECTRL : ectrl s' = DepsFile.expr_deps (depf s) expr ∪₁ ectrl s) : ectrl s ⊆₁ DepsFile.expr_deps (depf s) expr ∪₁ ectrl s.","conclusion":"ectrl s ⊆₁ DepsFile.expr_deps (depf s) expr ∪₁ ectrl s","hypotheses":"(tid : thread_id) (s s' : state) (x : list label) (INSTRS : instrs s = instrs s') (instr : Instr.t) (ISTEP : Some instr = nth_error (instrs s) (pc s)) (expr : Instr.expr) (shift : nat) (LABELS : x = []) (II : instr = Instr.ifgoto expr shift) (UPC : if Const.eq_dec (RegFile.eval_expr (regf s) expr) 0\nthen pc s' = pc s + 1\nelse pc s' = shift) (UG : G s' = G s) (UINDEX : eindex s' = eindex s) (UREGS : regf s' = regf s) (UDEPS : depf s' = depf s) (UECTRL : ectrl s' = DepsFile.expr_deps (depf s) expr ∪₁ ectrl s)","proofString":"basic_solver."},{"statement":"(tid : thread_id) (x y : state) (H : step tid x y) : ectrl x ⊆₁ ectrl y.","conclusion":"ectrl x ⊆₁ ectrl y","hypotheses":"(tid : thread_id) (x y : state) (H : step tid x y)","proofString":"eby eapply ectrl_increasing."},{"statement":"(tid : thread_id) (x : state) : ectrl x ⊆₁ ectrl x.","conclusion":"ectrl x ⊆₁ ectrl x","hypotheses":"(tid : thread_id) (x : state)","proofString":"done."},{"statement":"(tid : thread_id) (x y z : state) (STEP1 : (step tid)＊ x y) (STEP2 : (step tid)＊ y z) (IHSTEP1 : ectrl x ⊆₁ ectrl y) (IHSTEP2 : ectrl y ⊆₁ ectrl z) : ectrl x ⊆₁ ectrl z.","conclusion":"ectrl x ⊆₁ ectrl z","hypotheses":"(tid : thread_id) (x y z : state) (STEP1 : (step tid)＊ x y) (STEP2 : (step tid)＊ y z) (IHSTEP1 : ectrl x ⊆₁ ectrl y) (IHSTEP2 : ectrl y ⊆₁ ectrl z)","proofString":"unfolder in *; basic_solver."},{"statement":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') : ⦗Tid_ thread⦘ ⨾ rmw G ⨾ ⦗Tid_ thread⦘ ⊆ rmw G.","conclusion":"⦗Tid_ thread⦘ ⨾ rmw G ⨾ ⦗Tid_ thread⦘ ⊆ rmw G","hypotheses":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G')","proofString":"basic_solver."},{"statement":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') : forall e : actid, acts_set G' e -> same_label_u2v (lab G e) (lab G' e).","conclusion":"forall e : actid, acts_set G' e -> same_label_u2v (lab G e) (lab G' e)","hypotheses":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G')","proofString":"ins.\nred.\nrewrite (tr_lab TEH); auto.\ndesf."},{"statement":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') (e : actid) (EE : acts_set G' e) : same_label_u2v (lab G e) (lab G' e).","conclusion":"same_label_u2v (lab G e) (lab G' e)","hypotheses":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') (e : actid) (EE : acts_set G' e)","proofString":"red.\nrewrite (tr_lab TEH); auto.\ndesf."},{"statement":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') (e : actid) (EE : acts_set G' e) : match lab G e with\n| Aload r1 o1 l1 _ =>\n    match lab G' e with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match lab G' e with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match lab G' e with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend.","conclusion":"match lab G e with\n| Aload r1 o1 l1 _ =>\n    match lab G' e with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match lab G' e with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match lab G' e with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend","hypotheses":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') (e : actid) (EE : acts_set G' e)","proofString":"rewrite (tr_lab TEH); auto.\ndesf."},{"statement":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') (e : actid) (EE : acts_set G' e) : match lab G e with\n| Aload r1 o1 l1 _ =>\n    match lab G e with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match lab G e with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match lab G e with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend.","conclusion":"match lab G e with\n| Aload r1 o1 l1 _ =>\n    match lab G e with\n    | Aload r2 o2 l2 _ => r1 = r2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Astore s1 o1 l1 _ =>\n    match lab G e with\n    | Astore s2 o2 l2 _ => s1 = s2 /\\ o1 = o2 /\\ l1 = l2\n    | _ => False\n    end\n| Afence o1 => match lab G e with\n               | Afence o2 => o1 = o2\n               | _ => False\n               end\nend","hypotheses":"(thread : BinNums.positive) (G' : execution) (TEH : thread_restricted_execution G thread G') (e : actid) (EE : acts_set G' e)","proofString":"desf."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"rewrite ORMW0, ORMW.\ngeneralize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : ⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"generalize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"basic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"rewrite ODATA0, ODATA.\ngeneralize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : ⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"generalize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"basic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"rewrite OADDR0, OADDR.\ngeneralize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : ⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"generalize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"basic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"rewrite OCTRL0, OCTRL.\ngeneralize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : ⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"generalize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"basic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"rewrite OFAILDEP0, OFAILDEP.\ngeneralize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : ⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"generalize XX.\nbasic_solver 10."},{"statement":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y)) : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘.","conclusion":"acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y) ->\n⦗acts_set (ProgToExecution.G x)⦘\n⨾ (⦗acts_set (ProgToExecution.G y)⦘\n   ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘)\n  ⨾ ⦗acts_set (ProgToExecution.G x)⦘\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G x)⦘","hypotheses":"(thread : thread_id) (x : state) (GPC : wf_thread_state thread x) (y z : state) (STEP1 : (step thread)＊ x y) (STEP2 : (step thread)＊ y z) (ORMW0 : rmw (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ODATA0 : data (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ data (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OADDR0 : addr (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ addr (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OCTRL0 : ctrl (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ ctrl (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (OFAILDEP0 : rmw_dep (ProgToExecution.G x)\n≡ ⦗acts_set (ProgToExecution.G x)⦘\n  ⨾ rmw_dep (ProgToExecution.G y) ⨾ ⦗acts_set (ProgToExecution.G x)⦘) (ORMW : rmw (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (ODATA : data (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ data (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OADDR : addr (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ addr (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OCTRL : ctrl (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ ctrl (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (OFAILDEP : rmw_dep (ProgToExecution.G y)\n≡ ⦗acts_set (ProgToExecution.G y)⦘\n  ⨾ rmw_dep (ProgToExecution.G z) ⨾ ⦗acts_set (ProgToExecution.G y)⦘) (GPC' : wf_thread_state thread y) (XX : acts_set (ProgToExecution.G x) ⊆₁ acts_set (ProgToExecution.G y))","proofString":"basic_solver 10."},{"statement":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) : forall x : actid, (acts_set G ∩₁ Tid_ tid_init) x -> is_init x.","conclusion":"forall x : actid, (acts_set G ∩₁ Tid_ tid_init) x -> is_init x","hypotheses":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog)","proofString":"unfolder.\nintros e [EE TIDe].\nunfold tid, is_init in *.\ndestruct e eqn:Heq; auto.\ndestruct GPROG as [HH _].\nrewrite <- Heq in EE.\nspecialize (HH e EE).\ndesf."},{"statement":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) : forall x : actid, acts_set G x /\\ tid x = tid_init -> is_init x.","conclusion":"forall x : actid, acts_set G x /\\ tid x = tid_init -> is_init x","hypotheses":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog)","proofString":"intros e [EE TIDe].\nunfold tid, is_init in *.\ndestruct e eqn:Heq; auto.\ndestruct GPROG as [HH _].\nrewrite <- Heq in EE.\nspecialize (HH e EE).\ndesf."},{"statement":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (EE : acts_set G e) (TIDe : tid e = tid_init) : is_init e.","conclusion":"is_init e","hypotheses":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (EE : acts_set G e) (TIDe : tid e = tid_init)","proofString":"unfold tid, is_init in *.\ndestruct e eqn:Heq; auto.\ndestruct GPROG as [HH _].\nrewrite <- Heq in EE.\nspecialize (HH e EE).\ndesf."},{"statement":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (EE : acts_set G e) (TIDe : match e with\n| InitEvent _ => tid_init\n| ThreadEvent i _ => i\nend = tid_init) : match e with\n| InitEvent _ => true\n| ThreadEvent _ _ => false\nend.","conclusion":"match e with\n| InitEvent _ => true\n| ThreadEvent _ _ => false\nend","hypotheses":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (EE : acts_set G e) (TIDe : match e with\n| InitEvent _ => tid_init\n| ThreadEvent i _ => i\nend = tid_init)","proofString":"destruct e eqn:Heq; auto.\ndestruct GPROG as [HH _].\nrewrite <- Heq in EE.\nspecialize (HH e EE).\ndesf."},{"statement":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G (ThreadEvent thread index)) (TIDe : thread = tid_init) : false.","conclusion":"false","hypotheses":"(G : execution) (prog : Prog.t) (GPROG : program_execution prog G) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G (ThreadEvent thread index)) (TIDe : thread = tid_init)","proofString":"destruct GPROG as [HH _].\nrewrite <- Heq in EE.\nspecialize (HH e EE).\ndesf."},{"statement":"(G : execution) (prog : Prog.t) (HH : forall e0 : actid, acts_set G e0 -> is_init e0 \\/ IdentMap.In (tid e0) prog) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G (ThreadEvent thread index)) (TIDe : thread = tid_init) : false.","conclusion":"false","hypotheses":"(G : execution) (prog : Prog.t) (HH : forall e0 : actid, acts_set G e0 -> is_init e0 \\/ IdentMap.In (tid e0) prog) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G (ThreadEvent thread index)) (TIDe : thread = tid_init)","proofString":"rewrite <- Heq in EE.\nspecialize (HH e EE).\ndesf."},{"statement":"(G : execution) (prog : Prog.t) (HH : forall e0 : actid, acts_set G e0 -> is_init e0 \\/ IdentMap.In (tid e0) prog) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G e) (TIDe : thread = tid_init) : false.","conclusion":"false","hypotheses":"(G : execution) (prog : Prog.t) (HH : forall e0 : actid, acts_set G e0 -> is_init e0 \\/ IdentMap.In (tid e0) prog) (PROG_NINIT : ~ IdentMap.In tid_init prog) (e : actid) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G e) (TIDe : thread = tid_init)","proofString":"specialize (HH e EE).\ndesf."},{"statement":"(G : execution) (prog : Prog.t) (e : actid) (HH : is_init e \\/ IdentMap.In (tid e) prog) (PROG_NINIT : ~ IdentMap.In tid_init prog) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G e) (TIDe : thread = tid_init) : false.","conclusion":"false","hypotheses":"(G : execution) (prog : Prog.t) (e : actid) (HH : is_init e \\/ IdentMap.In (tid e) prog) (PROG_NINIT : ~ IdentMap.In tid_init prog) (thread : thread_id) (index : nat) (Heq : e = ThreadEvent thread index) (EE : acts_set G e) (TIDe : thread = tid_init)","proofString":"desf."},{"statement":"(thread : thread_id) (st st' : state) (STEP : step thread st st') (lbls : list label) (STEP0 : istep thread lbls st st') : eindex st <= eindex st'.","conclusion":"eindex st <= eindex st'","hypotheses":"(thread : thread_id) (st st' : state) (STEP : step thread st st') (lbls : list label) (STEP0 : istep thread lbls st st')","proofString":"rewrite (istep_eindex_shift STEP0).\nlia."},{"statement":"(thread : thread_id) (st st' : state) (STEP : step thread st st') (lbls : list label) (STEP0 : istep thread lbls st st') : eindex st <= eindex st + length lbls.","conclusion":"eindex st <= eindex st + length lbls","hypotheses":"(thread : thread_id) (st st' : state) (STEP : step thread st st') (lbls : list label) (STEP0 : istep thread lbls st st')","proofString":"lia."},{"statement":"(thread : thread_id) (st st' : state) (STEPS : rtc (step thread) st st') : eindex st <= eindex st'.","conclusion":"eindex st <= eindex st'","hypotheses":"(thread : thread_id) (st st' : state) (STEPS : rtc (step thread) st st')","proofString":"induction STEPS; auto.\napply eindex_step_mon in H.\nlia."},{"statement":"(thread : thread_id) (x y z : state) (H : step thread x y) (STEPS : rtc (step thread) y z) (IHSTEPS : eindex y <= eindex z) : eindex x <= eindex z.","conclusion":"eindex x <= eindex z","hypotheses":"(thread : thread_id) (x y z : state) (H : step thread x y) (STEPS : rtc (step thread) y z) (IHSTEPS : eindex y <= eindex z)","proofString":"apply eindex_step_mon in H.\nlia."},{"statement":"(thread : thread_id) (x y z : state) (H : eindex x <= eindex y) (STEPS : rtc (step thread) y z) (IHSTEPS : eindex y <= eindex z) : eindex x <= eindex z.","conclusion":"eindex x <= eindex z","hypotheses":"(thread : thread_id) (x y z : state) (H : eindex x <= eindex y) (STEPS : rtc (step thread) y z) (IHSTEPS : eindex y <= eindex z)","proofString":"lia."},{"statement":"(t : thread_id) (x y : state) (H : step t x y) : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G y).","conclusion":"threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G y)","hypotheses":"(t : thread_id) (x y : state) (H : step t x y)","proofString":"by apply step_threads_set in H."},{"statement":"(t : thread_id) (x : state) : threads_set (G x) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G x).","conclusion":"threads_set (G x) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G x)","hypotheses":"(t : thread_id) (x : state)","proofString":"basic_solver."},{"statement":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t /\\\nthreads_set (G y) ⊆₁ threads_set (G z)) : threads_set (G z) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G z).","conclusion":"threads_set (G z) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G z)","hypotheses":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t /\\\nthreads_set (G y) ⊆₁ threads_set (G z))","proofString":"desc.\nsplit.\nrewrite IHSTEP2, IHSTEP1.\nbasic_solver.\nrewrite IHSTEP3, IHSTEP0.\nbasic_solver."},{"statement":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z)) : threads_set (G z) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G z).","conclusion":"threads_set (G z) ⊆₁ threads_set (G x) ∪₁ eq t /\\\nthreads_set (G x) ⊆₁ threads_set (G z)","hypotheses":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z))","proofString":"split.\nrewrite IHSTEP2, IHSTEP1.\nbasic_solver.\nrewrite IHSTEP3, IHSTEP0.\nbasic_solver."},{"statement":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z)) : threads_set (G z) ⊆₁ threads_set (G x) ∪₁ eq t.","conclusion":"threads_set (G z) ⊆₁ threads_set (G x) ∪₁ eq t","hypotheses":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z))","proofString":"rewrite IHSTEP2, IHSTEP1.\nbasic_solver."},{"statement":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z)) : threads_set (G x) ∪₁ eq t ∪₁ eq t ⊆₁ threads_set (G x) ∪₁ eq t.","conclusion":"threads_set (G x) ∪₁ eq t ∪₁ eq t ⊆₁ threads_set (G x) ∪₁ eq t","hypotheses":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z))","proofString":"basic_solver."},{"statement":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z)) : threads_set (G x) ⊆₁ threads_set (G z).","conclusion":"threads_set (G x) ⊆₁ threads_set (G z)","hypotheses":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z))","proofString":"rewrite IHSTEP3, IHSTEP0.\nbasic_solver."},{"statement":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z)) : threads_set (G z) ⊆₁ threads_set (G z).","conclusion":"threads_set (G z) ⊆₁ threads_set (G z)","hypotheses":"(t : thread_id) (x y z : state) (STEP1 : (step t)＊ x y) (STEP2 : (step t)＊ y z) (IHSTEP1 : threads_set (G y) ⊆₁ threads_set (G x) ∪₁ eq t) (IHSTEP3 : threads_set (G x) ⊆₁ threads_set (G y)) (IHSTEP2 : threads_set (G z) ⊆₁ threads_set (G y) ∪₁ eq t) (IHSTEP0 : threads_set (G y) ⊆₁ threads_set (G z))","proofString":"basic_solver."}]}