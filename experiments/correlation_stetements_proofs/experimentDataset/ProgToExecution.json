[{"statement":"Lemma preserve_event (tid : thread_id)\n        s s' (STEPS : (step tid)＊ s s')\n        e (INE : (acts_set (G s)) e):\n    (acts_set (G s')) e.","proof":"apply clos_rt_rt1n in STEPS.\ninduction STEPS; [done|]; intros.\napply IHSTEPS.\ndestruct H as [lbls STEP].\nred in STEP; desf.\ndestruct ISTEP, ISTEP0; desf; rewrite UG.\nall: unfold add, add_rmw, acts_set in *; simpls; vauto.\n"},{"statement":"Lemma thread_wf_steps (tid : thread_id)\n        s  (WF : thread_wf tid s)\n        s' (STEPS : (step tid)＊ s s'):\n    thread_wf tid s'.","proof":"apply clos_rt_rt1n in STEPS.\ninduction STEPS; [done|]; intros.\napply IHSTEPS.\ndestruct H as [lbls STEP].\nred; unnw; intros e' INY.\nred in WF; unnw.\nred in STEP; desf.\ndestruct ISTEP, ISTEP0; desf; rewrite UG, UINDEX in *; auto.\nall: unfold add, add_rmw, acts_set in *; simpls; vauto.\nall: try (destruct INY as [EIN|INX]; [|apply WF in INX; desf];      eexists; split; eauto; lia).\nall: destruct INY as [[EIN|EIN]|INX]; [ | | apply WF in INX; desf];      eexists; split; eauto; lia.\n"},{"statement":"Lemma same_lab (tid : thread_id) s s'\n        (WF : thread_wf tid s) (STEPS : (step tid)＊ s s')\n        e (INE : (acts_set (G s)) e):\n    (lab (G s')) e = (lab (G s)) e.","proof":"apply clos_rt_rt1n in STEPS.\ninduction STEPS; [done|]; intros.\nassert (thread_wf tid y) as YWF.\n{\neapply thread_wf_steps; eauto.\nby apply rt_step; eauto.\n}\nassert (acts_set (G y) e) as INY.\n{\neapply preserve_event; eauto.\nby apply rt_step; eauto.\n}\nrewrite IHSTEPS; auto.\ndestruct H as [lbls STEP].\nassert (e <> (ThreadEvent tid (eindex x))) as NEIN1.\n{\nred in WF; unnw.\ndestruct (WF e); desf.\nintros H; inv H.\nlia.\n}\nassert (e <> (ThreadEvent tid (eindex x + 1))) as NEIN2.\n{\nred in WF; unnw.\ndestruct (WF e); desf.\nintros H; inv H.\nlia.\n}\nred in STEP; desf.\ndestruct ISTEP, ISTEP0; desf; rewrite UG; auto.\nall: unfold add, add_rmw in *; simpls; vauto.\nall: unfold upd; desf.\n"}]