[{"statement":"Lemma ar_int_rfe_rf_ppo_loc_in_ar_int_rfe_ct :\n  (rfe ∪ ar_int) ⨾ rf ⨾ (ppo ∩ same_loc) ⊆ (rfe ∪ ar_int)⁺.","proof":"remember (rfe ∪ ar_int) as ax.\nassert (sb ⨾ sb ⊆ sb) as AA.\n{\napply transitiveI.\napply sb_trans.\n}\nassert (rfi ⨾ sb ∩ same_loc ⊆ sb ∩ same_loc) as DD.\n{\nrewrite (rfi_in_sbloc' WF).\napply transitiveI.\napply sb_same_loc_trans.\n}\nrewrite rfi_union_rfe.\nrewrite seq_union_l, seq_union_r.\nunionL.\n2: {\narewrite (ppo ∩ same_loc ⊆ ppo).\nrewrite ppo_in_ar_int.\narewrite (rfe ⨾ ar_int ⊆ ax ⨾ ax).\n{\nsubst ax.\nbasic_solver 10.\n}\narewrite (ax ⊆ ax⁺) at 1.\narewrite (ax ⊆ ax⁺) at 2.\nby rewrite ct_unit, ct_ct.\n}\nsubst ax.\nrewrite !seq_union_l.\nunionL.\n{\nrewrite (dom_l (wf_rfiD WF)).\nrewrite (dom_r (wf_rfeD WF)).\ntype_solver.\n}\nunfold imm_s_ppo.ar_int at 1.\nrewrite !seq_union_l.\nunionL.\n5: by rewrite (dom_l (wf_rfiD WF)); type_solver.\n3: {\nrewrite (wf_detourD WF).\nrewrite (wf_rfiD WF).\ntype_solver.\n}\n2: {\narewrite (ppo ∩ same_loc ⊆ ppo).\nrewrite ppo_rfi_ppo.\nrewrite <- ct_step.\nrewrite ppo_in_ar_int.\neauto with hahn.\n}\n2: {\narewrite_id ⦗W⦘ at 1.\nrewrite seq_id_l.\nrewrite rfi_in_sb.\narewrite (ppo ∩ same_loc ⊆ ppo).\nrewrite (dom_r (@wf_ppoD G)).\nrewrite (ppo_in_sb WF).\narewrite (sb ⨾ sb ⨾ sb ⊆ sb).\n{\ngeneralize (@sb_trans G).\nbasic_solver.\n}\nrewrite <- ct_step.\nrewrite w_ex_acq_sb_w_in_ar_int.\neauto with hahn.\n}\nrewrite (dom_r (@wf_ppoD G)).\nrewrite (ppo_in_sb WF).\nrewrite seq_eqv_inter_lr.\nsin_rewrite DD.\nrewrite bob_sb_same_loc_W_in_bob.\napply clos_trans_mori.\nrewrite bob_in_ar_int.\neauto with hahn.\n"},{"statement":"Lemma ar_rf_ppo_loc_in_ar_ct :\n  ar ⨾ rf ⨾ ppo ∩ same_loc ⊆ ar⁺.","proof":"unfold imm_s.ar.\nrewrite unionA, seq_union_l.\nunionL.\n{\nrewrite wf_scD with (sc:=sc) at 1; [|by apply IMMCON].\nrewrite (dom_l (wf_rfD WF)).\ntype_solver.\n}\nrewrite ar_int_rfe_rf_ppo_loc_in_ar_int_rfe_ct.\napply clos_trans_mori.\neauto with hahn.\n"},{"statement":"Lemma ar_ct_rf_ppo_loc_in_ar_ct :\n  ar⁺ ⨾ rf ⨾ ppo ∩ same_loc ⊆ ar⁺.","proof":"rewrite ct_end at 1.\nrewrite !seqA.\nrewrite ar_rf_ppo_loc_in_ar_ct.\napply rt_ct.\n"},{"statement":"Lemma ar_rf_ppo_loc_acyclic :\n  acyclic (ar ∪ rf ⨾ ppo ∩ same_loc).","proof":"rewrite ct_step with (r:=ar).\nrewrite unionC.\napply acyclic_absorb.\n{\nright.\napply ar_ct_rf_ppo_loc_in_ar_ct.\n}\nsplit.\n2: {\nred.\nrewrite ct_of_ct.\napply IMMCON.\n}\nrewrite ppo_loc_in_fr; auto.\n2: {\napply coherence_sc_per_loc.\nby apply IMMCON.\n}\nrewrite rf_fr; auto.\nby apply co_acyclic.\n"},{"statement":"Lemma ar_ct_rf_ppo_loc_ct_in_ar_ct :\n  ar⁺ ⨾ (rf ⨾ ppo ∩ same_loc)⁺ ⊆ ar⁺.","proof":"intros x y [z [AA BB]].\napply clos_trans_t1n in BB.\ninduction BB.\n2: apply IHBB.\nall: apply ar_ct_rf_ppo_loc_in_ar_ct; auto.\nall: eexists; split; eauto.\n"},{"statement":"Lemma ar_rf_ppo_loc_ct_in_ar_ct :\n  ar ⨾ (rf ⨾ ppo ∩ same_loc)⁺ ⊆ ar⁺.","proof":"rewrite ct_step with (r:=ar) at 1.\nby apply ar_ct_rf_ppo_loc_ct_in_ar_ct.\n"},{"statement":"Lemma no_ar_rfppo_rt_to_init :\n  ⦗set_compl is_init⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)＊\n  ⊆ ⦗set_compl is_init⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)＊ ⨾ ⦗set_compl is_init⦘.","proof":"rewrite !rtE, !seq_union_r, !seq_union_l, !seq_union_r.\napply union_mori.\n{\nclear; basic_solver.\n}\nrewrite !ct_end.\nhahn_frame_l.\nhahn_frame_l.\ntransitivity ((ar ∪ rf ⨾ ppo ∩ same_loc) ;; <|is_init ∪₁ set_compl is_init|>).\n{\nrewrite <- set_full_split.\nclear; basic_solver.\n}\nrewrite id_union, seq_union_r.\nrewrite no_ar_rf_ppo_loc_to_init; auto.\nnow unionL.\n"},{"statement":"Lemma fsupp_ar_implies_fsupp_ar_rf_ppo_loc\n      (FAIR : mem_fair G)\n      (IMM_FAIR   : imm_s_fair G sc) :\n  fsupp (⦗set_compl is_init⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺).","proof":"rewrite ct_unionE.\narewrite (ar ⨾ (rf ⨾ ppo ∩ same_loc)＊ ⊆ ar⁺).\n{\nrewrite rtE, seq_union_r, seq_id_r.\nrewrite ar_rf_ppo_loc_ct_in_ar_ct.\neauto with hahn.\n}\nrewrite ct_of_ct.\nassert (fsupp (rf ⨾ ppo ∩ same_loc)⁺) as AA.\n{\nrewrite ppo_loc_in_fr; auto.\n2: {\napply coherence_sc_per_loc.\nby apply IMMCON.\n}\nrewrite rf_fr; auto.\nrewrite ct_of_trans; [apply FAIR| apply WF].\n}\nrewrite seq_union_r.\napply fsupp_union; auto.\n{\napply fsupp_seq; auto.\napply fsupp_eqv.\n}\nrewrite <- seqA, clos_refl_trans_domb_l.\n2: {\nrewrite ppo_in_sb, no_sb_to_init; auto.\nbasic_solver.\n}\nrewrite !seqA.\napply fsupp_seq; [by apply fsupp_eqv|].\napply fsupp_seq; auto.\nnow apply fsupp_ct_rt.\n"},{"statement":"Lemma fsupp_ar_rf_ppo_loc_fin (FIN : fin_exec G):\n  fsupp (⦗set_compl is_init⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺).","proof":"apply fsupp_ar_implies_fsupp_ar_rf_ppo_loc;     auto using fin_exec_fair, fin_exec_imm_s_fair.\n"},{"statement":"Lemma wf_ar_rf_ppo_loc_ct\n      (FSUPP : fsupp (⦗set_compl is_init⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺)) :\n  well_founded (⦗set_compl is_init⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺).","proof":"apply fsupp_well_founded; auto.\n{\neapply irreflexive_mori.\n2: {\nnow apply ar_rf_ppo_loc_acyclic.\n}\nred.\nbasic_solver 10.\n}\nred.\nins.\napply seq_eqv_l.\napply seq_eqv_l in H, H0.\ndesc.\nsplit; auto.\neapply transitive_ct; eauto.\n"},{"statement":"Lemma ar_rf_ppo_loc_in_sb_rf_no_f_sc\n      (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅) :\n  ar ∪ rf ⨾ ppo ∩ same_loc ⊆ (sb ∪ rf)⁺.","proof":"unfold imm_s.ar.\nrewrite ar_int_in_sb; auto.\narewrite_false sc.\n{\nrewrite (dom_l (wf_scE WFSC)).\nrewrite (dom_l (wf_scD WFSC)).\nrewrite <- !seqA, <- id_inter, <- set_interA.\nrewrite NOSC.\nbasic_solver 1.\n}\nrewrite rfe_in_rf.\nunionL.\n{\nbasic_solver 1.\n}\n1,2: now rewrite <- ct_step; eauto with hahn.\nrewrite <- ct_ct, <- !ct_step.\nrewrite (ppo_in_sb WF).\nbasic_solver 10.\n"},{"statement":"Lemma fsupp_sb_rf_implies_fsupp_ar_rf_ppo_loc\n      (NOSC : E ∩₁ F ∩₁ Sc ⊆₁ ∅)\n      (FSUPP : fsupp (⦗set_compl is_init⦘ ⨾ (sb ∪ rf)⁺)) :\n  fsupp (⦗set_compl is_init⦘ ⨾ (ar ∪ rf ⨾ ppo ∩ same_loc)⁺).","proof":"rewrite ar_rf_ppo_loc_in_sb_rf_no_f_sc; auto.\nnow rewrite ct_of_ct.\n"},{"statement":"Lemma wf_ar_rf_ppo_loc_ct_inf_imm_s\n      (FAIR: mem_fair G)\n      (IMM_CONS: imm_s.imm_consistent G sc)\n      (IMM_FAIR: imm_s_fair G sc):\n  well_founded (⦗set_compl is_init⦘ ⨾ (ar ∪ rf ;; ppo ∩ same_loc)⁺).","proof":"apply wf_ar_rf_ppo_loc_ct_inf_helper; auto.\n{\nby apply ar_rf_ppo_loc_acyclic.\n}\n{\nby apply no_ar_rf_ppo_loc_to_init.\n}\n{\nby apply imm_s_ppo.ppo_in_sb.\n}\n{\nby apply ar_rf_ppo_loc_ct_in_ar_ct.\n}\ncdes IMM_CONS.\nby apply imm_s_hb.coherence_sc_per_loc.\n"}]