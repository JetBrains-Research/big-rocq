{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/aarch64/Asmgenproof_augmentation_validation_cp_aux.v","fileSamples":[{"statement":"(p : Mach.program) (tp : program) (H : transf_program p = OK tp) : match_prog p tp.","conclusion":"match_prog p tp","hypotheses":"(p : Mach.program) (tp : program) (H : transf_program p = OK tp)","proofString":"eapply match_transform_partial_program; eauto."},{"statement":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf) : Genv.find_funct_ptr tge fb = Some (Internal tf).","conclusion":"Genv.find_funct_ptr tge fb = Some (Internal tf)","hypotheses":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf)","proofString":"exploit functions_translated; eauto.\nintros [tf' [A B]].\nmonadInv B.\nrewrite H0 in EQ; inv EQ; auto."},{"statement":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf) : (exists tf0 : fundef,\n   Genv.find_funct_ptr tge fb = Some tf0 /\\\n   transf_fundef (Internal f) = OK tf0) ->\nGenv.find_funct_ptr tge fb = Some (Internal tf).","conclusion":"(exists tf0 : fundef,\n   Genv.find_funct_ptr tge fb = Some tf0 /\\\n   transf_fundef (Internal f) = OK tf0) ->\nGenv.find_funct_ptr tge fb = Some (Internal tf)","hypotheses":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf)","proofString":"intros [tf' [A B]].\nmonadInv B.\nrewrite H0 in EQ; inv EQ; auto."},{"statement":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf) (tf' : fundef) (A : Genv.find_funct_ptr tge fb = Some tf') (B : transf_fundef (Internal f) = OK tf') : Genv.find_funct_ptr tge fb = Some (Internal tf).","conclusion":"Genv.find_funct_ptr tge fb = Some (Internal tf)","hypotheses":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf) (tf' : fundef) (A : Genv.find_funct_ptr tge fb = Some tf') (B : transf_fundef (Internal f) = OK tf')","proofString":"monadInv B.\nrewrite H0 in EQ; inv EQ; auto."},{"statement":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf) (x : function) (A : Genv.find_funct_ptr tge fb = Some (Internal x)) (EQ : transf_function f = OK x) : Genv.find_funct_ptr tge fb = Some (Internal tf).","conclusion":"Genv.find_funct_ptr tge fb = Some (Internal tf)","hypotheses":"(fb : block) (f : Mach.function) (tf : function) (H : Genv.find_funct_ptr ge fb = Some (Internal f)) (H0 : transf_function f = OK tf) (x : function) (A : Genv.find_funct_ptr tge fb = Some (Internal x)) (EQ : transf_function f = OK x)","proofString":"rewrite H0 in EQ; inv EQ; auto."},{"statement":"(f : Mach.function) (tf : function) (H : transf_function f = OK tf) : list_length_z (fn_code tf) <= Ptrofs.max_unsigned.","conclusion":"list_length_z (fn_code tf) <= Ptrofs.max_unsigned","hypotheses":"(f : Mach.function) (tf : function) (H : transf_function f = OK tf)","proofString":"monadInv H.\ndestruct (zlt Ptrofs.max_unsigned (list_length_z x.(fn_code))); inv EQ0.\nlia."},{"statement":"(f : Mach.function) (tf x : function) (EQ : transl_function f = OK x) (EQ0 : (if zlt Ptrofs.max_unsigned (list_length_z (fn_code x))\n then Error (msg \"code size exceeded\")\n else OK x) = OK tf) : list_length_z (fn_code tf) <= Ptrofs.max_unsigned.","conclusion":"list_length_z (fn_code tf) <= Ptrofs.max_unsigned","hypotheses":"(f : Mach.function) (tf x : function) (EQ : transl_function f = OK x) (EQ0 : (if zlt Ptrofs.max_unsigned (list_length_z (fn_code x))\n then Error (msg \"code size exceeded\")\n else OK x) = OK tf)","proofString":"destruct (zlt Ptrofs.max_unsigned (list_length_z x.(fn_code))); inv EQ0.\nlia."},{"statement":"(f : Mach.function) (tf : function) (g : Ptrofs.max_unsigned >= list_length_z (fn_code tf)) (EQ : transl_function f = OK tf) : list_length_z (fn_code tf) <= Ptrofs.max_unsigned.","conclusion":"list_length_z (fn_code tf) <= Ptrofs.max_unsigned","hypotheses":"(f : Mach.function) (tf : function) (g : Ptrofs.max_unsigned >= list_length_z (fn_code tf)) (EQ : transl_function f = OK tf)","proofString":"lia."},{"statement":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H : transl_code_at_pc ge (rs PC) fb f c ep tf tc) (H0 : exec_straight tge tf tc rs m c' rs' m') : plus step tge (State rs m) E0 (State rs' m').","conclusion":"plus step tge (State rs m) E0 (State rs' m')","hypotheses":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H : transl_code_at_pc ge (rs PC) fb f c ep tf tc) (H0 : exec_straight tge tf tc rs m c' rs' m')","proofString":"inv H.\neapply exec_straight_steps_1; eauto.\neapply transf_function_no_overflow; eauto.\neapply functions_transl; eauto."},{"statement":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H0 : exec_straight tge tf tc rs m c' rs' m') (ofs : ptrofs) (H2 : Genv.find_funct_ptr ge fb = Some (Internal f)) (H3 : transf_function f = OK tf) (H4 : transl_code f c ep = OK tc) (H5 : code_tail (Ptrofs.unsigned ofs) (fn_code tf) tc) (H1 : Vptr fb ofs = rs PC) : plus step tge (State rs m) E0 (State rs' m').","conclusion":"plus step tge (State rs m) E0 (State rs' m')","hypotheses":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H0 : exec_straight tge tf tc rs m c' rs' m') (ofs : ptrofs) (H2 : Genv.find_funct_ptr ge fb = Some (Internal f)) (H3 : transf_function f = OK tf) (H4 : transl_code f c ep = OK tc) (H5 : code_tail (Ptrofs.unsigned ofs) (fn_code tf) tc) (H1 : Vptr fb ofs = rs PC)","proofString":"eapply exec_straight_steps_1; eauto.\neapply transf_function_no_overflow; eauto.\neapply functions_transl; eauto."},{"statement":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H0 : exec_straight tge tf tc rs m c' rs' m') (ofs : ptrofs) (H2 : Genv.find_funct_ptr ge fb = Some (Internal f)) (H3 : transf_function f = OK tf) (H4 : transl_code f c ep = OK tc) (H5 : code_tail (Ptrofs.unsigned ofs) (fn_code tf) tc) (H1 : Vptr fb ofs = rs PC) : list_length_z (fn_code tf) <= Ptrofs.max_unsigned.","conclusion":"list_length_z (fn_code tf) <= Ptrofs.max_unsigned","hypotheses":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H0 : exec_straight tge tf tc rs m c' rs' m') (ofs : ptrofs) (H2 : Genv.find_funct_ptr ge fb = Some (Internal f)) (H3 : transf_function f = OK tf) (H4 : transl_code f c ep = OK tc) (H5 : code_tail (Ptrofs.unsigned ofs) (fn_code tf) tc) (H1 : Vptr fb ofs = rs PC)","proofString":"eapply transf_function_no_overflow; eauto."},{"statement":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H0 : exec_straight tge tf tc rs m c' rs' m') (ofs : ptrofs) (H2 : Genv.find_funct_ptr ge fb = Some (Internal f)) (H3 : transf_function f = OK tf) (H4 : transl_code f c ep = OK tc) (H5 : code_tail (Ptrofs.unsigned ofs) (fn_code tf) tc) (H1 : Vptr fb ofs = rs PC) : Genv.find_funct_ptr tge fb = Some (Internal tf).","conclusion":"Genv.find_funct_ptr tge fb = Some (Internal tf)","hypotheses":"(fb : block) (f : Mach.function) (c : Mach.code) (ep : bool) (tf : function) (tc c' : code) (rs : preg -> val) (m : mem) (rs' : regset) (m' : mem) (H0 : exec_straight tge tf tc rs m c' rs' m') (ofs : ptrofs) (H2 : Genv.find_funct_ptr ge fb = Some (Internal f)) (H3 : transf_function f = OK tf) (H4 : transl_code f c ep = OK tc) (H5 : code_tail (Ptrofs.unsigned ofs) (fn_code tf) tc) (H1 : Vptr fb ofs = rs PC)","proofString":"eapply functions_transl; eauto."}]}