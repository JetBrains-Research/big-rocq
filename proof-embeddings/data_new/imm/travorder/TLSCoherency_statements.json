{"filePath":"/Users/Andrei.Kozyrev/MCS_Projects/coqpilotOther/big-rocq/dataset/imm/src/travorder/TLSCoherency.v","fileSamples":[{"statement":"(G : execution) (tc : trav_label -> Prop) (COH : exists tc' : trav_label -> Prop, tc' ⊆₁ exec_tls G /\\ tc ≡₁ init_tls G ∪₁ tc') : tls_coherent G tc.","conclusion":"tls_coherent G tc","hypotheses":"(G : execution) (tc : trav_label -> Prop) (COH : exists tc' : trav_label -> Prop, tc' ⊆₁ exec_tls G /\\ tc ≡₁ init_tls G ∪₁ tc')","proofString":"desc.\nsplit; rewrite ?COH0, ?COH; basic_solver."},{"statement":"(G : execution) (tc tc' : trav_label -> Prop) (COH : tc' ⊆₁ exec_tls G) (COH0 : tc ≡₁ init_tls G ∪₁ tc') : tls_coherent G tc.","conclusion":"tls_coherent G tc","hypotheses":"(G : execution) (tc tc' : trav_label -> Prop) (COH : tc' ⊆₁ exec_tls G) (COH0 : tc ≡₁ init_tls G ∪₁ tc')","proofString":"split; rewrite ?COH0, ?COH; basic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : tls_coherent_alt G tc.","conclusion":"tls_coherent_alt G tc","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"red.\nexists (tc \\₁ init_tls G).\nsplit.\nrewrite tls_coh_exec0.\nbasic_solver.\nsplit; [| basic_solver].\nrewrite (set_split_complete (init_tls G) tc) at 1.\nbasic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : exists tc' : trav_label -> Prop, tc' ⊆₁ exec_tls G /\\ tc ≡₁ init_tls G ∪₁ tc'.","conclusion":"exists tc' : trav_label -> Prop, tc' ⊆₁ exec_tls G /\\ tc ≡₁ init_tls G ∪₁ tc'","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"exists (tc \\₁ init_tls G).\nsplit.\nrewrite tls_coh_exec0.\nbasic_solver.\nsplit; [| basic_solver].\nrewrite (set_split_complete (init_tls G) tc) at 1.\nbasic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : tc \\₁ init_tls G ⊆₁ exec_tls G /\\ tc ≡₁ init_tls G ∪₁ tc \\₁ init_tls G.","conclusion":"tc \\₁ init_tls G ⊆₁ exec_tls G /\\ tc ≡₁ init_tls G ∪₁ tc \\₁ init_tls G","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"split.\nrewrite tls_coh_exec0.\nbasic_solver.\nsplit; [| basic_solver].\nrewrite (set_split_complete (init_tls G) tc) at 1.\nbasic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : tc \\₁ init_tls G ⊆₁ exec_tls G.","conclusion":"tc \\₁ init_tls G ⊆₁ exec_tls G","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite tls_coh_exec0.\nbasic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : (init_tls G ∪₁ exec_tls G) \\₁ init_tls G ⊆₁ exec_tls G.","conclusion":"(init_tls G ∪₁ exec_tls G) \\₁ init_tls G ⊆₁ exec_tls G","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"basic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : tc ≡₁ init_tls G ∪₁ tc \\₁ init_tls G.","conclusion":"tc ≡₁ init_tls G ∪₁ tc \\₁ init_tls G","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"split; [| basic_solver].\nrewrite (set_split_complete (init_tls G) tc) at 1.\nbasic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : tc ⊆₁ init_tls G ∪₁ tc \\₁ init_tls G.","conclusion":"tc ⊆₁ init_tls G ∪₁ tc \\₁ init_tls G","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite (set_split_complete (init_tls G) tc) at 1.\nbasic_solver."},{"statement":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : tc ∩₁ init_tls G ∪₁ tc ∩₁ set_compl (init_tls G)\n⊆₁ init_tls G ∪₁ tc \\₁ init_tls G.","conclusion":"tc ∩₁ init_tls G ∪₁ tc ∩₁ set_compl (init_tls G)\n⊆₁ init_tls G ∪₁ tc \\₁ init_tls G","hypotheses":"(G : execution) (tc : trav_label -> Prop) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"basic_solver."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : tc ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W.","conclusion":"tc ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite TC', set_inter_union_l.\napply set_subset_union_l.\nsplit.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq ta_issue ∪₁ tc' ∩₁ action ↓₁ eq ta_issue\n⊆₁ event ↓₁ W.","conclusion":"init_tls G ∩₁ action ↓₁ eq ta_issue ∪₁ tc' ∩₁ action ↓₁ eq ta_issue\n⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"apply set_subset_union_l.\nsplit.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W /\\\ntc' ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W.","conclusion":"init_tls G ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W /\\\ntc' ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"split.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W.","conclusion":"init_tls G ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"etransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ⊆₁ event ↓₁ W.","conclusion":"init_tls G ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a)) ⊆₁ event ↓₁ W.","conclusion":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a)) ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"erewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ W) ⊆₁ event ↓₁ W.","conclusion":"fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ W) ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"basic_solver."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : tc' ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W.","conclusion":"tc' ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : exec_tls G ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W.","conclusion":"exec_tls G ∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n    ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) ∩₁ \naction ↓₁ eq ta_issue ⊆₁ event ↓₁ W.","conclusion":"(eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n    ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) ∩₁ \naction ↓₁ eq ta_issue ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W.","conclusion":"(fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq ta_issue ⊆₁ event ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ fst ↓₁ eq ta_issue ⊆₁ snd ↓₁ W.","conclusion":"(fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ fst ↓₁ eq ta_issue ⊆₁ snd ↓₁ W","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfolder.\nins; desf; congruence."},{"statement":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : forall x : trav_label,\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n ((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\ \nta_issue = fst x -> is_w lab (snd x).","conclusion":"forall x : trav_label,\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n ((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\ \nta_issue = fst x -> is_w lab (snd x)","hypotheses":"(WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"ins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : tc ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"tc ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite TC', set_inter_union_l.\napply set_subset_union_l.\nsplit.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq (ta_propagate thread)\n∪₁ tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"init_tls G ∩₁ action ↓₁ eq (ta_propagate thread)\n∪₁ tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"apply set_subset_union_l.\nsplit.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E /\\\ntc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E /\\\ntc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"split.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"etransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ⊆₁ event ↓₁ E.","conclusion":"init_tls G ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a)) ⊆₁ event ↓₁ E.","conclusion":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a)) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"erewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ W) ⊆₁ event ↓₁ E.","conclusion":"fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ W) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"basic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : exec_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"exec_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n    ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"(eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n    ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E.","conclusion":"(fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ fst ↓₁ eq (ta_propagate thread) ⊆₁ snd ↓₁ E.","conclusion":"(fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ fst ↓₁ eq (ta_propagate thread) ⊆₁ snd ↓₁ E","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : forall x : trav_label,\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n ((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_propagate thread = fst x -> E (snd x).","conclusion":"forall x : trav_label,\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n ((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_propagate thread = fst x -> E (snd x)","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"ins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : tc ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"tc ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite TC', set_inter_union_l.\napply set_subset_union_l.\nsplit.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq (ta_propagate thread)\n∪₁ tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"init_tls G ∩₁ action ↓₁ eq (ta_propagate thread)\n∪₁ tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"apply set_subset_union_l.\nsplit.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W /\\\ntc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W /\\\ntc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"split.\netransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver.\nrewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"init_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"etransitivity; [red; intro; apply proj1| ].\nunfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : init_tls G ⊆₁ event ↓₁ W.","conclusion":"init_tls G ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold init_tls.\nerewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a)) ⊆₁ event ↓₁ W.","conclusion":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a)) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"erewrite set_pair_alt, init_w; eauto.\nbasic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ W) ⊆₁ event ↓₁ W.","conclusion":"fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ W) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"basic_solver."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"tc' ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite INE.\nunfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : exec_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"exec_tls G ∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold exec_tls.\nrewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n    ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"(eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n    ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"rewrite !set_pair_alt.\nunfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W.","conclusion":"(fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ action ↓₁ eq (ta_propagate thread) ⊆₁ event ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfold action, event.\nunfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ fst ↓₁ eq (ta_propagate thread) ⊆₁ snd ↓₁ W.","conclusion":"(fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n    ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))\n∩₁ fst ↓₁ eq (ta_propagate thread) ⊆₁ snd ↓₁ W","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"unfolder.\nins; desf; congruence."},{"statement":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc') : forall x : trav_label,\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n ((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_propagate thread = fst x -> is_w lab (snd x).","conclusion":"forall x : trav_label,\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n ((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_propagate thread = fst x -> is_w lab (snd x)","hypotheses":"(thread : thread_id) (WF : Wf G) (tc' : trav_label -> Prop) (INE : tc' ⊆₁ exec_tls G) (TC' : tc ≡₁ init_tls G ∪₁ tc')","proofString":"ins; desf; congruence."},{"statement":"eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ event ↓₁ (E \\₁ (fun a : actid => is_init a)).","conclusion":"eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ event ↓₁ (E \\₁ (fun a : actid => is_init a))","hypotheses":"","proofString":"rewrite !set_pair_alt.\nbasic_solver."},{"statement":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ event ↓₁ (E \\₁ (fun a : actid => is_init a)).","conclusion":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ event ↓₁ (E \\₁ (fun a : actid => is_init a))","hypotheses":"","proofString":"basic_solver."},{"statement":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a))\n⊆₁ event ↓₁ (E ∩₁ (fun a : actid => is_init a)).","conclusion":"(eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n(E ∩₁ (fun a : actid => is_init a))\n⊆₁ event ↓₁ (E ∩₁ (fun a : actid => is_init a))","hypotheses":"","proofString":"rewrite !set_pair_alt.\nbasic_solver."},{"statement":"fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ (fun a : actid => is_init a))\n⊆₁ event ↓₁ (E ∩₁ (fun a : actid => is_init a)).","conclusion":"fst\n↓₁ (eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n∩₁ snd ↓₁ (E ∩₁ (fun a : actid => is_init a))\n⊆₁ event ↓₁ (E ∩₁ (fun a : actid => is_init a))","hypotheses":"","proofString":"basic_solver."},{"statement":"(WF : Wf G) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : tc ⊆₁ event ↓₁ E.","conclusion":"tc ⊆₁ event ↓₁ E","hypotheses":"(WF : Wf G) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"rewrite tls_coh_exec0, exec_tls_ENI, init_tls_EI.\nbasic_solver."},{"statement":"(WF : Wf G) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) : event ↓₁ (E ∩₁ (fun a : actid => is_init a))\n∪₁ event ↓₁ (E \\₁ (fun a : actid => is_init a)) ⊆₁ \nevent ↓₁ E.","conclusion":"event ↓₁ (E ∩₁ (fun a : actid => is_init a))\n∪₁ event ↓₁ (E \\₁ (fun a : actid => is_init a)) ⊆₁ \nevent ↓₁ E","hypotheses":"(WF : Wf G) (tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"basic_solver."},{"statement":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl) : tls_coherent G (tc ∪₁ eq lbl).","conclusion":"tls_coherent G (tc ∪₁ eq lbl)","hypotheses":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl)","proofString":"split; try basic_solver.\napply set_subset_union_l.\nsplit; auto.\nbasic_solver."},{"statement":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl) : tc ∪₁ eq lbl ⊆₁ init_tls G ∪₁ exec_tls G.","conclusion":"tc ∪₁ eq lbl ⊆₁ init_tls G ∪₁ exec_tls G","hypotheses":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl)","proofString":"apply set_subset_union_l.\nsplit; auto.\nbasic_solver."},{"statement":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl) : tc ⊆₁ init_tls G ∪₁ exec_tls G /\\ eq lbl ⊆₁ init_tls G ∪₁ exec_tls G.","conclusion":"tc ⊆₁ init_tls G ∪₁ exec_tls G /\\ eq lbl ⊆₁ init_tls G ∪₁ exec_tls G","hypotheses":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl)","proofString":"split; auto.\nbasic_solver."},{"statement":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl) : eq lbl ⊆₁ init_tls G ∪₁ exec_tls G.","conclusion":"eq lbl ⊆₁ init_tls G ∪₁ exec_tls G","hypotheses":"(tls_coh_init0 : init_tls G ⊆₁ tc) (tls_coh_exec0 : tc ⊆₁ init_tls G ∪₁ exec_tls G) (lbl : trav_label) (ENI : exec_tls G lbl)","proofString":"basic_solver."},{"statement":"eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n∪₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G) <*>\n   ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n≡₁ (eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n    ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n       ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) \\₁ \n   action ↓₁ eq ta_reserve.","conclusion":"eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n∪₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G) <*>\n   ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n≡₁ (eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n    ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n       ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) \\₁ \n   action ↓₁ eq ta_reserve","hypotheses":"","proofString":"rewrite !set_pair_alt.\nsplit; try basic_solver 10.\nrewrite set_minus_union_l.\nunfolder.\nins.\ndestruct x; ins; des; subst; splits; try by vauto.\nright.\nsplits; vauto.\ndo 2 red in H.\ndesc.\nsubst.\nright.\nsplits; vauto."},{"statement":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n≡₁ (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n    ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n       ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) \\₁\n   action ↓₁ eq ta_reserve.","conclusion":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n≡₁ (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n    ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n       ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) \\₁\n   action ↓₁ eq ta_reserve","hypotheses":"","proofString":"split; try basic_solver 10.\nrewrite set_minus_union_l.\nunfolder.\nins.\ndestruct x; ins; des; subst; splits; try by vauto.\nright.\nsplits; vauto.\ndo 2 red in H.\ndesc.\nsubst.\nright.\nsplits; vauto."},{"statement":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n    ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n       ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) \\₁\n   action ↓₁ eq ta_reserve.","conclusion":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ (fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n    ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n       ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)) \\₁\n   action ↓₁ eq ta_reserve","hypotheses":"","proofString":"rewrite set_minus_union_l.\nunfolder.\nins.\ndestruct x; ins; des; subst; splits; try by vauto.\nright.\nsplits; vauto.\ndo 2 red in H.\ndesc.\nsubst.\nright.\nsplits; vauto."},{"statement":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a)) \\₁\n   action ↓₁ eq ta_reserve\n   ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n      ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W) \\₁\n      action ↓₁ eq ta_reserve.","conclusion":"fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a))\n∪₁ fst ↓₁ (eq ta_issue ∪₁ is_ta_propagate_to_G G)\n   ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)\n⊆₁ fst ↓₁ eq ta_cover ∩₁ snd ↓₁ (E \\₁ (fun a : actid => is_init a)) \\₁\n   action ↓₁ eq ta_reserve\n   ∪₁ fst ↓₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G)\n      ∩₁ snd ↓₁ ((E \\₁ (fun a : actid => is_init a)) ∩₁ W) \\₁\n      action ↓₁ eq ta_reserve","hypotheses":"","proofString":"unfolder.\nins.\ndestruct x; ins; des; subst; splits; try by vauto.\nright.\nsplits; vauto.\ndo 2 red in H.\ndesc.\nsubst.\nright.\nsplits; vauto."},{"statement":"forall x : trav_label,\nta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n(ta_issue = fst x \\/ is_ta_propagate_to_G G (fst x)) /\\\n(E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x) ->\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x)) /\\\nta_reserve <> action x \\/\n(((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_reserve <> action x.","conclusion":"forall x : trav_label,\nta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n(ta_issue = fst x \\/ is_ta_propagate_to_G G (fst x)) /\\\n(E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x) ->\n(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x)) /\\\nta_reserve <> action x \\/\n(((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_reserve <> action x","hypotheses":"","proofString":"ins.\ndestruct x; ins; des; subst; splits; try by vauto.\nright.\nsplits; vauto.\ndo 2 red in H.\ndesc.\nsubst.\nright.\nsplits; vauto."},{"statement":"(x : trav_label) (H : ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n(ta_issue = fst x \\/ is_ta_propagate_to_G G (fst x)) /\\\n(E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) : (ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x)) /\\\nta_reserve <> action x \\/\n(((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_reserve <> action x.","conclusion":"(ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x)) /\\\nta_reserve <> action x \\/\n(((ta_issue = fst x \\/ ta_reserve = fst x) \\/ is_ta_propagate_to_G G (fst x)) /\\\n (E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x)) /\\\nta_reserve <> action x","hypotheses":"(x : trav_label) (H : ta_cover = fst x /\\ E (snd x) /\\ ~ is_init (snd x) \\/\n(ta_issue = fst x \\/ is_ta_propagate_to_G G (fst x)) /\\\n(E (snd x) /\\ ~ is_init (snd x)) /\\ is_w lab (snd x))","proofString":"destruct x; ins; des; subst; splits; try by vauto.\nright.\nsplits; vauto.\ndo 2 red in H.\ndesc.\nsubst.\nright.\nsplits; vauto."},{"statement":"(a : actid) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a) : (ta_cover = ta_issue /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> ta_issue \\/\n(((ta_issue = ta_issue \\/ ta_reserve = ta_issue) \\/\n  is_ta_propagate_to_G G ta_issue) /\\ (E a /\\ ~ is_init a) /\\ is_w lab a) /\\\nta_reserve <> ta_issue.","conclusion":"(ta_cover = ta_issue /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> ta_issue \\/\n(((ta_issue = ta_issue \\/ ta_reserve = ta_issue) \\/\n  is_ta_propagate_to_G G ta_issue) /\\ (E a /\\ ~ is_init a) /\\ is_w lab a) /\\\nta_reserve <> ta_issue","hypotheses":"(a : actid) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a)","proofString":"right.\nsplits; vauto."},{"statement":"(a : actid) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a) : (((ta_issue = ta_issue \\/ ta_reserve = ta_issue) \\/\n  is_ta_propagate_to_G G ta_issue) /\\ (E a /\\ ~ is_init a) /\\ is_w lab a) /\\\nta_reserve <> ta_issue.","conclusion":"(((ta_issue = ta_issue \\/ ta_reserve = ta_issue) \\/\n  is_ta_propagate_to_G G ta_issue) /\\ (E a /\\ ~ is_init a) /\\ is_w lab a) /\\\nta_reserve <> ta_issue","hypotheses":"(a : actid) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a)","proofString":"splits; vauto."},{"statement":"(t : trav_action) (a : actid) (H : is_ta_propagate_to_G G t) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a) : (ta_cover = t /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> t \\/\n(((ta_issue = t \\/ ta_reserve = t) \\/ is_ta_propagate_to_G G t) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> t.","conclusion":"(ta_cover = t /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> t \\/\n(((ta_issue = t \\/ ta_reserve = t) \\/ is_ta_propagate_to_G G t) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> t","hypotheses":"(t : trav_action) (a : actid) (H : is_ta_propagate_to_G G t) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a)","proofString":"do 2 red in H.\ndesc.\nsubst.\nright.\nsplits; vauto."},{"statement":"(t : trav_action) (a : actid) (H : exists y : thread_id, (threads_set G \\₁ eq tid_init) y /\\ ta_propagate y = t) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a) : (ta_cover = t /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> t \\/\n(((ta_issue = t \\/ ta_reserve = t) \\/ is_ta_propagate_to_G G t) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> t.","conclusion":"(ta_cover = t /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> t \\/\n(((ta_issue = t \\/ ta_reserve = t) \\/ is_ta_propagate_to_G G t) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> t","hypotheses":"(t : trav_action) (a : actid) (H : exists y : thread_id, (threads_set G \\₁ eq tid_init) y /\\ ta_propagate y = t) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a)","proofString":"desc.\nsubst.\nright.\nsplits; vauto."},{"statement":"(t : trav_action) (a : actid) (y : thread_id) (H : (threads_set G \\₁ eq tid_init) y) (H3 : ta_propagate y = t) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a) : (ta_cover = t /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> t \\/\n(((ta_issue = t \\/ ta_reserve = t) \\/ is_ta_propagate_to_G G t) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> t.","conclusion":"(ta_cover = t /\\ E a /\\ ~ is_init a) /\\ ta_reserve <> t \\/\n(((ta_issue = t \\/ ta_reserve = t) \\/ is_ta_propagate_to_G G t) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> t","hypotheses":"(t : trav_action) (a : actid) (y : thread_id) (H : (threads_set G \\₁ eq tid_init) y) (H3 : ta_propagate y = t) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a)","proofString":"subst.\nright.\nsplits; vauto."},{"statement":"(a : actid) (y : thread_id) (H : (threads_set G \\₁ eq tid_init) y) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a) : (ta_cover = ta_propagate y /\\ E a /\\ ~ is_init a) /\\\nta_reserve <> ta_propagate y \\/\n(((ta_issue = ta_propagate y \\/ ta_reserve = ta_propagate y) \\/\n  is_ta_propagate_to_G G (ta_propagate y)) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> ta_propagate y.","conclusion":"(ta_cover = ta_propagate y /\\ E a /\\ ~ is_init a) /\\\nta_reserve <> ta_propagate y \\/\n(((ta_issue = ta_propagate y \\/ ta_reserve = ta_propagate y) \\/\n  is_ta_propagate_to_G G (ta_propagate y)) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> ta_propagate y","hypotheses":"(a : actid) (y : thread_id) (H : (threads_set G \\₁ eq tid_init) y) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a)","proofString":"right.\nsplits; vauto."},{"statement":"(a : actid) (y : thread_id) (H : (threads_set G \\₁ eq tid_init) y) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a) : (((ta_issue = ta_propagate y \\/ ta_reserve = ta_propagate y) \\/\n  is_ta_propagate_to_G G (ta_propagate y)) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> ta_propagate y.","conclusion":"(((ta_issue = ta_propagate y \\/ ta_reserve = ta_propagate y) \\/\n  is_ta_propagate_to_G G (ta_propagate y)) /\\\n (E a /\\ ~ is_init a) /\\ is_w lab a) /\\ ta_reserve <> ta_propagate y","hypotheses":"(a : actid) (y : thread_id) (H : (threads_set G \\₁ eq tid_init) y) (H0 : E a) (H2 : ~ is_init a) (H1 : is_w lab a)","proofString":"splits; vauto."},{"statement":"set_disjoint\n  ((eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ (fun a : actid => is_init a)))\n  (eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n   ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n      ((E \\₁ (fun a : actid => is_init a)) ∩₁ W)).","conclusion":"set_disjoint\n  ((eq ta_cover ∪₁ eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n   (E ∩₁ (fun a : actid => is_init a)))\n  (eq ta_cover <*> (E \\₁ (fun a : actid => is_init a))\n   ∪₁ (eq ta_issue ∪₁ eq ta_reserve ∪₁ is_ta_propagate_to_G G) <*>\n      ((E \\₁ (fun a : actid => is_init a)) ∩₁ W))","hypotheses":"","proofString":"iord_dom_unfolder."},{"statement":"tls_coherent_alt G (init_tls G).","conclusion":"tls_coherent_alt G (init_tls G)","hypotheses":"","proofString":"exists ∅.\nbasic_solver."},{"statement":"∅ ⊆₁ exec_tls G /\\ init_tls G ≡₁ init_tls G ∪₁ ∅.","conclusion":"∅ ⊆₁ exec_tls G /\\ init_tls G ≡₁ init_tls G ∪₁ ∅","hypotheses":"","proofString":"basic_solver."},{"statement":"(T1 : trav_label -> Prop) (T2 : trav_action * actid -> Prop) (tls_coh_init0 : init_tls G ⊆₁ T1) (tls_coh_exec0 : T1 ⊆₁ init_tls G ∪₁ exec_tls G) (EXEC2 : T2 ⊆₁ init_tls G ∪₁ exec_tls G) : tls_coherent G (T1 ∪₁ T2).","conclusion":"tls_coherent G (T1 ∪₁ T2)","hypotheses":"(T1 : trav_label -> Prop) (T2 : trav_action * actid -> Prop) (tls_coh_init0 : init_tls G ⊆₁ T1) (tls_coh_exec0 : T1 ⊆₁ init_tls G ∪₁ exec_tls G) (EXEC2 : T2 ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"split; try basic_solver.\napply set_subset_union_l; auto."},{"statement":"(T1 : trav_label -> Prop) (T2 : trav_action * actid -> Prop) (tls_coh_init0 : init_tls G ⊆₁ T1) (tls_coh_exec0 : T1 ⊆₁ init_tls G ∪₁ exec_tls G) (EXEC2 : T2 ⊆₁ init_tls G ∪₁ exec_tls G) : T1 ∪₁ T2 ⊆₁ init_tls G ∪₁ exec_tls G.","conclusion":"T1 ∪₁ T2 ⊆₁ init_tls G ∪₁ exec_tls G","hypotheses":"(T1 : trav_label -> Prop) (T2 : trav_action * actid -> Prop) (tls_coh_init0 : init_tls G ⊆₁ T1) (tls_coh_exec0 : T1 ⊆₁ init_tls G ∪₁ exec_tls G) (EXEC2 : T2 ⊆₁ init_tls G ∪₁ exec_tls G)","proofString":"apply set_subset_union_l; auto."}]}