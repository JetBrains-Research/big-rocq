{"filePath":"/Users/andrei/MCS_Projects/coqPilotOther/CompCert/powerpc/Stacklayout.v","fileSamples":[{"statement":"(b : bounds) (fe : frame_env) : 0 <=\nalign\n  (size_callee_save_area b\n     (align (8 + 4 * bound_outgoing b) 8 + 4 * bound_local b + 4)) 8 /\\\nalign\n  (size_callee_save_area b\n     (align (8 + 4 * bound_outgoing b) 8 + 4 * bound_local b + 4)) 8 +\nbound_stack_data b <=\nalign\n  (align\n     (size_callee_save_area b\n        (align (8 + 4 * bound_outgoing b) 8 + 4 * bound_local b + 4)) 8 +\n   bound_stack_data b) 16.","proofString":"set (ol := align (8 + 4 * b.(bound_outgoing)) 8).\nset (ora := ol + 4 * b.(bound_local)).\nset (ocs := ora + 4).\nset (oendcs := size_callee_save_area b ocs).\nset (ostkdata := align oendcs 8).\ngeneralize b.(bound_local_pos) b.(bound_outgoing_pos) b.(bound_stack_data_pos); intros.\nunfold fe_ofs_arg.\nassert (8 + 4 * b.(bound_outgoing) <= ol) by (apply align_le; lia).\nassert (ol <= ora) by (unfold ora; lia).\nassert (ora <= ocs) by (unfold ocs; lia).\nassert (ocs <= oendcs) by (apply size_callee_save_area_incr).\nassert (oendcs <= ostkdata) by (apply align_le; lia).\nsplit.\nlia.\napply align_le.\nlia."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) (H : bound_local b >= 0) (H0 : bound_outgoing b >= 0) (H1 : bound_stack_data b >= 0) (H2 : 8 + 4 * bound_outgoing b <= ol) (H3 : ol <= ora) (H4 : ora <= ocs) (H5 : ocs <= oendcs) (H6 : oendcs <= ostkdata) : 0 <= ostkdata /\\\nostkdata + bound_stack_data b <= align (ostkdata + bound_stack_data b) 16.","proofString":"split.\nlia.\napply align_le.\nlia."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) (H : bound_local b >= 0) (H0 : bound_outgoing b >= 0) (H1 : bound_stack_data b >= 0) (H2 : 8 + 4 * bound_outgoing b <= ol) (H3 : ol <= ora) (H4 : ora <= ocs) (H5 : ocs <= oendcs) (H6 : oendcs <= ostkdata) : 0 <= ostkdata.","proofString":"lia."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) (H : bound_local b >= 0) (H0 : bound_outgoing b >= 0) (H1 : bound_stack_data b >= 0) (H2 : 8 + 4 * bound_outgoing b <= ol) (H3 : ol <= ora) (H4 : ora <= ocs) (H5 : ocs <= oendcs) (H6 : oendcs <= ostkdata) : ostkdata + bound_stack_data b <= align (ostkdata + bound_stack_data b) 16.","proofString":"apply align_le.\nlia."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) (H : bound_local b >= 0) (H0 : bound_outgoing b >= 0) (H1 : bound_stack_data b >= 0) (H2 : 8 + 4 * bound_outgoing b <= ol) (H3 : ol <= ora) (H4 : ora <= ocs) (H5 : ocs <= oendcs) (H6 : oendcs <= ostkdata) : 16 > 0.","proofString":"lia."},{"statement":"(b : bounds) (fe : frame_env) : (8 | fe_ofs_arg) /\\\n(8 | align (8 + 4 * bound_outgoing b) 8) /\\\n(8\n| align\n    (size_callee_save_area b\n       (align (8 + 4 * bound_outgoing b) 8 + 4 * bound_local b + 4)) 8) /\\\n(4 | 0) /\\ (4 | align (8 + 4 * bound_outgoing b) 8 + 4 * bound_local b).","proofString":"set (ol := align (8 + 4 * b.(bound_outgoing)) 8).\nset (ora := ol + 4 * b.(bound_local)).\nset (ocs := ora + 4).\nset (oendcs := size_callee_save_area b ocs).\nset (ostkdata := align oendcs 8).\nsplit.\nexists (fe_ofs_arg / 8); reflexivity.\nsplit.\napply align_divides; lia.\nsplit.\napply align_divides; lia.\nsplit.\napply Z.divide_0_r.\napply Z.divide_add_r.\napply Z.divide_trans with 8.\nexists 2; auto.\napply align_divides; lia.\napply Z.divide_factor_l."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) : (8 | fe_ofs_arg).","proofString":"exists (fe_ofs_arg / 8); reflexivity."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) : (4 | 0).","proofString":"apply Z.divide_0_r."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) : (4 | 8).","proofString":"exists 2; auto."},{"statement":"(b : bounds) (fe : frame_env) (ol : Z) (ora : Z) (ocs : Z) (oendcs : Z) (ostkdata : Z) : (4 | 4 * bound_local b).","proofString":"apply Z.divide_factor_l."}]}